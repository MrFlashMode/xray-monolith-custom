diff --git a/sdk/include/jpeg/vs2022/libjpeg.vcxproj b/sdk/include/jpeg/vs2022/libjpeg.vcxproj
new file mode 100644
index 0000000..a6b8977
--- /dev/null
+++ b/sdk/include/jpeg/vs2022/libjpeg.vcxproj
@@ -0,0 +1,210 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}</ProjectGuid>
+    <RootNamespace>libjpeg</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <PlatformToolset>v143</PlatformToolset>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+    <CharacterSet>MultiByte</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <IncludePath>E:\STALKER\X-Ray Source\x_ray_1602_VS13\xray-16\src\3rd party;$(IncludePath);$(xrSdkDir)include;</IncludePath>
+    <LibraryPath>C:\Program Files (x86)\Windows Kits\8.1\Lib\winv6.3\um\x86;$(LibraryPath)</LibraryPath>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <IncludePath>E:\STALKER\X-Ray Source\x_ray_1602_VS13\xray-16\src\3rd party;$(IncludePath);$(xrSdkDir)include;</IncludePath>
+    <LibraryPath>C:\Program Files (x86)\Windows Kits\8.1\Lib\winv6.3\um\x86;$(LibraryPath)</LibraryPath>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <IncludePath>E:\STALKER\X-Ray Source\x_ray_1602_VS13\xray-16\src\3rd party;$(IncludePath);$(xrSdkDir)include;</IncludePath>
+    <LibraryPath>C:\Program Files (x86)\Windows Kits\8.1\Lib\winv6.3\um\x86;$(LibraryPath)</LibraryPath>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\;..\..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+    </Link>
+    <Lib />
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <AdditionalIncludeDirectories>..\;..\..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;_VC80_UPGRADE=0x0710;_SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+    </Link>
+    <Lib>
+      <LinkTimeCodeGeneration>false</LinkTimeCodeGeneration>
+    </Lib>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\;..\..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+    </Link>
+    <Lib />
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\ansi2knr.c" />
+    <ClCompile Include="..\cdjpeg.c" />
+    <ClCompile Include="..\cjpeg.c" />
+    <ClCompile Include="..\ckconfig.c" />
+    <ClCompile Include="..\djpeg.c" />
+    <ClCompile Include="..\jcapimin.c" />
+    <ClCompile Include="..\jcapistd.c" />
+    <ClCompile Include="..\jccoefct.c" />
+    <ClCompile Include="..\jccolor.c" />
+    <ClCompile Include="..\jcdctmgr.c" />
+    <ClCompile Include="..\jchuff.c" />
+    <ClCompile Include="..\jcinit.c" />
+    <ClCompile Include="..\jcmainct.c" />
+    <ClCompile Include="..\jcmarker.c" />
+    <ClCompile Include="..\jcmaster.c" />
+    <ClCompile Include="..\jcomapi.c" />
+    <ClCompile Include="..\jcparam.c" />
+    <ClCompile Include="..\jcphuff.c" />
+    <ClCompile Include="..\jcprepct.c" />
+    <ClCompile Include="..\jcsample.c" />
+    <ClCompile Include="..\jctrans.c" />
+    <ClCompile Include="..\jdapimin.c" />
+    <ClCompile Include="..\jdapistd.c" />
+    <ClCompile Include="..\jdatadst.c" />
+    <ClCompile Include="..\jdatasrc.c" />
+    <ClCompile Include="..\jdcoefct.c" />
+    <ClCompile Include="..\jdcolor.c" />
+    <ClCompile Include="..\jddctmgr.c" />
+    <ClCompile Include="..\jdhuff.c" />
+    <ClCompile Include="..\jdinput.c" />
+    <ClCompile Include="..\jdmainct.c" />
+    <ClCompile Include="..\jdmarker.c" />
+    <ClCompile Include="..\jdmaster.c" />
+    <ClCompile Include="..\jdmerge.c" />
+    <ClCompile Include="..\jdphuff.c" />
+    <ClCompile Include="..\jdpostct.c" />
+    <ClCompile Include="..\jdsample.c" />
+    <ClCompile Include="..\jdtrans.c" />
+    <ClCompile Include="..\jerror.c" />
+    <ClCompile Include="..\jfdctflt.c" />
+    <ClCompile Include="..\jfdctfst.c" />
+    <ClCompile Include="..\jfdctint.c" />
+    <ClCompile Include="..\jidctflt.c" />
+    <ClCompile Include="..\jidctfst.c" />
+    <ClCompile Include="..\jidctint.c" />
+    <ClCompile Include="..\jidctred.c" />
+    <ClCompile Include="..\jmemansi.c" />
+    <ClCompile Include="..\jmemmgr.c" />
+    <ClCompile Include="..\jmemname.c" />
+    <ClCompile Include="..\jmemnobs.c" />
+    <ClCompile Include="..\jpegtran.c" />
+    <ClCompile Include="..\jquant1.c" />
+    <ClCompile Include="..\jquant2.c" />
+    <ClCompile Include="..\jutils.c" />
+    <ClCompile Include="..\rdbmp.c" />
+    <ClCompile Include="..\rdcolmap.c" />
+    <ClCompile Include="..\rdgif.c" />
+    <ClCompile Include="..\rdjpgcom.c" />
+    <ClCompile Include="..\rdppm.c" />
+    <ClCompile Include="..\rdrle.c" />
+    <ClCompile Include="..\rdswitch.c" />
+    <ClCompile Include="..\rdtarga.c" />
+    <ClCompile Include="..\transupp.c" />
+    <ClCompile Include="..\wrbmp.c" />
+    <ClCompile Include="..\wrgif.c" />
+    <ClCompile Include="..\wrjpgcom.c" />
+    <ClCompile Include="..\wrppm.c" />
+    <ClCompile Include="..\wrrle.c" />
+    <ClCompile Include="..\wrtarga.c" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="cderror.h" />
+    <ClInclude Include="cdjpeg.h" />
+    <ClInclude Include="jchuff.h" />
+    <ClInclude Include="jconfig.h" />
+    <ClInclude Include="jdct.h" />
+    <ClInclude Include="jdhuff.h" />
+    <ClInclude Include="jerror.h" />
+    <ClInclude Include="jinclude.h" />
+    <ClInclude Include="jmemsys.h" />
+    <ClInclude Include="jmorecfg.h" />
+    <ClInclude Include="jpegint.h" />
+    <ClInclude Include="jpeglib.h" />
+    <ClInclude Include="jversion.h" />
+    <ClInclude Include="transupp.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/sdk/include/jpeg/vs2022/libjpeg.vcxproj.filters b/sdk/include/jpeg/vs2022/libjpeg.vcxproj.filters
new file mode 100644
index 0000000..ea87a21
--- /dev/null
+++ b/sdk/include/jpeg/vs2022/libjpeg.vcxproj.filters
@@ -0,0 +1,121 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="src">
+      <UniqueIdentifier>{74b7cff6-ab2b-4f3a-bada-422a18935b1d}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\ansi2knr.c" />
+    <ClCompile Include="..\cdjpeg.c" />
+    <ClCompile Include="..\cjpeg.c" />
+    <ClCompile Include="..\ckconfig.c" />
+    <ClCompile Include="..\djpeg.c" />
+    <ClCompile Include="..\jcapimin.c" />
+    <ClCompile Include="..\jcapistd.c" />
+    <ClCompile Include="..\jccoefct.c" />
+    <ClCompile Include="..\jccolor.c" />
+    <ClCompile Include="..\jcdctmgr.c" />
+    <ClCompile Include="..\jchuff.c" />
+    <ClCompile Include="..\jcinit.c" />
+    <ClCompile Include="..\jcmainct.c" />
+    <ClCompile Include="..\jcmarker.c" />
+    <ClCompile Include="..\jcmaster.c" />
+    <ClCompile Include="..\jcomapi.c" />
+    <ClCompile Include="..\jcparam.c" />
+    <ClCompile Include="..\jcphuff.c" />
+    <ClCompile Include="..\jcprepct.c" />
+    <ClCompile Include="..\jcsample.c" />
+    <ClCompile Include="..\jctrans.c" />
+    <ClCompile Include="..\jdapimin.c" />
+    <ClCompile Include="..\jdapistd.c" />
+    <ClCompile Include="..\jdatadst.c" />
+    <ClCompile Include="..\jdatasrc.c" />
+    <ClCompile Include="..\jdcoefct.c" />
+    <ClCompile Include="..\jdcolor.c" />
+    <ClCompile Include="..\jddctmgr.c" />
+    <ClCompile Include="..\jdhuff.c" />
+    <ClCompile Include="..\jdinput.c" />
+    <ClCompile Include="..\jdmainct.c" />
+    <ClCompile Include="..\jdmarker.c" />
+    <ClCompile Include="..\jdmaster.c" />
+    <ClCompile Include="..\jdmerge.c" />
+    <ClCompile Include="..\jdphuff.c" />
+    <ClCompile Include="..\jdpostct.c" />
+    <ClCompile Include="..\jdsample.c" />
+    <ClCompile Include="..\jdtrans.c" />
+    <ClCompile Include="..\jerror.c" />
+    <ClCompile Include="..\jfdctflt.c" />
+    <ClCompile Include="..\jfdctfst.c" />
+    <ClCompile Include="..\jfdctint.c" />
+    <ClCompile Include="..\jidctflt.c" />
+    <ClCompile Include="..\jidctfst.c" />
+    <ClCompile Include="..\jidctint.c" />
+    <ClCompile Include="..\jidctred.c" />
+    <ClCompile Include="..\jmemansi.c" />
+    <ClCompile Include="..\jmemmgr.c" />
+    <ClCompile Include="..\jmemname.c" />
+    <ClCompile Include="..\jmemnobs.c" />
+    <ClCompile Include="..\jpegtran.c" />
+    <ClCompile Include="..\jquant1.c" />
+    <ClCompile Include="..\jquant2.c" />
+    <ClCompile Include="..\jutils.c" />
+    <ClCompile Include="..\rdbmp.c" />
+    <ClCompile Include="..\rdcolmap.c" />
+    <ClCompile Include="..\rdgif.c" />
+    <ClCompile Include="..\rdjpgcom.c" />
+    <ClCompile Include="..\rdppm.c" />
+    <ClCompile Include="..\rdrle.c" />
+    <ClCompile Include="..\rdswitch.c" />
+    <ClCompile Include="..\rdtarga.c" />
+    <ClCompile Include="..\transupp.c" />
+    <ClCompile Include="..\wrbmp.c" />
+    <ClCompile Include="..\wrgif.c" />
+    <ClCompile Include="..\wrjpgcom.c" />
+    <ClCompile Include="..\wrppm.c" />
+    <ClCompile Include="..\wrrle.c" />
+    <ClCompile Include="..\wrtarga.c" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="cderror.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="cdjpeg.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="jchuff.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="jdct.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="jdhuff.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="jerror.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="jinclude.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="jmemsys.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="jmorecfg.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="jpegint.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="jpeglib.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="jversion.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="transupp.h">
+      <Filter>src</Filter>
+    </ClInclude>
+    <ClInclude Include="jconfig.h" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/sdk/include/ogg/vs2022/libogg_static.vcxproj b/sdk/include/ogg/vs2022/libogg_static.vcxproj
new file mode 100644
index 0000000..4586163
--- /dev/null
+++ b/sdk/include/ogg/vs2022/libogg_static.vcxproj
@@ -0,0 +1,162 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{893887A1-3ABF-40A0-B931-CD0867010785}</ProjectGuid>
+    <RootNamespace>libogg</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v120</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v120</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <PlatformToolset>v143</PlatformToolset>
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <PlatformToolset>v143</PlatformToolset>
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <OutDir>$(SolutionDir)..\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <OutDir>$(SolutionDir)..\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <OutDir>$(SolutionDir)..\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <TargetExt>.lib</TargetExt>
+    <TargetName>libogg_static</TargetName>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <TargetExt>.lib</TargetExt>
+    <TargetName>libogg_static</TargetName>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <TargetExt>.lib</TargetExt>
+    <TargetName>libogg_static</TargetName>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader />
+      <DisableSpecificWarnings>4244;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Lib />
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <AdditionalIncludeDirectories>..\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <DisableSpecificWarnings>4244;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <OmitFramePointers>false</OmitFramePointers>
+    </ClCompile>
+    <Lib>
+      <LinkTimeCodeGeneration>false</LinkTimeCodeGeneration>
+    </Lib>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <DisableSpecificWarnings>4244;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Lib />
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\src\bitwise.c" />
+    <ClCompile Include="..\src\framing.c" />
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="..\ogg.def" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\ogg.h" />
+    <ClInclude Include="..\os_types.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/sdk/include/ogg/vs2022/libogg_static.vcxproj.filters b/sdk/include/ogg/vs2022/libogg_static.vcxproj.filters
new file mode 100644
index 0000000..496eac9
--- /dev/null
+++ b/sdk/include/ogg/vs2022/libogg_static.vcxproj.filters
@@ -0,0 +1,34 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="include">
+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+      <Extensions>h;hpp;hxx;hm;inl;inc;xsd</Extensions>
+    </Filter>
+    <Filter Include="src">
+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+      <Extensions>cpp;c;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\src\bitwise.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\src\framing.c">
+      <Filter>src</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="..\ogg.def">
+      <Filter>src</Filter>
+    </None>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\os_types.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\ogg.h">
+      <Filter>include</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/sdk/include/theora/vs2022/libtheora_static.vcxproj b/sdk/include/theora/vs2022/libtheora_static.vcxproj
new file mode 100644
index 0000000..4c43c20
--- /dev/null
+++ b/sdk/include/theora/vs2022/libtheora_static.vcxproj
@@ -0,0 +1,213 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{0BDF3377-F84E-4B42-A605-B45AAA244CB6}</ProjectGuid>
+    <RootNamespace>libtheora</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <TargetName>libtheora_static</TargetName>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <TargetName>libtheora_static</TargetName>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <TargetName>libtheora_static</TargetName>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\..\..\include;..\..\..\lib;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_BIND_TO_CURRENT_CRT_VERSION;WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PrecompiledHeader />
+      <DisableSpecificWarnings>4244;4267;4057;4100;4245;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Lib />
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <AdditionalIncludeDirectories>..\..\..\include;..\..\..\lib;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_BIND_TO_CURRENT_CRT_VERSION;WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <DisableSpecificWarnings>4244;4267;4057;4100;4245;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <OmitFramePointers>false</OmitFramePointers>
+    </ClCompile>
+    <Lib>
+      <LinkTimeCodeGeneration>false</LinkTimeCodeGeneration>
+    </Lib>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\..\..\include;..\..\..\lib;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_BIND_TO_CURRENT_CRT_VERSION;WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <DisableSpecificWarnings>4244;4267;4057;4100;4245;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Lib />
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClInclude Include="theora\codec.h" />
+    <ClInclude Include="theora\theora.h" />
+    <ClInclude Include="theora\theoradec.h" />
+    <ClInclude Include="..\lib\apiwrapper.h" />
+    <ClInclude Include="..\lib\bitpack.h" />
+    <ClInclude Include="..\lib\cpu.h" />
+    <ClInclude Include="..\lib\dct.h" />
+    <ClInclude Include="..\lib\decint.h" />
+    <ClInclude Include="..\lib\dequant.h" />
+    <ClInclude Include="..\lib\encint.h" />
+    <ClInclude Include="..\lib\enquant.h" />
+    <ClInclude Include="..\lib\huffdec.h" />
+    <ClInclude Include="..\lib\huffenc.h" />
+    <ClInclude Include="..\lib\huffman.h" />
+    <ClInclude Include="..\lib\idct.h" />
+    <ClInclude Include="..\lib\internal.h" />
+    <ClInclude Include="..\lib\mathops.h" />
+    <ClInclude Include="..\lib\modedec.h" />
+    <ClInclude Include="..\lib\ocintrin.h" />
+    <ClInclude Include="..\lib\quant.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\lib\analyze.c" />
+    <ClCompile Include="..\lib\apiwrapper.c" />
+    <ClCompile Include="..\lib\bitpack.c" />
+    <ClCompile Include="..\lib\cpu.c" />
+    <ClCompile Include="..\lib\decapiwrapper.c" />
+    <ClCompile Include="..\lib\decinfo.c" />
+    <ClCompile Include="..\lib\decode.c">
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+      <XMLDocumentationFileName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)%(Filename)1.xdc</XMLDocumentationFileName>
+      <XMLDocumentationFileName Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">$(IntDir)%(Filename)1.xdc</XMLDocumentationFileName>
+      <XMLDocumentationFileName Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">$(IntDir)%(Filename)1.xdc</XMLDocumentationFileName>
+    </ClCompile>
+    <ClCompile Include="..\lib\dequant.c" />
+    <ClCompile Include="..\lib\encapiwrapper.c" />
+    <ClCompile Include="..\lib\encfrag.c" />
+    <ClCompile Include="..\lib\encinfo.c" />
+    <ClCompile Include="..\lib\encode.c" />
+    <ClCompile Include="..\lib\encoder_disabled.c">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\lib\enquant.c" />
+    <ClCompile Include="..\lib\fdct.c" />
+    <ClCompile Include="..\lib\fragment.c" />
+    <ClCompile Include="..\lib\huffdec.c" />
+    <ClCompile Include="..\lib\huffenc.c" />
+    <ClCompile Include="..\lib\idct.c">
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+      <XMLDocumentationFileName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)%(Filename)1.xdc</XMLDocumentationFileName>
+      <XMLDocumentationFileName Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">$(IntDir)%(Filename)1.xdc</XMLDocumentationFileName>
+      <XMLDocumentationFileName Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">$(IntDir)%(Filename)1.xdc</XMLDocumentationFileName>
+    </ClCompile>
+    <ClCompile Include="..\lib\info.c" />
+    <ClCompile Include="..\lib\internal.c" />
+    <ClCompile Include="..\lib\mathops.c" />
+    <ClCompile Include="..\lib\mcenc.c" />
+    <ClCompile Include="..\lib\quant.c">
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+      <XMLDocumentationFileName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)%(Filename)1.xdc</XMLDocumentationFileName>
+      <XMLDocumentationFileName Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">$(IntDir)%(Filename)1.xdc</XMLDocumentationFileName>
+      <XMLDocumentationFileName Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">$(IntDir)%(Filename)1.xdc</XMLDocumentationFileName>
+    </ClCompile>
+    <ClCompile Include="..\lib\rate.c" />
+    <ClCompile Include="..\lib\state.c" />
+    <ClCompile Include="..\lib\tokenize.c" />
+    <ClCompile Include="..\lib\x86_vc\mmxencfrag.c" />
+    <ClCompile Include="..\lib\x86_vc\mmxfdct.c" />
+    <ClCompile Include="..\lib\x86_vc\mmxfrag.c" />
+    <ClCompile Include="..\lib\x86_vc\mmxidct.c" />
+    <ClCompile Include="..\lib\x86_vc\mmxstate.c" />
+    <ClCompile Include="..\lib\x86_vc\x86enc.c" />
+    <ClCompile Include="..\lib\x86_vc\x86state.c" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/sdk/include/theora/vs2022/libtheora_static.vcxproj.filters b/sdk/include/theora/vs2022/libtheora_static.vcxproj.filters
new file mode 100644
index 0000000..04df1fc
--- /dev/null
+++ b/sdk/include/theora/vs2022/libtheora_static.vcxproj.filters
@@ -0,0 +1,84 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="include">
+      <UniqueIdentifier>{e578c56c-80d7-4a29-ae55-bb5ca4ad1d07}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="include\theora">
+      <UniqueIdentifier>{6027aefc-6e90-4817-a330-83a25140c97e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="lib">
+      <UniqueIdentifier>{9643d1ab-18e0-4af2-9a79-8b4d87a0a523}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="lib\enc">
+      <UniqueIdentifier>{c9b744e2-acab-4876-ba44-f5581d2ef13c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="lib\enc\x86_vc">
+      <UniqueIdentifier>{80f241ba-974d-4610-8cc2-6d651fd2f2d2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="lib\dec">
+      <UniqueIdentifier>{2d8a3c6d-4001-4e02-9600-46650555a12e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="lib\dec\x86_vc">
+      <UniqueIdentifier>{8ba232bd-2fd0-49b4-b027-174eecf3b7ff}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="theora\codec.h" />
+    <ClInclude Include="theora\theora.h" />
+    <ClInclude Include="theora\theoradec.h" />
+    <ClInclude Include="..\lib\apiwrapper.h" />
+    <ClInclude Include="..\lib\bitpack.h" />
+    <ClInclude Include="..\lib\cpu.h" />
+    <ClInclude Include="..\lib\dct.h" />
+    <ClInclude Include="..\lib\decint.h" />
+    <ClInclude Include="..\lib\dequant.h" />
+    <ClInclude Include="..\lib\encint.h" />
+    <ClInclude Include="..\lib\enquant.h" />
+    <ClInclude Include="..\lib\huffdec.h" />
+    <ClInclude Include="..\lib\huffenc.h" />
+    <ClInclude Include="..\lib\huffman.h" />
+    <ClInclude Include="..\lib\idct.h" />
+    <ClInclude Include="..\lib\internal.h" />
+    <ClInclude Include="..\lib\mathops.h" />
+    <ClInclude Include="..\lib\modedec.h" />
+    <ClInclude Include="..\lib\ocintrin.h" />
+    <ClInclude Include="..\lib\quant.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\lib\analyze.c" />
+    <ClCompile Include="..\lib\apiwrapper.c" />
+    <ClCompile Include="..\lib\bitpack.c" />
+    <ClCompile Include="..\lib\cpu.c" />
+    <ClCompile Include="..\lib\decapiwrapper.c" />
+    <ClCompile Include="..\lib\decinfo.c" />
+    <ClCompile Include="..\lib\decode.c" />
+    <ClCompile Include="..\lib\dequant.c" />
+    <ClCompile Include="..\lib\encapiwrapper.c" />
+    <ClCompile Include="..\lib\encfrag.c" />
+    <ClCompile Include="..\lib\encinfo.c" />
+    <ClCompile Include="..\lib\encode.c" />
+    <ClCompile Include="..\lib\encoder_disabled.c" />
+    <ClCompile Include="..\lib\enquant.c" />
+    <ClCompile Include="..\lib\fdct.c" />
+    <ClCompile Include="..\lib\fragment.c" />
+    <ClCompile Include="..\lib\huffdec.c" />
+    <ClCompile Include="..\lib\huffenc.c" />
+    <ClCompile Include="..\lib\idct.c" />
+    <ClCompile Include="..\lib\info.c" />
+    <ClCompile Include="..\lib\internal.c" />
+    <ClCompile Include="..\lib\mathops.c" />
+    <ClCompile Include="..\lib\mcenc.c" />
+    <ClCompile Include="..\lib\quant.c" />
+    <ClCompile Include="..\lib\rate.c" />
+    <ClCompile Include="..\lib\state.c" />
+    <ClCompile Include="..\lib\tokenize.c" />
+    <ClCompile Include="..\lib\x86_vc\mmxencfrag.c" />
+    <ClCompile Include="..\lib\x86_vc\mmxfdct.c" />
+    <ClCompile Include="..\lib\x86_vc\mmxfrag.c" />
+    <ClCompile Include="..\lib\x86_vc\mmxidct.c" />
+    <ClCompile Include="..\lib\x86_vc\mmxstate.c" />
+    <ClCompile Include="..\lib\x86_vc\x86enc.c" />
+    <ClCompile Include="..\lib\x86_vc\x86state.c" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/sdk/include/vorbis/vs2022/libvorbis_static.vcxproj b/sdk/include/vorbis/vs2022/libvorbis_static.vcxproj
new file mode 100644
index 0000000..0981420
--- /dev/null
+++ b/sdk/include/vorbis/vs2022/libvorbis_static.vcxproj
@@ -0,0 +1,197 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}</ProjectGuid>
+    <RootNamespace>libvorbis</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\..\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;ANALYSIS;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader />
+      <DisableSpecificWarnings>4244;4100;4267;4189;4305;4127;4706;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Lib />
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <AdditionalIncludeDirectories>..\..\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;ANALYSIS;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <DisableSpecificWarnings>4244;4100;4267;4189;4305;4127;4706;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <OmitFramePointers>false</OmitFramePointers>
+    </ClCompile>
+    <Lib>
+      <LinkTimeCodeGeneration>false</LinkTimeCodeGeneration>
+    </Lib>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\..\..\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;ANALYSIS;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <DisableSpecificWarnings>4244;4100;4267;4189;4305;4127;4706;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Lib />
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\lib\analysis.c" />
+    <ClCompile Include="..\lib\bitrate.c" />
+    <ClCompile Include="..\lib\block.c" />
+    <ClCompile Include="..\lib\codebook.c" />
+    <ClCompile Include="..\lib\envelope.c" />
+    <ClCompile Include="..\lib\floor0.c" />
+    <ClCompile Include="..\lib\floor1.c" />
+    <ClCompile Include="..\lib\info.c" />
+    <ClCompile Include="..\lib\lookup.c" />
+    <ClCompile Include="..\lib\lpc.c" />
+    <ClCompile Include="..\lib\lsp.c" />
+    <ClCompile Include="..\lib\mapping0.c" />
+    <ClCompile Include="..\lib\mdct.c" />
+    <ClCompile Include="..\lib\psy.c" />
+    <ClCompile Include="..\lib\registry.c" />
+    <ClCompile Include="..\lib\res0.c" />
+    <ClCompile Include="..\lib\sharedbook.c" />
+    <ClCompile Include="..\lib\smallft.c" />
+    <ClCompile Include="..\lib\synthesis.c" />
+    <ClCompile Include="..\lib\vorbisenc.c" />
+    <ClCompile Include="..\lib\window.c" />
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="..\..\vorbis.def" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\codec.h" />
+    <ClInclude Include="..\vorbisenc.h" />
+    <ClInclude Include="..\vorbisfile.h" />
+    <ClInclude Include="..\lib\backends.h" />
+    <ClInclude Include="..\lib\bitrate.h" />
+    <ClInclude Include="..\lib\books\coupled\res_books_stereo.h" />
+    <ClInclude Include="..\lib\books\floor\floor_books.h" />
+    <ClInclude Include="..\lib\books\uncoupled\res_books_uncoupled.h" />
+    <ClInclude Include="..\lib\codebook.h" />
+    <ClInclude Include="..\lib\codec_internal.h" />
+    <ClInclude Include="..\lib\envelope.h" />
+    <ClInclude Include="..\lib\highlevel.h" />
+    <ClInclude Include="..\lib\lookup.h" />
+    <ClInclude Include="..\lib\lookup_data.h" />
+    <ClInclude Include="..\lib\lpc.h" />
+    <ClInclude Include="..\lib\lsp.h" />
+    <ClInclude Include="..\lib\masking.h" />
+    <ClInclude Include="..\lib\mdct.h" />
+    <ClInclude Include="..\lib\misc.h" />
+    <ClInclude Include="..\lib\modes\floor_all.h" />
+    <ClInclude Include="..\lib\modes\psych_11.h" />
+    <ClInclude Include="..\lib\modes\psych_16.h" />
+    <ClInclude Include="..\lib\modes\psych_44.h" />
+    <ClInclude Include="..\lib\modes\psych_8.h" />
+    <ClInclude Include="..\lib\modes\residue_16.h" />
+    <ClInclude Include="..\lib\modes\residue_44.h" />
+    <ClInclude Include="..\lib\modes\residue_44u.h" />
+    <ClInclude Include="..\lib\modes\residue_8.h" />
+    <ClInclude Include="..\lib\modes\setup_11.h" />
+    <ClInclude Include="..\lib\modes\setup_16.h" />
+    <ClInclude Include="..\lib\modes\setup_22.h" />
+    <ClInclude Include="..\lib\modes\setup_32.h" />
+    <ClInclude Include="..\lib\modes\setup_44.h" />
+    <ClInclude Include="..\lib\modes\setup_44u.h" />
+    <ClInclude Include="..\lib\modes\setup_8.h" />
+    <ClInclude Include="..\lib\modes\setup_X.h" />
+    <ClInclude Include="..\lib\os.h" />
+    <ClInclude Include="..\lib\psy.h" />
+    <ClInclude Include="..\lib\registry.h" />
+    <ClInclude Include="..\lib\scales.h" />
+    <ClInclude Include="..\lib\smallft.h" />
+    <ClInclude Include="..\lib\window.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/sdk/include/vorbis/vs2022/libvorbis_static.vcxproj.filters b/sdk/include/vorbis/vs2022/libvorbis_static.vcxproj.filters
new file mode 100644
index 0000000..2a46b31
--- /dev/null
+++ b/sdk/include/vorbis/vs2022/libvorbis_static.vcxproj.filters
@@ -0,0 +1,211 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="include">
+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+      <Extensions>h;hpp;hxx;hm;inl;inc;xsd</Extensions>
+    </Filter>
+    <Filter Include="src">
+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+      <Extensions>cpp;c;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\lib\analysis.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\bitrate.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\block.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\codebook.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\envelope.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\floor0.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\floor1.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\info.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\lookup.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\lpc.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\lsp.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\mapping0.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\mdct.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\psy.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\registry.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\res0.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\sharedbook.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\smallft.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\synthesis.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\vorbisenc.c">
+      <Filter>src</Filter>
+    </ClCompile>
+    <ClCompile Include="..\lib\window.c">
+      <Filter>src</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="..\..\vorbis.def">
+      <Filter>src</Filter>
+    </None>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\codec.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\vorbisenc.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\vorbisfile.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\backends.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\bitrate.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\books\coupled\res_books_stereo.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\books\floor\floor_books.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\books\uncoupled\res_books_uncoupled.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\codebook.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\codec_internal.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\envelope.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\highlevel.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\lookup.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\lookup_data.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\lpc.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\lsp.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\masking.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\mdct.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\misc.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\floor_all.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\psych_11.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\psych_16.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\psych_44.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\psych_8.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\residue_16.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\residue_44.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\residue_44u.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\residue_8.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\setup_11.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\setup_16.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\setup_22.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\setup_32.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\setup_44.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\setup_44u.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\setup_8.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\modes\setup_X.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\os.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\psy.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\registry.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\scales.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\smallft.h">
+      <Filter>include</Filter>
+    </ClInclude>
+    <ClInclude Include="..\lib\window.h">
+      <Filter>include</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/sdk/include/vorbis/vs2022/libvorbisfile_static.vcxproj b/sdk/include/vorbis/vs2022/libvorbisfile_static.vcxproj
new file mode 100644
index 0000000..2e84455
--- /dev/null
+++ b/sdk/include/vorbis/vs2022/libvorbisfile_static.vcxproj
@@ -0,0 +1,137 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}</ProjectGuid>
+    <RootNamespace>libvorbisfile</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader />
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Lib>
+      <OutputFile>$(OutDir)$(TargetName)$(TargetExt)</OutputFile>
+    </Lib>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Lib>
+      <OutputFile>$(OutDir)$(TargetName)$(TargetExt)</OutputFile>
+      <LinkTimeCodeGeneration>false</LinkTimeCodeGeneration>
+    </Lib>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Lib>
+      <OutputFile>$(OutDir)$(TargetName)$(TargetExt)</OutputFile>
+    </Lib>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\lib\vorbisfile.c" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\vorbis\vorbisfile.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="libvorbis_static.vcxproj">
+      <Project>{3a214e06-b95e-4d61-a291-1f8df2ec10fd}</Project>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/sdk/include/vorbis/vs2022/libvorbisfile_static.vcxproj.filters b/sdk/include/vorbis/vs2022/libvorbisfile_static.vcxproj.filters
new file mode 100644
index 0000000..809de37
--- /dev/null
+++ b/sdk/include/vorbis/vs2022/libvorbisfile_static.vcxproj.filters
@@ -0,0 +1,9 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <ClInclude Include="..\vorbis\vorbisfile.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\lib\vorbisfile.c" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/DXERR/vs2022/DXERR.vcxproj b/src/3rd party/DXERR/vs2022/DXERR.vcxproj
new file mode 100644
index 0000000..0b2c764
--- /dev/null
+++ b/src/3rd party/DXERR/vs2022/DXERR.vcxproj	
@@ -0,0 +1,123 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{772FE450-F4F3-4687-A2A7-5624825089D7}</ProjectGuid>
+    <RootNamespace>DXERR</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <PlatformToolset>v143</PlatformToolset>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <TargetName>DxErr</TargetName>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <TargetName>DxErr</TargetName>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <TargetName>DxErr</TargetName>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+    </Link>
+    <Lib />
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;_VC80_UPGRADE=0x0710;_SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+    </Link>
+    <Lib>
+      <LinkTimeCodeGeneration>false</LinkTimeCodeGeneration>
+    </Lib>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+    </Link>
+    <Lib />
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\dxerr.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\dxerr.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/DXERR/vs2022/DXERR.vcxproj.filters b/src/3rd party/DXERR/vs2022/DXERR.vcxproj.filters
new file mode 100644
index 0000000..375e544
--- /dev/null
+++ b/src/3rd party/DXERR/vs2022/DXERR.vcxproj.filters	
@@ -0,0 +1,27 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+    </Filter>
+    <Filter Include="Header Files">
+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+      <Extensions>h;hh;hpp;hxx;hm;inl;inc;xsd</Extensions>
+    </Filter>
+    <Filter Include="Resource Files">
+      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
+      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="dxerr.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="dxerr.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/NVTT/vs2022/NVTT.vcxproj b/src/3rd party/NVTT/vs2022/NVTT.vcxproj
new file mode 100644
index 0000000..def8be5
--- /dev/null
+++ b/src/3rd party/NVTT/vs2022/NVTT.vcxproj	
@@ -0,0 +1,274 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\include\nvconfig.h" />
+    <ClInclude Include="..\include\nvtt\nvtt.h" />
+    <ClInclude Include="..\include\nvtt\nvtt_wrapper.h" />
+    <ClInclude Include="..\src\nvcore\BitArray.h" />
+    <ClInclude Include="..\src\nvcore\Containers.h" />
+    <ClInclude Include="..\src\nvcore\Debug.h" />
+    <ClInclude Include="..\src\nvcore\DefsGnucDarwin.h" />
+    <ClInclude Include="..\src\nvcore\DefsGnucLinux.h" />
+    <ClInclude Include="..\src\nvcore\DefsGnucWin32.h" />
+    <ClInclude Include="..\src\nvcore\DefsVcWin32.h" />
+    <ClInclude Include="..\src\nvcore\Library.h" />
+    <ClInclude Include="..\src\nvcore\Memory.h" />
+    <ClInclude Include="..\src\nvcore\nvcore.h" />
+    <ClInclude Include="..\src\nvcore\poshlib\posh.h" />
+    <ClInclude Include="..\src\nvcore\Prefetch.h" />
+    <ClInclude Include="..\src\nvcore\Ptr.h" />
+    <ClInclude Include="..\src\nvcore\Radix.h" />
+    <ClInclude Include="..\src\nvcore\StdStream.h" />
+    <ClInclude Include="..\src\nvcore\Stream.h" />
+    <ClInclude Include="..\src\nvcore\StrLib.h" />
+    <ClInclude Include="..\src\nvcore\TextReader.h" />
+    <ClInclude Include="..\src\nvcore\TextWriter.h" />
+    <ClInclude Include="..\src\nvcore\Tokenizer.h" />
+    <ClInclude Include="..\src\nvimage\BlockDXT.h" />
+    <ClInclude Include="..\src\nvimage\ColorBlock.h" />
+    <ClInclude Include="..\src\nvimage\ConeMap.h" />
+    <ClInclude Include="..\src\nvimage\DirectDrawSurface.h" />
+    <ClInclude Include="..\src\nvimage\Filter.h" />
+    <ClInclude Include="..\src\nvimage\FloatImage.h" />
+    <ClInclude Include="..\src\nvimage\HoleFilling.h" />
+    <ClInclude Include="..\src\nvimage\Image.h" />
+    <ClInclude Include="..\src\nvimage\ImageIO.h" />
+    <ClInclude Include="..\src\nvimage\NormalMap.h" />
+    <ClInclude Include="..\src\nvimage\NormalMipmap.h" />
+    <ClInclude Include="..\src\nvimage\nvimage.h" />
+    <ClInclude Include="..\src\nvimage\PixelFormat.h" />
+    <ClInclude Include="..\src\nvimage\PsdFile.h" />
+    <ClInclude Include="..\src\nvimage\Quantize.h" />
+    <ClInclude Include="..\src\nvimage\TgaFile.h" />
+    <ClInclude Include="..\src\nvmath\Basis.h" />
+    <ClInclude Include="..\src\nvmath\Box.h" />
+    <ClInclude Include="..\src\nvmath\Color.h" />
+    <ClInclude Include="..\src\nvmath\Matrix.h" />
+    <ClInclude Include="..\src\nvmath\Montecarlo.h" />
+    <ClInclude Include="..\src\nvmath\nvmath.h" />
+    <ClInclude Include="..\src\nvmath\Plane.h" />
+    <ClInclude Include="..\src\nvmath\Quaternion.h" />
+    <ClInclude Include="..\src\nvmath\Random.h" />
+    <ClInclude Include="..\src\nvmath\SphericalHarmonic.h" />
+    <ClInclude Include="..\src\nvmath\Triangle.h" />
+    <ClInclude Include="..\src\nvmath\Vector.h" />
+    <ClInclude Include="..\src\nvtt\CompressDXT.h" />
+    <ClInclude Include="..\src\nvtt\CompressionOptions.h" />
+    <ClInclude Include="..\src\nvtt\Compressor.h" />
+    <ClInclude Include="..\src\nvtt\CompressRGB.h" />
+    <ClInclude Include="..\src\nvtt\cuda\Bitmaps.h" />
+    <ClInclude Include="..\src\nvtt\cuda\CudaCompressDXT.h" />
+    <ClInclude Include="..\src\nvtt\cuda\CudaMath.h" />
+    <ClInclude Include="..\src\nvtt\cuda\CudaUtils.h" />
+    <ClInclude Include="..\src\nvtt\InputOptions.h" />
+    <ClInclude Include="..\src\nvtt\nvtt.h" />
+    <ClInclude Include="..\src\nvtt\nvtt_wrapper.h" />
+    <ClInclude Include="..\src\nvtt\OptimalCompressDXT.h" />
+    <ClInclude Include="..\src\nvtt\OutputOptions.h" />
+    <ClInclude Include="..\src\nvtt\QuickCompressDXT.h" />
+    <ClInclude Include="..\src\nvtt\SingleColorLookup.h" />
+    <ClInclude Include="..\src\nvtt\squish\alpha.h" />
+    <ClInclude Include="..\src\nvtt\squish\clusterfit.h" />
+    <ClInclude Include="..\src\nvtt\squish\colourblock.h" />
+    <ClInclude Include="..\src\nvtt\squish\colourfit.h" />
+    <ClInclude Include="..\src\nvtt\squish\colourset.h" />
+    <ClInclude Include="..\src\nvtt\squish\config.h" />
+    <ClInclude Include="..\src\nvtt\squish\fastclusterfit.h" />
+    <ClInclude Include="..\src\nvtt\squish\maths.h" />
+    <ClInclude Include="..\src\nvtt\squish\rangefit.h" />
+    <ClInclude Include="..\src\nvtt\squish\simd.h" />
+    <ClInclude Include="..\src\nvtt\squish\simd_3dnow.h" />
+    <ClInclude Include="..\src\nvtt\squish\simd_sse.h" />
+    <ClInclude Include="..\src\nvtt\squish\simd_ve.h" />
+    <ClInclude Include="..\src\nvtt\squish\singlechannelfit.h" />
+    <ClInclude Include="..\src\nvtt\squish\singlecolourfit.h" />
+    <ClInclude Include="..\src\nvtt\squish\squish.h" />
+    <ClInclude Include="..\src\nvtt\squish\weightedclusterfit.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\src\nvcore\Debug.cpp" />
+    <ClCompile Include="..\src\nvcore\Library.cpp" />
+    <ClCompile Include="..\src\nvcore\Memory.cpp" />
+    <ClCompile Include="..\src\nvcore\poshlib\posh.c" />
+    <ClCompile Include="..\src\nvcore\Radix.cpp" />
+    <ClCompile Include="..\src\nvcore\StrLib.cpp" />
+    <ClCompile Include="..\src\nvcore\TextReader.cpp" />
+    <ClCompile Include="..\src\nvcore\TextWriter.cpp" />
+    <ClCompile Include="..\src\nvcore\Tokenizer.cpp" />
+    <ClCompile Include="..\src\nvimage\BlockDXT.cpp" />
+    <ClCompile Include="..\src\nvimage\ColorBlock.cpp" />
+    <ClCompile Include="..\src\nvimage\ConeMap.cpp">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\src\nvimage\DirectDrawSurface.cpp" />
+    <ClCompile Include="..\src\nvimage\Filter.cpp" />
+    <ClCompile Include="..\src\nvimage\FloatImage.cpp" />
+    <ClCompile Include="..\src\nvimage\HoleFilling.cpp" />
+    <ClCompile Include="..\src\nvimage\Image.cpp" />
+    <ClCompile Include="..\src\nvimage\ImageIO.cpp" />
+    <ClCompile Include="..\src\nvimage\NormalMap.cpp" />
+    <ClCompile Include="..\src\nvimage\NormalMipmap.cpp" />
+    <ClCompile Include="..\src\nvimage\Quantize.cpp" />
+    <ClCompile Include="..\src\nvmath\Basis.cpp" />
+    <ClCompile Include="..\src\nvmath\Montecarlo.cpp" />
+    <ClCompile Include="..\src\nvmath\Plane.cpp" />
+    <ClCompile Include="..\src\nvmath\Random.cpp" />
+    <ClCompile Include="..\src\nvmath\SphericalHarmonic.cpp" />
+    <ClCompile Include="..\src\nvmath\Triangle.cpp" />
+    <ClCompile Include="..\src\nvmath\TriBox.cpp" />
+    <ClCompile Include="..\src\nvtt\CompressDXT.cpp" />
+    <ClCompile Include="..\src\nvtt\CompressionOptions.cpp" />
+    <ClCompile Include="..\src\nvtt\Compressor.cpp" />
+    <ClCompile Include="..\src\nvtt\CompressRGB.cpp" />
+    <ClCompile Include="..\src\nvtt\cuda\CudaCompressDXT.cpp" />
+    <ClCompile Include="..\src\nvtt\cuda\CudaUtils.cpp" />
+    <ClCompile Include="..\src\nvtt\InputOptions.cpp" />
+    <ClCompile Include="..\src\nvtt\nvtt.cpp" />
+    <ClCompile Include="..\src\nvtt\nvtt_wrapper.cpp" />
+    <ClCompile Include="..\src\nvtt\OptimalCompressDXT.cpp" />
+    <ClCompile Include="..\src\nvtt\OutputOptions.cpp" />
+    <ClCompile Include="..\src\nvtt\QuickCompressDXT.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\alpha.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\clusterfit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\colourblock.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\colourfit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\colourset.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\fastclusterfit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\maths.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\rangefit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\singlechannelfit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\singlecolourfit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\squish.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\weightedclusterfit.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="..\src\nvtt\squish\singlecolourlookup.inl" />
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}</ProjectGuid>
+    <RootNamespace>nvtt</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+    <CharacterSet>MultiByte</CharacterSet>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(ProjectDir)..\include;$(ProjectDir)..\src;$(ProjectDir)..\src\nvcore;$(ProjectDir)..\src\nvtt\squish;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4005</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+      <WholeProgramOptimization>true</WholeProgramOptimization>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+    </Link>
+    <Lib />
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <AdditionalIncludeDirectories>$(ProjectDir)..\include;$(ProjectDir)..\src;$(ProjectDir)..\src\nvcore;$(ProjectDir)..\src\nvtt\squish;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <DisableSpecificWarnings>4005</DisableSpecificWarnings>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+    </Link>
+    <Lib>
+      <LinkTimeCodeGeneration>false</LinkTimeCodeGeneration>
+    </Lib>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(ProjectDir)..\include;$(ProjectDir)..\src;$(ProjectDir)..\src\nvcore;$(ProjectDir)..\src\nvtt\squish;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4005</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+      <WholeProgramOptimization>true</WholeProgramOptimization>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+    </Link>
+    <Lib />
+  </ItemDefinitionGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/NVTT/vs2022/NVTT.vcxproj.filters b/src/3rd party/NVTT/vs2022/NVTT.vcxproj.filters
new file mode 100644
index 0000000..2ec1cc0
--- /dev/null
+++ b/src/3rd party/NVTT/vs2022/NVTT.vcxproj.filters	
@@ -0,0 +1,153 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="include">
+      <UniqueIdentifier>{9c8d4fcf-1a0f-4176-9174-17216abeeffe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="src">
+      <UniqueIdentifier>{e7a9d246-050a-495e-85fe-8159f6514eff}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\include\nvconfig.h" />
+    <ClInclude Include="..\include\nvtt\nvtt.h" />
+    <ClInclude Include="..\include\nvtt\nvtt_wrapper.h" />
+    <ClInclude Include="..\src\nvcore\BitArray.h" />
+    <ClInclude Include="..\src\nvcore\Containers.h" />
+    <ClInclude Include="..\src\nvcore\Debug.h" />
+    <ClInclude Include="..\src\nvcore\DefsGnucDarwin.h" />
+    <ClInclude Include="..\src\nvcore\DefsGnucLinux.h" />
+    <ClInclude Include="..\src\nvcore\DefsGnucWin32.h" />
+    <ClInclude Include="..\src\nvcore\DefsVcWin32.h" />
+    <ClInclude Include="..\src\nvcore\Library.h" />
+    <ClInclude Include="..\src\nvcore\Memory.h" />
+    <ClInclude Include="..\src\nvcore\nvcore.h" />
+    <ClInclude Include="..\src\nvcore\poshlib\posh.h" />
+    <ClInclude Include="..\src\nvcore\Prefetch.h" />
+    <ClInclude Include="..\src\nvcore\Ptr.h" />
+    <ClInclude Include="..\src\nvcore\Radix.h" />
+    <ClInclude Include="..\src\nvcore\StdStream.h" />
+    <ClInclude Include="..\src\nvcore\Stream.h" />
+    <ClInclude Include="..\src\nvcore\StrLib.h" />
+    <ClInclude Include="..\src\nvcore\TextReader.h" />
+    <ClInclude Include="..\src\nvcore\TextWriter.h" />
+    <ClInclude Include="..\src\nvcore\Tokenizer.h" />
+    <ClInclude Include="..\src\nvimage\BlockDXT.h" />
+    <ClInclude Include="..\src\nvimage\ColorBlock.h" />
+    <ClInclude Include="..\src\nvimage\ConeMap.h" />
+    <ClInclude Include="..\src\nvimage\DirectDrawSurface.h" />
+    <ClInclude Include="..\src\nvimage\Filter.h" />
+    <ClInclude Include="..\src\nvimage\FloatImage.h" />
+    <ClInclude Include="..\src\nvimage\HoleFilling.h" />
+    <ClInclude Include="..\src\nvimage\Image.h" />
+    <ClInclude Include="..\src\nvimage\ImageIO.h" />
+    <ClInclude Include="..\src\nvimage\NormalMap.h" />
+    <ClInclude Include="..\src\nvimage\NormalMipmap.h" />
+    <ClInclude Include="..\src\nvimage\nvimage.h" />
+    <ClInclude Include="..\src\nvimage\PixelFormat.h" />
+    <ClInclude Include="..\src\nvimage\PsdFile.h" />
+    <ClInclude Include="..\src\nvimage\Quantize.h" />
+    <ClInclude Include="..\src\nvimage\TgaFile.h" />
+    <ClInclude Include="..\src\nvmath\Basis.h" />
+    <ClInclude Include="..\src\nvmath\Box.h" />
+    <ClInclude Include="..\src\nvmath\Color.h" />
+    <ClInclude Include="..\src\nvmath\Matrix.h" />
+    <ClInclude Include="..\src\nvmath\Montecarlo.h" />
+    <ClInclude Include="..\src\nvmath\nvmath.h" />
+    <ClInclude Include="..\src\nvmath\Plane.h" />
+    <ClInclude Include="..\src\nvmath\Quaternion.h" />
+    <ClInclude Include="..\src\nvmath\Random.h" />
+    <ClInclude Include="..\src\nvmath\SphericalHarmonic.h" />
+    <ClInclude Include="..\src\nvmath\Triangle.h" />
+    <ClInclude Include="..\src\nvmath\Vector.h" />
+    <ClInclude Include="..\src\nvtt\CompressDXT.h" />
+    <ClInclude Include="..\src\nvtt\CompressionOptions.h" />
+    <ClInclude Include="..\src\nvtt\Compressor.h" />
+    <ClInclude Include="..\src\nvtt\CompressRGB.h" />
+    <ClInclude Include="..\src\nvtt\cuda\Bitmaps.h" />
+    <ClInclude Include="..\src\nvtt\cuda\CudaCompressDXT.h" />
+    <ClInclude Include="..\src\nvtt\cuda\CudaMath.h" />
+    <ClInclude Include="..\src\nvtt\cuda\CudaUtils.h" />
+    <ClInclude Include="..\src\nvtt\InputOptions.h" />
+    <ClInclude Include="..\src\nvtt\nvtt.h" />
+    <ClInclude Include="..\src\nvtt\nvtt_wrapper.h" />
+    <ClInclude Include="..\src\nvtt\OptimalCompressDXT.h" />
+    <ClInclude Include="..\src\nvtt\OutputOptions.h" />
+    <ClInclude Include="..\src\nvtt\QuickCompressDXT.h" />
+    <ClInclude Include="..\src\nvtt\SingleColorLookup.h" />
+    <ClInclude Include="..\src\nvtt\squish\alpha.h" />
+    <ClInclude Include="..\src\nvtt\squish\clusterfit.h" />
+    <ClInclude Include="..\src\nvtt\squish\colourblock.h" />
+    <ClInclude Include="..\src\nvtt\squish\colourfit.h" />
+    <ClInclude Include="..\src\nvtt\squish\colourset.h" />
+    <ClInclude Include="..\src\nvtt\squish\config.h" />
+    <ClInclude Include="..\src\nvtt\squish\fastclusterfit.h" />
+    <ClInclude Include="..\src\nvtt\squish\maths.h" />
+    <ClInclude Include="..\src\nvtt\squish\rangefit.h" />
+    <ClInclude Include="..\src\nvtt\squish\simd.h" />
+    <ClInclude Include="..\src\nvtt\squish\simd_3dnow.h" />
+    <ClInclude Include="..\src\nvtt\squish\simd_sse.h" />
+    <ClInclude Include="..\src\nvtt\squish\simd_ve.h" />
+    <ClInclude Include="..\src\nvtt\squish\singlechannelfit.h" />
+    <ClInclude Include="..\src\nvtt\squish\singlecolourfit.h" />
+    <ClInclude Include="..\src\nvtt\squish\squish.h" />
+    <ClInclude Include="..\src\nvtt\squish\weightedclusterfit.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\src\nvcore\Debug.cpp" />
+    <ClCompile Include="..\src\nvcore\Library.cpp" />
+    <ClCompile Include="..\src\nvcore\Memory.cpp" />
+    <ClCompile Include="..\src\nvcore\poshlib\posh.c" />
+    <ClCompile Include="..\src\nvcore\Radix.cpp" />
+    <ClCompile Include="..\src\nvcore\StrLib.cpp" />
+    <ClCompile Include="..\src\nvcore\TextReader.cpp" />
+    <ClCompile Include="..\src\nvcore\TextWriter.cpp" />
+    <ClCompile Include="..\src\nvcore\Tokenizer.cpp" />
+    <ClCompile Include="..\src\nvimage\BlockDXT.cpp" />
+    <ClCompile Include="..\src\nvimage\ColorBlock.cpp" />
+    <ClCompile Include="..\src\nvimage\ConeMap.cpp" />
+    <ClCompile Include="..\src\nvimage\DirectDrawSurface.cpp" />
+    <ClCompile Include="..\src\nvimage\Filter.cpp" />
+    <ClCompile Include="..\src\nvimage\FloatImage.cpp" />
+    <ClCompile Include="..\src\nvimage\HoleFilling.cpp" />
+    <ClCompile Include="..\src\nvimage\Image.cpp" />
+    <ClCompile Include="..\src\nvimage\ImageIO.cpp" />
+    <ClCompile Include="..\src\nvimage\NormalMap.cpp" />
+    <ClCompile Include="..\src\nvimage\NormalMipmap.cpp" />
+    <ClCompile Include="..\src\nvimage\Quantize.cpp" />
+    <ClCompile Include="..\src\nvmath\Basis.cpp" />
+    <ClCompile Include="..\src\nvmath\Montecarlo.cpp" />
+    <ClCompile Include="..\src\nvmath\Plane.cpp" />
+    <ClCompile Include="..\src\nvmath\Random.cpp" />
+    <ClCompile Include="..\src\nvmath\SphericalHarmonic.cpp" />
+    <ClCompile Include="..\src\nvmath\Triangle.cpp" />
+    <ClCompile Include="..\src\nvmath\TriBox.cpp" />
+    <ClCompile Include="..\src\nvtt\CompressDXT.cpp" />
+    <ClCompile Include="..\src\nvtt\CompressionOptions.cpp" />
+    <ClCompile Include="..\src\nvtt\Compressor.cpp" />
+    <ClCompile Include="..\src\nvtt\CompressRGB.cpp" />
+    <ClCompile Include="..\src\nvtt\cuda\CudaCompressDXT.cpp" />
+    <ClCompile Include="..\src\nvtt\cuda\CudaUtils.cpp" />
+    <ClCompile Include="..\src\nvtt\InputOptions.cpp" />
+    <ClCompile Include="..\src\nvtt\nvtt.cpp" />
+    <ClCompile Include="..\src\nvtt\nvtt_wrapper.cpp" />
+    <ClCompile Include="..\src\nvtt\OptimalCompressDXT.cpp" />
+    <ClCompile Include="..\src\nvtt\OutputOptions.cpp" />
+    <ClCompile Include="..\src\nvtt\QuickCompressDXT.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\alpha.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\clusterfit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\colourblock.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\colourfit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\colourset.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\fastclusterfit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\maths.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\rangefit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\singlechannelfit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\singlecolourfit.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\squish.cpp" />
+    <ClCompile Include="..\src\nvtt\squish\weightedclusterfit.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="..\src\nvtt\squish\singlecolourlookup.inl" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/crypto/vs2022/crypto.vcxproj b/src/3rd party/crypto/vs2022/crypto.vcxproj
new file mode 100644
index 0000000..3f8d578
--- /dev/null
+++ b/src/3rd party/crypto/vs2022/crypto.vcxproj	
@@ -0,0 +1,312 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{FA169092-EA3E-40C1-8E5A-A2B575700FE8}</ProjectGuid>
+    <RootNamespace>crypto</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <TargetName>$(ProjectName)</TargetName>
+    <TargetExt>.lib</TargetExt>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <TargetName>$(ProjectName)</TargetName>
+    <TargetExt>.lib</TargetExt>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <TargetName>$(ProjectName)</TargetName>
+    <TargetExt>.lib</TargetExt>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\openssl;$(xrSdkDir)include;$(SolutionDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>CRYPTO_BUILD;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4005;4996</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\openssl;$(xrSdkDir)include;$(SolutionDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;CRYPTO_BUILD;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <DisableSpecificWarnings>4005;4996</DisableSpecificWarnings>
+      <Optimization>Disabled</Optimization>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+    </ClCompile>
+    <Link>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>..\openssl;$(xrSdkDir)include;$(SolutionDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>CRYPTO_BUILD;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4005;4996</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\crypto.cpp" />
+    <ClCompile Include="..\openssl\src\asn1_lib.c" />
+    <ClCompile Include="..\openssl\src\a_bitstr.c" />
+    <ClCompile Include="..\openssl\src\a_d2i_fp.c" />
+    <ClCompile Include="..\openssl\src\a_dup.c" />
+    <ClCompile Include="..\openssl\src\a_int.c" />
+    <ClCompile Include="..\openssl\src\a_object.c" />
+    <ClCompile Include="..\openssl\src\a_type.c" />
+    <ClCompile Include="..\openssl\src\bio_lib.c" />
+    <ClCompile Include="..\openssl\src\bn_add.c" />
+    <ClCompile Include="..\openssl\src\bn_asm.c" />
+    <ClCompile Include="..\openssl\src\bn_blind.c" />
+    <ClCompile Include="..\openssl\src\bn_ctx.c" />
+    <ClCompile Include="..\openssl\src\bn_div.c" />
+    <ClCompile Include="..\openssl\src\bn_exp.c" />
+    <ClCompile Include="..\openssl\src\bn_exp2.c" />
+    <ClCompile Include="..\openssl\src\bn_gcd.c" />
+    <ClCompile Include="..\openssl\src\bn_kron.c" />
+    <ClCompile Include="..\openssl\src\bn_lib.c" />
+    <ClCompile Include="..\openssl\src\bn_mod.c" />
+    <ClCompile Include="..\openssl\src\bn_mont.c" />
+    <ClCompile Include="..\openssl\src\bn_mul.c" />
+    <ClCompile Include="..\openssl\src\bn_prime.c" />
+    <ClCompile Include="..\openssl\src\bn_print.c" />
+    <ClCompile Include="..\openssl\src\bn_rand.c" />
+    <ClCompile Include="..\openssl\src\bn_recp.c" />
+    <ClCompile Include="..\openssl\src\bn_shift.c" />
+    <ClCompile Include="..\openssl\src\bn_sqr.c" />
+    <ClCompile Include="..\openssl\src\bn_sqrt.c" />
+    <ClCompile Include="..\openssl\src\bn_word.c" />
+    <ClCompile Include="..\openssl\src\bss_file.c" />
+    <ClCompile Include="..\openssl\src\buffer.c" />
+    <ClCompile Include="..\openssl\src\buf_str.c" />
+    <ClCompile Include="..\openssl\src\b_print.c" />
+    <ClCompile Include="..\openssl\src\cryptlib.c" />
+    <ClCompile Include="..\openssl\src\dh_check.c" />
+    <ClCompile Include="..\openssl\src\dh_key.c" />
+    <ClCompile Include="..\openssl\src\dh_lib.c" />
+    <ClCompile Include="..\openssl\src\digest.c" />
+    <ClCompile Include="..\openssl\src\dsa_asn1.c" />
+    <ClCompile Include="..\openssl\src\dsa_depr.c" />
+    <ClCompile Include="..\openssl\src\dsa_err.c" />
+    <ClCompile Include="..\openssl\src\dsa_gen.c" />
+    <ClCompile Include="..\openssl\src\dsa_key.c" />
+    <ClCompile Include="..\openssl\src\dsa_lib.c" />
+    <ClCompile Include="..\openssl\src\dsa_ossl.c" />
+    <ClCompile Include="..\openssl\src\dsa_sign.c" />
+    <ClCompile Include="..\openssl\src\dsa_utl.c" />
+    <ClCompile Include="..\openssl\src\dsa_vrf.c" />
+    <ClCompile Include="..\openssl\src\eng_ctrl.c" />
+    <ClCompile Include="..\openssl\src\eng_init.c" />
+    <ClCompile Include="..\openssl\src\eng_lib.c" />
+    <ClCompile Include="..\openssl\src\eng_list.c" />
+    <ClCompile Include="..\openssl\src\eng_table.c" />
+    <ClCompile Include="..\openssl\src\err.c" />
+    <ClCompile Include="..\openssl\src\err_def.c" />
+    <ClCompile Include="..\openssl\src\ex_data.c" />
+    <ClCompile Include="..\openssl\src\lhash.c" />
+    <ClCompile Include="..\openssl\src\md_rand.c" />
+    <ClCompile Include="..\openssl\src\mem.c" />
+    <ClCompile Include="..\openssl\src\mem_clr.c" />
+    <ClCompile Include="..\openssl\src\m_sha1.c" />
+    <ClCompile Include="..\openssl\src\obj_dat.c" />
+    <ClCompile Include="..\openssl\src\obj_lib.c" />
+    <ClCompile Include="..\openssl\src\rand_eng.c" />
+    <ClCompile Include="..\openssl\src\rand_lib.c" />
+    <ClCompile Include="..\openssl\src\rand_win.c" />
+    <ClCompile Include="..\openssl\src\rsa_lib.c" />
+    <ClCompile Include="..\openssl\src\rsa_sign.c" />
+    <ClCompile Include="..\openssl\src\sha1dgst.c" />
+    <ClCompile Include="..\openssl\src\sha1_one.c" />
+    <ClCompile Include="..\openssl\src\sha256.c" />
+    <ClCompile Include="..\openssl\src\sha512.c" />
+    <ClCompile Include="..\openssl\src\sha_dgst.c" />
+    <ClCompile Include="..\openssl\src\sha_one.c" />
+    <ClCompile Include="..\openssl\src\stack.c" />
+    <ClCompile Include="..\openssl\src\tasn_dec.c" />
+    <ClCompile Include="..\openssl\src\tasn_enc.c" />
+    <ClCompile Include="..\openssl\src\tasn_fre.c" />
+    <ClCompile Include="..\openssl\src\tasn_new.c" />
+    <ClCompile Include="..\openssl\src\tasn_typ.c" />
+    <ClCompile Include="..\openssl\src\tasn_utl.c" />
+    <ClCompile Include="..\openssl\src\tb_dh.c" />
+    <ClCompile Include="..\openssl\src\tb_digest.c" />
+    <ClCompile Include="..\openssl\src\tb_dsa.c" />
+    <ClCompile Include="..\openssl\src\tb_rand.c" />
+    <ClCompile Include="..\openssl\src\x_algor.c" />
+    <ClCompile Include="..\openssl\src\x_bignum.c" />
+    <ClCompile Include="..\openssl\src\x_long.c" />
+    <ClCompile Include="..\openssl\src\x_sig.c" />
+    <ClCompile Include="..\xr_dsa.cpp" />
+    <ClCompile Include="..\xr_sha.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\crypto.h" />
+    <ClInclude Include="..\crypto_api_def.h" />
+    <ClInclude Include="..\openssl\openssl\aes.h" />
+    <ClInclude Include="..\openssl\openssl\asn1.h" />
+    <ClInclude Include="..\openssl\openssl\asn1t.h" />
+    <ClInclude Include="..\openssl\openssl\asn1_mac.h" />
+    <ClInclude Include="..\openssl\openssl\bio.h" />
+    <ClInclude Include="..\openssl\openssl\blowfish.h" />
+    <ClInclude Include="..\openssl\openssl\bn.h" />
+    <ClInclude Include="..\openssl\openssl\buffer.h" />
+    <ClInclude Include="..\openssl\openssl\cast.h" />
+    <ClInclude Include="..\openssl\openssl\comp.h" />
+    <ClInclude Include="..\openssl\openssl\conf.h" />
+    <ClInclude Include="..\openssl\openssl\conf_api.h" />
+    <ClInclude Include="..\openssl\openssl\crypto.h" />
+    <ClInclude Include="..\openssl\openssl\des.h" />
+    <ClInclude Include="..\openssl\openssl\des_old.h" />
+    <ClInclude Include="..\openssl\openssl\dh.h" />
+    <ClInclude Include="..\openssl\openssl\dsa.h" />
+    <ClInclude Include="..\openssl\openssl\dso.h" />
+    <ClInclude Include="..\openssl\openssl\dtls1.h" />
+    <ClInclude Include="..\openssl\openssl\ebcdic.h" />
+    <ClInclude Include="..\openssl\openssl\ec.h" />
+    <ClInclude Include="..\openssl\openssl\ecdh.h" />
+    <ClInclude Include="..\openssl\openssl\ecdsa.h" />
+    <ClInclude Include="..\openssl\openssl\engine.h" />
+    <ClInclude Include="..\openssl\openssl\err.h" />
+    <ClInclude Include="..\openssl\openssl\evp.h" />
+    <ClInclude Include="..\openssl\openssl\e_os2.h" />
+    <ClInclude Include="..\openssl\openssl\hmac.h" />
+    <ClInclude Include="..\openssl\openssl\idea.h" />
+    <ClInclude Include="..\openssl\openssl\krb5_asn.h" />
+    <ClInclude Include="..\openssl\openssl\kssl.h" />
+    <ClInclude Include="..\openssl\openssl\lhash.h" />
+    <ClInclude Include="..\openssl\openssl\md2.h" />
+    <ClInclude Include="..\openssl\openssl\md4.h" />
+    <ClInclude Include="..\openssl\openssl\md5.h" />
+    <ClInclude Include="..\openssl\openssl\objects.h" />
+    <ClInclude Include="..\openssl\openssl\obj_mac.h" />
+    <ClInclude Include="..\openssl\openssl\ocsp.h" />
+    <ClInclude Include="..\openssl\openssl\opensslconf.h" />
+    <ClInclude Include="..\openssl\openssl\opensslv.h" />
+    <ClInclude Include="..\openssl\openssl\ossl_typ.h" />
+    <ClInclude Include="..\openssl\openssl\pem.h" />
+    <ClInclude Include="..\openssl\openssl\pem2.h" />
+    <ClInclude Include="..\openssl\openssl\pkcs12.h" />
+    <ClInclude Include="..\openssl\openssl\pkcs7.h" />
+    <ClInclude Include="..\openssl\openssl\pqueue.h" />
+    <ClInclude Include="..\openssl\openssl\pq_compat.h" />
+    <ClInclude Include="..\openssl\openssl\rand.h" />
+    <ClInclude Include="..\openssl\openssl\rc2.h" />
+    <ClInclude Include="..\openssl\openssl\rc4.h" />
+    <ClInclude Include="..\openssl\openssl\ripemd.h" />
+    <ClInclude Include="..\openssl\openssl\rsa.h" />
+    <ClInclude Include="..\openssl\openssl\safestack.h" />
+    <ClInclude Include="..\openssl\openssl\sha.h" />
+    <ClInclude Include="..\openssl\openssl\ssl.h" />
+    <ClInclude Include="..\openssl\openssl\ssl2.h" />
+    <ClInclude Include="..\openssl\openssl\ssl23.h" />
+    <ClInclude Include="..\openssl\openssl\ssl3.h" />
+    <ClInclude Include="..\openssl\openssl\stack.h" />
+    <ClInclude Include="..\openssl\openssl\store.h" />
+    <ClInclude Include="..\openssl\openssl\symhacks.h" />
+    <ClInclude Include="..\openssl\openssl\tls1.h" />
+    <ClInclude Include="..\openssl\openssl\tmdiff.h" />
+    <ClInclude Include="..\openssl\openssl\txt_db.h" />
+    <ClInclude Include="..\openssl\openssl\ui.h" />
+    <ClInclude Include="..\openssl\openssl\ui_compat.h" />
+    <ClInclude Include="..\openssl\openssl\x509.h" />
+    <ClInclude Include="..\openssl\openssl\x509v3.h" />
+    <ClInclude Include="..\openssl\openssl\x509_vfy.h" />
+    <ClInclude Include="..\openssl\src\bio_lcl.h" />
+    <ClInclude Include="..\openssl\src\bn_lcl.h" />
+    <ClInclude Include="..\openssl\src\bn_prime.h" />
+    <ClInclude Include="..\openssl\src\cryptlib.h" />
+    <ClInclude Include="..\openssl\src\eng_int.h" />
+    <ClInclude Include="..\openssl\src\evp_locl.h" />
+    <ClInclude Include="..\openssl\src\e_os.h" />
+    <ClInclude Include="..\openssl\src\md32_common.h" />
+    <ClInclude Include="..\openssl\src\obj_dat.h" />
+    <ClInclude Include="..\openssl\src\rand_lcl.h" />
+    <ClInclude Include="..\openssl\src\sha_locl.h" />
+    <ClInclude Include="..\xr_dsa.h" />
+    <ClInclude Include="..\xr_sha.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)xrCore\vs2022\xrCore.vcxproj">
+      <Project>{a0f7d1fb-59a7-4717-a7e4-96f37e91998e}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/crypto/vs2022/crypto.vcxproj.filters b/src/3rd party/crypto/vs2022/crypto.vcxproj.filters
new file mode 100644
index 0000000..b53bf89
--- /dev/null
+++ b/src/3rd party/crypto/vs2022/crypto.vcxproj.filters	
@@ -0,0 +1,554 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+    </Filter>
+    <Filter Include="Header Files">
+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+      <Extensions>h;hpp;hxx;hm;inl;inc;xsd</Extensions>
+    </Filter>
+    <Filter Include="openssl">
+      <UniqueIdentifier>{9ed2ea7b-887b-4c29-9bce-26d5a1d026a2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="openssl\include">
+      <UniqueIdentifier>{a4c71a21-fbf2-41f5-97e5-e42f64a1f57e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="openssl\src">
+      <UniqueIdentifier>{b150b5ce-88f2-4b85-8e4a-a46f41f2051c}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\crypto.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\asn1_lib.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\a_bitstr.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\a_d2i_fp.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\a_dup.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\a_int.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\a_object.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\a_type.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bio_lib.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_add.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_asm.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_blind.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_ctx.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_div.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_exp.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_exp2.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_gcd.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_kron.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_lib.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_mod.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_mont.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_mul.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_prime.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_print.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_rand.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_recp.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_shift.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_sqr.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_sqrt.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bn_word.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\bss_file.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\buffer.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\buf_str.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\b_print.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\cryptlib.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dh_check.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dh_key.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dh_lib.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\digest.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dsa_asn1.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dsa_depr.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dsa_err.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dsa_gen.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dsa_key.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dsa_lib.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dsa_ossl.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dsa_sign.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dsa_utl.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\dsa_vrf.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\eng_ctrl.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\eng_init.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\eng_lib.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\eng_list.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\eng_table.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\err.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\err_def.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\ex_data.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\lhash.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\md_rand.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\mem.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\mem_clr.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\m_sha1.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\obj_dat.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\obj_lib.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\rand_eng.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\rand_lib.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\rand_win.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\rsa_lib.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\rsa_sign.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\sha1dgst.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\sha1_one.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\sha256.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\sha512.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\sha_dgst.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\sha_one.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\stack.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\tasn_dec.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\tasn_enc.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\tasn_fre.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\tasn_new.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\tasn_typ.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\tasn_utl.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\tb_dh.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\tb_digest.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\tb_dsa.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\tb_rand.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\x_algor.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\x_bignum.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\x_long.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\openssl\src\x_sig.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xr_dsa.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xr_sha.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\crypto.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\crypto_api_def.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\aes.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\asn1.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\asn1t.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\asn1_mac.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\bio.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\blowfish.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\bn.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\buffer.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\cast.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\comp.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\conf.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\conf_api.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\crypto.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\des.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\des_old.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\dh.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\dsa.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\dso.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\dtls1.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ebcdic.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ec.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ecdh.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ecdsa.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\engine.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\err.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\evp.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\e_os2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\hmac.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\idea.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\krb5_asn.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\kssl.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\lhash.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\md2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\md4.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\md5.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\objects.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\obj_mac.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ocsp.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\opensslconf.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\opensslv.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ossl_typ.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\pem.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\pem2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\pkcs12.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\pkcs7.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\pqueue.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\pq_compat.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\rand.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\rc2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\rc4.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ripemd.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\rsa.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\safestack.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\sha.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ssl.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ssl2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ssl23.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ssl3.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\stack.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\store.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\symhacks.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\tls1.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\tmdiff.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\txt_db.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ui.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\ui_compat.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\x509.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\x509v3.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\openssl\x509_vfy.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\src\bio_lcl.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\src\bn_lcl.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\src\bn_prime.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\src\cryptlib.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\src\eng_int.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\src\evp_locl.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\src\e_os.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\src\md32_common.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\src\obj_dat.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\src\rand_lcl.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\openssl\src\sha_locl.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xr_dsa.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xr_sha.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/cximage/vs2022/cximage.vcxproj b/src/3rd party/cximage/vs2022/cximage.vcxproj
new file mode 100644
index 0000000..e808c49
--- /dev/null
+++ b/src/3rd party/cximage/vs2022/cximage.vcxproj	
@@ -0,0 +1,206 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectName>CxImage</ProjectName>
+    <ProjectGuid>{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}</ProjectGuid>
+    <Keyword>MFCProj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <UseOfMfc>false</UseOfMfc>
+    <CharacterSet>MultiByte</CharacterSet>
+    <CLRSupport>false</CLRSupport>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC60.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC60.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC60.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <TargetName>$(ProjectName)</TargetName>
+    <TargetExt>.lib</TargetExt>
+    <LibraryPath>$(VC_LibraryPath_x86);$(WindowsSDK_LibraryPath_x86)</LibraryPath>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <TargetName>$(ProjectName)</TargetName>
+    <TargetExt>.lib</TargetExt>
+    <LibraryPath>$(VC_LibraryPath_x86);$(WindowsSDK_LibraryPath_x86)</LibraryPath>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <TargetName>$(ProjectName)</TargetName>
+    <TargetExt>.lib</TargetExt>
+    <LibraryPath>$(VC_LibraryPath_x86);$(WindowsSDK_LibraryPath_x86)</LibraryPath>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(XRAY_16X_LIBS);$(SolutionDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_LIB;JAS_WIN_MSVC_BUILD;CXIMAGE_BUILD;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4995;4100;4702;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0809</Culture>
+    </ResourceCompile>
+    <Lib>
+      <AdditionalOptions>/ignore:4075 %(AdditionalOptions)</AdditionalOptions>
+      <OutputFile>$(OutDir)$(ProjectName).lib</OutputFile>
+      <AdditionalLibraryDirectories>$(XRAY_16X_LIBS)\jpeg\libraries\Release;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+    </Lib>
+    <Bscmake>
+      <OutputFile>.\Release/cximage.bsc</OutputFile>
+    </Bscmake>
+    <Link />
+    <Link>
+      <AdditionalLibraryDirectories>$(XRAY_16X_LIBS)\jpeg-8c\Release\;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <AdditionalIncludeDirectories>$(XRAY_16X_LIBS);$(SolutionDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_LIB;JAS_WIN_MSVC_BUILD;CXIMAGE_BUILD;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4995;4100;4702;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0809</Culture>
+    </ResourceCompile>
+    <Lib>
+      <AdditionalOptions>/ignore:4075 %(AdditionalOptions)</AdditionalOptions>
+      <OutputFile>$(OutDir)$(ProjectName).lib</OutputFile>
+      <AdditionalLibraryDirectories>$(XRAY_16X_LIBS)\jpeg\libraries\Release;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <IgnoreAllDefaultLibraries>true</IgnoreAllDefaultLibraries>
+      <LinkTimeCodeGeneration>false</LinkTimeCodeGeneration>
+    </Lib>
+    <Bscmake>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <OutputFile>.\Release/cximage.bsc</OutputFile>
+    </Bscmake>
+    <Link />
+    <Link>
+      <AdditionalLibraryDirectories>$(XRAY_16X_LIBS)\jpeg-8c\Release\;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(XRAY_16X_LIBS);$(SolutionDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_LIB;JAS_WIN_MSVC_BUILD;CXIMAGE_BUILD;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4995;4100;4702;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0809</Culture>
+    </ResourceCompile>
+    <Lib>
+      <AdditionalOptions>/ignore:4075 %(AdditionalOptions)</AdditionalOptions>
+      <OutputFile>$(OutDir)$(ProjectName).lib</OutputFile>
+      <AdditionalLibraryDirectories>$(XRAY_16X_LIBS)\jpeg\libraries\Release;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+    </Lib>
+    <Bscmake>
+      <OutputFile>.\Release/cximage.bsc</OutputFile>
+    </Bscmake>
+    <Link />
+    <Link>
+      <AdditionalLibraryDirectories>$(XRAY_16X_LIBS)\jpeg-8c\Release\;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\ximacfg.cpp" />
+    <ClCompile Include="..\ximaenc.cpp" />
+    <ClCompile Include="..\ximaexif.cpp" />
+    <ClCompile Include="..\xImage.cpp" />
+    <ClCompile Include="..\ximainfo.cpp" />
+    <ClCompile Include="..\ximaint.cpp" />
+    <ClCompile Include="..\ximajpg.cpp" />
+    <ClCompile Include="..\ximalpha.cpp" />
+    <ClCompile Include="..\ximalyr.cpp" />
+    <ClCompile Include="..\ximapal.cpp" />
+    <ClCompile Include="..\ximasel.cpp" />
+    <ClCompile Include="..\ximath.cpp" />
+    <ClCompile Include="..\xmemfile.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\xfile.h" />
+    <ClInclude Include="..\ximacfg.h" />
+    <ClInclude Include="..\ximadef.h" />
+    <ClInclude Include="..\ximage.h" />
+    <ClInclude Include="..\ximaiter.h" />
+    <ClInclude Include="..\ximajpg.h" />
+    <ClInclude Include="..\ximath.h" />
+    <ClInclude Include="..\xiofile.h" />
+    <ClInclude Include="..\xmemfile.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\..\..\xrCore\vs2022\xrCore.vcxproj">
+      <Project>{a0f7d1fb-59a7-4717-a7e4-96f37e91998e}</Project>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/cximage/vs2022/cximage.vcxproj.filters b/src/3rd party/cximage/vs2022/cximage.vcxproj.filters
new file mode 100644
index 0000000..67d25cb
--- /dev/null
+++ b/src/3rd party/cximage/vs2022/cximage.vcxproj.filters	
@@ -0,0 +1,83 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{809204d4-54e2-4efc-8562-d4d26b493cb0}</UniqueIdentifier>
+      <Extensions>cpp;c;cxx;rc;def;r;odl;idl;hpj;bat</Extensions>
+    </Filter>
+    <Filter Include="Header Files">
+      <UniqueIdentifier>{9ef7aa3b-52be-4021-835b-decbb0f3b1f9}</UniqueIdentifier>
+      <Extensions>h;hpp;hxx;hm;inl</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\ximacfg.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\ximaenc.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\ximaexif.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xImage.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\ximainfo.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\ximaint.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\ximajpg.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\ximalpha.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\ximalyr.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\ximapal.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\ximasel.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\ximath.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xmemfile.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\xfile.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\ximacfg.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\ximadef.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\ximage.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\ximaiter.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\ximajpg.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\ximath.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xiofile.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xmemfile.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/imgui/imgui.h b/src/3rd party/imgui/imgui.h
new file mode 100644
index 0000000..79fb987
--- /dev/null
+++ b/src/3rd party/imgui/imgui.h	
@@ -0,0 +1,3172 @@
+// dear imgui, v1.86
+// (headers)
+
+// Help:
+// - Read FAQ at http://dearimgui.org/faq
+// - Newcomers, read 'Programmer guide' in imgui.cpp for notes on how to setup Dear ImGui in your codebase.
+// - Call and read ImGui::ShowDemoWindow() in imgui_demo.cpp. All applications in examples/ are doing that.
+// Read imgui.cpp for details, links and comments.
+
+// Resources:
+// - FAQ                   http://dearimgui.org/faq
+// - Homepage & latest     https://github.com/ocornut/imgui
+// - Releases & changelog  https://github.com/ocornut/imgui/releases
+// - Gallery               https://github.com/ocornut/imgui/issues/4451 (please post your screenshots/video there!)
+// - Wiki                  https://github.com/ocornut/imgui/wiki (lots of good stuff there)
+// - Glossary              https://github.com/ocornut/imgui/wiki/Glossary
+// - Issues & support      https://github.com/ocornut/imgui/issues
+
+// Getting Started?
+// - For first-time users having issues compiling/linking/running or issues loading fonts:
+//   please post in https://github.com/ocornut/imgui/discussions if you cannot find a solution in resources above.
+
+/*
+
+Index of this file:
+// [SECTION] Header mess
+// [SECTION] Forward declarations and basic types
+// [SECTION] Dear ImGui end-user API functions
+// [SECTION] Flags & Enumerations
+// [SECTION] Helpers: Memory allocations macros, ImVector<>
+// [SECTION] ImGuiStyle
+// [SECTION] ImGuiIO
+// [SECTION] Misc data structures (ImGuiInputTextCallbackData, ImGuiSizeCallbackData, ImGuiWindowClass, ImGuiPayload, ImGuiTableSortSpecs, ImGuiTableColumnSortSpecs)
+// [SECTION] Helpers (ImGuiOnceUponAFrame, ImGuiTextFilter, ImGuiTextBuffer, ImGuiStorage, ImGuiListClipper, ImColor)
+// [SECTION] Drawing API (ImDrawCallback, ImDrawCmd, ImDrawIdx, ImDrawVert, ImDrawChannel, ImDrawListSplitter, ImDrawFlags, ImDrawListFlags, ImDrawList, ImDrawData)
+// [SECTION] Font API (ImFontConfig, ImFontGlyph, ImFontGlyphRangesBuilder, ImFontAtlasFlags, ImFontAtlas, ImFont)
+// [SECTION] Viewports (ImGuiViewportFlags, ImGuiViewport)
+// [SECTION] Platform interface for multi-viewport support (ImGuiPlatformIO, ImGuiPlatformMonitor)
+// [SECTION] Obsolete functions and types
+
+*/
+
+#pragma once
+
+// Configuration file with compile-time options (edit imconfig.h or '#define IMGUI_USER_CONFIG "myfilename.h" from your build system')
+#ifdef IMGUI_USER_CONFIG
+#include IMGUI_USER_CONFIG
+#endif
+#if !defined(IMGUI_DISABLE_INCLUDE_IMCONFIG_H) || defined(IMGUI_INCLUDE_IMCONFIG_H)
+#include "imconfig.h"
+#endif
+
+#ifndef IMGUI_DISABLE
+
+//-----------------------------------------------------------------------------
+// [SECTION] Header mess
+//-----------------------------------------------------------------------------
+
+// Includes
+#include <float.h>                  // FLT_MIN, FLT_MAX
+#include <stdarg.h>                 // va_list, va_start, va_end
+#include <stddef.h>                 // ptrdiff_t, NULL
+#include <string.h>                 // memset, memmove, memcpy, strlen, strchr, strcpy, strcmp
+
+// Version
+// (Integer encoded as XYYZZ for use in #if preprocessor conditionals. Work in progress versions typically starts at XYY99 then bounce up to XYY00, XYY01 etc. when release tagging happens)
+#define IMGUI_VERSION               "1.86"
+#define IMGUI_VERSION_NUM           18600
+#define IMGUI_CHECKVERSION()        ImGui::DebugCheckVersionAndDataLayout(IMGUI_VERSION, sizeof(ImGuiIO), sizeof(ImGuiStyle), sizeof(ImVec2), sizeof(ImVec4), sizeof(ImDrawVert), sizeof(ImDrawIdx))
+#define IMGUI_HAS_TABLE
+#define IMGUI_HAS_VIEWPORT          // Viewport WIP branch
+#define IMGUI_HAS_DOCK              // Docking WIP branch
+
+// Define attributes of all API symbols declarations (e.g. for DLL under Windows)
+// IMGUI_API is used for core imgui functions, IMGUI_IMPL_API is used for the default backends files (imgui_impl_xxx.h)
+// Using dear imgui via a shared library is not recommended, because we don't guarantee backward nor forward ABI compatibility (also function call overhead, as dear imgui is a call-heavy API)
+#ifndef IMGUI_API
+#define IMGUI_API
+#endif
+#ifndef IMGUI_IMPL_API
+#define IMGUI_IMPL_API              IMGUI_API
+#endif
+
+// Helper Macros
+#ifndef IM_ASSERT
+#include <assert.h>
+#define IM_ASSERT(_EXPR)            assert(_EXPR)                               // You can override the default assert handler by editing imconfig.h
+#endif
+#define IM_ARRAYSIZE(_ARR)          ((int)(sizeof(_ARR) / sizeof(*(_ARR))))     // Size of a static C-style array. Don't use on pointers!
+#define IM_UNUSED(_VAR)             ((void)(_VAR))                              // Used to silence "unused variable warnings". Often useful as asserts may be stripped out from final builds.
+#if (__cplusplus >= 201100) || (defined(_MSVC_LANG) && _MSVC_LANG >= 201100)
+#define IM_OFFSETOF(_TYPE,_MEMBER)  offsetof(_TYPE, _MEMBER)                    // Offset of _MEMBER within _TYPE. Standardized as offsetof() in C++11
+#else
+#define IM_OFFSETOF(_TYPE,_MEMBER)  ((size_t)&(((_TYPE*)0)->_MEMBER))           // Offset of _MEMBER within _TYPE. Old style macro.
+#endif
+
+// Helper Macros - IM_FMTARGS, IM_FMTLIST: Apply printf-style warnings to our formatting functions.
+#if !defined(IMGUI_USE_STB_SPRINTF) && defined(__MINGW32__) && !defined(__clang__)
+#define IM_FMTARGS(FMT)             __attribute__((format(gnu_printf, FMT, FMT+1)))
+#define IM_FMTLIST(FMT)             __attribute__((format(gnu_printf, FMT, 0)))
+#elif !defined(IMGUI_USE_STB_SPRINTF) && (defined(__clang__) || defined(__GNUC__))
+#define IM_FMTARGS(FMT)             __attribute__((format(printf, FMT, FMT+1)))
+#define IM_FMTLIST(FMT)             __attribute__((format(printf, FMT, 0)))
+#else
+#define IM_FMTARGS(FMT)
+#define IM_FMTLIST(FMT)
+#endif
+
+// Disable some of MSVC most aggressive Debug runtime checks in function header/footer (used in some simple/low-level functions)
+#if defined(_MSC_VER) && !defined(__clang__) && !defined(IMGUI_DEBUG_PARANOID)
+#define IM_MSVC_RUNTIME_CHECKS_OFF      __pragma(runtime_checks("",off))     __pragma(check_stack(off)) __pragma(strict_gs_check(push,off))
+#define IM_MSVC_RUNTIME_CHECKS_RESTORE  __pragma(runtime_checks("",restore)) __pragma(check_stack())    __pragma(strict_gs_check(pop))
+#else
+#define IM_MSVC_RUNTIME_CHECKS_OFF
+#define IM_MSVC_RUNTIME_CHECKS_RESTORE
+#endif
+
+// Warnings
+#ifdef _MSC_VER
+#pragma warning (push)
+#pragma warning (disable: 26495)    // [Static Analyzer] Variable 'XXX' is uninitialized. Always initialize a member variable (type.6).
+#endif
+#if defined(__clang__)
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wold-style-cast"
+#if __has_warning("-Wzero-as-null-pointer-constant")
+#pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"
+#endif
+#elif defined(__GNUC__)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wpragmas"          // warning: unknown option after '#pragma GCC diagnostic' kind
+#pragma GCC diagnostic ignored "-Wclass-memaccess"  // [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
+#endif
+
+//-----------------------------------------------------------------------------
+// [SECTION] Forward declarations and basic types
+//-----------------------------------------------------------------------------
+
+// Forward declarations
+struct ImDrawChannel;               // Temporary storage to output draw commands out of order, used by ImDrawListSplitter and ImDrawList::ChannelsSplit()
+struct ImDrawCmd;                   // A single draw command within a parent ImDrawList (generally maps to 1 GPU draw call, unless it is a callback)
+struct ImDrawData;                  // All draw command lists required to render the frame + pos/size coordinates to use for the projection matrix.
+struct ImDrawList;                  // A single draw command list (generally one per window, conceptually you may see this as a dynamic "mesh" builder)
+struct ImDrawListSharedData;        // Data shared among multiple draw lists (typically owned by parent ImGui context, but you may create one yourself)
+struct ImDrawListSplitter;          // Helper to split a draw list into different layers which can be drawn into out of order, then flattened back.
+struct ImDrawVert;                  // A single vertex (pos + uv + col = 20 bytes by default. Override layout with IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT)
+struct ImFont;                      // Runtime data for a single font within a parent ImFontAtlas
+struct ImFontAtlas;                 // Runtime data for multiple fonts, bake multiple fonts into a single texture, TTF/OTF font loader
+struct ImFontBuilderIO;             // Opaque interface to a font builder (stb_truetype or FreeType).
+struct ImFontConfig;                // Configuration data when adding a font or merging fonts
+struct ImFontGlyph;                 // A single font glyph (code point + coordinates within in ImFontAtlas + offset)
+struct ImFontGlyphRangesBuilder;    // Helper to build glyph ranges from text/string data
+struct ImColor;                     // Helper functions to create a color that can be converted to either u32 or float4 (*OBSOLETE* please avoid using)
+struct ImGuiContext;                // Dear ImGui context (opaque structure, unless including imgui_internal.h)
+struct ImGuiIO;                     // Main configuration and I/O between your application and ImGui
+struct ImGuiInputTextCallbackData;  // Shared state of InputText() when using custom ImGuiInputTextCallback (rare/advanced use)
+struct ImGuiListClipper;            // Helper to manually clip large list of items
+struct ImGuiOnceUponAFrame;         // Helper for running a block of code not more than once a frame
+struct ImGuiPayload;                // User data payload for drag and drop operations
+struct ImGuiPlatformIO;             // Multi-viewport support: interface for Platform/Renderer backends + viewports to render
+struct ImGuiPlatformMonitor;        // Multi-viewport support: user-provided bounds for each connected monitor/display. Used when positioning popups and tooltips to avoid them straddling monitors
+struct ImGuiSizeCallbackData;       // Callback data when using SetNextWindowSizeConstraints() (rare/advanced use)
+struct ImGuiStorage;                // Helper for key->value storage
+struct ImGuiStyle;                  // Runtime data for styling/colors
+struct ImGuiTableSortSpecs;         // Sorting specifications for a table (often handling sort specs for a single column, occasionally more)
+struct ImGuiTableColumnSortSpecs;   // Sorting specification for one column of a table
+struct ImGuiTextBuffer;             // Helper to hold and append into a text buffer (~string builder)
+struct ImGuiTextFilter;             // Helper to parse and apply text filters (e.g. "aaaaa[,bbbbb][,ccccc]")
+struct ImGuiViewport;               // A Platform Window (always 1 unless multi-viewport are enabled. One per platform window to output to). In the future may represent Platform Monitor
+struct ImGuiWindowClass;            // Window class (rare/advanced uses: provide hints to the platform backend via altered viewport flags and parent/child info)
+
+// Enums/Flags (declared as int for compatibility with old C++, to allow using as flags without overhead, and to not pollute the top of this file)
+// - Tip: Use your programming IDE navigation facilities on the names in the _central column_ below to find the actual flags/enum lists!
+//   In Visual Studio IDE: CTRL+comma ("Edit.NavigateTo") can follow symbols in comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
+//   With Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols in comments.
+typedef int ImGuiCol;               // -> enum ImGuiCol_             // Enum: A color identifier for styling
+typedef int ImGuiCond;              // -> enum ImGuiCond_            // Enum: A condition for many Set*() functions
+typedef int ImGuiDataType;          // -> enum ImGuiDataType_        // Enum: A primary data type
+typedef int ImGuiDir;               // -> enum ImGuiDir_             // Enum: A cardinal direction
+typedef int ImGuiKey;               // -> enum ImGuiKey_             // Enum: A key identifier (ImGui-side enum)
+typedef int ImGuiNavInput;          // -> enum ImGuiNavInput_        // Enum: An input identifier for navigation
+typedef int ImGuiMouseButton;       // -> enum ImGuiMouseButton_     // Enum: A mouse button identifier (0=left, 1=right, 2=middle)
+typedef int ImGuiMouseCursor;       // -> enum ImGuiMouseCursor_     // Enum: A mouse cursor identifier
+typedef int ImGuiSortDirection;     // -> enum ImGuiSortDirection_   // Enum: A sorting direction (ascending or descending)
+typedef int ImGuiStyleVar;          // -> enum ImGuiStyleVar_        // Enum: A variable identifier for styling
+typedef int ImGuiTableBgTarget;     // -> enum ImGuiTableBgTarget_   // Enum: A color target for TableSetBgColor()
+typedef int ImDrawFlags;            // -> enum ImDrawFlags_          // Flags: for ImDrawList functions
+typedef int ImDrawListFlags;        // -> enum ImDrawListFlags_      // Flags: for ImDrawList instance
+typedef int ImFontAtlasFlags;       // -> enum ImFontAtlasFlags_     // Flags: for ImFontAtlas build
+typedef int ImGuiBackendFlags;      // -> enum ImGuiBackendFlags_    // Flags: for io.BackendFlags
+typedef int ImGuiButtonFlags;       // -> enum ImGuiButtonFlags_     // Flags: for InvisibleButton()
+typedef int ImGuiColorEditFlags;    // -> enum ImGuiColorEditFlags_  // Flags: for ColorEdit4(), ColorPicker4() etc.
+typedef int ImGuiConfigFlags;       // -> enum ImGuiConfigFlags_     // Flags: for io.ConfigFlags
+typedef int ImGuiComboFlags;        // -> enum ImGuiComboFlags_      // Flags: for BeginCombo()
+typedef int ImGuiDockNodeFlags;     // -> enum ImGuiDockNodeFlags_   // Flags: for DockSpace()
+typedef int ImGuiDragDropFlags;     // -> enum ImGuiDragDropFlags_   // Flags: for BeginDragDropSource(), AcceptDragDropPayload()
+typedef int ImGuiFocusedFlags;      // -> enum ImGuiFocusedFlags_    // Flags: for IsWindowFocused()
+typedef int ImGuiHoveredFlags;      // -> enum ImGuiHoveredFlags_    // Flags: for IsItemHovered(), IsWindowHovered() etc.
+typedef int ImGuiInputTextFlags;    // -> enum ImGuiInputTextFlags_  // Flags: for InputText(), InputTextMultiline()
+typedef int ImGuiKeyModFlags;       // -> enum ImGuiKeyModFlags_     // Flags: for io.KeyMods (Ctrl/Shift/Alt/Super)
+typedef int ImGuiPopupFlags;        // -> enum ImGuiPopupFlags_      // Flags: for OpenPopup*(), BeginPopupContext*(), IsPopupOpen()
+typedef int ImGuiSelectableFlags;   // -> enum ImGuiSelectableFlags_ // Flags: for Selectable()
+typedef int ImGuiSliderFlags;       // -> enum ImGuiSliderFlags_     // Flags: for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.
+typedef int ImGuiTabBarFlags;       // -> enum ImGuiTabBarFlags_     // Flags: for BeginTabBar()
+typedef int ImGuiTabItemFlags;      // -> enum ImGuiTabItemFlags_    // Flags: for BeginTabItem()
+typedef int ImGuiTableFlags;        // -> enum ImGuiTableFlags_      // Flags: For BeginTable()
+typedef int ImGuiTableColumnFlags;  // -> enum ImGuiTableColumnFlags_// Flags: For TableSetupColumn()
+typedef int ImGuiTableRowFlags;     // -> enum ImGuiTableRowFlags_   // Flags: For TableNextRow()
+typedef int ImGuiTreeNodeFlags;     // -> enum ImGuiTreeNodeFlags_   // Flags: for TreeNode(), TreeNodeEx(), CollapsingHeader()
+typedef int ImGuiViewportFlags;     // -> enum ImGuiViewportFlags_   // Flags: for ImGuiViewport
+typedef int ImGuiWindowFlags;       // -> enum ImGuiWindowFlags_     // Flags: for Begin(), BeginChild()
+
+// ImTexture: user data for renderer backend to identify a texture [Compile-time configurable type]
+// - To use something else than an opaque void* pointer: override with e.g. '#define ImTextureID MyTextureType*' in your imconfig.h file.
+// - This can be whatever to you want it to be! read the FAQ about ImTextureID for details.
+#ifndef ImTextureID
+typedef void* ImTextureID;          // Default: store a pointer or an integer fitting in a pointer (most renderer backends are ok with that)
+#endif
+
+// ImDrawIdx: vertex index. [Compile-time configurable type]
+// - To use 16-bit indices + allow large meshes: backend need to set 'io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset' and handle ImDrawCmd::VtxOffset (recommended).
+// - To use 32-bit indices: override with '#define ImDrawIdx unsigned int' in your imconfig.h file.
+#ifndef ImDrawIdx
+typedef unsigned short ImDrawIdx;   // Default: 16-bit (for maximum compatibility with renderer backends)
+#endif
+
+// Scalar data types
+typedef unsigned int        ImGuiID;// A unique ID used by widgets (typically the result of hashing a stack of string)
+typedef signed char         ImS8;   // 8-bit signed integer
+typedef unsigned char       ImU8;   // 8-bit unsigned integer
+typedef signed short        ImS16;  // 16-bit signed integer
+typedef unsigned short      ImU16;  // 16-bit unsigned integer
+typedef signed int          ImS32;  // 32-bit signed integer == int
+typedef unsigned int        ImU32;  // 32-bit unsigned integer (often used to store packed colors)
+#if defined(_MSC_VER) && !defined(__clang__)
+typedef signed   __int64    ImS64;  // 64-bit signed integer (pre and post C++11 with Visual Studio)
+typedef unsigned __int64    ImU64;  // 64-bit unsigned integer (pre and post C++11 with Visual Studio)
+#elif (defined(__clang__) || defined(__GNUC__)) && (__cplusplus < 201100)
+#include <stdint.h>
+typedef int64_t             ImS64;  // 64-bit signed integer (pre C++11)
+typedef uint64_t            ImU64;  // 64-bit unsigned integer (pre C++11)
+#else
+typedef signed   long long  ImS64;  // 64-bit signed integer (post C++11)
+typedef unsigned long long  ImU64;  // 64-bit unsigned integer (post C++11)
+#endif
+
+// Character types
+// (we generally use UTF-8 encoded string in the API. This is storage specifically for a decoded character used for keyboard input and display)
+typedef unsigned short ImWchar16;   // A single decoded U16 character/code point. We encode them as multi bytes UTF-8 when used in strings.
+typedef unsigned int ImWchar32;     // A single decoded U32 character/code point. We encode them as multi bytes UTF-8 when used in strings.
+#ifdef IMGUI_USE_WCHAR32            // ImWchar [configurable type: override in imconfig.h with '#define IMGUI_USE_WCHAR32' to support Unicode planes 1-16]
+typedef ImWchar32 ImWchar;
+#else
+typedef ImWchar16 ImWchar;
+#endif
+
+// Callback and functions types
+typedef int     (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);    // Callback function for ImGui::InputText()
+typedef void    (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);              // Callback function for ImGui::SetNextWindowSizeConstraints()
+typedef void* (*ImGuiMemAllocFunc)(size_t sz, void* user_data);               // Function signature for ImGui::SetAllocatorFunctions()
+typedef void    (*ImGuiMemFreeFunc)(void* ptr, void* user_data);                // Function signature for ImGui::SetAllocatorFunctions()
+
+// ImVec2: 2D vector used to store positions, sizes etc. [Compile-time configurable type]
+// This is a frequently used type in the API. Consider using IM_VEC2_CLASS_EXTRA to create implicit cast from/to our preferred type.
+IM_MSVC_RUNTIME_CHECKS_OFF
+struct ImVec2
+{
+    float                                   x, y;
+    ImVec2() { x = y = 0.0f; }
+    ImVec2(float _x, float _y) { x = _x; y = _y; }
+    float  operator[] (size_t idx) const { IM_ASSERT(idx <= 1); return (&x)[idx]; }    // We very rarely use this [] operator, the assert overhead is fine.
+    float& operator[] (size_t idx) { IM_ASSERT(idx <= 1); return (&x)[idx]; }    // We very rarely use this [] operator, the assert overhead is fine.
+#ifdef IM_VEC2_CLASS_EXTRA
+    IM_VEC2_CLASS_EXTRA     // Define additional constructors and implicit cast operators in imconfig.h to convert back and forth between your math types and ImVec2.
+#endif
+};
+
+// ImVec4: 4D vector used to store clipping rectangles, colors etc. [Compile-time configurable type]
+struct ImVec4
+{
+    float                                           x, y, z, w;
+    ImVec4() { x = y = z = w = 0.0f; }
+    ImVec4(float _x, float _y, float _z, float _w) { x = _x; y = _y; z = _z; w = _w; }
+#ifdef IM_VEC4_CLASS_EXTRA
+    IM_VEC4_CLASS_EXTRA     // Define additional constructors and implicit cast operators in imconfig.h to convert back and forth between your math types and ImVec4.
+#endif
+};
+IM_MSVC_RUNTIME_CHECKS_RESTORE
+
+//-----------------------------------------------------------------------------
+// [SECTION] Dear ImGui end-user API functions
+// (Note that ImGui:: being a namespace, you can add extra ImGui:: functions in your own separate file. Please don't modify imgui source files!)
+//-----------------------------------------------------------------------------
+
+namespace ImGui
+{
+    // Context creation and access
+    // - Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between contexts.
+    // - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()
+    //   for each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for details.
+    IMGUI_API ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL);
+    IMGUI_API void          DestroyContext(ImGuiContext* ctx = NULL);   // NULL = destroy current context
+    IMGUI_API ImGuiContext* GetCurrentContext();
+    IMGUI_API void          SetCurrentContext(ImGuiContext* ctx);
+
+    // Main
+    IMGUI_API ImGuiIO& GetIO();                                    // access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)
+    IMGUI_API ImGuiStyle& GetStyle();                                 // access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame!
+    IMGUI_API void          NewFrame();                                 // start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().
+    IMGUI_API void          EndFrame();                                 // ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!
+    IMGUI_API void          Render();                                   // ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData().
+    IMGUI_API ImDrawData* GetDrawData();                              // valid after Render() and until the next call to NewFrame(). this is what you have to render.
+
+    // Demo, Debug, Information
+    IMGUI_API void          ShowDemoWindow(bool* p_open = NULL);        // create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!
+    IMGUI_API void          ShowMetricsWindow(bool* p_open = NULL);     // create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.
+    IMGUI_API void          ShowStackToolWindow(bool* p_open = NULL);   // create Stack Tool window. hover items with mouse to query information about the source of their unique ID.
+    IMGUI_API void          ShowAboutWindow(bool* p_open = NULL);       // create About window. display Dear ImGui version, credits and build/system information.
+    IMGUI_API void          ShowStyleEditor(ImGuiStyle* ref = NULL);    // add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)
+    IMGUI_API bool          ShowStyleSelector(const char* label);       // add style selector block (not a window), essentially a combo listing the default styles.
+    IMGUI_API void          ShowFontSelector(const char* label);        // add font selector block (not a window), essentially a combo listing the loaded fonts.
+    IMGUI_API void          ShowUserGuide();                            // add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls).
+    IMGUI_API const char* GetVersion();                               // get the compiled version string e.g. "1.80 WIP" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)
+
+    // Styles
+    IMGUI_API void          StyleColorsDark(ImGuiStyle* dst = NULL);    // new, recommended style (default)
+    IMGUI_API void          StyleColorsLight(ImGuiStyle* dst = NULL);   // best used with borders and a custom, thicker font
+    IMGUI_API void          StyleColorsClassic(ImGuiStyle* dst = NULL); // classic imgui style
+
+    // Windows
+    // - Begin() = push window to the stack and start appending to it. End() = pop window from the stack.
+    // - Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,
+    //   which clicking will set the boolean to false when clicked.
+    // - You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.
+    //   Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().
+    // - Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting
+    //   anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!
+    //   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
+    //    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
+    //    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
+    // - Note that the bottom of window stack always contains a window called "Debug".
+    IMGUI_API bool          Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);
+    IMGUI_API void          End();
+
+    // Child Windows
+    // - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.
+    // - For each independent axis of 'size': ==0.0f: use remaining host window size / >0.0f: fixed size / <0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).
+    // - BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.
+    //   Always call a matching EndChild() for each BeginChild() call, regardless of its return value.
+    //   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
+    //    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
+    //    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
+    IMGUI_API bool          BeginChild(const char* str_id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0);
+    IMGUI_API bool          BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0);
+    IMGUI_API void          EndChild();
+
+    // Windows Utilities
+    // - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into.
+    IMGUI_API bool          IsWindowAppearing();
+    IMGUI_API bool          IsWindowCollapsed();
+    IMGUI_API bool          IsWindowFocused(ImGuiFocusedFlags flags = 0); // is current window focused? or its root/child, depending on flags. see flags for options.
+    IMGUI_API bool          IsWindowHovered(ImGuiHoveredFlags flags = 0); // is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!
+    IMGUI_API ImDrawList* GetWindowDrawList();                        // get draw list associated to the current window, to append your own drawing primitives
+    IMGUI_API float         GetWindowDpiScale();                        // get DPI scale currently associated to the current window's viewport.
+    IMGUI_API ImVec2        GetWindowPos();                             // get current window position in screen space (useful if you want to do your own drawing via the DrawList API)
+    IMGUI_API ImVec2        GetWindowSize();                            // get current window size
+    IMGUI_API float         GetWindowWidth();                           // get current window width (shortcut for GetWindowSize().x)
+    IMGUI_API float         GetWindowHeight();                          // get current window height (shortcut for GetWindowSize().y)
+    IMGUI_API ImGuiViewport* GetWindowViewport();                        // get viewport currently associated to the current window.
+
+    // Window manipulation
+    // - Prefer using SetNextXXX functions (before Begin) rather that SetXXX functions (after Begin).
+    IMGUI_API void          SetNextWindowPos(const ImVec2& pos, ImGuiCond cond = 0, const ImVec2& pivot = ImVec2(0, 0)); // set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.
+    IMGUI_API void          SetNextWindowSize(const ImVec2& size, ImGuiCond cond = 0);                  // set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()
+    IMGUI_API void          SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback = NULL, void* custom_callback_data = NULL); // set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints.
+    IMGUI_API void          SetNextWindowContentSize(const ImVec2& size);                               // set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()
+    IMGUI_API void          SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = 0);                 // set next window collapsed state. call before Begin()
+    IMGUI_API void          SetNextWindowFocus();                                                       // set next window to be focused / top-most. call before Begin()
+    IMGUI_API void          SetNextWindowBgAlpha(float alpha);                                          // set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.
+    IMGUI_API void          SetNextWindowViewport(ImGuiID viewport_id);                                 // set next window viewport
+    IMGUI_API void          SetWindowPos(const ImVec2& pos, ImGuiCond cond = 0);                        // (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.
+    IMGUI_API void          SetWindowSize(const ImVec2& size, ImGuiCond cond = 0);                      // (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.
+    IMGUI_API void          SetWindowCollapsed(bool collapsed, ImGuiCond cond = 0);                     // (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().
+    IMGUI_API void          SetWindowFocus();                                                           // (not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus().
+    IMGUI_API void          SetWindowFontScale(float scale);                                            // [OBSOLETE] set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes().
+    IMGUI_API void          SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond = 0);      // set named window position.
+    IMGUI_API void          SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond = 0);    // set named window size. set axis to 0.0f to force an auto-fit on this axis.
+    IMGUI_API void          SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond = 0);   // set named window collapsed state
+    IMGUI_API void          SetWindowFocus(const char* name);                                           // set named window to be focused / top-most. use NULL to remove focus.
+
+    // Content region
+    // - Retrieve available space from a given point. GetContentRegionAvail() is frequently useful.
+    // - Those functions are bound to be redesigned (they are confusing, incomplete and the Min/Max return values are in local window coordinates which increases confusion)
+    IMGUI_API ImVec2        GetContentRegionAvail();                                        // == GetContentRegionMax() - GetCursorPos()
+    IMGUI_API ImVec2        GetContentRegionMax();                                          // current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates
+    IMGUI_API ImVec2        GetWindowContentRegionMin();                                    // content boundaries min for the full window (roughly (0,0)-Scroll), in window coordinates
+    IMGUI_API ImVec2        GetWindowContentRegionMax();                                    // content boundaries max for the full window (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates
+
+    // Windows Scrolling
+    IMGUI_API float         GetScrollX();                                                   // get scrolling amount [0 .. GetScrollMaxX()]
+    IMGUI_API float         GetScrollY();                                                   // get scrolling amount [0 .. GetScrollMaxY()]
+    IMGUI_API void          SetScrollX(float scroll_x);                                     // set scrolling amount [0 .. GetScrollMaxX()]
+    IMGUI_API void          SetScrollY(float scroll_y);                                     // set scrolling amount [0 .. GetScrollMaxY()]
+    IMGUI_API float         GetScrollMaxX();                                                // get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x
+    IMGUI_API float         GetScrollMaxY();                                                // get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y
+    IMGUI_API void          SetScrollHereX(float center_x_ratio = 0.5f);                    // adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
+    IMGUI_API void          SetScrollHereY(float center_y_ratio = 0.5f);                    // adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
+    IMGUI_API void          SetScrollFromPosX(float local_x, float center_x_ratio = 0.5f);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
+    IMGUI_API void          SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
+
+    // Parameters stacks (shared)
+    IMGUI_API void          PushFont(ImFont* font);                                         // use NULL as a shortcut to push default font
+    IMGUI_API void          PopFont();
+    IMGUI_API void          PushStyleColor(ImGuiCol idx, ImU32 col);                        // modify a style color. always use this if you modify the style after NewFrame().
+    IMGUI_API void          PushStyleColor(ImGuiCol idx, const ImVec4& col);
+    IMGUI_API void          PopStyleColor(int count = 1);
+    IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, float val);                     // modify a style float variable. always use this if you modify the style after NewFrame().
+    IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, const ImVec2& val);             // modify a style ImVec2 variable. always use this if you modify the style after NewFrame().
+    IMGUI_API void          PopStyleVar(int count = 1);
+    IMGUI_API void          PushAllowKeyboardFocus(bool allow_keyboard_focus);              // == tab stop enable. Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets
+    IMGUI_API void          PopAllowKeyboardFocus();
+    IMGUI_API void          PushButtonRepeat(bool repeat);                                  // in 'repeat' mode, Button*() functions return repeated true in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.
+    IMGUI_API void          PopButtonRepeat();
+
+    // Parameters stacks (current window)
+    IMGUI_API void          PushItemWidth(float item_width);                                // push width of items for common large "item+label" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side).
+    IMGUI_API void          PopItemWidth();
+    IMGUI_API void          SetNextItemWidth(float item_width);                             // set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)
+    IMGUI_API float         CalcItemWidth();                                                // width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.
+    IMGUI_API void          PushTextWrapPos(float wrap_local_pos_x = 0.0f);                 // push word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space
+    IMGUI_API void          PopTextWrapPos();
+
+    // Style read access
+    // - Use the style editor (ShowStyleEditor() function) to interactively see what the colors are)
+    IMGUI_API ImFont* GetFont();                                                      // get current font
+    IMGUI_API float         GetFontSize();                                                  // get current font size (= height in pixels) of current font with current scale applied
+    IMGUI_API ImVec2        GetFontTexUvWhitePixel();                                       // get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API
+    IMGUI_API ImU32         GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f);              // retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList
+    IMGUI_API ImU32         GetColorU32(const ImVec4& col);                                 // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
+    IMGUI_API ImU32         GetColorU32(ImU32 col);                                         // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
+    IMGUI_API const ImVec4& GetStyleColorVec4(ImGuiCol idx);                                // retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.
+
+    // Cursor / Layout
+    // - By "cursor" we mean the current output position.
+    // - The typical widget behavior is to output themselves at the current cursor position, then move the cursor one line down.
+    // - You can call SameLine() between widgets to undo the last carriage return and output at the right of the preceding widget.
+    // - Attention! We currently have inconsistencies between window-local and absolute positions we will aim to fix with future API:
+    //    Window-local coordinates:   SameLine(), GetCursorPos(), SetCursorPos(), GetCursorStartPos(), GetContentRegionMax(), GetWindowContentRegion*(), PushTextWrapPos()
+    //    Absolute coordinate:        GetCursorScreenPos(), SetCursorScreenPos(), all ImDrawList:: functions.
+    IMGUI_API void          Separator();                                                    // separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.
+    IMGUI_API void          SameLine(float offset_from_start_x = 0.0f, float spacing = -1.0f);  // call between widgets or groups to layout them horizontally. X position given in window coordinates.
+    IMGUI_API void          NewLine();                                                      // undo a SameLine() or force a new line when in an horizontal-layout context.
+    IMGUI_API void          Spacing();                                                      // add vertical spacing.
+    IMGUI_API void          Dummy(const ImVec2& size);                                      // add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.
+    IMGUI_API void          Indent(float indent_w = 0.0f);                                  // move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0
+    IMGUI_API void          Unindent(float indent_w = 0.0f);                                // move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0
+    IMGUI_API void          BeginGroup();                                                   // lock horizontal starting position
+    IMGUI_API void          EndGroup();                                                     // unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
+    IMGUI_API ImVec2        GetCursorPos();                                                 // cursor position in window coordinates (relative to window position)
+    IMGUI_API float         GetCursorPosX();                                                //   (some functions are using window-relative coordinates, such as: GetCursorPos, GetCursorStartPos, GetContentRegionMax, GetWindowContentRegion* etc.
+    IMGUI_API float         GetCursorPosY();                                                //    other functions such as GetCursorScreenPos or everything in ImDrawList::
+    IMGUI_API void          SetCursorPos(const ImVec2& local_pos);                          //    are using the main, absolute coordinate system.
+    IMGUI_API void          SetCursorPosX(float local_x);                                   //    GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)
+    IMGUI_API void          SetCursorPosY(float local_y);                                   //
+    IMGUI_API ImVec2        GetCursorStartPos();                                            // initial cursor position in window coordinates
+    IMGUI_API ImVec2        GetCursorScreenPos();                                           // cursor position in absolute coordinates (useful to work with ImDrawList API). generally top-left == GetMainViewport()->Pos == (0,0) in single viewport mode, and bottom-right == GetMainViewport()->Pos+Size == io.DisplaySize in single-viewport mode.
+    IMGUI_API void          SetCursorScreenPos(const ImVec2& pos);                          // cursor position in absolute coordinates
+    IMGUI_API void          AlignTextToFramePadding();                                      // vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)
+    IMGUI_API float         GetTextLineHeight();                                            // ~ FontSize
+    IMGUI_API float         GetTextLineHeightWithSpacing();                                 // ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)
+    IMGUI_API float         GetFrameHeight();                                               // ~ FontSize + style.FramePadding.y * 2
+    IMGUI_API float         GetFrameHeightWithSpacing();                                    // ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
+
+    // ID stack/scopes
+    // Read the FAQ (docs/FAQ.md or http://dearimgui.org/faq) for more details about how ID are handled in dear imgui.
+    // - Those questions are answered and impacted by understanding of the ID stack system:
+    //   - "Q: Why is my widget not reacting when I click on it?"
+    //   - "Q: How can I have widgets with an empty label?"
+    //   - "Q: How can I have multiple widgets with the same label?"
+    // - Short version: ID are hashes of the entire ID stack. If you are creating widgets in a loop you most likely
+    //   want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them.
+    // - You can also use the "Label##foobar" syntax within widget label to distinguish them from each others.
+    // - In this header file we use the "label"/"name" terminology to denote a string that will be displayed + used as an ID,
+    //   whereas "str_id" denote a string that is only used as an ID and not normally displayed.
+    IMGUI_API void          PushID(const char* str_id);                                     // push string into the ID stack (will hash string).
+    IMGUI_API void          PushID(const char* str_id_begin, const char* str_id_end);       // push string into the ID stack (will hash string).
+    IMGUI_API void          PushID(const void* ptr_id);                                     // push pointer into the ID stack (will hash pointer).
+    IMGUI_API void          PushID(int int_id);                                             // push integer into the ID stack (will hash integer).
+    IMGUI_API void          PopID();                                                        // pop from the ID stack.
+    IMGUI_API ImGuiID       GetID(const char* str_id);                                      // calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself
+    IMGUI_API ImGuiID       GetID(const char* str_id_begin, const char* str_id_end);
+    IMGUI_API ImGuiID       GetID(const void* ptr_id);
+
+    // Widgets: Text
+    IMGUI_API void          TextUnformatted(const char* text, const char* text_end = NULL); // raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.
+    IMGUI_API void          Text(const char* fmt, ...)                                      IM_FMTARGS(1); // formatted text
+    IMGUI_API void          TextV(const char* fmt, va_list args)                            IM_FMTLIST(1);
+    IMGUI_API void          TextColored(const ImVec4& col, const char* fmt, ...)            IM_FMTARGS(2); // shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();
+    IMGUI_API void          TextColoredV(const ImVec4& col, const char* fmt, va_list args)  IM_FMTLIST(2);
+    IMGUI_API void          TextDisabled(const char* fmt, ...)                              IM_FMTARGS(1); // shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();
+    IMGUI_API void          TextDisabledV(const char* fmt, va_list args)                    IM_FMTLIST(1);
+    IMGUI_API void          TextWrapped(const char* fmt, ...)                               IM_FMTARGS(1); // shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().
+    IMGUI_API void          TextWrappedV(const char* fmt, va_list args)                     IM_FMTLIST(1);
+    IMGUI_API void          LabelText(const char* label, const char* fmt, ...)              IM_FMTARGS(2); // display text+label aligned the same way as value+label widgets
+    IMGUI_API void          LabelTextV(const char* label, const char* fmt, va_list args)    IM_FMTLIST(2);
+    IMGUI_API void          BulletText(const char* fmt, ...)                                IM_FMTARGS(1); // shortcut for Bullet()+Text()
+    IMGUI_API void          BulletTextV(const char* fmt, va_list args)                      IM_FMTLIST(1);
+
+    // Widgets: Main
+    // - Most widgets return true when the value has been changed or when pressed/selected
+    // - You may also use one of the many IsItemXXX functions (e.g. IsItemActive, IsItemHovered, etc.) to query widget state.
+    IMGUI_API bool          Button(const char* label, const ImVec2& size = ImVec2(0, 0));   // button
+    IMGUI_API bool          SmallButton(const char* label);                                 // button with FramePadding=(0,0) to easily embed within text
+    IMGUI_API bool          InvisibleButton(const char* str_id, const ImVec2& size, ImGuiButtonFlags flags = 0); // flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
+    IMGUI_API bool          ArrowButton(const char* str_id, ImGuiDir dir);                  // square button with an arrow shape
+    IMGUI_API void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& tint_col = ImVec4(1, 1, 1, 1), const ImVec4& border_col = ImVec4(0, 0, 0, 0));
+    IMGUI_API bool          ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), int frame_padding = -1, const ImVec4& bg_col = ImVec4(0, 0, 0, 0), const ImVec4& tint_col = ImVec4(1, 1, 1, 1));    // <0 frame_padding uses default frame padding settings. 0 for no padding
+    IMGUI_API bool          Checkbox(const char* label, bool* v);
+    IMGUI_API bool          CheckboxFlags(const char* label, int* flags, int flags_value);
+    IMGUI_API bool          CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value);
+    IMGUI_API bool          RadioButton(const char* label, bool active);                    // use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }
+    IMGUI_API bool          RadioButton(const char* label, int* v, int v_button);           // shortcut to handle the above pattern when value is an integer
+    IMGUI_API void          ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-FLT_MIN, 0), const char* overlay = NULL);
+    IMGUI_API void          Bullet();                                                       // draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses
+
+    // Widgets: Combo Box
+    // - The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.
+    // - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose. This is analogous to how ListBox are created.
+    IMGUI_API bool          BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0);
+    IMGUI_API void          EndCombo(); // only call EndCombo() if BeginCombo() returns true!
+    IMGUI_API bool          Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items = -1);
+    IMGUI_API bool          Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items = -1);      // Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"
+    IMGUI_API bool          Combo(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items = -1);
+
+    // Widgets: Drag Sliders
+    // - CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp.
+    // - For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every functions, note that a 'float v[X]' function argument is the same as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &myvector.x
+    // - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
+    // - Format string may also be set to NULL or use the default format ("%f" or "%d").
+    // - Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For gamepad/keyboard navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision).
+    // - Use v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual input can override those limits if ImGuiSliderFlags_AlwaysClamp is not used.
+    // - Use v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with v_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.
+    // - We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.
+    // - Legacy: Pre-1.78 there are DragXXX() function signatures that takes a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
+    //   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
+    IMGUI_API bool          DragFloat(const char* label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);     // If v_min >= v_max we have no bound
+    IMGUI_API bool          DragFloat2(const char* label, float v[2], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          DragFloat3(const char* label, float v[3], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          DragFloat4(const char* label, float v[4], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", const char* format_max = NULL, ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          DragInt(const char* label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);  // If v_min >= v_max we have no bound
+    IMGUI_API bool          DragInt2(const char* label, int v[2], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          DragInt3(const char* label, int v[3], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          DragInt4(const char* label, int v[4], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", const char* format_max = NULL, ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed = 1.0f, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed = 1.0f, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0);
+
+    // Widgets: Regular Sliders
+    // - CTRL+Click on any slider to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp.
+    // - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
+    // - Format string may also be set to NULL or use the default format ("%f" or "%d").
+    // - Legacy: Pre-1.78 there are SliderXXX() function signatures that takes a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
+    //   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
+    IMGUI_API bool          SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);     // adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display.
+    IMGUI_API bool          SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          SliderAngle(const char* label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char* format = "%.0f deg", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          SliderInt(const char* label, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
+    IMGUI_API bool          VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
+
+    // Widgets: Input with Keyboard
+    // - If you want to use InputText() with std::string or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.
+    // - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.
+    IMGUI_API bool          InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
+    IMGUI_API bool          InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
+    IMGUI_API bool          InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
+    IMGUI_API bool          InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
+    IMGUI_API bool          InputFloat2(const char* label, float v[2], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
+    IMGUI_API bool          InputFloat3(const char* label, float v[3], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
+    IMGUI_API bool          InputFloat4(const char* label, float v[4], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
+    IMGUI_API bool          InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0);
+    IMGUI_API bool          InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags = 0);
+    IMGUI_API bool          InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags = 0);
+    IMGUI_API bool          InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags = 0);
+    IMGUI_API bool          InputDouble(const char* label, double* v, double step = 0.0, double step_fast = 0.0, const char* format = "%.6f", ImGuiInputTextFlags flags = 0);
+    IMGUI_API bool          InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);
+    IMGUI_API bool          InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);
+
+    // Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)
+    // - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.
+    // - You can pass the address of a first float element out of a contiguous structure, e.g. &myvector.x
+    IMGUI_API bool          ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
+    IMGUI_API bool          ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0);
+    IMGUI_API bool          ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
+    IMGUI_API bool          ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags = 0, const float* ref_col = NULL);
+    IMGUI_API bool          ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, ImVec2 size = ImVec2(0, 0)); // display a color square/button, hover for details, return true when pressed.
+    IMGUI_API void          SetColorEditOptions(ImGuiColorEditFlags flags);                     // initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.
+
+    // Widgets: Trees
+    // - TreeNode functions return true when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents.
+    IMGUI_API bool          TreeNode(const char* label);
+    IMGUI_API bool          TreeNode(const char* str_id, const char* fmt, ...) IM_FMTARGS(2);   // helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().
+    IMGUI_API bool          TreeNode(const void* ptr_id, const char* fmt, ...) IM_FMTARGS(2);   // "
+    IMGUI_API bool          TreeNodeV(const char* str_id, const char* fmt, va_list args) IM_FMTLIST(2);
+    IMGUI_API bool          TreeNodeV(const void* ptr_id, const char* fmt, va_list args) IM_FMTLIST(2);
+    IMGUI_API bool          TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0);
+    IMGUI_API bool          TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);
+    IMGUI_API bool          TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);
+    IMGUI_API bool          TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);
+    IMGUI_API bool          TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);
+    IMGUI_API void          TreePush(const char* str_id);                                       // ~ Indent()+PushId(). Already called by TreeNode() when returning true, but you can call TreePush/TreePop yourself if desired.
+    IMGUI_API void          TreePush(const void* ptr_id = NULL);                                // "
+    IMGUI_API void          TreePop();                                                          // ~ Unindent()+PopId()
+    IMGUI_API float         GetTreeNodeToLabelSpacing();                                        // horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode
+    IMGUI_API bool          CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags = 0);  // if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().
+    IMGUI_API bool          CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags = 0); // when 'p_visible != NULL': if '*p_visible==true' display an additional small close button on upper right of the header which will set the bool to false when clicked, if '*p_visible==false' don't display the header.
+    IMGUI_API void          SetNextItemOpen(bool is_open, ImGuiCond cond = 0);                  // set next TreeNode/CollapsingHeader open state.
+
+    // Widgets: Selectables
+    // - A selectable highlights when hovered, and can display another color when selected.
+    // - Neighbors selectable extend their highlight bounds in order to leave no gap between them. This is so a series of selected Selectable appear contiguous.
+    IMGUI_API bool          Selectable(const char* label, bool selected = false, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0, 0)); // "bool selected" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height
+    IMGUI_API bool          Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0, 0));      // "bool* p_selected" point to the selection state (read-write), as a convenient helper.
+
+    // Widgets: List Boxes
+    // - This is essentially a thin wrapper to using BeginChild/EndChild with some stylistic changes.
+    // - The BeginListBox()/EndListBox() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() or any items.
+    // - The simplified/old ListBox() api are helpers over BeginListBox()/EndListBox() which are kept available for convenience purpose. This is analoguous to how Combos are created.
+    // - Choose frame width:   size.x > 0.0f: custom  /  size.x < 0.0f or -FLT_MIN: right-align   /  size.x = 0.0f (default): use current ItemWidth
+    // - Choose frame height:  size.y > 0.0f: custom  /  size.y < 0.0f or -FLT_MIN: bottom-align  /  size.y = 0.0f (default): arbitrary default height which can fit ~7 items
+    IMGUI_API bool          BeginListBox(const char* label, const ImVec2& size = ImVec2(0, 0)); // open a framed scrolling region
+    IMGUI_API void          EndListBox();                                                       // only call EndListBox() if BeginListBox() returned true!
+    IMGUI_API bool          ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items = -1);
+    IMGUI_API bool          ListBox(const char* label, int* current_item, bool (*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int height_in_items = -1);
+
+    // Widgets: Data Plotting
+    // - Consider using ImPlot (https://github.com/epezent/implot) which is much better!
+    IMGUI_API void          PlotLines(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float));
+    IMGUI_API void          PlotLines(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0));
+    IMGUI_API void          PlotHistogram(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float));
+    IMGUI_API void          PlotHistogram(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0));
+
+    // Widgets: Value() Helpers.
+    // - Those are merely shortcut to calling Text() with a format string. Output single value in "name: value" format (tip: freely declare more in your code to handle your types. you can add functions to the ImGui namespace)
+    IMGUI_API void          Value(const char* prefix, bool b);
+    IMGUI_API void          Value(const char* prefix, int v);
+    IMGUI_API void          Value(const char* prefix, unsigned int v);
+    IMGUI_API void          Value(const char* prefix, float v, const char* float_format = NULL);
+
+    // Widgets: Menus
+    // - Use BeginMenuBar() on a window ImGuiWindowFlags_MenuBar to append to its menu bar.
+    // - Use BeginMainMenuBar() to create a menu bar at the top of the screen and append to it.
+    // - Use BeginMenu() to create a menu. You can call BeginMenu() multiple time with the same identifier to append more items to it.
+    // - Not that MenuItem() keyboardshortcuts are displayed as a convenience but _not processed_ by Dear ImGui at the moment.
+    IMGUI_API bool          BeginMenuBar();                                                     // append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).
+    IMGUI_API void          EndMenuBar();                                                       // only call EndMenuBar() if BeginMenuBar() returns true!
+    IMGUI_API bool          BeginMainMenuBar();                                                 // create and append to a full screen menu-bar.
+    IMGUI_API void          EndMainMenuBar();                                                   // only call EndMainMenuBar() if BeginMainMenuBar() returns true!
+    IMGUI_API bool          BeginMenu(const char* label, bool enabled = true);                  // create a sub-menu entry. only call EndMenu() if this returns true!
+    IMGUI_API void          EndMenu();                                                          // only call EndMenu() if BeginMenu() returns true!
+    IMGUI_API bool          MenuItem(const char* label, const char* shortcut = NULL, bool selected = false, bool enabled = true);  // return true when activated.
+    IMGUI_API bool          MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled = true);              // return true when activated + toggle (*p_selected) if p_selected != NULL
+
+    // Tooltips
+    // - Tooltip are windows following the mouse. They do not take focus away.
+    IMGUI_API void          BeginTooltip();                                                     // begin/append a tooltip window. to create full-featured tooltip (with any kind of items).
+    IMGUI_API void          EndTooltip();
+    IMGUI_API void          SetTooltip(const char* fmt, ...) IM_FMTARGS(1);                     // set a text-only tooltip, typically use with ImGui::IsItemHovered(). override any previous call to SetTooltip().
+    IMGUI_API void          SetTooltipV(const char* fmt, va_list args) IM_FMTLIST(1);
+
+    // Popups, Modals
+    //  - They block normal mouse hovering detection (and therefore most mouse interactions) behind them.
+    //  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
+    //  - Their visibility state (~bool) is held internally instead of being held by the programmer as we are used to with regular Begin*() calls.
+    //  - The 3 properties above are related: we need to retain popup visibility state in the library because popups may be closed as any time.
+    //  - You can bypass the hovering restriction by using ImGuiHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered() or IsWindowHovered().
+    //  - IMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup and BeginPopup generally needs to be at the same level of the stack.
+    //    This is sometimes leading to confusing mistakes. May rework this in the future.
+
+    // Popups: begin/end functions
+    //  - BeginPopup(): query popup state, if open start appending into the window. Call EndPopup() afterwards. ImGuiWindowFlags are forwarded to the window.
+    //  - BeginPopupModal(): block every interactions behind the window, cannot be closed by user, add a dimming background, has a title bar.
+    IMGUI_API bool          BeginPopup(const char* str_id, ImGuiWindowFlags flags = 0);                         // return true if the popup is open, and you can start outputting to it.
+    IMGUI_API bool          BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0); // return true if the modal is open, and you can start outputting to it.
+    IMGUI_API void          EndPopup();                                                                         // only call EndPopup() if BeginPopupXXX() returns true!
+
+    // Popups: open/close functions
+    //  - OpenPopup(): set popup state to open. ImGuiPopupFlags are available for opening options.
+    //  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
+    //  - CloseCurrentPopup(): use inside the BeginPopup()/EndPopup() scope to close manually.
+    //  - CloseCurrentPopup() is called by default by Selectable()/MenuItem() when activated (FIXME: need some options).
+    //  - Use ImGuiPopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's already one at the same level. This is equivalent to e.g. testing for !IsAnyPopupOpen() prior to OpenPopup().
+    //  - Use IsWindowAppearing() after BeginPopup() to tell if a window just opened.
+    IMGUI_API void          OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags = 0);                     // call to mark popup as open (don't call every frame!).
+    IMGUI_API void          OpenPopup(ImGuiID id, ImGuiPopupFlags popup_flags = 0);                             // id overload to facilitate calling from nested stacks
+    IMGUI_API void          OpenPopupOnItemClick(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);   // helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)
+    IMGUI_API void          CloseCurrentPopup();                                                                // manually close the popup we have begin-ed into.
+
+    // Popups: open+begin combined functions helpers
+    //  - Helpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g. hovering an item and right-clicking.
+    //  - They are convenient to easily create context menus, hence the name.
+    //  - IMPORTANT: Notice that BeginPopupContextXXX takes ImGuiPopupFlags just like OpenPopup() and unlike BeginPopup(). For full consistency, we may add ImGuiWindowFlags to the BeginPopupContextXXX functions in the future.
+    //  - IMPORTANT: we exceptionally default their flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter, so if you add other flags remember to re-add the ImGuiPopupFlags_MouseButtonRight.
+    IMGUI_API bool          BeginPopupContextItem(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);  // open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!
+    IMGUI_API bool          BeginPopupContextWindow(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);// open+begin popup when clicked on current window.
+    IMGUI_API bool          BeginPopupContextVoid(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);  // open+begin popup when clicked in void (where there are no windows).
+
+    // Popups: query functions
+    //  - IsPopupOpen(): return true if the popup is open at the current BeginPopup() level of the popup stack.
+    //  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId: return true if any popup is open at the current BeginPopup() level of the popup stack.
+    //  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId + ImGuiPopupFlags_AnyPopupLevel: return true if any popup is open.
+    IMGUI_API bool          IsPopupOpen(const char* str_id, ImGuiPopupFlags flags = 0);                         // return true if the popup is open.
+
+    // Tables
+    // [BETA API] API may evolve slightly! If you use this, please update to the next version when it comes out!
+    // - Full-featured replacement for old Columns API.
+    // - See Demo->Tables for demo code.
+    // - See top of imgui_tables.cpp for general commentary.
+    // - See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.
+    // The typical call flow is:
+    // - 1. Call BeginTable().
+    // - 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.
+    // - 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.
+    // - 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.
+    // - 5. Populate contents:
+    //    - In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.
+    //    - If you are using tables as a sort of grid, where every columns is holding the same type of contents,
+    //      you may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().
+    //      TableNextColumn() will automatically wrap-around into the next row if needed.
+    //    - IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!
+    //    - Summary of possible call flow:
+    //        --------------------------------------------------------------------------------------------------------
+    //        TableNextRow() -> TableSetColumnIndex(0) -> Text("Hello 0") -> TableSetColumnIndex(1) -> Text("Hello 1")  // OK
+    //        TableNextRow() -> TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK
+    //                          TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK: TableNextColumn() automatically gets to next row!
+    //        TableNextRow()                           -> Text("Hello 0")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!
+    //        --------------------------------------------------------------------------------------------------------
+    // - 5. Call EndTable()
+    IMGUI_API bool          BeginTable(const char* str_id, int column, ImGuiTableFlags flags = 0, const ImVec2& outer_size = ImVec2(0.0f, 0.0f), float inner_width = 0.0f);
+    IMGUI_API void          EndTable();                                 // only call EndTable() if BeginTable() returns true!
+    IMGUI_API void          TableNextRow(ImGuiTableRowFlags row_flags = 0, float min_row_height = 0.0f); // append into the first cell of a new row.
+    IMGUI_API bool          TableNextColumn();                          // append into the next column (or first column of next row if currently in last column). Return true when column is visible.
+    IMGUI_API bool          TableSetColumnIndex(int column_n);          // append into the specified column. Return true when column is visible.
+
+    // Tables: Headers & Columns declaration
+    // - Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.
+    // - Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.
+    //   Headers are required to perform: reordering, sorting, and opening the context menu.
+    //   The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.
+    // - You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in
+    //   some advanced use cases (e.g. adding custom widgets in header row).
+    // - Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled.
+    IMGUI_API void          TableSetupColumn(const char* label, ImGuiTableColumnFlags flags = 0, float init_width_or_weight = 0.0f, ImGuiID user_id = 0);
+    IMGUI_API void          TableSetupScrollFreeze(int cols, int rows); // lock columns/rows so they stay visible when scrolled.
+    IMGUI_API void          TableHeadersRow();                          // submit all headers cells based on data provided to TableSetupColumn() + submit context menu
+    IMGUI_API void          TableHeader(const char* label);             // submit one header cell manually (rarely used)
+
+    // Tables: Sorting
+    // - Call TableGetSortSpecs() to retrieve latest sort specs for the table. NULL when not sorting.
+    // - When 'SpecsDirty == true' you should sort your data. It will be true when sorting specs have changed
+    //   since last call, or the first time. Make sure to set 'SpecsDirty = false' after sorting, else you may
+    //   wastefully sort your data every frame!
+    // - Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().
+    IMGUI_API ImGuiTableSortSpecs* TableGetSortSpecs();                        // get latest sort specs for the table (NULL if not sorting).
+
+    // Tables: Miscellaneous functions
+    // - Functions args 'int column_n' treat the default value of -1 as the same as passing the current column index.
+    IMGUI_API int                   TableGetColumnCount();                      // return number of columns (value passed to BeginTable)
+    IMGUI_API int                   TableGetColumnIndex();                      // return current column index.
+    IMGUI_API int                   TableGetRowIndex();                         // return current row index.
+    IMGUI_API const char* TableGetColumnName(int column_n = -1);      // return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.
+    IMGUI_API ImGuiTableColumnFlags TableGetColumnFlags(int column_n = -1);     // return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.
+    IMGUI_API void                  TableSetColumnEnabled(int column_n, bool v);// change user accessible enabled/disabled state of a column. Set to false to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)
+    IMGUI_API void                  TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n = -1);  // change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.
+
+    // Legacy Columns API (prefer using Tables!)
+    // - You can also use SameLine(pos_x) to mimic simplified columns.
+    IMGUI_API void          Columns(int count = 1, const char* id = NULL, bool border = true);
+    IMGUI_API void          NextColumn();                                                       // next column, defaults to current row or next row if the current row is finished
+    IMGUI_API int           GetColumnIndex();                                                   // get current column index
+    IMGUI_API float         GetColumnWidth(int column_index = -1);                              // get column width (in pixels). pass -1 to use current column
+    IMGUI_API void          SetColumnWidth(int column_index, float width);                      // set column width (in pixels). pass -1 to use current column
+    IMGUI_API float         GetColumnOffset(int column_index = -1);                             // get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f
+    IMGUI_API void          SetColumnOffset(int column_index, float offset_x);                  // set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column
+    IMGUI_API int           GetColumnsCount();
+
+    // Tab Bars, Tabs
+    // Note: Tabs are automatically created by the docking system. Use this to create tab bars/tabs yourself without docking being involved.
+    IMGUI_API bool          BeginTabBar(const char* str_id, ImGuiTabBarFlags flags = 0);        // create and append into a TabBar
+    IMGUI_API void          EndTabBar();                                                        // only call EndTabBar() if BeginTabBar() returns true!
+    IMGUI_API bool          BeginTabItem(const char* label, bool* p_open = NULL, ImGuiTabItemFlags flags = 0); // create a Tab. Returns true if the Tab is selected.
+    IMGUI_API void          EndTabItem();                                                       // only call EndTabItem() if BeginTabItem() returns true!
+    IMGUI_API bool          TabItemButton(const char* label, ImGuiTabItemFlags flags = 0);      // create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.
+    IMGUI_API void          SetTabItemClosed(const char* tab_or_docked_window_label);           // notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.
+
+    // Docking
+    // [BETA API] Enable with io.ConfigFlags |= ImGuiConfigFlags_DockingEnable.
+    // Note: You can use most Docking facilities without calling any API. You DO NOT need to call DockSpace() to use Docking!
+    // - Drag from window title bar or their tab to dock/undock. Hold SHIFT to disable docking/undocking.
+    // - Drag from window menu button (upper-left button) to undock an entire node (all windows).
+    // - When io.ConfigDockingWithShift == true, you instead need to hold SHIFT to _enable_ docking/undocking.
+    // About dockspaces:
+    // - Use DockSpace() to create an explicit dock node _within_ an existing window. See Docking demo for details.
+    // - Use DockSpaceOverViewport() to create an explicit dock node covering the screen or a specific viewport.
+    //   This is often used with ImGuiDockNodeFlags_PassthruCentralNode.
+    // - Important: Dockspaces need to be submitted _before_ any window they can host. Submit it early in your frame!
+    // - Important: Dockspaces need to be kept alive if hidden, otherwise windows docked into it will be undocked.
+    //   e.g. if you have multiple tabs with a dockspace inside each tab: submit the non-visible dockspaces with ImGuiDockNodeFlags_KeepAliveOnly.
+    IMGUI_API ImGuiID       DockSpace(ImGuiID id, const ImVec2& size = ImVec2(0, 0), ImGuiDockNodeFlags flags = 0, const ImGuiWindowClass* window_class = NULL);
+    IMGUI_API ImGuiID       DockSpaceOverViewport(const ImGuiViewport* viewport = NULL, ImGuiDockNodeFlags flags = 0, const ImGuiWindowClass* window_class = NULL);
+    IMGUI_API void          SetNextWindowDockID(ImGuiID dock_id, ImGuiCond cond = 0);           // set next window dock id
+    IMGUI_API void          SetNextWindowClass(const ImGuiWindowClass* window_class);           // set next window class (control docking compatibility + provide hints to platform backend via custom viewport flags and platform parent/child relationship)
+    IMGUI_API ImGuiID       GetWindowDockID();
+    IMGUI_API bool          IsWindowDocked();                                                   // is current window docked into another window?
+
+    // Logging/Capture
+    // - All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging.
+    IMGUI_API void          LogToTTY(int auto_open_depth = -1);                                 // start logging to tty (stdout)
+    IMGUI_API void          LogToFile(int auto_open_depth = -1, const char* filename = NULL);   // start logging to file
+    IMGUI_API void          LogToClipboard(int auto_open_depth = -1);                           // start logging to OS clipboard
+    IMGUI_API void          LogFinish();                                                        // stop logging (close file, etc.)
+    IMGUI_API void          LogButtons();                                                       // helper to display buttons for logging to tty/file/clipboard
+    IMGUI_API void          LogText(const char* fmt, ...) IM_FMTARGS(1);                        // pass text data straight to log (without being displayed)
+    IMGUI_API void          LogTextV(const char* fmt, va_list args) IM_FMTLIST(1);
+
+    // Drag and Drop
+    // - On source items, call BeginDragDropSource(), if it returns true also call SetDragDropPayload() + EndDragDropSource().
+    // - On target candidates, call BeginDragDropTarget(), if it returns true also call AcceptDragDropPayload() + EndDragDropTarget().
+    // - If you stop calling BeginDragDropSource() the payload is preserved however it won't have a preview tooltip (we currently display a fallback "..." tooltip, see #1725)
+    // - An item can be both drag source and drop target.
+    IMGUI_API bool          BeginDragDropSource(ImGuiDragDropFlags flags = 0);                                      // call after submitting an item which may be dragged. when this return true, you can call SetDragDropPayload() + EndDragDropSource()
+    IMGUI_API bool          SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond = 0);  // type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui.
+    IMGUI_API void          EndDragDropSource();                                                                    // only call EndDragDropSource() if BeginDragDropSource() returns true!
+    IMGUI_API bool                  BeginDragDropTarget();                                                          // call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()
+    IMGUI_API const ImGuiPayload* AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0);          // accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.
+    IMGUI_API void                  EndDragDropTarget();                                                            // only call EndDragDropTarget() if BeginDragDropTarget() returns true!
+    IMGUI_API const ImGuiPayload* GetDragDropPayload();                                                           // peek directly into the current payload from anywhere. may return NULL. use ImGuiPayload::IsDataType() to test for the payload type.
+
+    // Disabling [BETA API]
+    // - Disable all user interactions and dim items visuals (applying style.DisabledAlpha over current colors)
+    // - Those can be nested but it cannot be used to enable an already disabled section (a single BeginDisabled(true) in the stack is enough to keep everything disabled)
+    // - BeginDisabled(false) essentially does nothing useful but is provided to facilitate use of boolean expressions. If you can avoid calling BeginDisabled(False)/EndDisabled() best to avoid it.
+    IMGUI_API void          BeginDisabled(bool disabled = true);
+    IMGUI_API void          EndDisabled();
+
+    // Clipping
+    // - Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only.
+    IMGUI_API void          PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect);
+    IMGUI_API void          PopClipRect();
+
+    // Focus, Activation
+    // - Prefer using "SetItemDefaultFocus()" over "if (IsWindowAppearing()) SetScrollHereY()" when applicable to signify "this is the default item"
+    IMGUI_API void          SetItemDefaultFocus();                                              // make last item the default focused item of a window.
+    IMGUI_API void          SetKeyboardFocusHere(int offset = 0);                               // focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
+
+    // Item/Widgets Utilities and Query Functions
+    // - Most of the functions are referring to the previous Item that has been submitted.
+    // - See Demo Window under "Widgets->Querying Status" for an interactive visualization of most of those functions.
+    IMGUI_API bool          IsItemHovered(ImGuiHoveredFlags flags = 0);                         // is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.
+    IMGUI_API bool          IsItemActive();                                                     // is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)
+    IMGUI_API bool          IsItemFocused();                                                    // is the last item focused for keyboard/gamepad navigation?
+    IMGUI_API bool          IsItemClicked(ImGuiMouseButton mouse_button = 0);                   // is the last item hovered and mouse clicked on? (**)  == IsMouseClicked(mouse_button) && IsItemHovered()Important. (**) this it NOT equivalent to the behavior of e.g. Button(). Read comments in function definition.
+    IMGUI_API bool          IsItemVisible();                                                    // is the last item visible? (items may be out of sight because of clipping/scrolling)
+    IMGUI_API bool          IsItemEdited();                                                     // did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets.
+    IMGUI_API bool          IsItemActivated();                                                  // was the last item just made active (item was previously inactive).
+    IMGUI_API bool          IsItemDeactivated();                                                // was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing.
+    IMGUI_API bool          IsItemDeactivatedAfterEdit();                                       // was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).
+    IMGUI_API bool          IsItemToggledOpen();                                                // was the last item open state toggled? set by TreeNode().
+    IMGUI_API bool          IsAnyItemHovered();                                                 // is any item hovered?
+    IMGUI_API bool          IsAnyItemActive();                                                  // is any item active?
+    IMGUI_API bool          IsAnyItemFocused();                                                 // is any item focused?
+    IMGUI_API ImVec2        GetItemRectMin();                                                   // get upper-left bounding rectangle of the last item (screen space)
+    IMGUI_API ImVec2        GetItemRectMax();                                                   // get lower-right bounding rectangle of the last item (screen space)
+    IMGUI_API ImVec2        GetItemRectSize();                                                  // get size of last item
+    IMGUI_API void          SetItemAllowOverlap();                                              // allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area.
+
+    // Viewports
+    // - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.
+    // - In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports.
+    // - In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.
+    IMGUI_API ImGuiViewport* GetMainViewport();                                                 // return primary/default viewport. This can never be NULL.
+
+    // Miscellaneous Utilities
+    IMGUI_API bool          IsRectVisible(const ImVec2& size);                                  // test if rectangle (of given size, starting from cursor position) is visible / not clipped.
+    IMGUI_API bool          IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max);      // test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.
+    IMGUI_API double        GetTime();                                                          // get global imgui time. incremented by io.DeltaTime every frame.
+    IMGUI_API int           GetFrameCount();                                                    // get global imgui frame count. incremented by 1 every frame.
+    IMGUI_API ImDrawList* GetBackgroundDrawList();                                            // get background draw list for the viewport associated to the current window. this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear imgui contents.
+    IMGUI_API ImDrawList* GetForegroundDrawList();                                            // get foreground draw list for the viewport associated to the current window. this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.
+    IMGUI_API ImDrawList* GetBackgroundDrawList(ImGuiViewport* viewport);                     // get background draw list for the given viewport. this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear imgui contents.
+    IMGUI_API ImDrawList* GetForegroundDrawList(ImGuiViewport* viewport);                     // get foreground draw list for the given viewport. this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.
+    IMGUI_API ImDrawListSharedData* GetDrawListSharedData();                                    // you may use this when creating your own ImDrawList instances.
+    IMGUI_API const char* GetStyleColorName(ImGuiCol idx);                                    // get a string corresponding to the enum value (for display, saving, etc.).
+    IMGUI_API void          SetStateStorage(ImGuiStorage* storage);                             // replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)
+    IMGUI_API ImGuiStorage* GetStateStorage();
+    IMGUI_API bool          BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags flags = 0); // helper to create a child window / scrolling region that looks like a normal widget frame
+    IMGUI_API void          EndChildFrame();                                                    // always call EndChildFrame() regardless of BeginChildFrame() return values (which indicates a collapsed/clipped window)
+
+    // Text Utilities
+    IMGUI_API ImVec2        CalcTextSize(const char* text, const char* text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f);
+
+    // Color Utilities
+    IMGUI_API ImVec4        ColorConvertU32ToFloat4(ImU32 in);
+    IMGUI_API ImU32         ColorConvertFloat4ToU32(const ImVec4& in);
+    IMGUI_API void          ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v);
+    IMGUI_API void          ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b);
+
+    // Inputs Utilities: Keyboard
+    // - For 'int user_key_index' you can use your own indices/enums according to how your backend/engine stored them in io.KeysDown[].
+    // - We don't know the meaning of those value. You can use GetKeyIndex() to map a ImGuiKey_ value into the user index.
+    IMGUI_API int           GetKeyIndex(ImGuiKey imgui_key);                                    // map ImGuiKey_* values into user's key index. == io.KeyMap[key]
+    IMGUI_API bool          IsKeyDown(int user_key_index);                                      // is key being held. == io.KeysDown[user_key_index].
+    IMGUI_API bool          IsKeyPressed(int user_key_index, bool repeat = true);               // was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
+    IMGUI_API bool          IsKeyReleased(int user_key_index);                                  // was key released (went from Down to !Down)?
+    IMGUI_API int           GetKeyPressedAmount(int key_index, float repeat_delay, float rate); // uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate
+    IMGUI_API void          CaptureKeyboardFromApp(bool want_capture_keyboard_value = true);    // attention: misleading name! manually override io.WantCaptureKeyboard flag next frame (said flag is entirely left for your application to handle). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard_value"; after the next NewFrame() call.
+
+    // Inputs Utilities: Mouse
+    // - To refer to a mouse button, you may use named enums in your code e.g. ImGuiMouseButton_Left, ImGuiMouseButton_Right.
+    // - You can also use regular integer: it is forever guaranteed that 0=Left, 1=Right, 2=Middle.
+    // - Dragging operations are only reported after mouse has moved a certain distance away from the initial clicking position (see 'lock_threshold' and 'io.MouseDraggingThreshold')
+    IMGUI_API bool          IsMouseDown(ImGuiMouseButton button);                               // is mouse button held?
+    IMGUI_API bool          IsMouseClicked(ImGuiMouseButton button, bool repeat = false);       // did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1.
+    IMGUI_API bool          IsMouseReleased(ImGuiMouseButton button);                           // did mouse button released? (went from Down to !Down)
+    IMGUI_API bool          IsMouseDoubleClicked(ImGuiMouseButton button);                      // did mouse button double-clicked? Same as GetMouseClickedCount() == 2. (note that a double-click will also report IsMouseClicked() == true)
+    IMGUI_API int           GetMouseClickedCount(ImGuiMouseButton button);                      // return the number of successive mouse-clicks at the time where a click happen (otherwise 0).
+    IMGUI_API bool          IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true);// is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.
+    IMGUI_API bool          IsMousePosValid(const ImVec2* mouse_pos = NULL);                    // by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available
+    IMGUI_API bool          IsAnyMouseDown();                                                   // is any mouse button held?
+    IMGUI_API ImVec2        GetMousePos();                                                      // shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls
+    IMGUI_API ImVec2        GetMousePosOnOpeningCurrentPopup();                                 // retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)
+    IMGUI_API bool          IsMouseDragging(ImGuiMouseButton button, float lock_threshold = -1.0f);         // is mouse dragging? (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
+    IMGUI_API ImVec2        GetMouseDragDelta(ImGuiMouseButton button = 0, float lock_threshold = -1.0f);   // return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
+    IMGUI_API void          ResetMouseDragDelta(ImGuiMouseButton button = 0);                   //
+    IMGUI_API ImGuiMouseCursor GetMouseCursor();                                                // get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you
+    IMGUI_API void          SetMouseCursor(ImGuiMouseCursor cursor_type);                       // set desired cursor type
+    IMGUI_API void          CaptureMouseFromApp(bool want_capture_mouse_value = true);          // attention: misleading name! manually override io.WantCaptureMouse flag next frame (said flag is entirely left for your application to handle). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse_value;" after the next NewFrame() call.
+
+    // Clipboard Utilities
+    // - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard.
+    IMGUI_API const char* GetClipboardText();
+    IMGUI_API void          SetClipboardText(const char* text);
+
+    // Settings/.Ini Utilities
+    // - The disk functions are automatically called if io.IniFilename != NULL (default is "imgui.ini").
+    // - Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually.
+    // - Important: default value "imgui.ini" is relative to current working dir! Most apps will want to lock this to an absolute path (e.g. same path as executables).
+    IMGUI_API void          LoadIniSettingsFromDisk(const char* ini_filename);                  // call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).
+    IMGUI_API void          LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size = 0); // call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.
+    IMGUI_API void          SaveIniSettingsToDisk(const char* ini_filename);                    // this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).
+    IMGUI_API const char* SaveIniSettingsToMemory(size_t* out_ini_size = NULL);               // return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.
+
+    // Debug Utilities
+    // - This is used by the IMGUI_CHECKVERSION() macro.
+    IMGUI_API bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.
+
+    // Memory Allocators
+    // - Those functions are not reliant on the current context.
+    // - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()
+    //   for each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for more details.
+    IMGUI_API void          SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void* user_data = NULL);
+    IMGUI_API void          GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, void** p_user_data);
+    IMGUI_API void* MemAlloc(size_t size);
+    IMGUI_API void          MemFree(void* ptr);
+
+    // (Optional) Platform/OS interface for multi-viewport support
+    // Read comments around the ImGuiPlatformIO structure for more details.
+    // Note: You may use GetWindowViewport() to get the current viewport of the current window.
+    IMGUI_API ImGuiPlatformIO& GetPlatformIO();                                                // platform/renderer functions, for backend to setup + viewports list.
+    IMGUI_API void              UpdatePlatformWindows();                                        // call in main loop. will call CreateWindow/ResizeWindow/etc. platform functions for each secondary viewport, and DestroyWindow for each inactive viewport.
+    IMGUI_API void              RenderPlatformWindowsDefault(void* platform_render_arg = NULL, void* renderer_render_arg = NULL); // call in main loop. will call RenderWindow/SwapBuffers platform functions for each secondary viewport which doesn't have the ImGuiViewportFlags_Minimized flag set. May be reimplemented by user for custom rendering needs.
+    IMGUI_API void              DestroyPlatformWindows();                                       // call DestroyWindow platform functions for all viewports. call from backend Shutdown() if you need to close platform windows before imgui shutdown. otherwise will be called by DestroyContext().
+    IMGUI_API ImGuiViewport* FindViewportByID(ImGuiID id);                                   // this is a helper for backends.
+    IMGUI_API ImGuiViewport* FindViewportByPlatformHandle(void* platform_handle);            // this is a helper for backends. the type platform_handle is decided by the backend (e.g. HWND, MyWindow*, GLFWwindow* etc.)
+
+} // namespace ImGui
+
+//-----------------------------------------------------------------------------
+// [SECTION] Flags & Enumerations
+//-----------------------------------------------------------------------------
+
+// Flags for ImGui::Begin()
+enum ImGuiWindowFlags_
+{
+    ImGuiWindowFlags_None = 0,
+    ImGuiWindowFlags_NoTitleBar = 1 << 0,   // Disable title-bar
+    ImGuiWindowFlags_NoResize = 1 << 1,   // Disable user resizing with the lower-right grip
+    ImGuiWindowFlags_NoMove = 1 << 2,   // Disable user moving the window
+    ImGuiWindowFlags_NoScrollbar = 1 << 3,   // Disable scrollbars (window can still scroll with mouse or programmatically)
+    ImGuiWindowFlags_NoScrollWithMouse = 1 << 4,   // Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.
+    ImGuiWindowFlags_NoCollapse = 1 << 5,   // Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).
+    ImGuiWindowFlags_AlwaysAutoResize = 1 << 6,   // Resize every window to its content every frame
+    ImGuiWindowFlags_NoBackground = 1 << 7,   // Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).
+    ImGuiWindowFlags_NoSavedSettings = 1 << 8,   // Never load/save settings in .ini file
+    ImGuiWindowFlags_NoMouseInputs = 1 << 9,   // Disable catching mouse, hovering test with pass through.
+    ImGuiWindowFlags_MenuBar = 1 << 10,  // Has a menu-bar
+    ImGuiWindowFlags_HorizontalScrollbar = 1 << 11,  // Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.
+    ImGuiWindowFlags_NoFocusOnAppearing = 1 << 12,  // Disable taking focus when transitioning from hidden to visible state
+    ImGuiWindowFlags_NoBringToFrontOnFocus = 1 << 13,  // Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)
+    ImGuiWindowFlags_AlwaysVerticalScrollbar = 1 << 14,  // Always show vertical scrollbar (even if ContentSize.y < Size.y)
+    ImGuiWindowFlags_AlwaysHorizontalScrollbar = 1 << 15,  // Always show horizontal scrollbar (even if ContentSize.x < Size.x)
+    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  // Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)
+    ImGuiWindowFlags_NoNavInputs = 1 << 18,  // No gamepad/keyboard navigation within the window
+    ImGuiWindowFlags_NoNavFocus = 1 << 19,  // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)
+    ImGuiWindowFlags_UnsavedDocument = 1 << 20,  // Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
+    ImGuiWindowFlags_NoDocking = 1 << 21,  // Disable docking of this window
+
+    ImGuiWindowFlags_NoNav = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
+    ImGuiWindowFlags_NoDecoration = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,
+    ImGuiWindowFlags_NoInputs = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
+
+    // [Internal]
+    ImGuiWindowFlags_NavFlattened = 1 << 23,  // [BETA] On child window: allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows.
+    ImGuiWindowFlags_ChildWindow = 1 << 24,  // Don't use! For internal use by BeginChild()
+    ImGuiWindowFlags_Tooltip = 1 << 25,  // Don't use! For internal use by BeginTooltip()
+    ImGuiWindowFlags_Popup = 1 << 26,  // Don't use! For internal use by BeginPopup()
+    ImGuiWindowFlags_Modal = 1 << 27,  // Don't use! For internal use by BeginPopupModal()
+    ImGuiWindowFlags_ChildMenu = 1 << 28,  // Don't use! For internal use by BeginMenu()
+    ImGuiWindowFlags_DockNodeHost = 1 << 29   // Don't use! For internal use by Begin()/NewFrame()
+
+    // [Obsolete]
+    //ImGuiWindowFlags_ResizeFromAnySide    = 1 << 17,  // --> Set io.ConfigWindowsResizeFromEdges=true and make sure mouse cursors are supported by backend (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors)
+};
+
+// Flags for ImGui::InputText()
+enum ImGuiInputTextFlags_
+{
+    ImGuiInputTextFlags_None = 0,
+    ImGuiInputTextFlags_CharsDecimal = 1 << 0,   // Allow 0123456789.+-*/
+    ImGuiInputTextFlags_CharsHexadecimal = 1 << 1,   // Allow 0123456789ABCDEFabcdef
+    ImGuiInputTextFlags_CharsUppercase = 1 << 2,   // Turn a..z into A..Z
+    ImGuiInputTextFlags_CharsNoBlank = 1 << 3,   // Filter out spaces, tabs
+    ImGuiInputTextFlags_AutoSelectAll = 1 << 4,   // Select entire text when first taking mouse focus
+    ImGuiInputTextFlags_EnterReturnsTrue = 1 << 5,   // Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.
+    ImGuiInputTextFlags_CallbackCompletion = 1 << 6,   // Callback on pressing TAB (for completion handling)
+    ImGuiInputTextFlags_CallbackHistory = 1 << 7,   // Callback on pressing Up/Down arrows (for history handling)
+    ImGuiInputTextFlags_CallbackAlways = 1 << 8,   // Callback on each iteration. User code may query cursor position, modify text buffer.
+    ImGuiInputTextFlags_CallbackCharFilter = 1 << 9,   // Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.
+    ImGuiInputTextFlags_AllowTabInput = 1 << 10,  // Pressing TAB input a '\t' character into the text field
+    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  // In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).
+    ImGuiInputTextFlags_NoHorizontalScroll = 1 << 12,  // Disable following the cursor horizontally
+    ImGuiInputTextFlags_AlwaysOverwrite = 1 << 13,  // Overwrite mode
+    ImGuiInputTextFlags_ReadOnly = 1 << 14,  // Read-only mode
+    ImGuiInputTextFlags_Password = 1 << 15,  // Password mode, display all characters as '*'
+    ImGuiInputTextFlags_NoUndoRedo = 1 << 16,  // Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().
+    ImGuiInputTextFlags_CharsScientific = 1 << 17,  // Allow 0123456789.+-*/eE (Scientific notation input)
+    ImGuiInputTextFlags_CallbackResize = 1 << 18,  // Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)
+    ImGuiInputTextFlags_CallbackEdit = 1 << 19   // Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)
+
+    // Obsolete names (will be removed soon)
+#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
+    , ImGuiInputTextFlags_AlwaysInsertMode = ImGuiInputTextFlags_AlwaysOverwrite   // [renamed in 1.82] name was not matching behavior
+#endif
+};
+
+// Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()
+enum ImGuiTreeNodeFlags_
+{
+    ImGuiTreeNodeFlags_None = 0,
+    ImGuiTreeNodeFlags_Selected = 1 << 0,   // Draw as selected
+    ImGuiTreeNodeFlags_Framed = 1 << 1,   // Draw frame with background (e.g. for CollapsingHeader)
+    ImGuiTreeNodeFlags_AllowItemOverlap = 1 << 2,   // Hit testing to allow subsequent widgets to overlap this one
+    ImGuiTreeNodeFlags_NoTreePushOnOpen = 1 << 3,   // Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack
+    ImGuiTreeNodeFlags_NoAutoOpenOnLog = 1 << 4,   // Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)
+    ImGuiTreeNodeFlags_DefaultOpen = 1 << 5,   // Default node to be open
+    ImGuiTreeNodeFlags_OpenOnDoubleClick = 1 << 6,   // Need double-click to open node
+    ImGuiTreeNodeFlags_OpenOnArrow = 1 << 7,   // Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.
+    ImGuiTreeNodeFlags_Leaf = 1 << 8,   // No collapsing, no arrow (use as a convenience for leaf nodes).
+    ImGuiTreeNodeFlags_Bullet = 1 << 9,   // Display a bullet instead of arrow
+    ImGuiTreeNodeFlags_FramePadding = 1 << 10,  // Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().
+    ImGuiTreeNodeFlags_SpanAvailWidth = 1 << 11,  // Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.
+    ImGuiTreeNodeFlags_SpanFullWidth = 1 << 12,  // Extend hit box to the left-most and right-most edges (bypass the indented area).
+    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,  // (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)
+    //ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 14,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible
+    ImGuiTreeNodeFlags_CollapsingHeader = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog
+};
+
+// Flags for OpenPopup*(), BeginPopupContext*(), IsPopupOpen() functions.
+// - To be backward compatible with older API which took an 'int mouse_button = 1' argument, we need to treat
+//   small flags values as a mouse button index, so we encode the mouse button in the first few bits of the flags.
+//   It is therefore guaranteed to be legal to pass a mouse button index in ImGuiPopupFlags.
+// - For the same reason, we exceptionally default the ImGuiPopupFlags argument of BeginPopupContextXXX functions to 1 instead of 0.
+//   IMPORTANT: because the default parameter is 1 (==ImGuiPopupFlags_MouseButtonRight), if you rely on the default parameter
+//   and want to another another flag, you need to pass in the ImGuiPopupFlags_MouseButtonRight flag.
+// - Multiple buttons currently cannot be combined/or-ed in those functions (we could allow it later).
+enum ImGuiPopupFlags_
+{
+    ImGuiPopupFlags_None = 0,
+    ImGuiPopupFlags_MouseButtonLeft = 0,        // For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)
+    ImGuiPopupFlags_MouseButtonRight = 1,        // For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)
+    ImGuiPopupFlags_MouseButtonMiddle = 2,        // For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)
+    ImGuiPopupFlags_MouseButtonMask_ = 0x1F,
+    ImGuiPopupFlags_MouseButtonDefault_ = 1,
+    ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 5,   // For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack
+    ImGuiPopupFlags_NoOpenOverItems = 1 << 6,   // For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space
+    ImGuiPopupFlags_AnyPopupId = 1 << 7,   // For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.
+    ImGuiPopupFlags_AnyPopupLevel = 1 << 8,   // For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)
+    ImGuiPopupFlags_AnyPopup = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel
+};
+
+// Flags for ImGui::Selectable()
+enum ImGuiSelectableFlags_
+{
+    ImGuiSelectableFlags_None = 0,
+    ImGuiSelectableFlags_DontClosePopups = 1 << 0,   // Clicking this don't close parent popup window
+    ImGuiSelectableFlags_SpanAllColumns = 1 << 1,   // Selectable frame can span all columns (text will still fit in current column)
+    ImGuiSelectableFlags_AllowDoubleClick = 1 << 2,   // Generate press events on double clicks too
+    ImGuiSelectableFlags_Disabled = 1 << 3,   // Cannot be selected, display grayed out text
+    ImGuiSelectableFlags_AllowItemOverlap = 1 << 4    // (WIP) Hit testing to allow subsequent widgets to overlap this one
+};
+
+// Flags for ImGui::BeginCombo()
+enum ImGuiComboFlags_
+{
+    ImGuiComboFlags_None = 0,
+    ImGuiComboFlags_PopupAlignLeft = 1 << 0,   // Align the popup toward the left by default
+    ImGuiComboFlags_HeightSmall = 1 << 1,   // Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()
+    ImGuiComboFlags_HeightRegular = 1 << 2,   // Max ~8 items visible (default)
+    ImGuiComboFlags_HeightLarge = 1 << 3,   // Max ~20 items visible
+    ImGuiComboFlags_HeightLargest = 1 << 4,   // As many fitting items as possible
+    ImGuiComboFlags_NoArrowButton = 1 << 5,   // Display on the preview box without the square arrow button
+    ImGuiComboFlags_NoPreview = 1 << 6,   // Display only a square arrow button
+    ImGuiComboFlags_HeightMask_ = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest
+};
+
+// Flags for ImGui::BeginTabBar()
+enum ImGuiTabBarFlags_
+{
+    ImGuiTabBarFlags_None = 0,
+    ImGuiTabBarFlags_Reorderable = 1 << 0,   // Allow manually dragging tabs to re-order them + New tabs are appended at the end of list
+    ImGuiTabBarFlags_AutoSelectNewTabs = 1 << 1,   // Automatically select new tabs when they appear
+    ImGuiTabBarFlags_TabListPopupButton = 1 << 2,   // Disable buttons to open the tab list popup
+    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = 1 << 3,   // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.
+    ImGuiTabBarFlags_NoTabListScrollingButtons = 1 << 4,   // Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)
+    ImGuiTabBarFlags_NoTooltip = 1 << 5,   // Disable tooltips when hovering a tab
+    ImGuiTabBarFlags_FittingPolicyResizeDown = 1 << 6,   // Resize tabs when they don't fit
+    ImGuiTabBarFlags_FittingPolicyScroll = 1 << 7,   // Add scroll buttons when tabs don't fit
+    ImGuiTabBarFlags_FittingPolicyMask_ = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,
+    ImGuiTabBarFlags_FittingPolicyDefault_ = ImGuiTabBarFlags_FittingPolicyResizeDown
+};
+
+// Flags for ImGui::BeginTabItem()
+enum ImGuiTabItemFlags_
+{
+    ImGuiTabItemFlags_None = 0,
+    ImGuiTabItemFlags_UnsavedDocument = 1 << 0,   // Display a dot next to the title + tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
+    ImGuiTabItemFlags_SetSelected = 1 << 1,   // Trigger flag to programmatically make the tab selected when calling BeginTabItem()
+    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 1 << 2,   // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.
+    ImGuiTabItemFlags_NoPushId = 1 << 3,   // Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem()
+    ImGuiTabItemFlags_NoTooltip = 1 << 4,   // Disable tooltip for the given tab
+    ImGuiTabItemFlags_NoReorder = 1 << 5,   // Disable reordering this tab or having another tab cross over this tab
+    ImGuiTabItemFlags_Leading = 1 << 6,   // Enforce the tab position to the left of the tab bar (after the tab list popup button)
+    ImGuiTabItemFlags_Trailing = 1 << 7    // Enforce the tab position to the right of the tab bar (before the scrolling buttons)
+};
+
+// Flags for ImGui::BeginTable()
+// [BETA API] API may evolve slightly! If you use this, please update to the next version when it comes out!
+// - Important! Sizing policies have complex and subtle side effects, more so than you would expect.
+//   Read comments/demos carefully + experiment with live demos to get acquainted with them.
+// - The DEFAULT sizing policies are:
+//    - Default to ImGuiTableFlags_SizingFixedFit    if ScrollX is on, or if host window has ImGuiWindowFlags_AlwaysAutoResize.
+//    - Default to ImGuiTableFlags_SizingStretchSame if ScrollX is off.
+// - When ScrollX is off:
+//    - Table defaults to ImGuiTableFlags_SizingStretchSame -> all Columns defaults to ImGuiTableColumnFlags_WidthStretch with same weight.
+//    - Columns sizing policy allowed: Stretch (default), Fixed/Auto.
+//    - Fixed Columns will generally obtain their requested width (unless the table cannot fit them all).
+//    - Stretch Columns will share the remaining width.
+//    - Mixed Fixed/Stretch columns is possible but has various side-effects on resizing behaviors.
+//      The typical use of mixing sizing policies is: any number of LEADING Fixed columns, followed by one or two TRAILING Stretch columns.
+//      (this is because the visible order of columns have subtle but necessary effects on how they react to manual resizing).
+// - When ScrollX is on:
+//    - Table defaults to ImGuiTableFlags_SizingFixedFit -> all Columns defaults to ImGuiTableColumnFlags_WidthFixed
+//    - Columns sizing policy allowed: Fixed/Auto mostly.
+//    - Fixed Columns can be enlarged as needed. Table will show an horizontal scrollbar if needed.
+//    - When using auto-resizing (non-resizable) fixed columns, querying the content width to use item right-alignment e.g. SetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.
+//    - Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on, UNLESS you have specified a value for 'inner_width' in BeginTable().
+//      If you specify a value for 'inner_width' then effectively the scrolling space is known and Stretch or mixed Fixed/Stretch columns become meaningful again.
+// - Read on documentation at the top of imgui_tables.cpp for details.
+enum ImGuiTableFlags_
+{
+    // Features
+    ImGuiTableFlags_None = 0,
+    ImGuiTableFlags_Resizable = 1 << 0,   // Enable resizing columns.
+    ImGuiTableFlags_Reorderable = 1 << 1,   // Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)
+    ImGuiTableFlags_Hideable = 1 << 2,   // Enable hiding/disabling columns in context menu.
+    ImGuiTableFlags_Sortable = 1 << 3,   // Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.
+    ImGuiTableFlags_NoSavedSettings = 1 << 4,   // Disable persisting columns order, width and sort settings in the .ini file.
+    ImGuiTableFlags_ContextMenuInBody = 1 << 5,   // Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().
+    // Decorations
+    ImGuiTableFlags_RowBg = 1 << 6,   // Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)
+    ImGuiTableFlags_BordersInnerH = 1 << 7,   // Draw horizontal borders between rows.
+    ImGuiTableFlags_BordersOuterH = 1 << 8,   // Draw horizontal borders at the top and bottom.
+    ImGuiTableFlags_BordersInnerV = 1 << 9,   // Draw vertical borders between columns.
+    ImGuiTableFlags_BordersOuterV = 1 << 10,  // Draw vertical borders on the left and right sides.
+    ImGuiTableFlags_BordersH = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersOuterH, // Draw horizontal borders.
+    ImGuiTableFlags_BordersV = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersOuterV, // Draw vertical borders.
+    ImGuiTableFlags_BordersInner = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInnerH, // Draw inner borders.
+    ImGuiTableFlags_BordersOuter = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags_BordersOuterH, // Draw outer borders.
+    ImGuiTableFlags_Borders = ImGuiTableFlags_BordersInner | ImGuiTableFlags_BordersOuter,   // Draw all borders.
+    ImGuiTableFlags_NoBordersInBody = 1 << 11,  // [ALPHA] Disable vertical borders in columns Body (borders will always appears in Headers). -> May move to style
+    ImGuiTableFlags_NoBordersInBodyUntilResize = 1 << 12,  // [ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appears in Headers). -> May move to style
+    // Sizing Policy (read above for defaults)
+    ImGuiTableFlags_SizingFixedFit = 1 << 13,  // Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.
+    ImGuiTableFlags_SizingFixedSame = 2 << 13,  // Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.
+    ImGuiTableFlags_SizingStretchProp = 3 << 13,  // Columns default to _WidthStretch with default weights proportional to each columns contents widths.
+    ImGuiTableFlags_SizingStretchSame = 4 << 13,  // Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().
+    // Sizing Extra Options
+    ImGuiTableFlags_NoHostExtendX = 1 << 16,  // Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.
+    ImGuiTableFlags_NoHostExtendY = 1 << 17,  // Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.
+    ImGuiTableFlags_NoKeepColumnsVisible = 1 << 18,  // Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.
+    ImGuiTableFlags_PreciseWidths = 1 << 19,  // Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.
+    // Clipping
+    ImGuiTableFlags_NoClip = 1 << 20,  // Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().
+    // Padding
+    ImGuiTableFlags_PadOuterX = 1 << 21,  // Default if BordersOuterV is on. Enable outer-most padding. Generally desirable if you have headers.
+    ImGuiTableFlags_NoPadOuterX = 1 << 22,  // Default if BordersOuterV is off. Disable outer-most padding.
+    ImGuiTableFlags_NoPadInnerX = 1 << 23,  // Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).
+    // Scrolling
+    ImGuiTableFlags_ScrollX = 1 << 24,  // Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this create a child window, ScrollY is currently generally recommended when using ScrollX.
+    ImGuiTableFlags_ScrollY = 1 << 25,  // Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.
+    // Sorting
+    ImGuiTableFlags_SortMulti = 1 << 26,  // Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).
+    ImGuiTableFlags_SortTristate = 1 << 27,  // Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).
+
+    // [Internal] Combinations and masks
+    ImGuiTableFlags_SizingMask_ = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_SizingFixedSame | ImGuiTableFlags_SizingStretchProp | ImGuiTableFlags_SizingStretchSame
+
+    // Obsolete names (will be removed soon)
+#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
+    //, ImGuiTableFlags_ColumnsWidthFixed = ImGuiTableFlags_SizingFixedFit, ImGuiTableFlags_ColumnsWidthStretch = ImGuiTableFlags_SizingStretchSame   // WIP Tables 2020/12
+    //, ImGuiTableFlags_SizingPolicyFixed = ImGuiTableFlags_SizingFixedFit, ImGuiTableFlags_SizingPolicyStretch = ImGuiTableFlags_SizingStretchSame   // WIP Tables 2021/01
+#endif
+};
+
+// Flags for ImGui::TableSetupColumn()
+enum ImGuiTableColumnFlags_
+{
+    // Input configuration flags
+    ImGuiTableColumnFlags_None = 0,
+    ImGuiTableColumnFlags_Disabled = 1 << 0,   // Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)
+    ImGuiTableColumnFlags_DefaultHide = 1 << 1,   // Default as a hidden/disabled column.
+    ImGuiTableColumnFlags_DefaultSort = 1 << 2,   // Default as a sorting column.
+    ImGuiTableColumnFlags_WidthStretch = 1 << 3,   // Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).
+    ImGuiTableColumnFlags_WidthFixed = 1 << 4,   // Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).
+    ImGuiTableColumnFlags_NoResize = 1 << 5,   // Disable manual resizing.
+    ImGuiTableColumnFlags_NoReorder = 1 << 6,   // Disable manual reordering this column, this will also prevent other columns from crossing over this column.
+    ImGuiTableColumnFlags_NoHide = 1 << 7,   // Disable ability to hide/disable this column.
+    ImGuiTableColumnFlags_NoClip = 1 << 8,   // Disable clipping for this column (all NoClip columns will render in a same draw command).
+    ImGuiTableColumnFlags_NoSort = 1 << 9,   // Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).
+    ImGuiTableColumnFlags_NoSortAscending = 1 << 10,  // Disable ability to sort in the ascending direction.
+    ImGuiTableColumnFlags_NoSortDescending = 1 << 11,  // Disable ability to sort in the descending direction.
+    ImGuiTableColumnFlags_NoHeaderLabel = 1 << 12,  // TableHeadersRow() will not submit label for this column. Convenient for some small columns. Name will still appear in context menu.
+    ImGuiTableColumnFlags_NoHeaderWidth = 1 << 13,  // Disable header text width contribution to automatic column width.
+    ImGuiTableColumnFlags_PreferSortAscending = 1 << 14,  // Make the initial sort direction Ascending when first sorting on this column (default).
+    ImGuiTableColumnFlags_PreferSortDescending = 1 << 15,  // Make the initial sort direction Descending when first sorting on this column.
+    ImGuiTableColumnFlags_IndentEnable = 1 << 16,  // Use current Indent value when entering cell (default for column 0).
+    ImGuiTableColumnFlags_IndentDisable = 1 << 17,  // Ignore current Indent value when entering cell (default for columns > 0). Indentation changes _within_ the cell will still be honored.
+
+    // Output status flags, read-only via TableGetColumnFlags()
+    ImGuiTableColumnFlags_IsEnabled = 1 << 24,  // Status: is enabled == not hidden by user/api (referred to as "Hide" in _DefaultHide and _NoHide) flags.
+    ImGuiTableColumnFlags_IsVisible = 1 << 25,  // Status: is visible == is enabled AND not clipped by scrolling.
+    ImGuiTableColumnFlags_IsSorted = 1 << 26,  // Status: is currently part of the sort specs
+    ImGuiTableColumnFlags_IsHovered = 1 << 27,  // Status: is hovered by mouse
+
+    // [Internal] Combinations and masks
+    ImGuiTableColumnFlags_WidthMask_ = ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_WidthFixed,
+    ImGuiTableColumnFlags_IndentMask_ = ImGuiTableColumnFlags_IndentEnable | ImGuiTableColumnFlags_IndentDisable,
+    ImGuiTableColumnFlags_StatusMask_ = ImGuiTableColumnFlags_IsEnabled | ImGuiTableColumnFlags_IsVisible | ImGuiTableColumnFlags_IsSorted | ImGuiTableColumnFlags_IsHovered,
+    ImGuiTableColumnFlags_NoDirectResize_ = 1 << 30   // [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)
+
+    // Obsolete names (will be removed soon)
+#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
+    //ImGuiTableColumnFlags_WidthAuto           = ImGuiTableColumnFlags_WidthFixed | ImGuiTableColumnFlags_NoResize, // Column will not stretch and keep resizing based on submitted contents.
+#endif
+};
+
+// Flags for ImGui::TableNextRow()
+enum ImGuiTableRowFlags_
+{
+    ImGuiTableRowFlags_None = 0,
+    ImGuiTableRowFlags_Headers = 1 << 0    // Identify header row (set default background color + width of its contents accounted different for auto column width)
+};
+
+// Enum for ImGui::TableSetBgColor()
+// Background colors are rendering in 3 layers:
+//  - Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.
+//  - Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.
+//  - Layer 2: draw with CellBg color if set.
+// The purpose of the two row/columns layers is to let you decide if a background color changes should override or blend with the existing color.
+// When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.
+// If you set the color of RowBg0 target, your color will override the existing RowBg0 color.
+// If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.
+enum ImGuiTableBgTarget_
+{
+    ImGuiTableBgTarget_None = 0,
+    ImGuiTableBgTarget_RowBg0 = 1,        // Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)
+    ImGuiTableBgTarget_RowBg1 = 2,        // Set row background color 1 (generally used for selection marking)
+    ImGuiTableBgTarget_CellBg = 3         // Set cell background color (top-most color)
+};
+
+// Flags for ImGui::IsWindowFocused()
+enum ImGuiFocusedFlags_
+{
+    ImGuiFocusedFlags_None = 0,
+    ImGuiFocusedFlags_ChildWindows = 1 << 0,   // Return true if any children of the window is focused
+    ImGuiFocusedFlags_RootWindow = 1 << 1,   // Test from root window (top most parent of the current hierarchy)
+    ImGuiFocusedFlags_AnyWindow = 1 << 2,   // Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!
+    ImGuiFocusedFlags_NoPopupHierarchy = 1 << 3,   // Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
+    ImGuiFocusedFlags_DockHierarchy = 1 << 4,   // Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
+    ImGuiFocusedFlags_RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows
+};
+
+// Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()
+// Note: if you are trying to check whether your mouse should be dispatched to Dear ImGui or to your app, you should use 'io.WantCaptureMouse' instead! Please read the FAQ!
+// Note: windows with the ImGuiWindowFlags_NoInputs flag are ignored by IsWindowHovered() calls.
+enum ImGuiHoveredFlags_
+{
+    ImGuiHoveredFlags_None = 0,        // Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.
+    ImGuiHoveredFlags_ChildWindows = 1 << 0,   // IsWindowHovered() only: Return true if any children of the window is hovered
+    ImGuiHoveredFlags_RootWindow = 1 << 1,   // IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)
+    ImGuiHoveredFlags_AnyWindow = 1 << 2,   // IsWindowHovered() only: Return true if any window is hovered
+    ImGuiHoveredFlags_NoPopupHierarchy = 1 << 3,   // IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
+    ImGuiHoveredFlags_DockHierarchy = 1 << 4,   // IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
+    ImGuiHoveredFlags_AllowWhenBlockedByPopup = 1 << 5,   // Return true even if a popup window is normally blocking access to this item/window
+    //ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 << 6,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.
+    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 1 << 7,   // Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.
+    ImGuiHoveredFlags_AllowWhenOverlapped = 1 << 8,   // IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window
+    ImGuiHoveredFlags_AllowWhenDisabled = 1 << 9,   // IsItemHovered() only: Return true even if the item is disabled
+    ImGuiHoveredFlags_RectOnly = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
+    ImGuiHoveredFlags_RootAndChildWindows = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows
+};
+
+// Flags for ImGui::DockSpace(), shared/inherited by child nodes.
+// (Some flags can be applied to individual nodes directly)
+// FIXME-DOCK: Also see ImGuiDockNodeFlagsPrivate_ which may involve using the WIP and internal DockBuilder api.
+enum ImGuiDockNodeFlags_
+{
+    ImGuiDockNodeFlags_None = 0,
+    ImGuiDockNodeFlags_KeepAliveOnly = 1 << 0,   // Shared       // Don't display the dockspace node but keep it alive. Windows docked into this dockspace node won't be undocked.
+    //ImGuiDockNodeFlags_NoCentralNode              = 1 << 1,   // Shared       // Disable Central Node (the node which can stay empty)
+    ImGuiDockNodeFlags_NoDockingInCentralNode = 1 << 2,   // Shared       // Disable docking inside the Central Node, which will be always kept empty.
+    ImGuiDockNodeFlags_PassthruCentralNode = 1 << 3,   // Shared       // Enable passthru dockspace: 1) DockSpace() will render a ImGuiCol_WindowBg background covering everything excepted the Central Node when empty. Meaning the host window should probably use SetNextWindowBgAlpha(0.0f) prior to Begin() when using this. 2) When Central Node is empty: let inputs pass-through + won't display a DockingEmptyBg background. See demo for details.
+    ImGuiDockNodeFlags_NoSplit = 1 << 4,   // Shared/Local // Disable splitting the node into smaller nodes. Useful e.g. when embedding dockspaces into a main root one (the root one may have splitting disabled to reduce confusion). Note: when turned off, existing splits will be preserved.
+    ImGuiDockNodeFlags_NoResize = 1 << 5,   // Shared/Local // Disable resizing node using the splitter/separators. Useful with programmatically setup dockspaces.
+    ImGuiDockNodeFlags_AutoHideTabBar = 1 << 6    // Shared/Local // Tab bar will automatically hide when there is a single window in the dock node.
+};
+
+// Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()
+enum ImGuiDragDropFlags_
+{
+    ImGuiDragDropFlags_None = 0,
+    // BeginDragDropSource() flags
+    ImGuiDragDropFlags_SourceNoPreviewTooltip = 1 << 0,   // By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disable this behavior.
+    ImGuiDragDropFlags_SourceNoDisableHover = 1 << 1,   // By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disable this behavior so you can still call IsItemHovered() on the source item.
+    ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 1 << 2,   // Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.
+    ImGuiDragDropFlags_SourceAllowNullID = 1 << 3,   // Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.
+    ImGuiDragDropFlags_SourceExtern = 1 << 4,   // External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously.
+    ImGuiDragDropFlags_SourceAutoExpirePayload = 1 << 5,   // Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)
+    // AcceptDragDropPayload() flags
+    ImGuiDragDropFlags_AcceptBeforeDelivery = 1 << 10,  // AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.
+    ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 1 << 11,  // Do not draw the default highlight rectangle when hovering over target.
+    ImGuiDragDropFlags_AcceptNoPreviewTooltip = 1 << 12,  // Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.
+    ImGuiDragDropFlags_AcceptPeekOnly = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect  // For peeking ahead and inspecting the payload before delivery.
+};
+
+// Standard Drag and Drop payload types. You can define you own payload types using short strings. Types starting with '_' are defined by Dear ImGui.
+#define IMGUI_PAYLOAD_TYPE_COLOR_3F     "_COL3F"    // float[3]: Standard type for colors, without alpha. User code may use this type.
+#define IMGUI_PAYLOAD_TYPE_COLOR_4F     "_COL4F"    // float[4]: Standard type for colors. User code may use this type.
+
+// A primary data type
+enum ImGuiDataType_
+{
+    ImGuiDataType_S8,       // signed char / char (with sensible compilers)
+    ImGuiDataType_U8,       // unsigned char
+    ImGuiDataType_S16,      // short
+    ImGuiDataType_U16,      // unsigned short
+    ImGuiDataType_S32,      // int
+    ImGuiDataType_U32,      // unsigned int
+    ImGuiDataType_S64,      // long long / __int64
+    ImGuiDataType_U64,      // unsigned long long / unsigned __int64
+    ImGuiDataType_Float,    // float
+    ImGuiDataType_Double,   // double
+    ImGuiDataType_COUNT
+};
+
+// A cardinal direction
+enum ImGuiDir_
+{
+    ImGuiDir_None = -1,
+    ImGuiDir_Left = 0,
+    ImGuiDir_Right = 1,
+    ImGuiDir_Up = 2,
+    ImGuiDir_Down = 3,
+    ImGuiDir_COUNT
+};
+
+// A sorting direction
+enum ImGuiSortDirection_
+{
+    ImGuiSortDirection_None = 0,
+    ImGuiSortDirection_Ascending = 1,    // Ascending = 0->9, A->Z etc.
+    ImGuiSortDirection_Descending = 2     // Descending = 9->0, Z->A etc.
+};
+
+// User fill ImGuiIO.KeyMap[] array with indices into the ImGuiIO.KeysDown[512] array
+enum ImGuiKey_
+{
+    ImGuiKey_Tab,
+    ImGuiKey_LeftArrow,
+    ImGuiKey_RightArrow,
+    ImGuiKey_UpArrow,
+    ImGuiKey_DownArrow,
+    ImGuiKey_PageUp,
+    ImGuiKey_PageDown,
+    ImGuiKey_Home,
+    ImGuiKey_End,
+    ImGuiKey_Insert,
+    ImGuiKey_Delete,
+    ImGuiKey_Backspace,
+    ImGuiKey_Space,
+    ImGuiKey_Enter,
+    ImGuiKey_Escape,
+    ImGuiKey_KeyPadEnter,
+    ImGuiKey_A,                 // for text edit CTRL+A: select all
+    ImGuiKey_C,                 // for text edit CTRL+C: copy
+    ImGuiKey_V,                 // for text edit CTRL+V: paste
+    ImGuiKey_X,                 // for text edit CTRL+X: cut
+    ImGuiKey_Y,                 // for text edit CTRL+Y: redo
+    ImGuiKey_Z,                 // for text edit CTRL+Z: undo
+    ImGuiKey_COUNT
+};
+
+// To test io.KeyMods (which is a combination of individual fields io.KeyCtrl, io.KeyShift, io.KeyAlt set by user/backend)
+enum ImGuiKeyModFlags_
+{
+    ImGuiKeyModFlags_None = 0,
+    ImGuiKeyModFlags_Ctrl = 1 << 0,
+    ImGuiKeyModFlags_Shift = 1 << 1,
+    ImGuiKeyModFlags_Alt = 1 << 2,
+    ImGuiKeyModFlags_Super = 1 << 3
+};
+
+// Gamepad/Keyboard navigation
+// Keyboard: Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard to enable. NewFrame() will automatically fill io.NavInputs[] based on your io.KeysDown[] + io.KeyMap[] arrays.
+// Gamepad:  Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad to enable. Backend: set ImGuiBackendFlags_HasGamepad and fill the io.NavInputs[] fields before calling NewFrame(). Note that io.NavInputs[] is cleared by EndFrame().
+// Read instructions in imgui.cpp for more details. Download PNG/PSD at http://dearimgui.org/controls_sheets.
+enum ImGuiNavInput_
+{
+    // Gamepad Mapping
+    ImGuiNavInput_Activate,      // activate / open / toggle / tweak value       // e.g. Cross  (PS4), A (Xbox), A (Switch), Space (Keyboard)
+    ImGuiNavInput_Cancel,        // cancel / close / exit                        // e.g. Circle (PS4), B (Xbox), B (Switch), Escape (Keyboard)
+    ImGuiNavInput_Input,         // text input / on-screen keyboard              // e.g. Triang.(PS4), Y (Xbox), X (Switch), Return (Keyboard)
+    ImGuiNavInput_Menu,          // tap: toggle menu / hold: focus, move, resize // e.g. Square (PS4), X (Xbox), Y (Switch), Alt (Keyboard)
+    ImGuiNavInput_DpadLeft,      // move / tweak / resize window (w/ PadMenu)    // e.g. D-pad Left/Right/Up/Down (Gamepads), Arrow keys (Keyboard)
+    ImGuiNavInput_DpadRight,     //
+    ImGuiNavInput_DpadUp,        //
+    ImGuiNavInput_DpadDown,      //
+    ImGuiNavInput_LStickLeft,    // scroll / move window (w/ PadMenu)            // e.g. Left Analog Stick Left/Right/Up/Down
+    ImGuiNavInput_LStickRight,   //
+    ImGuiNavInput_LStickUp,      //
+    ImGuiNavInput_LStickDown,    //
+    ImGuiNavInput_FocusPrev,     // next window (w/ PadMenu)                     // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)
+    ImGuiNavInput_FocusNext,     // prev window (w/ PadMenu)                     // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)
+    ImGuiNavInput_TweakSlow,     // slower tweaks                                // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)
+    ImGuiNavInput_TweakFast,     // faster tweaks                                // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)
+
+    // [Internal] Don't use directly! This is used internally to differentiate keyboard from gamepad inputs for behaviors that require to differentiate them.
+    // Keyboard behavior that have no corresponding gamepad mapping (e.g. CTRL+TAB) will be directly reading from io.KeysDown[] instead of io.NavInputs[].
+    ImGuiNavInput_KeyLeft_,      // move left                                    // = Arrow keys
+    ImGuiNavInput_KeyRight_,     // move right
+    ImGuiNavInput_KeyUp_,        // move up
+    ImGuiNavInput_KeyDown_,      // move down
+    ImGuiNavInput_COUNT,
+    ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyLeft_
+};
+
+// Configuration flags stored in io.ConfigFlags. Set by user/application.
+enum ImGuiConfigFlags_
+{
+    ImGuiConfigFlags_None = 0,
+    ImGuiConfigFlags_NavEnableKeyboard = 1 << 0,   // Master keyboard navigation enable flag. NewFrame() will automatically fill io.NavInputs[] based on io.KeysDown[].
+    ImGuiConfigFlags_NavEnableGamepad = 1 << 1,   // Master gamepad navigation enable flag. This is mostly to instruct your imgui backend to fill io.NavInputs[]. Backend also needs to set ImGuiBackendFlags_HasGamepad.
+    ImGuiConfigFlags_NavEnableSetMousePos = 1 << 2,   // Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your backend, otherwise ImGui will react as if the mouse is jumping around back and forth.
+    ImGuiConfigFlags_NavNoCaptureKeyboard = 1 << 3,   // Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.
+    ImGuiConfigFlags_NoMouse = 1 << 4,   // Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the backend.
+    ImGuiConfigFlags_NoMouseCursorChange = 1 << 5,   // Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.
+
+    // [BETA] Docking
+    ImGuiConfigFlags_DockingEnable = 1 << 6,   // Docking enable flags.
+
+    // [BETA] Viewports
+    // When using viewports it is recommended that your default value for ImGuiCol_WindowBg is opaque (Alpha=1.0) so transition to a viewport won't be noticeable.
+    ImGuiConfigFlags_ViewportsEnable = 1 << 10,  // Viewport enable flags (require both ImGuiBackendFlags_PlatformHasViewports + ImGuiBackendFlags_RendererHasViewports set by the respective backends)
+    ImGuiConfigFlags_DpiEnableScaleViewports = 1 << 14,  // [BETA: Don't use] FIXME-DPI: Reposition and resize imgui windows when the DpiScale of a viewport changed (mostly useful for the main viewport hosting other window). Note that resizing the main window itself is up to your application.
+    ImGuiConfigFlags_DpiEnableScaleFonts = 1 << 15,  // [BETA: Don't use] FIXME-DPI: Request bitmap-scaled fonts to match DpiScale. This is a very low-quality workaround. The correct way to handle DPI is _currently_ to replace the atlas and/or fonts in the Platform_OnChangedViewport callback, but this is all early work in progress.
+
+    // User storage (to allow your backend/engine to communicate to code that may be shared between multiple projects. Those flags are not used by core Dear ImGui)
+    ImGuiConfigFlags_IsSRGB = 1 << 20,  // Application is SRGB-aware.
+    ImGuiConfigFlags_IsTouchScreen = 1 << 21   // Application is using a touch screen instead of a mouse.
+};
+
+// Backend capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom backend.
+enum ImGuiBackendFlags_
+{
+    ImGuiBackendFlags_None = 0,
+    ImGuiBackendFlags_HasGamepad = 1 << 0,   // Backend Platform supports gamepad and currently has one connected.
+    ImGuiBackendFlags_HasMouseCursors = 1 << 1,   // Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.
+    ImGuiBackendFlags_HasSetMousePos = 1 << 2,   // Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).
+    ImGuiBackendFlags_RendererHasVtxOffset = 1 << 3,   // Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.
+
+    // [BETA] Viewports
+    ImGuiBackendFlags_PlatformHasViewports = 1 << 10,  // Backend Platform supports multiple viewports.
+    ImGuiBackendFlags_HasMouseHoveredViewport = 1 << 11,  // Backend Platform supports setting io.MouseHoveredViewport to the viewport directly under the mouse _IGNORING_ viewports with the ImGuiViewportFlags_NoInputs flag and _REGARDLESS_ of whether another viewport is focused and may be capturing the mouse. This information is _NOT EASY_ to provide correctly with most high-level engines! Don't set this without studying _carefully_ how the backends handle ImGuiViewportFlags_NoInputs!
+    ImGuiBackendFlags_RendererHasViewports = 1 << 12   // Backend Renderer supports multiple viewports.
+};
+
+// Enumeration for PushStyleColor() / PopStyleColor()
+enum ImGuiCol_
+{
+    ImGuiCol_Text,
+    ImGuiCol_TextDisabled,
+    ImGuiCol_WindowBg,              // Background of normal windows
+    ImGuiCol_ChildBg,               // Background of child windows
+    ImGuiCol_PopupBg,               // Background of popups, menus, tooltips windows
+    ImGuiCol_Border,
+    ImGuiCol_BorderShadow,
+    ImGuiCol_FrameBg,               // Background of checkbox, radio button, plot, slider, text input
+    ImGuiCol_FrameBgHovered,
+    ImGuiCol_FrameBgActive,
+    ImGuiCol_TitleBg,
+    ImGuiCol_TitleBgActive,
+    ImGuiCol_TitleBgCollapsed,
+    ImGuiCol_MenuBarBg,
+    ImGuiCol_ScrollbarBg,
+    ImGuiCol_ScrollbarGrab,
+    ImGuiCol_ScrollbarGrabHovered,
+    ImGuiCol_ScrollbarGrabActive,
+    ImGuiCol_CheckMark,
+    ImGuiCol_SliderGrab,
+    ImGuiCol_SliderGrabActive,
+    ImGuiCol_Button,
+    ImGuiCol_ButtonHovered,
+    ImGuiCol_ButtonActive,
+    ImGuiCol_Header,                // Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem
+    ImGuiCol_HeaderHovered,
+    ImGuiCol_HeaderActive,
+    ImGuiCol_Separator,
+    ImGuiCol_SeparatorHovered,
+    ImGuiCol_SeparatorActive,
+    ImGuiCol_ResizeGrip,
+    ImGuiCol_ResizeGripHovered,
+    ImGuiCol_ResizeGripActive,
+    ImGuiCol_Tab,
+    ImGuiCol_TabHovered,
+    ImGuiCol_TabActive,
+    ImGuiCol_TabUnfocused,
+    ImGuiCol_TabUnfocusedActive,
+    ImGuiCol_DockingPreview,        // Preview overlay color when about to docking something
+    ImGuiCol_DockingEmptyBg,        // Background color for empty node (e.g. CentralNode with no window docked into it)
+    ImGuiCol_PlotLines,
+    ImGuiCol_PlotLinesHovered,
+    ImGuiCol_PlotHistogram,
+    ImGuiCol_PlotHistogramHovered,
+    ImGuiCol_TableHeaderBg,         // Table header background
+    ImGuiCol_TableBorderStrong,     // Table outer and header borders (prefer using Alpha=1.0 here)
+    ImGuiCol_TableBorderLight,      // Table inner borders (prefer using Alpha=1.0 here)
+    ImGuiCol_TableRowBg,            // Table row background (even rows)
+    ImGuiCol_TableRowBgAlt,         // Table row background (odd rows)
+    ImGuiCol_TextSelectedBg,
+    ImGuiCol_DragDropTarget,
+    ImGuiCol_NavHighlight,          // Gamepad/keyboard: current highlighted item
+    ImGuiCol_NavWindowingHighlight, // Highlight window when using CTRL+TAB
+    ImGuiCol_NavWindowingDimBg,     // Darken/colorize entire screen behind the CTRL+TAB window list, when active
+    ImGuiCol_ModalWindowDimBg,      // Darken/colorize entire screen behind a modal window, when one is active
+    ImGuiCol_COUNT
+};
+
+// Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.
+// - The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code.
+//   During initialization or between frames, feel free to just poke into ImGuiStyle directly.
+// - Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description.
+//   In Visual Studio IDE: CTRL+comma ("Edit.NavigateTo") can follow symbols in comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
+//   With Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols in comments.
+// - When changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.
+enum ImGuiStyleVar_
+{
+    // Enum name --------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)
+    ImGuiStyleVar_Alpha,               // float     Alpha
+    ImGuiStyleVar_DisabledAlpha,       // float     DisabledAlpha
+    ImGuiStyleVar_WindowPadding,       // ImVec2    WindowPadding
+    ImGuiStyleVar_WindowRounding,      // float     WindowRounding
+    ImGuiStyleVar_WindowBorderSize,    // float     WindowBorderSize
+    ImGuiStyleVar_WindowMinSize,       // ImVec2    WindowMinSize
+    ImGuiStyleVar_WindowTitleAlign,    // ImVec2    WindowTitleAlign
+    ImGuiStyleVar_ChildRounding,       // float     ChildRounding
+    ImGuiStyleVar_ChildBorderSize,     // float     ChildBorderSize
+    ImGuiStyleVar_PopupRounding,       // float     PopupRounding
+    ImGuiStyleVar_PopupBorderSize,     // float     PopupBorderSize
+    ImGuiStyleVar_FramePadding,        // ImVec2    FramePadding
+    ImGuiStyleVar_FrameRounding,       // float     FrameRounding
+    ImGuiStyleVar_FrameBorderSize,     // float     FrameBorderSize
+    ImGuiStyleVar_ItemSpacing,         // ImVec2    ItemSpacing
+    ImGuiStyleVar_ItemInnerSpacing,    // ImVec2    ItemInnerSpacing
+    ImGuiStyleVar_IndentSpacing,       // float     IndentSpacing
+    ImGuiStyleVar_CellPadding,         // ImVec2    CellPadding
+    ImGuiStyleVar_ScrollbarSize,       // float     ScrollbarSize
+    ImGuiStyleVar_ScrollbarRounding,   // float     ScrollbarRounding
+    ImGuiStyleVar_GrabMinSize,         // float     GrabMinSize
+    ImGuiStyleVar_GrabRounding,        // float     GrabRounding
+    ImGuiStyleVar_TabRounding,         // float     TabRounding
+    ImGuiStyleVar_ButtonTextAlign,     // ImVec2    ButtonTextAlign
+    ImGuiStyleVar_SelectableTextAlign, // ImVec2    SelectableTextAlign
+    ImGuiStyleVar_COUNT
+};
+
+// Flags for InvisibleButton() [extended in imgui_internal.h]
+enum ImGuiButtonFlags_
+{
+    ImGuiButtonFlags_None = 0,
+    ImGuiButtonFlags_MouseButtonLeft = 1 << 0,   // React on left mouse button (default)
+    ImGuiButtonFlags_MouseButtonRight = 1 << 1,   // React on right mouse button
+    ImGuiButtonFlags_MouseButtonMiddle = 1 << 2,   // React on center mouse button
+
+    // [Internal]
+    ImGuiButtonFlags_MouseButtonMask_ = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight | ImGuiButtonFlags_MouseButtonMiddle,
+    ImGuiButtonFlags_MouseButtonDefault_ = ImGuiButtonFlags_MouseButtonLeft
+};
+
+// Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()
+enum ImGuiColorEditFlags_
+{
+    ImGuiColorEditFlags_None = 0,
+    ImGuiColorEditFlags_NoAlpha = 1 << 1,   //              // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).
+    ImGuiColorEditFlags_NoPicker = 1 << 2,   //              // ColorEdit: disable picker when clicking on color square.
+    ImGuiColorEditFlags_NoOptions = 1 << 3,   //              // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.
+    ImGuiColorEditFlags_NoSmallPreview = 1 << 4,   //              // ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)
+    ImGuiColorEditFlags_NoInputs = 1 << 5,   //              // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).
+    ImGuiColorEditFlags_NoTooltip = 1 << 6,   //              // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.
+    ImGuiColorEditFlags_NoLabel = 1 << 7,   //              // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).
+    ImGuiColorEditFlags_NoSidePreview = 1 << 8,   //              // ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.
+    ImGuiColorEditFlags_NoDragDrop = 1 << 9,   //              // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.
+    ImGuiColorEditFlags_NoBorder = 1 << 10,  //              // ColorButton: disable border (which is enforced by default)
+
+    // User Options (right-click on widget to change some of them).
+    ImGuiColorEditFlags_AlphaBar = 1 << 16,  //              // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.
+    ImGuiColorEditFlags_AlphaPreview = 1 << 17,  //              // ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.
+    ImGuiColorEditFlags_AlphaPreviewHalf = 1 << 18,  //              // ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.
+    ImGuiColorEditFlags_HDR = 1 << 19,  //              // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).
+    ImGuiColorEditFlags_DisplayRGB = 1 << 20,  // [Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.
+    ImGuiColorEditFlags_DisplayHSV = 1 << 21,  // [Display]    // "
+    ImGuiColorEditFlags_DisplayHex = 1 << 22,  // [Display]    // "
+    ImGuiColorEditFlags_Uint8 = 1 << 23,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.
+    ImGuiColorEditFlags_Float = 1 << 24,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.
+    ImGuiColorEditFlags_PickerHueBar = 1 << 25,  // [Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.
+    ImGuiColorEditFlags_PickerHueWheel = 1 << 26,  // [Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.
+    ImGuiColorEditFlags_InputRGB = 1 << 27,  // [Input]      // ColorEdit, ColorPicker: input and output data in RGB format.
+    ImGuiColorEditFlags_InputHSV = 1 << 28,  // [Input]      // ColorEdit, ColorPicker: input and output data in HSV format.
+
+    // Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to
+    // override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.
+    ImGuiColorEditFlags_DefaultOptions_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar,
+
+    // [Internal] Masks
+    ImGuiColorEditFlags_DisplayMask_ = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex,
+    ImGuiColorEditFlags_DataTypeMask_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,
+    ImGuiColorEditFlags_PickerMask_ = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar,
+    ImGuiColorEditFlags_InputMask_ = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV
+
+    // Obsolete names (will be removed)
+#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
+    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiColorEditFlags_DisplayHSV, ImGuiColorEditFlags_HEX = ImGuiColorEditFlags_DisplayHex  // [renamed in 1.69]
+#endif
+};
+
+// Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.
+// We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.
+enum ImGuiSliderFlags_
+{
+    ImGuiSliderFlags_None = 0,
+    ImGuiSliderFlags_AlwaysClamp = 1 << 4,       // Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.
+    ImGuiSliderFlags_Logarithmic = 1 << 5,       // Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.
+    ImGuiSliderFlags_NoRoundToFormat = 1 << 6,       // Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)
+    ImGuiSliderFlags_NoInput = 1 << 7,       // Disable CTRL+Click or Enter key allowing to input text directly into the widget
+    ImGuiSliderFlags_InvalidMask_ = 0x7000000F    // [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.
+
+    // Obsolete names (will be removed)
+#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
+    , ImGuiSliderFlags_ClampOnInput = ImGuiSliderFlags_AlwaysClamp // [renamed in 1.79]
+#endif
+};
+
+// Identify a mouse button.
+// Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.
+enum ImGuiMouseButton_
+{
+    ImGuiMouseButton_Left = 0,
+    ImGuiMouseButton_Right = 1,
+    ImGuiMouseButton_Middle = 2,
+    ImGuiMouseButton_COUNT = 5
+};
+
+// Enumeration for GetMouseCursor()
+// User code may request backend to display given cursor by calling SetMouseCursor(), which is why we have some cursors that are marked unused here
+enum ImGuiMouseCursor_
+{
+    ImGuiMouseCursor_None = -1,
+    ImGuiMouseCursor_Arrow = 0,
+    ImGuiMouseCursor_TextInput,         // When hovering over InputText, etc.
+    ImGuiMouseCursor_ResizeAll,         // (Unused by Dear ImGui functions)
+    ImGuiMouseCursor_ResizeNS,          // When hovering over an horizontal border
+    ImGuiMouseCursor_ResizeEW,          // When hovering over a vertical border or a column
+    ImGuiMouseCursor_ResizeNESW,        // When hovering over the bottom-left corner of a window
+    ImGuiMouseCursor_ResizeNWSE,        // When hovering over the bottom-right corner of a window
+    ImGuiMouseCursor_Hand,              // (Unused by Dear ImGui functions. Use for e.g. hyperlinks)
+    ImGuiMouseCursor_NotAllowed,        // When hovering something with disallowed interaction. Usually a crossed circle.
+    ImGuiMouseCursor_COUNT
+};
+
+// Enumeration for ImGui::SetWindow***(), SetNextWindow***(), SetNextItem***() functions
+// Represent a condition.
+// Important: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always.
+enum ImGuiCond_
+{
+    ImGuiCond_None = 0,        // No condition (always set the variable), same as _Always
+    ImGuiCond_Always = 1 << 0,   // No condition (always set the variable)
+    ImGuiCond_Once = 1 << 1,   // Set the variable once per runtime session (only the first call will succeed)
+    ImGuiCond_FirstUseEver = 1 << 2,   // Set the variable if the object/window has no persistently saved data (no entry in .ini file)
+    ImGuiCond_Appearing = 1 << 3    // Set the variable if the object/window is appearing after being hidden/inactive (or the first time)
+};
+
+//-----------------------------------------------------------------------------
+// [SECTION] Helpers: Memory allocations macros, ImVector<>
+//-----------------------------------------------------------------------------
+
+//-----------------------------------------------------------------------------
+// IM_MALLOC(), IM_FREE(), IM_NEW(), IM_PLACEMENT_NEW(), IM_DELETE()
+// We call C++ constructor on own allocated memory via the placement "new(ptr) Type()" syntax.
+// Defining a custom placement new() with a custom parameter allows us to bypass including <new> which on some platforms complains when user has disabled exceptions.
+//-----------------------------------------------------------------------------
+
+struct ImNewWrapper {};
+inline void* operator new(size_t, ImNewWrapper, void* ptr) { return ptr; }
+inline void  operator delete(void*, ImNewWrapper, void*) {} // This is only required so we can use the symmetrical new()
+#define IM_ALLOC(_SIZE)                     ImGui::MemAlloc(_SIZE)
+#define IM_FREE(_PTR)                       ImGui::MemFree(_PTR)
+#define IM_PLACEMENT_NEW(_PTR)              new(ImNewWrapper(), _PTR)
+#define IM_NEW(_TYPE)                       new(ImNewWrapper(), ImGui::MemAlloc(sizeof(_TYPE))) _TYPE
+template<typename T> void IM_DELETE(T* p) { if (p) { p->~T(); ImGui::MemFree(p); } }
+
+//-----------------------------------------------------------------------------
+// ImVector<>
+// Lightweight std::vector<>-like class to avoid dragging dependencies (also, some implementations of STL with debug enabled are absurdly slow, we bypass it so our code runs fast in debug).
+//-----------------------------------------------------------------------------
+// - You generally do NOT need to care or use this ever. But we need to make it available in imgui.h because some of our public structures are relying on it.
+// - We use std-like naming convention here, which is a little unusual for this codebase.
+// - Important: clear() frees memory, resize(0) keep the allocated buffer. We use resize(0) a lot to intentionally recycle allocated buffers across frames and amortize our costs.
+// - Important: our implementation does NOT call C++ constructors/destructors, we treat everything as raw data! This is intentional but be extra mindful of that,
+//   Do NOT use this class as a std::vector replacement in your own code! Many of the structures used by dear imgui can be safely initialized by a zero-memset.
+//-----------------------------------------------------------------------------
+
+IM_MSVC_RUNTIME_CHECKS_OFF
+template<typename T>
+struct ImVector
+{
+    int                 Size;
+    int                 Capacity;
+    T* Data;
+
+    // Provide standard typedefs but we don't use them ourselves.
+    typedef T                   value_type;
+    typedef value_type* iterator;
+    typedef const value_type* const_iterator;
+
+    // Constructors, destructor
+    inline ImVector() { Size = Capacity = 0; Data = NULL; }
+    inline ImVector(const ImVector<T>& src) { Size = Capacity = 0; Data = NULL; operator=(src); }
+    inline ImVector<T>& operator=(const ImVector<T>& src) { clear(); resize(src.Size); memcpy(Data, src.Data, (size_t)Size * sizeof(T)); return *this; }
+    inline ~ImVector() { if (Data) IM_FREE(Data); } // Important: does not destruct anything
+
+    inline void         clear() { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything
+    inline void         clear_delete() { for (int n = 0; n < Size; n++) IM_DELETE(Data[n]); clear(); }     // Important: never called automatically! always explicit.
+    inline void         clear_destruct() { for (int n = 0; n < Size; n++) Data[n].~T(); clear(); }           // Important: never called automatically! always explicit.
+
+    inline bool         empty() const { return Size == 0; }
+    inline int          size() const { return Size; }
+    inline int          size_in_bytes() const { return Size * (int)sizeof(T); }
+    inline int          max_size() const { return 0x7FFFFFFF / (int)sizeof(T); }
+    inline int          capacity() const { return Capacity; }
+    inline T& operator[](int i) { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }
+    inline const T& operator[](int i) const { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }
+
+    inline T* begin() { return Data; }
+    inline const T* begin() const { return Data; }
+    inline T* end() { return Data + Size; }
+    inline const T* end() const { return Data + Size; }
+    inline T& front() { IM_ASSERT(Size > 0); return Data[0]; }
+    inline const T& front() const { IM_ASSERT(Size > 0); return Data[0]; }
+    inline T& back() { IM_ASSERT(Size > 0); return Data[Size - 1]; }
+    inline const T& back() const { IM_ASSERT(Size > 0); return Data[Size - 1]; }
+    inline void         swap(ImVector<T>& rhs) { int rhs_size = rhs.Size; rhs.Size = Size; Size = rhs_size; int rhs_cap = rhs.Capacity; rhs.Capacity = Capacity; Capacity = rhs_cap; T* rhs_data = rhs.Data; rhs.Data = Data; Data = rhs_data; }
+
+    inline int          _grow_capacity(int sz) const { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }
+    inline void         resize(int new_size) { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }
+    inline void         resize(int new_size, const T& v) { if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) memcpy(&Data[n], &v, sizeof(v)); Size = new_size; }
+    inline void         shrink(int new_size) { IM_ASSERT(new_size <= Size); Size = new_size; } // Resize a vector to a smaller size, guaranteed not to cause a reallocation
+    inline void         reserve(int new_capacity) { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }
+
+    // NB: It is illegal to call push_back/push_front/insert with a reference pointing inside the ImVector data itself! e.g. v.push_back(v[10]) is forbidden.
+    inline void         push_back(const T& v) { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }
+    inline void         pop_back() { IM_ASSERT(Size > 0); Size--; }
+    inline void         push_front(const T& v) { if (Size == 0) push_back(v); else insert(Data, v); }
+    inline T* erase(const T* it) { IM_ASSERT(it >= Data && it < Data + Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(T)); Size--; return Data + off; }
+    inline T* erase(const T* it, const T* it_last) { IM_ASSERT(it >= Data && it < Data + Size && it_last > it && it_last <= Data + Size); const ptrdiff_t count = it_last - it; const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + count, ((size_t)Size - (size_t)off - (size_t)count) * sizeof(T)); Size -= (int)count; return Data + off; }
+    inline T* erase_unsorted(const T* it) { IM_ASSERT(it >= Data && it < Data + Size);  const ptrdiff_t off = it - Data; if (it < Data + Size - 1) memcpy(Data + off, Data + Size - 1, sizeof(T)); Size--; return Data + off; }
+    inline T* insert(const T* it, const T& v) { IM_ASSERT(it >= Data && it <= Data + Size); const ptrdiff_t off = it - Data; if (Size == Capacity) reserve(_grow_capacity(Size + 1)); if (off < (int)Size) memmove(Data + off + 1, Data + off, ((size_t)Size - (size_t)off) * sizeof(T)); memcpy(&Data[off], &v, sizeof(v)); Size++; return Data + off; }
+    inline bool         contains(const T& v) const { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data++ == v) return true; return false; }
+    inline T* find(const T& v) { T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data == v) break; else ++data; return data; }
+    inline const T* find(const T& v) const { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data == v) break; else ++data; return data; }
+    inline bool         find_erase(const T& v) { const T* it = find(v); if (it < Data + Size) { erase(it); return true; } return false; }
+    inline bool         find_erase_unsorted(const T& v) { const T* it = find(v); if (it < Data + Size) { erase_unsorted(it); return true; } return false; }
+    inline int          index_from_ptr(const T* it) const { IM_ASSERT(it >= Data && it < Data + Size); const ptrdiff_t off = it - Data; return (int)off; }
+};
+IM_MSVC_RUNTIME_CHECKS_RESTORE
+
+//-----------------------------------------------------------------------------
+// [SECTION] ImGuiStyle
+//-----------------------------------------------------------------------------
+// You may modify the ImGui::GetStyle() main instance during initialization and before NewFrame().
+// During the frame, use ImGui::PushStyleVar(ImGuiStyleVar_XXXX)/PopStyleVar() to alter the main style values,
+// and ImGui::PushStyleColor(ImGuiCol_XXX)/PopStyleColor() for colors.
+//-----------------------------------------------------------------------------
+
+struct ImGuiStyle
+{
+    float       Alpha;                      // Global alpha applies to everything in Dear ImGui.
+    float       DisabledAlpha;              // Additional alpha multiplier applied by BeginDisabled(). Multiply over current value of Alpha.
+    ImVec2      WindowPadding;              // Padding within a window.
+    float       WindowRounding;             // Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.
+    float       WindowBorderSize;           // Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
+    ImVec2      WindowMinSize;              // Minimum window size. This is a global setting. If you want to constraint individual windows, use SetNextWindowSizeConstraints().
+    ImVec2      WindowTitleAlign;           // Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.
+    ImGuiDir    WindowMenuButtonPosition;   // Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left.
+    float       ChildRounding;              // Radius of child window corners rounding. Set to 0.0f to have rectangular windows.
+    float       ChildBorderSize;            // Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
+    float       PopupRounding;              // Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)
+    float       PopupBorderSize;            // Thickness of border around popup/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
+    ImVec2      FramePadding;               // Padding within a framed rectangle (used by most widgets).
+    float       FrameRounding;              // Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).
+    float       FrameBorderSize;            // Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
+    ImVec2      ItemSpacing;                // Horizontal and vertical spacing between widgets/lines.
+    ImVec2      ItemInnerSpacing;           // Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).
+    ImVec2      CellPadding;                // Padding within a table cell
+    ImVec2      TouchExtraPadding;          // Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
+    float       IndentSpacing;              // Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).
+    float       ColumnsMinSpacing;          // Minimum horizontal spacing between two columns. Preferably > (FramePadding.x + 1).
+    float       ScrollbarSize;              // Width of the vertical scrollbar, Height of the horizontal scrollbar.
+    float       ScrollbarRounding;          // Radius of grab corners for scrollbar.
+    float       GrabMinSize;                // Minimum width/height of a grab box for slider/scrollbar.
+    float       GrabRounding;               // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
+    float       LogSliderDeadzone;          // The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero.
+    float       TabRounding;                // Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.
+    float       TabBorderSize;              // Thickness of border around tabs.
+    float       TabMinWidthForCloseButton;  // Minimum width for close button to appears on an unselected tab when hovered. Set to 0.0f to always show when hovering, set to FLT_MAX to never show close button unless selected.
+    ImGuiDir    ColorButtonPosition;        // Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.
+    ImVec2      ButtonTextAlign;            // Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered).
+    ImVec2      SelectableTextAlign;        // Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line.
+    ImVec2      DisplayWindowPadding;       // Window position are clamped to be visible within the display area or monitors by at least this amount. Only applies to regular windows.
+    ImVec2      DisplaySafeAreaPadding;     // If you cannot see the edges of your screen (e.g. on a TV) increase the safe area padding. Apply to popups/tooltips as well regular windows. NB: Prefer configuring your TV sets correctly!
+    float       MouseCursorScale;           // Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). We apply per-monitor DPI scaling over this scale. May be removed later.
+    bool        AntiAliasedLines;           // Enable anti-aliased lines/borders. Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
+    bool        AntiAliasedLinesUseTex;     // Enable anti-aliased lines/borders using textures where possible. Require backend to render with bilinear filtering. Latched at the beginning of the frame (copied to ImDrawList).
+    bool        AntiAliasedFill;            // Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
+    float       CurveTessellationTol;       // Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.
+    float       CircleTessellationMaxError; // Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry.
+    ImVec4      Colors[ImGuiCol_COUNT];
+
+    IMGUI_API ImGuiStyle();
+    IMGUI_API void ScaleAllSizes(float scale_factor);
+};
+
+//-----------------------------------------------------------------------------
+// [SECTION] ImGuiIO
+//-----------------------------------------------------------------------------
+// Communicate most settings and inputs/outputs to Dear ImGui using this structure.
+// Access via ImGui::GetIO(). Read 'Programmer guide' section in .cpp file for general usage.
+//-----------------------------------------------------------------------------
+
+struct ImGuiIO
+{
+    //------------------------------------------------------------------
+    // Configuration (fill once)                // Default value
+    //------------------------------------------------------------------
+
+    ImGuiConfigFlags   ConfigFlags;             // = 0              // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.
+    ImGuiBackendFlags  BackendFlags;            // = 0              // See ImGuiBackendFlags_ enum. Set by backend (imgui_impl_xxx files or custom backend) to communicate features supported by the backend.
+    ImVec2      DisplaySize;                    // <unset>          // Main display size, in pixels (generally == GetMainViewport()->Size)
+    float       DeltaTime;                      // = 1.0f/60.0f     // Time elapsed since last frame, in seconds.
+    float       IniSavingRate;                  // = 5.0f           // Minimum time between saving positions/sizes to .ini file, in seconds.
+    const char* IniFilename;                    // = "imgui.ini"    // Path to .ini file (important: default "imgui.ini" is relative to current working dir!). Set NULL to disable automatic .ini loading/saving or if you want to manually call LoadIniSettingsXXX() / SaveIniSettingsXXX() functions.
+    const char* LogFilename;                    // = "imgui_log.txt"// Path to .log file (default parameter to ImGui::LogToFile when no file is specified).
+    float       MouseDoubleClickTime;           // = 0.30f          // Time for a double-click, in seconds.
+    float       MouseDoubleClickMaxDist;        // = 6.0f           // Distance threshold to stay in to validate a double-click, in pixels.
+    float       MouseDragThreshold;             // = 6.0f           // Distance threshold before considering we are dragging.
+    int         KeyMap[ImGuiKey_COUNT];         // <unset>          // Map of indices into the KeysDown[512] entries array which represent your "native" keyboard state.
+    float       KeyRepeatDelay;                 // = 0.250f         // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).
+    float       KeyRepeatRate;                  // = 0.050f         // When holding a key/button, rate at which it repeats, in seconds.
+    void* UserData;                       // = NULL           // Store your own data for retrieval by callbacks.
+
+    ImFontAtlas* Fonts;                          // <auto>           // Font atlas: load, rasterize and pack one or more fonts into a single texture.
+    float       FontGlobalScale;                // = 1.0f           // Global scale all fonts
+    bool        FontAllowUserScaling;           // = false          // Allow user scaling text of individual window with CTRL+Wheel.
+    ImFont* FontDefault;                    // = NULL           // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].
+    ImVec2      DisplayFramebufferScale;        // = (1, 1)         // For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale.
+
+    // Docking options (when ImGuiConfigFlags_DockingEnable is set)
+    bool        ConfigDockingNoSplit;           // = false          // Simplified docking mode: disable window splitting, so docking is limited to merging multiple windows together into tab-bars.
+    bool        ConfigDockingWithShift;         // = false          // Enable docking with holding Shift key (reduce visual noise, allows dropping in wider space)
+    bool        ConfigDockingAlwaysTabBar;      // = false          // [BETA] [FIXME: This currently creates regression with auto-sizing and general overhead] Make every single floating window display within a docking node.
+    bool        ConfigDockingTransparentPayload;// = false          // [BETA] Make window or viewport transparent when docking and only display docking boxes on the target viewport. Useful if rendering of multiple viewport cannot be synced. Best used with ConfigViewportsNoAutoMerge.
+
+    // Viewport options (when ImGuiConfigFlags_ViewportsEnable is set)
+    bool        ConfigViewportsNoAutoMerge;     // = false;         // Set to make all floating imgui windows always create their own viewport. Otherwise, they are merged into the main host viewports when overlapping it. May also set ImGuiViewportFlags_NoAutoMerge on individual viewport.
+    bool        ConfigViewportsNoTaskBarIcon;   // = false          // Disable default OS task bar icon flag for secondary viewports. When a viewport doesn't want a task bar icon, ImGuiViewportFlags_NoTaskBarIcon will be set on it.
+    bool        ConfigViewportsNoDecoration;    // = true           // Disable default OS window decoration flag for secondary viewports. When a viewport doesn't want window decorations, ImGuiViewportFlags_NoDecoration will be set on it. Enabling decoration can create subsequent issues at OS levels (e.g. minimum window size).
+    bool        ConfigViewportsNoDefaultParent; // = false          // Disable default OS parenting to main viewport for secondary viewports. By default, viewports are marked with ParentViewportId = <main_viewport>, expecting the platform backend to setup a parent/child relationship between the OS windows (some backend may ignore this). Set to true if you want the default to be 0, then all viewports will be top-level OS windows.
+
+    // Miscellaneous options
+    bool        MouseDrawCursor;                // = false          // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by backend implementations.
+    bool        ConfigMacOSXBehaviors;          // = defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl.
+    bool        ConfigInputTextCursorBlink;     // = true           // Enable blinking cursor (optional as some users consider it to be distracting).
+    bool        ConfigDragClickToInputText;     // = false          // [BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard.
+    bool        ConfigWindowsResizeFromEdges;   // = true           // Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag)
+    bool        ConfigWindowsMoveFromTitleBarOnly; // = false       // Enable allowing to move windows only when clicking on their title bar. Does not apply to windows without a title bar.
+    float       ConfigMemoryCompactTimer;       // = 60.0f          // Timer (in seconds) to free transient windows/tables memory buffers when unused. Set to -1.0f to disable.
+
+    //------------------------------------------------------------------
+    // Platform Functions
+    // (the imgui_impl_xxxx backend files are setting those up for you)
+    //------------------------------------------------------------------
+
+    // Optional: Platform/Renderer backend name (informational only! will be displayed in About Window) + User data for backend/wrappers to store their own stuff.
+    const char* BackendPlatformName;            // = NULL
+    const char* BackendRendererName;            // = NULL
+    void* BackendPlatformUserData;        // = NULL           // User data for platform backend
+    void* BackendRendererUserData;        // = NULL           // User data for renderer backend
+    void* BackendLanguageUserData;        // = NULL           // User data for non C++ programming language backend
+
+    // Optional: Access OS clipboard
+    // (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)
+    const char* (*GetClipboardTextFn)(void* user_data);
+    void        (*SetClipboardTextFn)(void* user_data, const char* text);
+    void* ClipboardUserData;
+
+    //------------------------------------------------------------------
+    // Input - Fill before calling NewFrame()
+    //------------------------------------------------------------------
+
+    ImVec2      MousePos;                       // Mouse position, in pixels. Set to ImVec2(-FLT_MAX, -FLT_MAX) if mouse is unavailable (on another screen, etc.)
+    bool        MouseDown[5];                   // Mouse buttons: 0=left, 1=right, 2=middle + extras (ImGuiMouseButton_COUNT == 5). Dear ImGui mostly uses left and right buttons. Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.
+    float       MouseWheel;                     // Mouse wheel Vertical: 1 unit scrolls about 5 lines text.
+    float       MouseWheelH;                    // Mouse wheel Horizontal. Most users don't have a mouse with an horizontal wheel, may not be filled by all backends.
+    ImGuiID     MouseHoveredViewport;           // (Optional) When using multiple viewports: viewport the OS mouse cursor is hovering _IGNORING_ viewports with the ImGuiViewportFlags_NoInputs flag, and _REGARDLESS_ of whether another viewport is focused. Set io.BackendFlags |= ImGuiBackendFlags_HasMouseHoveredViewport if you can provide this info. If you don't imgui will infer the value using the rectangles and last focused time of the viewports it knows about (ignoring other OS windows).
+    bool        KeyCtrl;                        // Keyboard modifier pressed: Control
+    bool        KeyShift;                       // Keyboard modifier pressed: Shift
+    bool        KeyAlt;                         // Keyboard modifier pressed: Alt
+    bool        KeySuper;                       // Keyboard modifier pressed: Cmd/Super/Windows
+    bool        KeysDown[512];                  // Keyboard keys that are pressed (ideally left in the "native" order your engine has access to keyboard keys, so you can use your own defines/enums for keys).
+    float       NavInputs[ImGuiNavInput_COUNT]; // Gamepad inputs. Cleared back to zero by EndFrame(). Keyboard keys will be auto-mapped and be written here by NewFrame().
+
+    // Functions
+    IMGUI_API void  AddInputCharacter(unsigned int c);          // Queue new character input
+    IMGUI_API void  AddInputCharacterUTF16(ImWchar16 c);        // Queue new character input from an UTF-16 character, it can be a surrogate
+    IMGUI_API void  AddInputCharactersUTF8(const char* str);    // Queue new characters input from an UTF-8 string
+    IMGUI_API void  AddFocusEvent(bool focused);                // Notifies Dear ImGui when hosting platform windows lose or gain input focus
+    IMGUI_API void  ClearInputCharacters();                     // [Internal] Clear the text input buffer manually
+    IMGUI_API void  ClearInputKeys();                           // [Internal] Release all keys
+
+    //------------------------------------------------------------------
+    // Output - Updated by NewFrame() or EndFrame()/Render()
+    // (when reading from the io.WantCaptureMouse, io.WantCaptureKeyboard flags to dispatch your inputs, it is
+    //  generally easier and more correct to use their state BEFORE calling NewFrame(). See FAQ for details!)
+    //------------------------------------------------------------------
+
+    bool        WantCaptureMouse;               // Set when Dear ImGui will use mouse inputs, in this case do not dispatch them to your main game/application (either way, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.).
+    bool        WantCaptureKeyboard;            // Set when Dear ImGui will use keyboard inputs, in this case do not dispatch them to your main game/application (either way, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.).
+    bool        WantTextInput;                  // Mobile/console: when set, you may display an on-screen keyboard. This is set by Dear ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).
+    bool        WantSetMousePos;                // MousePos has been altered, backend should reposition mouse on next frame. Rarely used! Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled.
+    bool        WantSaveIniSettings;            // When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. Important: clear io.WantSaveIniSettings yourself after saving!
+    bool        NavActive;                      // Keyboard/Gamepad navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.
+    bool        NavVisible;                     // Keyboard/Gamepad navigation is visible and allowed (will handle ImGuiKey_NavXXX events).
+    float       Framerate;                      // Rough estimate of application framerate, in frame per second. Solely for convenience. Rolling average estimation based on io.DeltaTime over 120 frames.
+    int         MetricsRenderVertices;          // Vertices output during last call to Render()
+    int         MetricsRenderIndices;           // Indices output during last call to Render() = number of triangles * 3
+    int         MetricsRenderWindows;           // Number of visible windows
+    int         MetricsActiveWindows;           // Number of active windows
+    int         MetricsActiveAllocations;       // Number of active allocations, updated by MemAlloc/MemFree based on current context. May be off if you have multiple imgui contexts.
+    ImVec2      MouseDelta;                     // Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta.
+
+    //------------------------------------------------------------------
+    // [Internal] Dear ImGui will maintain those fields. Forward compatibility not guaranteed!
+    //------------------------------------------------------------------
+
+    bool        WantCaptureMouseUnlessPopupClose;// Alternative to WantCaptureMouse: (WantCaptureMouse == true && WantCaptureMouseUnlessPopupClose == false) when a click over void is expected to close a popup.
+    ImGuiKeyModFlags KeyMods;                   // Key mods flags (same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags), updated by NewFrame()
+    ImGuiKeyModFlags KeyModsPrev;               // Previous key mods
+    ImVec2      MousePosPrev;                   // Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)
+    ImVec2      MouseClickedPos[5];             // Position at time of clicking
+    double      MouseClickedTime[5];            // Time of last click (used to figure out double-click)
+    bool        MouseClicked[5];                // Mouse button went from !Down to Down (same as MouseClickedCount[x] != 0)
+    bool        MouseDoubleClicked[5];          // Has mouse button been double-clicked? (same as MouseClickedCount[x] == 2)
+    ImU16       MouseClickedCount[5];           // == 0 (not clicked), == 1 (same as MouseClicked[]), == 2 (double-clicked), == 3 (triple-clicked) etc. when going from !Down to Down
+    ImU16       MouseClickedLastCount[5];       // Count successive number of clicks. Stays valid after mouse release. Reset after another click is done.
+    bool        MouseReleased[5];               // Mouse button went from Down to !Down
+    bool        MouseDownOwned[5];              // Track if button was clicked inside a dear imgui window or over void blocked by a popup. We don't request mouse capture from the application if click started outside ImGui bounds.
+    bool        MouseDownOwnedUnlessPopupClose[5];//Track if button was clicked inside a dear imgui window.
+    float       MouseDownDuration[5];           // Duration the mouse button has been down (0.0f == just clicked)
+    float       MouseDownDurationPrev[5];       // Previous time the mouse button has been down
+    ImVec2      MouseDragMaxDistanceAbs[5];     // Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point
+    float       MouseDragMaxDistanceSqr[5];     // Squared maximum distance of how much mouse has traveled from the clicking point
+    float       KeysDownDuration[512];          // Duration the keyboard key has been down (0.0f == just pressed)
+    float       KeysDownDurationPrev[512];      // Previous duration the key has been down
+    float       NavInputsDownDuration[ImGuiNavInput_COUNT];
+    float       NavInputsDownDurationPrev[ImGuiNavInput_COUNT];
+    float       PenPressure;                    // Touch/Pen pressure (0.0f to 1.0f, should be >0.0f only when MouseDown[0] == true). Helper storage currently unused by Dear ImGui.
+    bool        AppFocusLost;
+    ImWchar16   InputQueueSurrogate;            // For AddInputCharacterUTF16
+    ImVector<ImWchar> InputQueueCharacters;     // Queue of _characters_ input (obtained by platform backend). Fill using AddInputCharacter() helper.
+
+    IMGUI_API   ImGuiIO();
+};
+
+//-----------------------------------------------------------------------------
+// [SECTION] Misc data structures
+//-----------------------------------------------------------------------------
+
+// Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback* flag is used.
+// The callback function should return 0 by default.
+// Callbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details)
+// - ImGuiInputTextFlags_CallbackEdit:        Callback on buffer edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)
+// - ImGuiInputTextFlags_CallbackAlways:      Callback on each iteration
+// - ImGuiInputTextFlags_CallbackCompletion:  Callback on pressing TAB
+// - ImGuiInputTextFlags_CallbackHistory:     Callback on pressing Up/Down arrows
+// - ImGuiInputTextFlags_CallbackCharFilter:  Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.
+// - ImGuiInputTextFlags_CallbackResize:      Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow.
+struct ImGuiInputTextCallbackData
+{
+    ImGuiInputTextFlags EventFlag;      // One ImGuiInputTextFlags_Callback*    // Read-only
+    ImGuiInputTextFlags Flags;          // What user passed to InputText()      // Read-only
+    void* UserData;       // What user passed to InputText()      // Read-only
+
+    // Arguments for the different callback events
+    // - To modify the text buffer in a callback, prefer using the InsertChars() / DeleteChars() function. InsertChars() will take care of calling the resize callback if necessary.
+    // - If you know your edits are not going to resize the underlying buffer allocation, you may modify the contents of 'Buf[]' directly. You need to update 'BufTextLen' accordingly (0 <= BufTextLen < BufSize) and set 'BufDirty'' to true so InputText can update its internal state.
+    ImWchar             EventChar;      // Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;
+    ImGuiKey            EventKey;       // Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]
+    char* Buf;            // Text buffer                          // Read-write   // [Resize] Can replace pointer / [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!
+    int                 BufTextLen;     // Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()
+    int                 BufSize;        // Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1
+    bool                BufDirty;       // Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]
+    int                 CursorPos;      //                                      // Read-write   // [Completion,History,Always]
+    int                 SelectionStart; //                                      // Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)
+    int                 SelectionEnd;   //                                      // Read-write   // [Completion,History,Always]
+
+    // Helper functions for text manipulation.
+    // Use those function to benefit from the CallbackResize behaviors. Calling those function reset the selection.
+    IMGUI_API ImGuiInputTextCallbackData();
+    IMGUI_API void      DeleteChars(int pos, int bytes_count);
+    IMGUI_API void      InsertChars(int pos, const char* text, const char* text_end = NULL);
+    void                SelectAll() { SelectionStart = 0; SelectionEnd = BufTextLen; }
+    void                ClearSelection() { SelectionStart = SelectionEnd = BufTextLen; }
+    bool                HasSelection() const { return SelectionStart != SelectionEnd; }
+};
+
+// Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().
+// NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.
+struct ImGuiSizeCallbackData
+{
+    void* UserData;       // Read-only.   What user passed to SetNextWindowSizeConstraints()
+    ImVec2  Pos;            // Read-only.   Window position, for reference.
+    ImVec2  CurrentSize;    // Read-only.   Current window size.
+    ImVec2  DesiredSize;    // Read-write.  Desired size, based on user's mouse position. Write to this field to restrain resizing.
+};
+
+// [ALPHA] Rarely used / very advanced uses only. Use with SetNextWindowClass() and DockSpace() functions.
+// Important: the content of this class is still highly WIP and likely to change and be refactored
+// before we stabilize Docking features. Please be mindful if using this.
+// Provide hints:
+// - To the platform backend via altered viewport flags (enable/disable OS decoration, OS task bar icons, etc.)
+// - To the platform backend for OS level parent/child relationships of viewport.
+// - To the docking system for various options and filtering.
+struct ImGuiWindowClass
+{
+    ImGuiID             ClassId;                    // User data. 0 = Default class (unclassed). Windows of different classes cannot be docked with each others.
+    ImGuiID             ParentViewportId;           // Hint for the platform backend. -1: use default. 0: request platform backend to not parent the platform. != 0: request platform backend to create a parent<>child relationship between the platform windows. Not conforming backends are free to e.g. parent every viewport to the main viewport or not.
+    ImGuiViewportFlags  ViewportFlagsOverrideSet;   // Viewport flags to set when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.
+    ImGuiViewportFlags  ViewportFlagsOverrideClear; // Viewport flags to clear when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.
+    ImGuiTabItemFlags   TabItemFlagsOverrideSet;    // [EXPERIMENTAL] TabItem flags to set when a window of this class gets submitted into a dock node tab bar. May use with ImGuiTabItemFlags_Leading or ImGuiTabItemFlags_Trailing.
+    ImGuiDockNodeFlags  DockNodeFlagsOverrideSet;   // [EXPERIMENTAL] Dock node flags to set when a window of this class is hosted by a dock node (it doesn't have to be selected!)
+    bool                DockingAlwaysTabBar;        // Set to true to enforce single floating windows of this class always having their own docking node (equivalent of setting the global io.ConfigDockingAlwaysTabBar)
+    bool                DockingAllowUnclassed;      // Set to true to allow windows of this class to be docked/merged with an unclassed window. // FIXME-DOCK: Move to DockNodeFlags override?
+
+    ImGuiWindowClass() { memset(this, 0, sizeof(*this)); ParentViewportId = (ImGuiID)-1; DockingAllowUnclassed = true; }
+};
+
+// Data payload for Drag and Drop operations: AcceptDragDropPayload(), GetDragDropPayload()
+struct ImGuiPayload
+{
+    // Members
+    void* Data;               // Data (copied and owned by dear imgui)
+    int             DataSize;           // Data size
+
+    // [Internal]
+    ImGuiID         SourceId;           // Source item id
+    ImGuiID         SourceParentId;     // Source parent id (if available)
+    int             DataFrameCount;     // Data timestamp
+    char            DataType[32 + 1];   // Data type tag (short user-supplied string, 32 characters max)
+    bool            Preview;            // Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)
+    bool            Delivery;           // Set when AcceptDragDropPayload() was called and mouse button is released over the target item.
+
+    ImGuiPayload() { Clear(); }
+    void Clear() { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType, 0, sizeof(DataType)); DataFrameCount = -1; Preview = Delivery = false; }
+    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataType) == 0; }
+    bool IsPreview() const { return Preview; }
+    bool IsDelivery() const { return Delivery; }
+};
+
+// Sorting specification for one column of a table (sizeof == 12 bytes)
+struct ImGuiTableColumnSortSpecs
+{
+    ImGuiID                     ColumnUserID;       // User id of the column (if specified by a TableSetupColumn() call)
+    ImS16                       ColumnIndex;        // Index of the column
+    ImS16                       SortOrder;          // Index within parent ImGuiTableSortSpecs (always stored in order starting from 0, tables sorted on a single criteria will always have a 0 here)
+    ImGuiSortDirection          SortDirection : 8;  // ImGuiSortDirection_Ascending or ImGuiSortDirection_Descending (you can use this or SortSign, whichever is more convenient for your sort function)
+
+    ImGuiTableColumnSortSpecs() { memset(this, 0, sizeof(*this)); }
+};
+
+// Sorting specifications for a table (often handling sort specs for a single column, occasionally more)
+// Obtained by calling TableGetSortSpecs().
+// When 'SpecsDirty == true' you can sort your data. It will be true with sorting specs have changed since last call, or the first time.
+// Make sure to set 'SpecsDirty = false' after sorting, else you may wastefully sort your data every frame!
+struct ImGuiTableSortSpecs
+{
+    const ImGuiTableColumnSortSpecs* Specs;     // Pointer to sort spec array.
+    int                         SpecsCount;     // Sort spec count. Most often 1. May be > 1 when ImGuiTableFlags_SortMulti is enabled. May be == 0 when ImGuiTableFlags_SortTristate is enabled.
+    bool                        SpecsDirty;     // Set to true when specs have changed since last time! Use this to sort again, then clear the flag.
+
+    ImGuiTableSortSpecs() { memset(this, 0, sizeof(*this)); }
+};
+
+//-----------------------------------------------------------------------------
+// [SECTION] Helpers (ImGuiOnceUponAFrame, ImGuiTextFilter, ImGuiTextBuffer, ImGuiStorage, ImGuiListClipper, ImColor)
+//-----------------------------------------------------------------------------
+
+// Helper: Unicode defines
+#define IM_UNICODE_CODEPOINT_INVALID 0xFFFD     // Invalid Unicode code point (standard value).
+#ifdef IMGUI_USE_WCHAR32
+#define IM_UNICODE_CODEPOINT_MAX     0x10FFFF   // Maximum Unicode code point supported by this build.
+#else
+#define IM_UNICODE_CODEPOINT_MAX     0xFFFF     // Maximum Unicode code point supported by this build.
+#endif
+
+// Helper: Execute a block of code at maximum once a frame. Convenient if you want to quickly create an UI within deep-nested code that runs multiple times every frame.
+// Usage: static ImGuiOnceUponAFrame oaf; if (oaf) ImGui::Text("This will be called only once per frame");
+struct ImGuiOnceUponAFrame
+{
+    ImGuiOnceUponAFrame() { RefFrame = -1; }
+    mutable int RefFrame;
+    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_frame) return false; RefFrame = current_frame; return true; }
+};
+
+// Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]"
+struct ImGuiTextFilter
+{
+    IMGUI_API           ImGuiTextFilter(const char* default_filter = "");
+    IMGUI_API bool      Draw(const char* label = "Filter (inc,-exc)", float width = 0.0f);  // Helper calling InputText+Build
+    IMGUI_API bool      PassFilter(const char* text, const char* text_end = NULL) const;
+    IMGUI_API void      Build();
+    void                Clear() { InputBuf[0] = 0; Build(); }
+    bool                IsActive() const { return !Filters.empty(); }
+
+    // [Internal]
+    struct ImGuiTextRange
+    {
+        const char* b;
+        const char* e;
+
+        ImGuiTextRange() { b = e = NULL; }
+        ImGuiTextRange(const char* _b, const char* _e) { b = _b; e = _e; }
+        bool            empty() const { return b == e; }
+        IMGUI_API void  split(char separator, ImVector<ImGuiTextRange>* out) const;
+    };
+    char                    InputBuf[256];
+    ImVector<ImGuiTextRange>Filters;
+    int                     CountGrep;
+};
+
+// Helper: Growable text buffer for logging/accumulating text
+// (this could be called 'ImGuiTextBuilder' / 'ImGuiStringBuilder')
+struct ImGuiTextBuffer
+{
+    ImVector<char>      Buf;
+    IMGUI_API static char EmptyString[1];
+
+    ImGuiTextBuffer() { }
+    inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i]; }
+    const char* begin() const { return Buf.Data ? &Buf.front() : EmptyString; }
+    const char* end() const { return Buf.Data ? &Buf.back() : EmptyString; }   // Buf is zero-terminated, so end() will point on the zero-terminator
+    int                 size() const { return Buf.Size ? Buf.Size - 1 : 0; }
+    bool                empty() const { return Buf.Size <= 1; }
+    void                clear() { Buf.clear(); }
+    void                reserve(int capacity) { Buf.reserve(capacity); }
+    const char* c_str() const { return Buf.Data ? Buf.Data : EmptyString; }
+    IMGUI_API void      append(const char* str, const char* str_end = NULL);
+    IMGUI_API void      appendf(const char* fmt, ...) IM_FMTARGS(2);
+    IMGUI_API void      appendfv(const char* fmt, va_list args) IM_FMTLIST(2);
+};
+
+// Helper: Key->Value storage
+// Typically you don't have to worry about this since a storage is held within each Window.
+// We use it to e.g. store collapse state for a tree (Int 0/1)
+// This is optimized for efficient lookup (dichotomy into a contiguous buffer) and rare insertion (typically tied to user interactions aka max once a frame)
+// You can use it as custom user storage for temporary values. Declare your own storage if, for example:
+// - You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).
+// - You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)
+// Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.
+struct ImGuiStorage
+{
+    // [Internal]
+    struct ImGuiStoragePair
+    {
+        ImGuiID key;
+        union { int val_i; float val_f; void* val_p; };
+        ImGuiStoragePair(ImGuiID _key, int _val_i) { key = _key; val_i = _val_i; }
+        ImGuiStoragePair(ImGuiID _key, float _val_f) { key = _key; val_f = _val_f; }
+        ImGuiStoragePair(ImGuiID _key, void* _val_p) { key = _key; val_p = _val_p; }
+    };
+
+    ImVector<ImGuiStoragePair>      Data;
+
+    // - Get***() functions find pair, never add/allocate. Pairs are sorted so a query is O(log N)
+    // - Set***() functions find pair, insertion on demand if missing.
+    // - Sorted insertion is costly, paid once. A typical frame shouldn't need to insert any new pair.
+    void                Clear() { Data.clear(); }
+    IMGUI_API int       GetInt(ImGuiID key, int default_val = 0) const;
+    IMGUI_API void      SetInt(ImGuiID key, int val);
+    IMGUI_API bool      GetBool(ImGuiID key, bool default_val = false) const;
+    IMGUI_API void      SetBool(ImGuiID key, bool val);
+    IMGUI_API float     GetFloat(ImGuiID key, float default_val = 0.0f) const;
+    IMGUI_API void      SetFloat(ImGuiID key, float val);
+    IMGUI_API void* GetVoidPtr(ImGuiID key) const; // default_val is NULL
+    IMGUI_API void      SetVoidPtr(ImGuiID key, void* val);
+
+    // - Get***Ref() functions finds pair, insert on demand if missing, return pointer. Useful if you intend to do Get+Set.
+    // - References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.
+    // - A typical use case where this is convenient for quick hacking (e.g. add storage during a live Edit&Continue session if you can't modify existing struct)
+    //      float* pvar = ImGui::GetFloatRef(key); ImGui::SliderFloat("var", pvar, 0, 100.0f); some_var += *pvar;
+    IMGUI_API int* GetIntRef(ImGuiID key, int default_val = 0);
+    IMGUI_API bool* GetBoolRef(ImGuiID key, bool default_val = false);
+    IMGUI_API float* GetFloatRef(ImGuiID key, float default_val = 0.0f);
+    IMGUI_API void** GetVoidPtrRef(ImGuiID key, void* default_val = NULL);
+
+    // Use on your own storage if you know only integer are being stored (open/close all tree nodes)
+    IMGUI_API void      SetAllInt(int val);
+
+    // For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once.
+    IMGUI_API void      BuildSortByKey();
+};
+
+// Helper: Manually clip large list of items.
+// If you have lots evenly spaced items and you have a random access to the list, you can perform coarse
+// clipping based on visibility to only submit items that are in view.
+// The clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped.
+// (Dear ImGui already clip items based on their bounds but: it needs to first layout the item to do so, and generally
+//  fetching/submitting your own data incurs additional cost. Coarse clipping using ImGuiListClipper allows you to easily
+//  scale using lists with tens of thousands of items without a problem)
+// Usage:
+//   ImGuiListClipper clipper;
+//   clipper.Begin(1000);         // We have 1000 elements, evenly spaced.
+//   while (clipper.Step())
+//       for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
+//           ImGui::Text("line number %d", i);
+// Generally what happens is:
+// - Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1) regardless of it being visible or not.
+// - User code submit that one element.
+// - Clipper can measure the height of the first element
+// - Clipper calculate the actual range of elements to display based on the current clipping rectangle, position the cursor before the first visible element.
+// - User code submit visible elements.
+// - The clipper also handles various subtleties related to keyboard/gamepad navigation, wrapping etc.
+struct ImGuiListClipper
+{
+    int             DisplayStart;       // First item to display, updated by each call to Step()
+    int             DisplayEnd;         // End of items to display (exclusive)
+    int             ItemsCount;         // [Internal] Number of items
+    float           ItemsHeight;        // [Internal] Height of item after a first step and item submission can calculate it
+    float           StartPosY;          // [Internal] Cursor position at the time of Begin() or after table frozen rows are all processed
+    void* TempData;           // [Internal] Internal data
+
+    // items_count: Use INT_MAX if you don't know how many items you have (in which case the cursor won't be advanced in the final step)
+    // items_height: Use -1.0f to be calculated automatically on first step. Otherwise pass in the distance between your items, typically GetTextLineHeightWithSpacing() or GetFrameHeightWithSpacing().
+    IMGUI_API ImGuiListClipper();
+    IMGUI_API ~ImGuiListClipper();
+    IMGUI_API void  Begin(int items_count, float items_height = -1.0f);
+    IMGUI_API void  End();             // Automatically called on the last call of Step() that returns false.
+    IMGUI_API bool  Step();            // Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.
+
+    // Call ForceDisplayRangeByIndices() before first call to Step() if you need a range of items to be displayed regardless of visibility.
+    IMGUI_API void  ForceDisplayRangeByIndices(int item_min, int item_max); // item_max is exclusive e.g. use (42, 42+1) to make item 42 always visible BUT due to alignment/padding of certain items it is likely that an extra item may be included on either end of the display range.
+
+#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
+    inline ImGuiListClipper(int items_count, float items_height = -1.0f) { memset(this, 0, sizeof(*this)); ItemsCount = -1; Begin(items_count, items_height); } // [removed in 1.79]
+#endif
+};
+
+// Helpers macros to generate 32-bit encoded colors
+#ifdef IMGUI_USE_BGRA_PACKED_COLOR
+#define IM_COL32_R_SHIFT    16
+#define IM_COL32_G_SHIFT    8
+#define IM_COL32_B_SHIFT    0
+#define IM_COL32_A_SHIFT    24
+#define IM_COL32_A_MASK     0xFF000000
+#else
+#define IM_COL32_R_SHIFT    0
+#define IM_COL32_G_SHIFT    8
+#define IM_COL32_B_SHIFT    16
+#define IM_COL32_A_SHIFT    24
+#define IM_COL32_A_MASK     0xFF000000
+#endif
+#define IM_COL32(R,G,B,A)    (((ImU32)(A)<<IM_COL32_A_SHIFT) | ((ImU32)(B)<<IM_COL32_B_SHIFT) | ((ImU32)(G)<<IM_COL32_G_SHIFT) | ((ImU32)(R)<<IM_COL32_R_SHIFT))
+#define IM_COL32_WHITE       IM_COL32(255,255,255,255)  // Opaque white = 0xFFFFFFFF
+#define IM_COL32_BLACK       IM_COL32(0,0,0,255)        // Opaque black
+#define IM_COL32_BLACK_TRANS IM_COL32(0,0,0,0)          // Transparent black = 0x00000000
+
+// Helper: ImColor() implicitly converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)
+// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.
+// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.
+// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.
+struct ImColor
+{
+    ImVec4              Value;
+
+    ImColor() { Value.x = Value.y = Value.z = Value.w = 0.0f; }
+    ImColor(int r, int g, int b, int a = 255) { float sc = 1.0f / 255.0f; Value.x = (float)r * sc; Value.y = (float)g * sc; Value.z = (float)b * sc; Value.w = (float)a * sc; }
+    ImColor(ImU32 rgba) { float sc = 1.0f / 255.0f; Value.x = (float)((rgba >> IM_COL32_R_SHIFT) & 0xFF) * sc; Value.y = (float)((rgba >> IM_COL32_G_SHIFT) & 0xFF) * sc; Value.z = (float)((rgba >> IM_COL32_B_SHIFT) & 0xFF) * sc; Value.w = (float)((rgba >> IM_COL32_A_SHIFT) & 0xFF) * sc; }
+    ImColor(float r, float g, float b, float a = 1.0f) { Value.x = r; Value.y = g; Value.z = b; Value.w = a; }
+    ImColor(const ImVec4& col) { Value = col; }
+    inline operator ImU32() const { return ImGui::ColorConvertFloat4ToU32(Value); }
+    inline operator ImVec4() const { return Value; }
+
+    // FIXME-OBSOLETE: May need to obsolete/cleanup those helpers.
+    inline void    SetHSV(float h, float s, float v, float a = 1.0f) { ImGui::ColorConvertHSVtoRGB(h, s, v, Value.x, Value.y, Value.z); Value.w = a; }
+    static ImColor HSV(float h, float s, float v, float a = 1.0f) { float r, g, b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r, g, b, a); }
+};
+
+//-----------------------------------------------------------------------------
+// [SECTION] Drawing API (ImDrawCmd, ImDrawIdx, ImDrawVert, ImDrawChannel, ImDrawListSplitter, ImDrawListFlags, ImDrawList, ImDrawData)
+// Hold a series of drawing commands. The user provides a renderer for ImDrawData which essentially contains an array of ImDrawList.
+//-----------------------------------------------------------------------------
+
+// The maximum line width to bake anti-aliased textures for. Build atlas with ImFontAtlasFlags_NoBakedLines to disable baking.
+#ifndef IM_DRAWLIST_TEX_LINES_WIDTH_MAX
+#define IM_DRAWLIST_TEX_LINES_WIDTH_MAX     (63)
+#endif
+
+// ImDrawCallback: Draw callbacks for advanced uses [configurable type: override in imconfig.h]
+// NB: You most likely do NOT need to use draw callbacks just to create your own widget or customized UI rendering,
+// you can poke into the draw list for that! Draw callback may be useful for example to:
+//  A) Change your GPU render state,
+//  B) render a complex 3D scene inside a UI element without an intermediate texture/render target, etc.
+// The expected behavior from your rendering function is 'if (cmd.UserCallback != NULL) { cmd.UserCallback(parent_list, cmd); } else { RenderTriangles() }'
+// If you want to override the signature of ImDrawCallback, you can simply use e.g. '#define ImDrawCallback MyDrawCallback' (in imconfig.h) + update rendering backend accordingly.
+#ifndef ImDrawCallback
+typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);
+#endif
+
+// Special Draw callback value to request renderer backend to reset the graphics/render state.
+// The renderer backend needs to handle this special value, otherwise it will crash trying to call a function at this address.
+// This is useful for example if you submitted callbacks which you know have altered the render state and you want it to be restored.
+// It is not done by default because they are many perfectly useful way of altering render state for imgui contents (e.g. changing shader/blending settings before an Image call).
+#define ImDrawCallback_ResetRenderState     (ImDrawCallback)(-1)
+
+// Typically, 1 command = 1 GPU draw call (unless command is a callback)
+// - VtxOffset/IdxOffset: When 'io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset' is enabled,
+//   those fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices.
+//   Pre-1.71 backends will typically ignore the VtxOffset/IdxOffset fields.
+// - The ClipRect/TextureId/VtxOffset fields must be contiguous as we memcmp() them together (this is asserted for).
+struct ImDrawCmd
+{
+    ImVec4          ClipRect;           // 4*4  // Clipping rectangle (x1, y1, x2, y2). Subtract ImDrawData->DisplayPos to get clipping rectangle in "viewport" coordinates
+    ImTextureID     TextureId;          // 4-8  // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.
+    unsigned int    VtxOffset;          // 4    // Start offset in vertex buffer. ImGuiBackendFlags_RendererHasVtxOffset: always 0, otherwise may be >0 to support meshes larger than 64K vertices with 16-bit indices.
+    unsigned int    IdxOffset;          // 4    // Start offset in index buffer. Always equal to sum of ElemCount drawn so far.
+    unsigned int    ElemCount;          // 4    // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].
+    ImDrawCallback  UserCallback;       // 4-8  // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.
+    void* UserCallbackData;   // 4-8  // The draw callback code can access this.
+
+    ImDrawCmd() { memset(this, 0, sizeof(*this)); } // Also ensure our padding fields are zeroed
+
+    // Since 1.83: returns ImTextureID associated with this draw call. Warning: DO NOT assume this is always same as 'TextureId' (we will change this function for an upcoming feature)
+    inline ImTextureID GetTexID() const { return TextureId; }
+};
+
+// Vertex layout
+#ifndef IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT
+struct ImDrawVert
+{
+    ImVec2  pos;
+    ImVec2  uv;
+    ImU32   col;
+};
+#else
+// You can override the vertex format layout by defining IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT in imconfig.h
+// The code expect ImVec2 pos (8 bytes), ImVec2 uv (8 bytes), ImU32 col (4 bytes), but you can re-order them or add other fields as needed to simplify integration in your engine.
+// The type has to be described within the macro (you can either declare the struct or use a typedef). This is because ImVec2/ImU32 are likely not declared a the time you'd want to set your type up.
+// NOTE: IMGUI DOESN'T CLEAR THE STRUCTURE AND DOESN'T CALL A CONSTRUCTOR SO ANY CUSTOM FIELD WILL BE UNINITIALIZED. IF YOU ADD EXTRA FIELDS (SUCH AS A 'Z' COORDINATES) YOU WILL NEED TO CLEAR THEM DURING RENDER OR TO IGNORE THEM.
+IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT;
+#endif
+
+// [Internal] For use by ImDrawList
+struct ImDrawCmdHeader
+{
+    ImVec4          ClipRect;
+    ImTextureID     TextureId;
+    unsigned int    VtxOffset;
+};
+
+// [Internal] For use by ImDrawListSplitter
+struct ImDrawChannel
+{
+    ImVector<ImDrawCmd>         _CmdBuffer;
+    ImVector<ImDrawIdx>         _IdxBuffer;
+};
+
+
+// Split/Merge functions are used to split the draw list into different layers which can be drawn into out of order.
+// This is used by the Columns/Tables API, so items of each column can be batched together in a same draw call.
+struct ImDrawListSplitter
+{
+    int                         _Current;    // Current channel number (0)
+    int                         _Count;      // Number of active channels (1+)
+    ImVector<ImDrawChannel>     _Channels;   // Draw channels (not resized down so _Count might be < Channels.Size)
+
+    inline ImDrawListSplitter() { memset(this, 0, sizeof(*this)); }
+    inline ~ImDrawListSplitter() { ClearFreeMemory(); }
+    inline void                 Clear() { _Current = 0; _Count = 1; } // Do not clear Channels[] so our allocations are reused next frame
+    IMGUI_API void              ClearFreeMemory();
+    IMGUI_API void              Split(ImDrawList* draw_list, int count);
+    IMGUI_API void              Merge(ImDrawList* draw_list);
+    IMGUI_API void              SetCurrentChannel(ImDrawList* draw_list, int channel_idx);
+};
+
+// Flags for ImDrawList functions
+// (Legacy: bit 0 must always correspond to ImDrawFlags_Closed to be backward compatible with old API using a bool. Bits 1..3 must be unused)
+enum ImDrawFlags_
+{
+    ImDrawFlags_None = 0,
+    ImDrawFlags_Closed = 1 << 0, // PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)
+    ImDrawFlags_RoundCornersTopLeft = 1 << 4, // AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding > 0.0f, we default to all corners). Was 0x01.
+    ImDrawFlags_RoundCornersTopRight = 1 << 5, // AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding > 0.0f, we default to all corners). Was 0x02.
+    ImDrawFlags_RoundCornersBottomLeft = 1 << 6, // AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding > 0.0f, we default to all corners). Was 0x04.
+    ImDrawFlags_RoundCornersBottomRight = 1 << 7, // AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding > 0.0f, we default to all corners). Wax 0x08.
+    ImDrawFlags_RoundCornersNone = 1 << 8, // AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding > 0.0f). This is NOT zero, NOT an implicit flag!
+    ImDrawFlags_RoundCornersTop = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight,
+    ImDrawFlags_RoundCornersBottom = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
+    ImDrawFlags_RoundCornersLeft = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersTopLeft,
+    ImDrawFlags_RoundCornersRight = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_RoundCornersTopRight,
+    ImDrawFlags_RoundCornersAll = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight | ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
+    ImDrawFlags_RoundCornersDefault_ = ImDrawFlags_RoundCornersAll, // Default to ALL corners if none of the _RoundCornersXX flags are specified.
+    ImDrawFlags_RoundCornersMask_ = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCornersNone
+};
+
+// Flags for ImDrawList instance. Those are set automatically by ImGui:: functions from ImGuiIO settings, and generally not manipulated directly.
+// It is however possible to temporarily alter flags between calls to ImDrawList:: functions.
+enum ImDrawListFlags_
+{
+    ImDrawListFlags_None = 0,
+    ImDrawListFlags_AntiAliasedLines = 1 << 0,  // Enable anti-aliased lines/borders (*2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles)
+    ImDrawListFlags_AntiAliasedLinesUseTex = 1 << 1,  // Enable anti-aliased lines/borders using textures when possible. Require backend to render with bilinear filtering.
+    ImDrawListFlags_AntiAliasedFill = 1 << 2,  // Enable anti-aliased edge around filled shapes (rounded rectangles, circles).
+    ImDrawListFlags_AllowVtxOffset = 1 << 3   // Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.
+};
+
+// Draw command list
+// This is the low-level list of polygons that ImGui:: functions are filling. At the end of the frame,
+// all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.
+// Each dear imgui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to
+// access the current window draw list and draw custom primitives.
+// You can interleave normal ImGui:: calls and adding primitives to the current draw list.
+// In single viewport mode, top-left is == GetMainViewport()->Pos (generally 0,0), bottom-right is == GetMainViewport()->Pos+Size (generally io.DisplaySize).
+// You are totally free to apply whatever transformation matrix to want to the data (depending on the use of the transformation you may want to apply it to ClipRect as well!)
+// Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.
+struct ImDrawList
+{
+    // This is what you have to render
+    ImVector<ImDrawCmd>     CmdBuffer;          // Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.
+    ImVector<ImDrawIdx>     IdxBuffer;          // Index buffer. Each command consume ImDrawCmd::ElemCount of those
+    ImVector<ImDrawVert>    VtxBuffer;          // Vertex buffer.
+    ImDrawListFlags         Flags;              // Flags, you may poke into these to adjust anti-aliasing settings per-primitive.
+
+    // [Internal, used while building lists]
+    unsigned int            _VtxCurrentIdx;     // [Internal] generally == VtxBuffer.Size unless we are past 64K vertices, in which case this gets reset to 0.
+    const ImDrawListSharedData* _Data;          // Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)
+    const char* _OwnerName;         // Pointer to owner window's name for debugging
+    ImDrawVert* _VtxWritePtr;       // [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
+    ImDrawIdx* _IdxWritePtr;       // [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
+    ImVector<ImVec4>        _ClipRectStack;     // [Internal]
+    ImVector<ImTextureID>   _TextureIdStack;    // [Internal]
+    ImVector<ImVec2>        _Path;              // [Internal] current path building
+    ImDrawCmdHeader         _CmdHeader;         // [Internal] template of active commands. Fields should match those of CmdBuffer.back().
+    ImDrawListSplitter      _Splitter;          // [Internal] for channels api (note: prefer using your own persistent instance of ImDrawListSplitter!)
+    float                   _FringeScale;       // [Internal] anti-alias fringe is scaled by this value, this helps to keep things sharp while zooming at vertex buffer content
+
+    // If you want to create ImDrawList instances, pass them ImGui::GetDrawListSharedData() or create and use your own ImDrawListSharedData (so you can use ImDrawList without ImGui)
+    ImDrawList(const ImDrawListSharedData* shared_data) { memset(this, 0, sizeof(*this)); _Data = shared_data; }
+
+    ~ImDrawList() { _ClearFreeMemory(); }
+    IMGUI_API void  PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect = false);  // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
+    IMGUI_API void  PushClipRectFullScreen();
+    IMGUI_API void  PopClipRect();
+    IMGUI_API void  PushTextureID(ImTextureID texture_id);
+    IMGUI_API void  PopTextureID();
+    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.x, cr.y); }
+    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.z, cr.w); }
+
+    // Primitives
+    // - For rectangular primitives, "p_min" and "p_max" represent the upper-left and lower-right corners.
+    // - For circle primitives, use "num_segments == 0" to automatically calculate tessellation (preferred).
+    //   In older versions (until Dear ImGui 1.77) the AddCircle functions defaulted to num_segments == 12.
+    //   In future versions we will use textures to provide cheaper and higher-quality circles.
+    //   Use AddNgon() and AddNgonFilled() functions if you need to guaranteed a specific number of sides.
+    IMGUI_API void  AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness = 1.0f);
+    IMGUI_API void  AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding = 0.0f, ImDrawFlags flags = 0, float thickness = 1.0f);   // a: upper-left, b: lower-right (== upper-left + size)
+    IMGUI_API void  AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding = 0.0f, ImDrawFlags flags = 0);                     // a: upper-left, b: lower-right (== upper-left + size)
+    IMGUI_API void  AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);
+    IMGUI_API void  AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness = 1.0f);
+    IMGUI_API void  AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col);
+    IMGUI_API void  AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness = 1.0f);
+    IMGUI_API void  AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col);
+    IMGUI_API void  AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments = 0, float thickness = 1.0f);
+    IMGUI_API void  AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments = 0);
+    IMGUI_API void  AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness = 1.0f);
+    IMGUI_API void  AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments);
+    IMGUI_API void  AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL);
+    IMGUI_API void  AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL, float wrap_width = 0.0f, const ImVec4* cpu_fine_clip_rect = NULL);
+    IMGUI_API void  AddPolyline(const ImVec2* points, int num_points, ImU32 col, ImDrawFlags flags, float thickness);
+    IMGUI_API void  AddConvexPolyFilled(const ImVec2* points, int num_points, ImU32 col); // Note: Anti-aliased filling requires points to be in clockwise order.
+    IMGUI_API void  AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments = 0); // Cubic Bezier (4 control points)
+    IMGUI_API void  AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness, int num_segments = 0);               // Quadratic Bezier (3 control points)
+
+    // Image primitives
+    // - Read FAQ to understand what ImTextureID is.
+    // - "p_min" and "p_max" represent the upper-left and lower-right corners of the rectangle.
+    // - "uv_min" and "uv_max" represent the normalized texture coordinates to use for those corners. Using (0,0)->(1,1) texture coordinates will generally display the entire texture.
+    IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min = ImVec2(0, 0), const ImVec2& uv_max = ImVec2(1, 1), ImU32 col = IM_COL32_WHITE);
+    IMGUI_API void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& uv1 = ImVec2(0, 0), const ImVec2& uv2 = ImVec2(1, 0), const ImVec2& uv3 = ImVec2(1, 1), const ImVec2& uv4 = ImVec2(0, 1), ImU32 col = IM_COL32_WHITE);
+    IMGUI_API void  AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min, const ImVec2& uv_max, ImU32 col, float rounding, ImDrawFlags flags = 0);
+
+    // Stateful path API, add points then finish with PathFillConvex() or PathStroke()
+    inline    void  PathClear() { _Path.Size = 0; }
+    inline    void  PathLineTo(const ImVec2& pos) { _Path.push_back(pos); }
+    inline    void  PathLineToMergeDuplicate(const ImVec2& pos) { if (_Path.Size == 0 || memcmp(&_Path.Data[_Path.Size - 1], &pos, 8) != 0) _Path.push_back(pos); }
+    inline    void  PathFillConvex(ImU32 col) { AddConvexPolyFilled(_Path.Data, _Path.Size, col); _Path.Size = 0; }  // Note: Anti-aliased filling requires points to be in clockwise order.
+    inline    void  PathStroke(ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f) { AddPolyline(_Path.Data, _Path.Size, col, flags, thickness); _Path.Size = 0; }
+    IMGUI_API void  PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num_segments = 0);
+    IMGUI_API void  PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of_12);                // Use precomputed angles for a 12 steps circle
+    IMGUI_API void  PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments = 0); // Cubic Bezier (4 control points)
+    IMGUI_API void  PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments = 0);               // Quadratic Bezier (3 control points)
+    IMGUI_API void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, ImDrawFlags flags = 0);
+
+    // Advanced
+    IMGUI_API void  AddCallback(ImDrawCallback callback, void* callback_data);  // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.
+    IMGUI_API void  AddDrawCmd();                                               // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible
+    IMGUI_API ImDrawList* CloneOutput() const;                                  // Create a clone of the CmdBuffer/IdxBuffer/VtxBuffer.
+
+    // Advanced: Channels
+    // - Use to split render into layers. By switching channels to can render out-of-order (e.g. submit FG primitives before BG primitives)
+    // - Use to minimize draw calls (e.g. if going back-and-forth between multiple clipping rectangles, prefer to append into separate channels then merge at the end)
+    // - FIXME-OBSOLETE: This API shouldn't have been in ImDrawList in the first place!
+    //   Prefer using your own persistent instance of ImDrawListSplitter as you can stack them.
+    //   Using the ImDrawList::ChannelsXXXX you cannot stack a split over another.
+    inline void     ChannelsSplit(int count) { _Splitter.Split(this, count); }
+    inline void     ChannelsMerge() { _Splitter.Merge(this); }
+    inline void     ChannelsSetCurrent(int n) { _Splitter.SetCurrentChannel(this, n); }
+
+    // Advanced: Primitives allocations
+    // - We render triangles (three vertices)
+    // - All primitives needs to be reserved via PrimReserve() beforehand.
+    IMGUI_API void  PrimReserve(int idx_count, int vtx_count);
+    IMGUI_API void  PrimUnreserve(int idx_count, int vtx_count);
+    IMGUI_API void  PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col);      // Axis aligned rectangle (composed of two triangles)
+    IMGUI_API void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);
+    IMGUI_API void  PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col);
+    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col) { _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }
+    inline    void  PrimWriteIdx(ImDrawIdx idx) { *_IdxWritePtr = idx; _IdxWritePtr++; }
+    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col) { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); } // Write vertex with unique index
+
+#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
+    inline    void  AddBezierCurve(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments = 0) { AddBezierCubic(p1, p2, p3, p4, col, thickness, num_segments); }
+    inline    void  PathBezierCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments = 0) { PathBezierCubicCurveTo(p2, p3, p4, num_segments); }
+#endif
+
+    // [Internal helpers]
+    IMGUI_API void  _ResetForNewFrame();
+    IMGUI_API void  _ClearFreeMemory();
+    IMGUI_API void  _PopUnusedDrawCmd();
+    IMGUI_API void  _TryMergeDrawCmds();
+    IMGUI_API void  _OnChangedClipRect();
+    IMGUI_API void  _OnChangedTextureID();
+    IMGUI_API void  _OnChangedVtxOffset();
+    IMGUI_API int   _CalcCircleAutoSegmentCount(float radius) const;
+    IMGUI_API void  _PathArcToFastEx(const ImVec2& center, float radius, int a_min_sample, int a_max_sample, int a_step);
+    IMGUI_API void  _PathArcToN(const ImVec2& center, float radius, float a_min, float a_max, int num_segments);
+};
+
+// All draw data to render a Dear ImGui frame
+// (NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,
+// as this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList)
+struct ImDrawData
+{
+    bool            Valid;                  // Only valid after Render() is called and before the next NewFrame() is called.
+    int             CmdListsCount;          // Number of ImDrawList* to render
+    int             TotalIdxCount;          // For convenience, sum of all ImDrawList's IdxBuffer.Size
+    int             TotalVtxCount;          // For convenience, sum of all ImDrawList's VtxBuffer.Size
+    ImDrawList** CmdLists;               // Array of ImDrawList* to render. The ImDrawList are owned by ImGuiContext and only pointed to from here.
+    ImVec2          DisplayPos;             // Top-left position of the viewport to render (== top-left of the orthogonal projection matrix to use) (== GetMainViewport()->Pos for the main viewport, == (0.0) in most single-viewport applications)
+    ImVec2          DisplaySize;            // Size of the viewport to render (== GetMainViewport()->Size for the main viewport, == io.DisplaySize in most single-viewport applications)
+    ImVec2          FramebufferScale;       // Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.
+    ImGuiViewport* OwnerViewport;          // Viewport carrying the ImDrawData instance, might be of use to the renderer (generally not).
+
+    // Functions
+    ImDrawData() { Clear(); }
+    void Clear() { memset(this, 0, sizeof(*this)); }     // The ImDrawList are owned by ImGuiContext!
+    IMGUI_API void  DeIndexAllBuffers();                    // Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!
+    IMGUI_API void  ScaleClipRects(const ImVec2& fb_scale); // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.
+};
+
+//-----------------------------------------------------------------------------
+// [SECTION] Font API (ImFontConfig, ImFontGlyph, ImFontAtlasFlags, ImFontAtlas, ImFontGlyphRangesBuilder, ImFont)
+//-----------------------------------------------------------------------------
+
+struct ImFontConfig
+{
+    void* FontData;               //          // TTF/OTF data
+    int             FontDataSize;           //          // TTF/OTF data size
+    bool            FontDataOwnedByAtlas;   // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
+    int             FontNo;                 // 0        // Index of font within TTF/OTF file
+    float           SizePixels;             //          // Size in pixels for rasterizer (more or less maps to the resulting font height).
+    int             OversampleH;            // 3        // Rasterize at higher quality for sub-pixel positioning. Note the difference between 2 and 3 is minimal so you can reduce this to 2 to save memory. Read https://github.com/nothings/stb/blob/master/tests/oversample/README.md for details.
+    int             OversampleV;            // 1        // Rasterize at higher quality for sub-pixel positioning. This is not really useful as we don't use sub-pixel positions on the Y axis.
+    bool            PixelSnapH;             // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
+    ImVec2          GlyphExtraSpacing;      // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
+    ImVec2          GlyphOffset;            // 0, 0     // Offset all glyphs from this font input.
+    const ImWchar* GlyphRanges;            // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.
+    float           GlyphMinAdvanceX;       // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
+    float           GlyphMaxAdvanceX;       // FLT_MAX  // Maximum AdvanceX for glyphs
+    bool            MergeMode;              // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
+    unsigned int    FontBuilderFlags;       // 0        // Settings for custom font builder. THIS IS BUILDER IMPLEMENTATION DEPENDENT. Leave as zero if unsure.
+    float           RasterizerMultiply;     // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.
+    ImWchar         EllipsisChar;           // -1       // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.
+
+    // [Internal]
+    char            Name[40];               // Name (strictly to ease debugging)
+    ImFont* DstFont;
+
+    IMGUI_API ImFontConfig();
+};
+
+// Hold rendering data for one glyph.
+// (Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this)
+struct ImFontGlyph
+{
+    unsigned int    Colored : 1;        // Flag to indicate glyph is colored and should generally ignore tinting (make it usable with no shift on little-endian as this is used in loops)
+    unsigned int    Visible : 1;        // Flag to indicate glyph has no visible pixels (e.g. space). Allow early out when rendering.
+    unsigned int    Codepoint : 30;     // 0x0000..0x10FFFF
+    float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
+    float           X0, Y0, X1, Y1;     // Glyph corners
+    float           U0, V0, U1, V1;     // Texture coordinates
+};
+
+// Helper to build glyph ranges from text/string data. Feed your application strings/characters to it then call BuildRanges().
+// This is essentially a tightly packed of vector of 64k booleans = 8KB storage.
+struct ImFontGlyphRangesBuilder
+{
+    ImVector<ImU32> UsedChars;            // Store 1-bit per Unicode code point (0=unused, 1=used)
+
+    ImFontGlyphRangesBuilder() { Clear(); }
+    inline void     Clear() { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1) / 8; UsedChars.resize(size_in_bytes / (int)sizeof(ImU32)); memset(UsedChars.Data, 0, (size_t)size_in_bytes); }
+    inline bool     GetBit(size_t n) const { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 31); return (UsedChars[off] & mask) != 0; }  // Get bit n in the array
+    inline void     SetBit(size_t n) { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 31); UsedChars[off] |= mask; }               // Set bit n in the array
+    inline void     AddChar(ImWchar c) { SetBit(c); }                      // Add character
+    IMGUI_API void  AddText(const char* text, const char* text_end = NULL);     // Add string (each character of the UTF-8 string are added)
+    IMGUI_API void  AddRanges(const ImWchar* ranges);                           // Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCII/Latin+Ext
+    IMGUI_API void  BuildRanges(ImVector<ImWchar>* out_ranges);                 // Output new ranges
+};
+
+// See ImFontAtlas::AddCustomRectXXX functions.
+struct ImFontAtlasCustomRect
+{
+    unsigned short  Width, Height;  // Input    // Desired rectangle dimension
+    unsigned short  X, Y;           // Output   // Packed position in Atlas
+    unsigned int    GlyphID;        // Input    // For custom font glyphs only (ID < 0x110000)
+    float           GlyphAdvanceX;  // Input    // For custom font glyphs only: glyph xadvance
+    ImVec2          GlyphOffset;    // Input    // For custom font glyphs only: glyph display offset
+    ImFont* Font;           // Input    // For custom font glyphs only: target font
+    ImFontAtlasCustomRect() { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0, 0); Font = NULL; }
+    bool IsPacked() const { return X != 0xFFFF; }
+};
+
+// Flags for ImFontAtlas build
+enum ImFontAtlasFlags_
+{
+    ImFontAtlasFlags_None = 0,
+    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   // Don't round the height to next power of two
+    ImFontAtlasFlags_NoMouseCursors = 1 << 1,   // Don't build software mouse cursors into the atlas (save a little texture memory)
+    ImFontAtlasFlags_NoBakedLines = 1 << 2    // Don't build thick line textures into the atlas (save a little texture memory). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU).
+};
+
+// Load and rasterize multiple TTF/OTF fonts into a same texture. The font atlas will build a single texture holding:
+//  - One or more fonts.
+//  - Custom graphics data needed to render the shapes needed by Dear ImGui.
+//  - Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas).
+// It is the user-code responsibility to setup/build the atlas, then upload the pixel data into a texture accessible by your graphics api.
+//  - Optionally, call any of the AddFont*** functions. If you don't call any, the default font embedded in the code will be loaded for you.
+//  - Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.
+//  - Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples)
+//  - Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture in a format natural to your graphics API.
+//    This value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details.
+// Common pitfalls:
+// - If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the
+//   atlas is build (when calling GetTexData*** or Build()). We only copy the pointer, not the data.
+// - Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction.
+//   You can set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed,
+// - Even though many functions are suffixed with "TTF", OTF data is supported just as well.
+// - This is an old API and it is currently awkward for those and and various other reasons! We will address them in the future!
+struct ImFontAtlas
+{
+    IMGUI_API ImFontAtlas();
+    IMGUI_API ~ImFontAtlas();
+    IMGUI_API ImFont* AddFont(const ImFontConfig* font_cfg);
+    IMGUI_API ImFont* AddFontDefault(const ImFontConfig* font_cfg = NULL);
+    IMGUI_API ImFont* AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);
+    IMGUI_API ImFont* AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.
+    IMGUI_API ImFont* AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.
+    IMGUI_API ImFont* AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);              // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.
+    IMGUI_API void              ClearInputData();           // Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.
+    IMGUI_API void              ClearTexData();             // Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.
+    IMGUI_API void              ClearFonts();               // Clear output font data (glyphs storage, UV coordinates).
+    IMGUI_API void              Clear();                    // Clear all input and output.
+
+    // Build atlas, retrieve pixel data.
+    // User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID().
+    // The pitch is always = Width * BytesPerPixels (1 or 4)
+    // Building in RGBA32 format is provided for convenience and compatibility, but note that unless you manually manipulate or copy color data into
+    // the texture (e.g. when using the AddCustomRect*** api), then the RGB pixels emitted will always be white (~75% of memory/bandwidth waste.
+    IMGUI_API bool              Build();                    // Build pixels data. This is called automatically for you by the GetTexData*** functions.
+    IMGUI_API void              GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 1 byte per-pixel
+    IMGUI_API void              GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 4 bytes-per-pixel
+    bool                        IsBuilt() const { return Fonts.Size > 0 && TexReady; } // Bit ambiguous: used to detect when user didn't built texture but effectively we should check TexID != 0 except that would be backend dependent...
+    void                        SetTexID(ImTextureID id) { TexID = id; }
+
+    //-------------------------------------------
+    // Glyph Ranges
+    //-------------------------------------------
+
+    // Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)
+    // NB: Make sure that your string are UTF-8 and NOT in your local code page. In C++11, you can create UTF-8 string literal using the u8"Hello world" syntax. See FAQ for details.
+    // NB: Consider using ImFontGlyphRangesBuilder to build glyph ranges from textual data.
+    IMGUI_API const ImWchar* GetGlyphRangesDefault();                // Basic Latin, Extended Latin
+    IMGUI_API const ImWchar* GetGlyphRangesKorean();                 // Default + Korean characters
+    IMGUI_API const ImWchar* GetGlyphRangesJapanese();               // Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs
+    IMGUI_API const ImWchar* GetGlyphRangesChineseFull();            // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs
+    IMGUI_API const ImWchar* GetGlyphRangesChineseSimplifiedCommon();// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese
+    IMGUI_API const ImWchar* GetGlyphRangesCyrillic();               // Default + about 400 Cyrillic characters
+    IMGUI_API const ImWchar* GetGlyphRangesThai();                   // Default + Thai characters
+    IMGUI_API const ImWchar* GetGlyphRangesVietnamese();             // Default + Vietnamese characters
+
+    //-------------------------------------------
+    // [BETA] Custom Rectangles/Glyphs API
+    //-------------------------------------------
+
+    // You can request arbitrary rectangles to be packed into the atlas, for your own purposes.
+    // - After calling Build(), you can query the rectangle position and render your pixels.
+    // - If you render colored output, set 'atlas->TexPixelsUseColors = true' as this may help some backends decide of prefered texture format.
+    // - You can also request your rectangles to be mapped as font glyph (given a font + Unicode point),
+    //   so you can render e.g. custom colorful icons and use them as regular glyphs.
+    // - Read docs/FONTS.md for more details about using colorful icons.
+    // - Note: this API may be redesigned later in order to support multi-monitor varying DPI settings.
+    IMGUI_API int               AddCustomRectRegular(int width, int height);
+    IMGUI_API int               AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset = ImVec2(0, 0));
+    ImFontAtlasCustomRect* GetCustomRectByIndex(int index) { IM_ASSERT(index >= 0); return &CustomRects[index]; }
+
+    // [Internal]
+    IMGUI_API void              CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max) const;
+    IMGUI_API bool              GetMouseCursorTexData(ImGuiMouseCursor cursor, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2]);
+
+    //-------------------------------------------
+    // Members
+    //-------------------------------------------
+
+    ImFontAtlasFlags            Flags;              // Build flags (see ImFontAtlasFlags_)
+    ImTextureID                 TexID;              // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.
+    int                         TexDesiredWidth;    // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.
+    int                         TexGlyphPadding;    // Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0.
+    bool                        Locked;             // Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.
+
+    // [Internal]
+    // NB: Access texture data via GetTexData*() calls! Which will setup a default font for you.
+    bool                        TexReady;           // Set when texture was built matching current font input
+    bool                        TexPixelsUseColors; // Tell whether our texture data is known to use colors (rather than just alpha channel), in order to help backend select a format.
+    unsigned char* TexPixelsAlpha8;    // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight
+    unsigned int* TexPixelsRGBA32;    // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4
+    int                         TexWidth;           // Texture width calculated during Build().
+    int                         TexHeight;          // Texture height calculated during Build().
+    ImVec2                      TexUvScale;         // = (1.0f/TexWidth, 1.0f/TexHeight)
+    ImVec2                      TexUvWhitePixel;    // Texture coordinates to a white pixel
+    ImVector<ImFont*>           Fonts;              // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.
+    ImVector<ImFontAtlasCustomRect> CustomRects;    // Rectangles for packing custom texture data into the atlas.
+    ImVector<ImFontConfig>      ConfigData;         // Configuration data
+    ImVec4                      TexUvLines[IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1];  // UVs for baked anti-aliased lines
+
+    // [Internal] Font builder
+    const ImFontBuilderIO* FontBuilderIO;      // Opaque interface to a font builder (default to stb_truetype, can be changed to use FreeType by defining IMGUI_ENABLE_FREETYPE).
+    unsigned int                FontBuilderFlags;   // Shared flags (for all fonts) for custom font builder. THIS IS BUILD IMPLEMENTATION DEPENDENT. Per-font override is also available in ImFontConfig.
+
+    // [Internal] Packing data
+    int                         PackIdMouseCursors; // Custom texture rectangle ID for white pixel and mouse cursors
+    int                         PackIdLines;        // Custom texture rectangle ID for baked anti-aliased lines
+
+#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
+    typedef ImFontAtlasCustomRect    CustomRect;         // OBSOLETED in 1.72+
+    //typedef ImFontGlyphRangesBuilder GlyphRangesBuilder; // OBSOLETED in 1.67+
+#endif
+};
+
+// Font runtime data and rendering
+// ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().
+struct ImFont
+{
+    // Members: Hot ~20/24 bytes (for CalcTextSize)
+    ImVector<float>             IndexAdvanceX;      // 12-16 // out //            // Sparse. Glyphs->AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this this info, and are often bottleneck in large UI).
+    float                       FallbackAdvanceX;   // 4     // out // = FallbackGlyph->AdvanceX
+    float                       FontSize;           // 4     // in  //            // Height of characters/line, set during loading (don't change after loading)
+
+    // Members: Hot ~28/40 bytes (for CalcTextSize + render loop)
+    ImVector<ImWchar>           IndexLookup;        // 12-16 // out //            // Sparse. Index glyphs by Unicode code-point.
+    ImVector<ImFontGlyph>       Glyphs;             // 12-16 // out //            // All glyphs.
+    const ImFontGlyph* FallbackGlyph;      // 4-8   // out // = FindGlyph(FontFallbackChar)
+
+    // Members: Cold ~32/40 bytes
+    ImFontAtlas* ContainerAtlas;     // 4-8   // out //            // What we has been loaded into
+    const ImFontConfig* ConfigData;         // 4-8   // in  //            // Pointer within ContainerAtlas->ConfigData
+    short                       ConfigDataCount;    // 2     // in  // ~ 1        // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.
+    ImWchar                     FallbackChar;       // 2     // out // = FFFD/'?' // Character used if a glyph isn't found.
+    ImWchar                     EllipsisChar;       // 2     // out // = '...'    // Character used for ellipsis rendering.
+    ImWchar                     DotChar;            // 2     // out // = '.'      // Character used for ellipsis rendering (if a single '...' character isn't found)
+    bool                        DirtyLookupTables;  // 1     // out //
+    float                       Scale;              // 4     // in  // = 1.f      // Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()
+    float                       Ascent, Descent;    // 4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]
+    int                         MetricsTotalSurface;// 4     // out //            // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)
+    ImU8                        Used4kPagesMap[(IM_UNICODE_CODEPOINT_MAX + 1) / 4096 / 8]; // 2 bytes if ImWchar=ImWchar16, 34 bytes if ImWchar==ImWchar32. Store 1-bit for each block of 4K codepoints that has one active glyph. This is mainly used to facilitate iterations across all used codepoints.
+
+    // Methods
+    IMGUI_API ImFont();
+    IMGUI_API ~ImFont();
+    IMGUI_API const ImFontGlyph* FindGlyph(ImWchar c) const;
+    IMGUI_API const ImFontGlyph* FindGlyphNoFallback(ImWchar c) const;
+    float                       GetCharAdvance(ImWchar c) const { return ((int)c < IndexAdvanceX.Size) ? IndexAdvanceX[(int)c] : FallbackAdvanceX; }
+    bool                        IsLoaded() const { return ContainerAtlas != NULL; }
+    const char* GetDebugName() const { return ConfigData ? ConfigData->Name : "<unknown>"; }
+
+    // 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.
+    // 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.
+    IMGUI_API ImVec2            CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end = NULL, const char** remaining = NULL) const; // utf8
+    IMGUI_API const char* CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const;
+    IMGUI_API void              RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c) const;
+    IMGUI_API void              RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false) const;
+
+    // [Internal] Don't use!
+    IMGUI_API void              BuildLookupTable();
+    IMGUI_API void              ClearOutputData();
+    IMGUI_API void              GrowIndex(int new_size);
+    IMGUI_API void              AddGlyph(const ImFontConfig* src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
+    IMGUI_API void              AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst = true); // Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.
+    IMGUI_API void              SetGlyphVisible(ImWchar c, bool visible);
+    IMGUI_API bool              IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last);
+};
+
+//-----------------------------------------------------------------------------
+// [SECTION] Viewports
+//-----------------------------------------------------------------------------
+
+// Flags stored in ImGuiViewport::Flags, giving indications to the platform backends.
+enum ImGuiViewportFlags_
+{
+    ImGuiViewportFlags_None = 0,
+    ImGuiViewportFlags_IsPlatformWindow = 1 << 0,   // Represent a Platform Window
+    ImGuiViewportFlags_IsPlatformMonitor = 1 << 1,   // Represent a Platform Monitor (unused yet)
+    ImGuiViewportFlags_OwnedByApp = 1 << 2,   // Platform Window: is created/managed by the application (rather than a dear imgui backend)
+    ImGuiViewportFlags_NoDecoration = 1 << 3,   // Platform Window: Disable platform decorations: title bar, borders, etc. (generally set all windows, but if ImGuiConfigFlags_ViewportsDecoration is set we only set this on popups/tooltips)
+    ImGuiViewportFlags_NoTaskBarIcon = 1 << 4,   // Platform Window: Disable platform task bar icon (generally set on popups/tooltips, or all windows if ImGuiConfigFlags_ViewportsNoTaskBarIcon is set)
+    ImGuiViewportFlags_NoFocusOnAppearing = 1 << 5,   // Platform Window: Don't take focus when created.
+    ImGuiViewportFlags_NoFocusOnClick = 1 << 6,   // Platform Window: Don't take focus when clicked on.
+    ImGuiViewportFlags_NoInputs = 1 << 7,   // Platform Window: Make mouse pass through so we can drag this window while peaking behind it.
+    ImGuiViewportFlags_NoRendererClear = 1 << 8,   // Platform Window: Renderer doesn't need to clear the framebuffer ahead (because we will fill it entirely).
+    ImGuiViewportFlags_TopMost = 1 << 9,   // Platform Window: Display on top (for tooltips only).
+    ImGuiViewportFlags_Minimized = 1 << 10,  // Platform Window: Window is minimized, can skip render. When minimized we tend to avoid using the viewport pos/size for clipping window or testing if they are contained in the viewport.
+    ImGuiViewportFlags_NoAutoMerge = 1 << 11,  // Platform Window: Avoid merging this window into another host window. This can only be set via ImGuiWindowClass viewport flags override (because we need to now ahead if we are going to create a viewport in the first place!).
+    ImGuiViewportFlags_CanHostOtherWindows = 1 << 12   // Main viewport: can host multiple imgui windows (secondary viewports are associated to a single window).
+};
+
+// - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.
+// - With multi-viewport enabled, we extend this concept to have multiple active viewports.
+// - In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.
+// - About Main Area vs Work Area:
+//   - Main Area = entire viewport.
+//   - Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).
+//   - Windows are generally trying to stay within the Work Area of their host viewport.
+struct ImGuiViewport
+{
+    ImGuiID             ID;                     // Unique identifier for the viewport
+    ImGuiViewportFlags  Flags;                  // See ImGuiViewportFlags_
+    ImVec2              Pos;                    // Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktop/native coordinates)
+    ImVec2              Size;                   // Main Area: Size of the viewport.
+    ImVec2              WorkPos;                // Work Area: Position of the viewport minus task bars, menus bars, status bars (>= Pos)
+    ImVec2              WorkSize;               // Work Area: Size of the viewport minus task bars, menu bars, status bars (<= Size)
+    float               DpiScale;               // 1.0f = 96 DPI = No extra scale.
+    ImGuiID             ParentViewportId;       // (Advanced) 0: no parent. Instruct the platform backend to setup a parent/child relationship between platform windows.
+    ImDrawData* DrawData;               // The ImDrawData corresponding to this viewport. Valid after Render() and until the next call to NewFrame().
+
+    // Our design separate the Renderer and Platform backends to facilitate combining default backends with each others.
+    // When our create your own backend for a custom engine, it is possible that both Renderer and Platform will be handled
+    // by the same system and you may not need to use all the UserData/Handle fields.
+    // The library never uses those fields, they are merely storage to facilitate backend implementation.
+    void* RendererUserData;       // void* to hold custom data structure for the renderer (e.g. swap chain, framebuffers etc.). generally set by your Renderer_CreateWindow function.
+    void* PlatformUserData;       // void* to hold custom data structure for the OS / platform (e.g. windowing info, render context). generally set by your Platform_CreateWindow function.
+    void* PlatformHandle;         // void* for FindViewportByPlatformHandle(). (e.g. suggested to use natural platform handle such as HWND, GLFWWindow*, SDL_Window*)
+    void* PlatformHandleRaw;      // void* to hold lower-level, platform-native window handle (e.g. the HWND) when using an abstraction layer like GLFW or SDL (where PlatformHandle would be a SDL_Window*)
+    bool                PlatformRequestMove;    // Platform window requested move (e.g. window was moved by the OS / host window manager, authoritative position will be OS window position)
+    bool                PlatformRequestResize;  // Platform window requested resize (e.g. window was resized by the OS / host window manager, authoritative size will be OS window size)
+    bool                PlatformRequestClose;   // Platform window requested closure (e.g. window was moved by the OS / host window manager, e.g. pressing ALT-F4)
+
+    ImGuiViewport() { memset(this, 0, sizeof(*this)); }
+    ~ImGuiViewport() { IM_ASSERT(PlatformUserData == NULL && RendererUserData == NULL); }
+
+    // Helpers
+    ImVec2              GetCenter() const { return ImVec2(Pos.x + Size.x * 0.5f, Pos.y + Size.y * 0.5f); }
+    ImVec2              GetWorkCenter() const { return ImVec2(WorkPos.x + WorkSize.x * 0.5f, WorkPos.y + WorkSize.y * 0.5f); }
+};
+
+//-----------------------------------------------------------------------------
+// [SECTION] Platform interface for multi-viewport support
+//-----------------------------------------------------------------------------
+// [BETA] (Optional) This is completely optional, for advanced users!
+// If you are new to Dear ImGui and trying to integrate it into your engine, you can probably ignore this for now.
+//
+// This feature allows you to seamlessly drag Dear ImGui windows outside of your application viewport.
+// This is achieved by creating new Platform/OS windows on the fly, and rendering into them.
+// Dear ImGui manages the viewport structures, and the backend create and maintain one Platform/OS window for each of those viewports.
+//
+// See Glossary https://github.com/ocornut/imgui/wiki/Glossary for details about some of the terminology.
+// See Thread https://github.com/ocornut/imgui/issues/1542 for gifs, news and questions about this evolving feature.
+//
+// About the coordinates system:
+// - When multi-viewports are enabled, all Dear ImGui coordinates become absolute coordinates (same as OS coordinates!)
+// - So e.g. ImGui::SetNextWindowPos(ImVec2(0,0)) will position a window relative to your primary monitor!
+// - If you want to position windows relative to your main application viewport, use ImGui::GetMainViewport()->Pos as a base position.
+//
+// Steps to use multi-viewports in your application, when using a default backend from the examples/ folder:
+// - Application:  Enable feature with 'io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable'.
+// - Backend:      The backend initialization will setup all necessary ImGuiPlatformIO's functions and update monitors info every frame.
+// - Application:  In your main loop, call ImGui::UpdatePlatformWindows(), ImGui::RenderPlatformWindowsDefault() after EndFrame() or Render().
+// - Application:  Fix absolute coordinates used in ImGui::SetWindowPos() or ImGui::SetNextWindowPos() calls.
+//
+// Steps to use multi-viewports in your application, when using a custom backend:
+// - Important:    THIS IS NOT EASY TO DO and comes with many subtleties not described here!
+//                 It's also an experimental feature, so some of the requirements may evolve.
+//                 Consider using default backends if you can. Either way, carefully follow and refer to examples/ backends for details.
+// - Application:  Enable feature with 'io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable'.
+// - Backend:      Hook ImGuiPlatformIO's Platform_* and Renderer_* callbacks (see below).
+//                 Set 'io.BackendFlags |= ImGuiBackendFlags_PlatformHasViewports' and 'io.BackendFlags |= ImGuiBackendFlags_PlatformHasViewports'.
+//                 Update ImGuiPlatformIO's Monitors list every frame.
+//                 Update MousePos every frame, in absolute coordinates.
+// - Application:  In your main loop, call ImGui::UpdatePlatformWindows(), ImGui::RenderPlatformWindowsDefault() after EndFrame() or Render().
+//                 You may skip calling RenderPlatformWindowsDefault() if its API is not convenient for your needs. Read comments below.
+// - Application:  Fix absolute coordinates used in ImGui::SetWindowPos() or ImGui::SetNextWindowPos() calls.
+//
+// About ImGui::RenderPlatformWindowsDefault():
+// - This function is a mostly a _helper_ for the common-most cases, and to facilitate using default backends.
+// - You can check its simple source code to understand what it does.
+//   It basically iterates secondary viewports and call 4 functions that are setup in ImGuiPlatformIO, if available:
+//     Platform_RenderWindow(), Renderer_RenderWindow(), Platform_SwapBuffers(), Renderer_SwapBuffers()
+//   Those functions pointers exists only for the benefit of RenderPlatformWindowsDefault().
+// - If you have very specific rendering needs (e.g. flipping multiple swap-chain simultaneously, unusual sync/threading issues, etc.),
+//   you may be tempted to ignore RenderPlatformWindowsDefault() and write customized code to perform your renderingg.
+//   You may decide to setup the platform_io's *RenderWindow and *SwapBuffers pointers and call your functions through those pointers,
+//   or you may decide to never setup those pointers and call your code directly. They are a convenience, not an obligatory interface.
+//-----------------------------------------------------------------------------
+
+// (Optional) Access via ImGui::GetPlatformIO()
+struct ImGuiPlatformIO
+{
+    //------------------------------------------------------------------
+    // Input - Backend interface/functions + Monitor List
+    //------------------------------------------------------------------
+
+    // (Optional) Platform functions (e.g. Win32, GLFW, SDL2)
+    // For reference, the second column shows which function are generally calling the Platform Functions:
+    //   N = ImGui::NewFrame()                        ~ beginning of the dear imgui frame: read info from platform/OS windows (latest size/position)
+    //   F = ImGui::Begin(), ImGui::EndFrame()        ~ during the dear imgui frame
+    //   U = ImGui::UpdatePlatformWindows()           ~ after the dear imgui frame: create and update all platform/OS windows
+    //   R = ImGui::RenderPlatformWindowsDefault()    ~ render
+    //   D = ImGui::DestroyPlatformWindows()          ~ shutdown
+    // The general idea is that NewFrame() we will read the current Platform/OS state, and UpdatePlatformWindows() will write to it.
+    //
+    // The functions are designed so we can mix and match 2 imgui_impl_xxxx files, one for the Platform (~window/input handling), one for Renderer.
+    // Custom engine backends will often provide both Platform and Renderer interfaces and so may not need to use all functions.
+    // Platform functions are typically called before their Renderer counterpart, apart from Destroy which are called the other way.
+
+    // Platform function --------------------------------------------------- Called by -----
+    void    (*Platform_CreateWindow)(ImGuiViewport* vp);                    // . . U . .  // Create a new platform window for the given viewport
+    void    (*Platform_DestroyWindow)(ImGuiViewport* vp);                   // N . U . D  //
+    void    (*Platform_ShowWindow)(ImGuiViewport* vp);                      // . . U . .  // Newly created windows are initially hidden so SetWindowPos/Size/Title can be called on them before showing the window
+    void    (*Platform_SetWindowPos)(ImGuiViewport* vp, ImVec2 pos);        // . . U . .  // Set platform window position (given the upper-left corner of client area)
+    ImVec2(*Platform_GetWindowPos)(ImGuiViewport* vp);                    // N . . . .  //
+    void    (*Platform_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);      // . . U . .  // Set platform window client area size (ignoring OS decorations such as OS title bar etc.)
+    ImVec2(*Platform_GetWindowSize)(ImGuiViewport* vp);                   // N . . . .  // Get platform window client area size
+    void    (*Platform_SetWindowFocus)(ImGuiViewport* vp);                  // N . . . .  // Move window to front and set input focus
+    bool    (*Platform_GetWindowFocus)(ImGuiViewport* vp);                  // . . U . .  //
+    bool    (*Platform_GetWindowMinimized)(ImGuiViewport* vp);              // N . . . .  // Get platform window minimized state. When minimized, we generally won't attempt to get/set size and contents will be culled more easily
+    void    (*Platform_SetWindowTitle)(ImGuiViewport* vp, const char* str); // . . U . .  // Set platform window title (given an UTF-8 string)
+    void    (*Platform_SetWindowAlpha)(ImGuiViewport* vp, float alpha);     // . . U . .  // (Optional) Setup global transparency (not per-pixel transparency)
+    void    (*Platform_UpdateWindow)(ImGuiViewport* vp);                    // . . U . .  // (Optional) Called by UpdatePlatformWindows(). Optional hook to allow the platform backend from doing general book-keeping every frame.
+    void    (*Platform_RenderWindow)(ImGuiViewport* vp, void* render_arg);  // . . . R .  // (Optional) Main rendering (platform side! This is often unused, or just setting a "current" context for OpenGL bindings). 'render_arg' is the value passed to RenderPlatformWindowsDefault().
+    void    (*Platform_SwapBuffers)(ImGuiViewport* vp, void* render_arg);   // . . . R .  // (Optional) Call Present/SwapBuffers (platform side! This is often unused!). 'render_arg' is the value passed to RenderPlatformWindowsDefault().
+    float   (*Platform_GetWindowDpiScale)(ImGuiViewport* vp);               // N . . . .  // (Optional) [BETA] FIXME-DPI: DPI handling: Return DPI scale for this viewport. 1.0f = 96 DPI.
+    void    (*Platform_OnChangedViewport)(ImGuiViewport* vp);               // . F . . .  // (Optional) [BETA] FIXME-DPI: DPI handling: Called during Begin() every time the viewport we are outputting into changes, so backend has a chance to swap fonts to adjust style.
+    void    (*Platform_SetImeInputPos)(ImGuiViewport* vp, ImVec2 pos);      // . F . . .  // (Optional) Set IME (Input Method Editor, e.g. for Asian languages) input position, so text preview appears over the imgui input box. FIXME: The call timing of this is inconsistent because we want to support without multi-viewports.
+    int     (*Platform_CreateVkSurface)(ImGuiViewport* vp, ImU64 vk_inst, const void* vk_allocators, ImU64* out_vk_surface); // (Optional) For a Vulkan Renderer to call into Platform code (since the surface creation needs to tie them both).
+
+    // (Optional) Renderer functions (e.g. DirectX, OpenGL, Vulkan)
+    void    (*Renderer_CreateWindow)(ImGuiViewport* vp);                    // . . U . .  // Create swap chain, frame buffers etc. (called after Platform_CreateWindow)
+    void    (*Renderer_DestroyWindow)(ImGuiViewport* vp);                   // N . U . D  // Destroy swap chain, frame buffers etc. (called before Platform_DestroyWindow)
+    void    (*Renderer_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);      // . . U . .  // Resize swap chain, frame buffers etc. (called after Platform_SetWindowSize)
+    void    (*Renderer_RenderWindow)(ImGuiViewport* vp, void* render_arg);  // . . . R .  // (Optional) Clear framebuffer, setup render target, then render the viewport->DrawData. 'render_arg' is the value passed to RenderPlatformWindowsDefault().
+    void    (*Renderer_SwapBuffers)(ImGuiViewport* vp, void* render_arg);   // . . . R .  // (Optional) Call Present/SwapBuffers. 'render_arg' is the value passed to RenderPlatformWindowsDefault().
+
+    // (Optional) Monitor list
+    // - Updated by: app/backend. Update every frame to dynamically support changing monitor or DPI configuration.
+    // - Used by: dear imgui to query DPI info, clamp popups/tooltips within same monitor and not have them straddle monitors.
+    ImVector<ImGuiPlatformMonitor>  Monitors;
+
+    //------------------------------------------------------------------
+    // Output - List of viewports to render into platform windows
+    //------------------------------------------------------------------
+
+    // Viewports list (the list is updated by calling ImGui::EndFrame or ImGui::Render)
+    // (in the future we will attempt to organize this feature to remove the need for a "main viewport")
+    ImVector<ImGuiViewport*>        Viewports;                              // Main viewports, followed by all secondary viewports.
+    ImGuiPlatformIO() { memset(this, 0, sizeof(*this)); }     // Zero clear
+};
+
+// (Optional) This is required when enabling multi-viewport. Represent the bounds of each connected monitor/display and their DPI.
+// We use this information for multiple DPI support + clamping the position of popups and tooltips so they don't straddle multiple monitors.
+struct ImGuiPlatformMonitor
+{
+    ImVec2  MainPos, MainSize;      // Coordinates of the area displayed on this monitor (Min = upper left, Max = bottom right)
+    ImVec2  WorkPos, WorkSize;      // Coordinates without task bars / side bars / menu bars. Used to avoid positioning popups/tooltips inside this region. If you don't have this info, please copy the value for MainPos/MainSize.
+    float   DpiScale;               // 1.0f = 96 DPI
+    ImGuiPlatformMonitor() { MainPos = MainSize = WorkPos = WorkSize = ImVec2(0, 0); DpiScale = 1.0f; }
+};
+
+//-----------------------------------------------------------------------------
+// [SECTION] Obsolete functions and types
+// (Will be removed! Read 'API BREAKING CHANGES' section in imgui.cpp for details)
+// Please keep your copy of dear imgui up to date! Occasionally set '#define IMGUI_DISABLE_OBSOLETE_FUNCTIONS' in imconfig.h to stay ahead.
+//-----------------------------------------------------------------------------
+
+#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
+namespace ImGui
+{
+    // OBSOLETED in 1.86 (from November 2021)
+    IMGUI_API void      CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end); // Calculate coarse clipping for large list of evenly sized items. Prefer using ImGuiListClipper.
+    // OBSOLETED in 1.85 (from August 2021)
+    static inline float GetWindowContentRegionWidth() { return GetWindowContentRegionMax().x - GetWindowContentRegionMin().x; }
+    // OBSOLETED in 1.81 (from February 2021)
+    IMGUI_API bool      ListBoxHeader(const char* label, int items_count, int height_in_items = -1); // Helper to calculate size from items_count and height_in_items
+    static inline bool  ListBoxHeader(const char* label, const ImVec2& size = ImVec2(0, 0)) { return BeginListBox(label, size); }
+    static inline void  ListBoxFooter() { EndListBox(); }
+    // OBSOLETED in 1.79 (from August 2020)
+    static inline void  OpenPopupContextItem(const char* str_id = NULL, ImGuiMouseButton mb = 1) { OpenPopupOnItemClick(str_id, mb); } // Bool return value removed. Use IsWindowAppearing() in BeginPopup() instead. Renamed in 1.77, renamed back in 1.79. Sorry!
+    // OBSOLETED in 1.78 (from June 2020)
+    // Old drag/sliders functions that took a 'float power = 1.0' argument instead of flags.
+    // For shared code, you can version check at compile-time with `#if IMGUI_VERSION_NUM >= 17704`.
+    IMGUI_API bool      DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, float power);
+    IMGUI_API bool      DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, float power);
+    static inline bool  DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, float power) { return DragScalar(label, ImGuiDataType_Float, v, v_speed, &v_min, &v_max, format, power); }
+    static inline bool  DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, float power) { return DragScalarN(label, ImGuiDataType_Float, v, 2, v_speed, &v_min, &v_max, format, power); }
+    static inline bool  DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, float power) { return DragScalarN(label, ImGuiDataType_Float, v, 3, v_speed, &v_min, &v_max, format, power); }
+    static inline bool  DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, float power) { return DragScalarN(label, ImGuiDataType_Float, v, 4, v_speed, &v_min, &v_max, format, power); }
+    IMGUI_API bool      SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, float power);
+    IMGUI_API bool      SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, float power);
+    static inline bool  SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format, float power) { return SliderScalar(label, ImGuiDataType_Float, v, &v_min, &v_max, format, power); }
+    static inline bool  SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format, float power) { return SliderScalarN(label, ImGuiDataType_Float, v, 2, &v_min, &v_max, format, power); }
+    static inline bool  SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format, float power) { return SliderScalarN(label, ImGuiDataType_Float, v, 3, &v_min, &v_max, format, power); }
+    static inline bool  SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format, float power) { return SliderScalarN(label, ImGuiDataType_Float, v, 4, &v_min, &v_max, format, power); }
+    // OBSOLETED in 1.77 (from June 2020)
+    static inline bool  BeginPopupContextWindow(const char* str_id, ImGuiMouseButton mb, bool over_items) { return BeginPopupContextWindow(str_id, mb | (over_items ? 0 : ImGuiPopupFlags_NoOpenOverItems)); }
+    // OBSOLETED in 1.72 (from April 2019)
+    static inline void  TreeAdvanceToLabelPos() { SetCursorPosX(GetCursorPosX() + GetTreeNodeToLabelSpacing()); }
+    // OBSOLETED in 1.71 (from June 2019)
+    static inline void  SetNextTreeNodeOpen(bool open, ImGuiCond cond = 0) { SetNextItemOpen(open, cond); }
+    // OBSOLETED in 1.70 (from May 2019)
+    static inline float GetContentRegionAvailWidth() { return GetContentRegionAvail().x; }
+
+    // Some of the older obsolete names along with their replacement (commented out so they are not reported in IDE)
+    //static inline ImDrawList* GetOverlayDrawList()            { return GetForegroundDrawList(); }                         // OBSOLETED in 1.69 (from Mar 2019)
+    //static inline void  SetScrollHere(float ratio = 0.5f)     { SetScrollHereY(ratio); }                                  // OBSOLETED in 1.66 (from Nov 2018)
+    //static inline bool  IsItemDeactivatedAfterChange()        { return IsItemDeactivatedAfterEdit(); }                    // OBSOLETED in 1.63 (from Aug 2018)
+    //static inline bool  IsAnyWindowFocused()                  { return IsWindowFocused(ImGuiFocusedFlags_AnyWindow); }    // OBSOLETED in 1.60 (from Apr 2018)
+    //static inline bool  IsAnyWindowHovered()                  { return IsWindowHovered(ImGuiHoveredFlags_AnyWindow); }    // OBSOLETED in 1.60 (between Dec 2017 and Apr 2018)
+    //static inline void  ShowTestWindow()                      { return ShowDemoWindow(); }                                // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
+    //static inline bool  IsRootWindowFocused()                 { return IsWindowFocused(ImGuiFocusedFlags_RootWindow); }   // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
+    //static inline bool  IsRootWindowOrAnyChildFocused()       { return IsWindowFocused(ImGuiFocusedFlags_RootAndChildWindows); } // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
+    //static inline void  SetNextWindowContentWidth(float w)    { SetNextWindowContentSize(ImVec2(w, 0.0f)); }              // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
+    //static inline float GetItemsLineHeightWithSpacing()       { return GetFrameHeightWithSpacing(); }                     // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
+}
+
+// OBSOLETED in 1.82 (from Mars 2021): flags for AddRect(), AddRectFilled(), AddImageRounded(), PathRect()
+typedef ImDrawFlags ImDrawCornerFlags;
+enum ImDrawCornerFlags_
+{
+    ImDrawCornerFlags_None = ImDrawFlags_RoundCornersNone,         // Was == 0 prior to 1.82, this is now == ImDrawFlags_RoundCornersNone which is != 0 and not implicit
+    ImDrawCornerFlags_TopLeft = ImDrawFlags_RoundCornersTopLeft,      // Was == 0x01 (1 << 0) prior to 1.82. Order matches ImDrawFlags_NoRoundCorner* flag (we exploit this internally).
+    ImDrawCornerFlags_TopRight = ImDrawFlags_RoundCornersTopRight,     // Was == 0x02 (1 << 1) prior to 1.82.
+    ImDrawCornerFlags_BotLeft = ImDrawFlags_RoundCornersBottomLeft,   // Was == 0x04 (1 << 2) prior to 1.82.
+    ImDrawCornerFlags_BotRight = ImDrawFlags_RoundCornersBottomRight,  // Was == 0x08 (1 << 3) prior to 1.82.
+    ImDrawCornerFlags_All = ImDrawFlags_RoundCornersAll,          // Was == 0x0F prior to 1.82
+    ImDrawCornerFlags_Top = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,
+    ImDrawCornerFlags_Bot = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,
+    ImDrawCornerFlags_Left = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,
+    ImDrawCornerFlags_Right = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight
+};
+
+#endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
+
+//-----------------------------------------------------------------------------
+
+#if defined(__clang__)
+#pragma clang diagnostic pop
+#elif defined(__GNUC__)
+#pragma GCC diagnostic pop
+#endif
+
+#ifdef _MSC_VER
+#pragma warning (pop)
+#endif
+
+// Include imgui_user.h at the end of imgui.h (convenient for user to only explicitly include vanilla imgui.h)
+#ifdef IMGUI_INCLUDE_IMGUI_USER_H
+#include "imgui_user.h"
+#endif
+
+#endif // #ifndef IMGUI_DISABLE
\ No newline at end of file
diff --git a/src/3rd party/lua-extensions/vs2022/lua_extensions.filters b/src/3rd party/lua-extensions/vs2022/lua_extensions.filters
new file mode 100644
index 0000000..9bbba7d
--- /dev/null
+++ b/src/3rd party/lua-extensions/vs2022/lua_extensions.filters	
@@ -0,0 +1,77 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+    </Filter>
+    <Filter Include="Header Files">
+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+      <Extensions>h;hpp;hxx;hm;inl;inc;xsd</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="base.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="lfs.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="LibLpack.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="keyboard.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="LibMath.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="LibStr.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="LibTab.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="Logger.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="xray.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="lmarshal.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="lfs.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="keyboard.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="LibMath.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="Libs.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="LibStr.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="LibTab.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="logger.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="xrCore.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="xray.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="lmarshal.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/lua-extensions/vs2022/lua_extensions.vcxproj b/src/3rd party/lua-extensions/vs2022/lua_extensions.vcxproj
new file mode 100644
index 0000000..1220f07
--- /dev/null
+++ b/src/3rd party/lua-extensions/vs2022/lua_extensions.vcxproj	
@@ -0,0 +1,161 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}</ProjectGuid>
+    <RootNamespace>rvp</RootNamespace>
+    <ProjectName>lua_extensions</ProjectName>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+    <CharacterSet>MultiByte</CharacterSet>
+    <UseOfMfc>false</UseOfMfc>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <TargetName>$(ProjectName)</TargetName>
+    <IncludePath>$(VC_IncludePath);$(WindowsSDK_IncludePath);</IncludePath>
+    <LibraryPath>$(VC_LibraryPath_x64);$(WindowsSDK_LibraryPath_x64);</LibraryPath>
+    <GenerateManifest>true</GenerateManifest>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <TargetName>$(ProjectName)</TargetName>
+    <IncludePath>$(VC_IncludePath);$(WindowsSDK_IncludePath);</IncludePath>
+    <LibraryPath>$(VC_LibraryPath_x64);$(WindowsSDK_LibraryPath_x64);</LibraryPath>
+    <GenerateManifest>true</GenerateManifest>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <TargetName>$(ProjectName)</TargetName>
+    <IncludePath>$(VC_IncludePath);$(WindowsSDK_IncludePath);</IncludePath>
+    <LibraryPath>$(VC_LibraryPath_x64);$(WindowsSDK_LibraryPath_x64);</LibraryPath>
+    <GenerateManifest>true</GenerateManifest>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(SolutionDir)3rd party\luajit-2\src\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>_WINDLL;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4996;4244;4018</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <LargeAddressAware>true</LargeAddressAware>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <AdditionalIncludeDirectories>$(SolutionDir)3rd party\luajit-2\src\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <ExceptionHandling>false</ExceptionHandling>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;_WINDLL;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4996;4244;4018</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+    </ClCompile>
+    <Link>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <LargeAddressAware>true</LargeAddressAware>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(SolutionDir)3rd party\luajit-2\src\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>_WINDLL;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4996;4244;4018</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <LargeAddressAware>true</LargeAddressAware>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\base.cpp" />
+    <ClCompile Include="..\lfs.c" />
+    <ClCompile Include="..\lmarshal.c" />
+    <ClCompile Include="..\script_additional_libs.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\lfs.h" />
+    <ClInclude Include="..\lmarshal.h" />
+    <ClInclude Include="..\script_additional_libs.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/lua-extensions/vs2022/lua_extensions.vcxproj.filters b/src/3rd party/lua-extensions/vs2022/lua_extensions.vcxproj.filters
new file mode 100644
index 0000000..8a32c6d
--- /dev/null
+++ b/src/3rd party/lua-extensions/vs2022/lua_extensions.vcxproj.filters	
@@ -0,0 +1,14 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <ClCompile Include="base.cpp" />
+    <ClCompile Include="lfs.c" />
+    <ClCompile Include="lmarshal.c" />
+    <ClCompile Include="script_additional_libs.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="lfs.h" />
+    <ClInclude Include="lmarshal.h" />
+    <ClInclude Include="script_additional_libs.h" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/luabind/vs2022/luabind.beta7-devel.rc4.vcxproj b/src/3rd party/luabind/vs2022/luabind.beta7-devel.rc4.vcxproj
new file mode 100644
index 0000000..4e2c971
--- /dev/null
+++ b/src/3rd party/luabind/vs2022/luabind.beta7-devel.rc4.vcxproj	
@@ -0,0 +1,276 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{CC52E0B3-CC35-4934-9302-035B748F3F2C}</ProjectGuid>
+    <RootNamespace>luabind</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(ProjectDir)..\;$(ProjectDir)..\..\luajit-2\src\;$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;LUABIND_BUILDING;_SECURE_SCL=0;_HAS_ITERATOR_DEBUGGING=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
+      <DisableSpecificWarnings>4530;4100;4714;4127;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(ProjectDir)..\luajit-2\src\;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <GenerateMapFile>false</GenerateMapFile>
+      <SubSystem>
+      </SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <LargeAddressAware>true</LargeAddressAware>
+      <AdditionalDependencies>lua51.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <AdditionalIncludeDirectories>$(ProjectDir)..\;$(ProjectDir)..\..\luajit-2\src\;$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;LUABIND_BUILDING;_SECURE_SCL=0;_HAS_ITERATOR_DEBUGGING=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <DisableSpecificWarnings>4530;4100;4714;4127;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(ProjectDir)..\luajit-2\src\;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <GenerateMapFile>false</GenerateMapFile>
+      <SubSystem>
+      </SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <LargeAddressAware>true</LargeAddressAware>
+      <AdditionalDependencies>lua51.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(ProjectDir)..\;$(ProjectDir)..\..\luajit-2\src\;$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;LUABIND_BUILDING;_SECURE_SCL=0;_HAS_ITERATOR_DEBUGGING=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
+      <DisableSpecificWarnings>4530;4100;4714;4127;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(ProjectDir)..\luajit-2\src\;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <GenerateMapFile>false</GenerateMapFile>
+      <SubSystem>
+      </SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <LargeAddressAware>true</LargeAddressAware>
+      <AdditionalDependencies>lua51.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\library_linkage.cpp" />
+    <ClCompile Include="..\luabind_memory.cpp" />
+    <ClCompile Include="..\pch.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\src\class.cpp" />
+    <ClCompile Include="..\src\class_info.cpp" />
+    <ClCompile Include="..\src\class_registry.cpp" />
+    <ClCompile Include="..\src\class_rep.cpp" />
+    <ClCompile Include="..\src\create_class.cpp" />
+    <ClCompile Include="..\src\error.cpp" />
+    <ClCompile Include="..\src\find_best_match.cpp" />
+    <ClCompile Include="..\src\function.cpp" />
+    <ClCompile Include="..\src\implicit_cast.cpp" />
+    <ClCompile Include="..\src\link_compatibility.cpp" />
+    <ClCompile Include="..\src\object.cpp" />
+    <ClCompile Include="..\src\object_rep.cpp" />
+    <ClCompile Include="..\src\open.cpp" />
+    <ClCompile Include="..\src\pcall.cpp" />
+    <ClCompile Include="..\src\ref.cpp" />
+    <ClCompile Include="..\src\scope.cpp" />
+    <ClCompile Include="..\src\stack_content_by_name.cpp" />
+    <ClCompile Include="..\src\weak_ref.cpp" />
+    <ClCompile Include="..\src\wrapper_base.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\luabind\adopt_policy.hpp" />
+    <ClInclude Include="..\luabind\back_reference.hpp" />
+    <ClInclude Include="..\luabind\back_reference_fwd.hpp" />
+    <ClInclude Include="..\luabind\class.hpp" />
+    <ClInclude Include="..\luabind\class_info.hpp" />
+    <ClInclude Include="..\luabind\com_policy.hpp" />
+    <ClInclude Include="..\luabind\config.hpp" />
+    <ClInclude Include="..\luabind\container_policy.hpp" />
+    <ClInclude Include="..\luabind\copy_policy.hpp" />
+    <ClInclude Include="..\luabind\dependency_policy.hpp" />
+    <ClInclude Include="..\luabind\detail\calc_arity.hpp" />
+    <ClInclude Include="..\luabind\detail\call.hpp" />
+    <ClInclude Include="..\luabind\detail\call_function.hpp" />
+    <ClInclude Include="..\luabind\detail\call_member.hpp" />
+    <ClInclude Include="..\luabind\detail\call_operator_iterate.hpp" />
+    <ClInclude Include="..\luabind\detail\class_cache.hpp" />
+    <ClInclude Include="..\luabind\detail\class_registry.hpp" />
+    <ClInclude Include="..\luabind\detail\class_rep.hpp" />
+    <ClInclude Include="..\luabind\detail\class_rep_scope.hpp" />
+    <ClInclude Include="..\luabind\detail\constructor.hpp" />
+    <ClInclude Include="..\luabind\detail\construct_rep.hpp" />
+    <ClInclude Include="..\luabind\detail\convert_to_lua.hpp" />
+    <ClInclude Include="..\luabind\detail\debug.hpp" />
+    <ClInclude Include="..\luabind\detail\decorate_type.hpp" />
+    <ClInclude Include="..\luabind\detail\enum_maker.hpp" />
+    <ClInclude Include="..\luabind\detail\find_best_match.hpp" />
+    <ClInclude Include="..\luabind\detail\garbage_collector.hpp" />
+    <ClInclude Include="..\luabind\detail\get_overload_signature.hpp" />
+    <ClInclude Include="..\luabind\detail\get_signature.hpp" />
+    <ClInclude Include="..\luabind\detail\implicit_cast.hpp" />
+    <ClInclude Include="..\luabind\detail\is_indirect_const.hpp" />
+    <ClInclude Include="..\luabind\detail\link_compatibility.hpp" />
+    <ClInclude Include="..\luabind\detail\method_rep.hpp" />
+    <ClInclude Include="..\luabind\detail\object_funs.hpp" />
+    <ClInclude Include="..\luabind\detail\object_rep.hpp" />
+    <ClInclude Include="..\luabind\detail\open.hpp" />
+    <ClInclude Include="..\luabind\detail\operators.hpp" />
+    <ClInclude Include="..\luabind\detail\operator_id.hpp" />
+    <ClInclude Include="..\luabind\detail\other.hpp" />
+    <ClInclude Include="..\luabind\detail\overload_rep.hpp" />
+    <ClInclude Include="..\luabind\detail\overload_rep_base.hpp" />
+    <ClInclude Include="..\luabind\detail\overload_rep_impl.hpp" />
+    <ClInclude Include="..\luabind\detail\pcall.hpp" />
+    <ClInclude Include="..\luabind\detail\pointee_sizeof.hpp" />
+    <ClInclude Include="..\luabind\detail\pointee_typeid.hpp" />
+    <ClInclude Include="..\luabind\detail\policy.hpp" />
+    <ClInclude Include="..\luabind\detail\primitives.hpp" />
+    <ClInclude Include="..\luabind\detail\property.hpp" />
+    <ClInclude Include="..\luabind\detail\ref.hpp" />
+    <ClInclude Include="..\luabind\detail\signature_match.hpp" />
+    <ClInclude Include="..\luabind\detail\stack_utils.hpp" />
+    <ClInclude Include="..\luabind\detail\typetraits.hpp" />
+    <ClInclude Include="..\luabind\detail\yes_no.hpp" />
+    <ClInclude Include="..\luabind\discard_result_policy.hpp" />
+    <ClInclude Include="..\luabind\error.hpp" />
+    <ClInclude Include="..\luabind\function.hpp" />
+    <ClInclude Include="..\luabind\functor.hpp" />
+    <ClInclude Include="..\luabind\iterator_policy.hpp" />
+    <ClInclude Include="..\luabind\library_linkage.h" />
+    <ClInclude Include="..\luabind\luabind.hpp" />
+    <ClInclude Include="..\luabind\luabind_auto_ptr.h" />
+    <ClInclude Include="..\luabind\luabind_delete.h" />
+    <ClInclude Include="..\luabind\luabind_memory.h" />
+    <ClInclude Include="..\luabind\luabind_memory_allocator.h" />
+    <ClInclude Include="..\luabind\luabind_memory_allocator_inline.h" />
+    <ClInclude Include="..\luabind\luabind_memory_manager_generator.h" />
+    <ClInclude Include="..\luabind\luabind_types.h" />
+    <ClInclude Include="..\luabind\lua_include.hpp" />
+    <ClInclude Include="..\luabind\object.hpp" />
+    <ClInclude Include="..\luabind\open.hpp" />
+    <ClInclude Include="..\luabind\operator.hpp" />
+    <ClInclude Include="..\luabind\out_value_policy.hpp" />
+    <ClInclude Include="..\luabind\prefix.hpp" />
+    <ClInclude Include="..\luabind\raw_policy.hpp" />
+    <ClInclude Include="..\luabind\return_reference_to_policy.hpp" />
+    <ClInclude Include="..\luabind\scope.hpp" />
+    <ClInclude Include="..\luabind\weak_ref.hpp" />
+    <ClInclude Include="..\luabind\wrapper_base.hpp" />
+    <ClInclude Include="..\luabind\yield_policy.hpp" />
+    <ClInclude Include="..\pch.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/luabind/vs2022/luabind.beta7-devel.rc4.vcxproj.filters b/src/3rd party/luabind/vs2022/luabind.beta7-devel.rc4.vcxproj.filters
new file mode 100644
index 0000000..3b4f0b5
--- /dev/null
+++ b/src/3rd party/luabind/vs2022/luabind.beta7-devel.rc4.vcxproj.filters	
@@ -0,0 +1,117 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <ClCompile Include="..\library_linkage.cpp" />
+    <ClCompile Include="..\luabind_memory.cpp" />
+    <ClCompile Include="..\pch.cpp" />
+    <ClCompile Include="..\src\class.cpp" />
+    <ClCompile Include="..\src\class_info.cpp" />
+    <ClCompile Include="..\src\class_registry.cpp" />
+    <ClCompile Include="..\src\class_rep.cpp" />
+    <ClCompile Include="..\src\create_class.cpp" />
+    <ClCompile Include="..\src\error.cpp" />
+    <ClCompile Include="..\src\find_best_match.cpp" />
+    <ClCompile Include="..\src\function.cpp" />
+    <ClCompile Include="..\src\implicit_cast.cpp" />
+    <ClCompile Include="..\src\link_compatibility.cpp" />
+    <ClCompile Include="..\src\object.cpp" />
+    <ClCompile Include="..\src\object_rep.cpp" />
+    <ClCompile Include="..\src\open.cpp" />
+    <ClCompile Include="..\src\pcall.cpp" />
+    <ClCompile Include="..\src\ref.cpp" />
+    <ClCompile Include="..\src\scope.cpp" />
+    <ClCompile Include="..\src\stack_content_by_name.cpp" />
+    <ClCompile Include="..\src\weak_ref.cpp" />
+    <ClCompile Include="..\src\wrapper_base.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\luabind\adopt_policy.hpp" />
+    <ClInclude Include="..\luabind\back_reference.hpp" />
+    <ClInclude Include="..\luabind\back_reference_fwd.hpp" />
+    <ClInclude Include="..\luabind\class.hpp" />
+    <ClInclude Include="..\luabind\class_info.hpp" />
+    <ClInclude Include="..\luabind\com_policy.hpp" />
+    <ClInclude Include="..\luabind\config.hpp" />
+    <ClInclude Include="..\luabind\container_policy.hpp" />
+    <ClInclude Include="..\luabind\copy_policy.hpp" />
+    <ClInclude Include="..\luabind\dependency_policy.hpp" />
+    <ClInclude Include="..\luabind\detail\calc_arity.hpp" />
+    <ClInclude Include="..\luabind\detail\call.hpp" />
+    <ClInclude Include="..\luabind\detail\call_function.hpp" />
+    <ClInclude Include="..\luabind\detail\call_member.hpp" />
+    <ClInclude Include="..\luabind\detail\call_operator_iterate.hpp" />
+    <ClInclude Include="..\luabind\detail\class_cache.hpp" />
+    <ClInclude Include="..\luabind\detail\class_registry.hpp" />
+    <ClInclude Include="..\luabind\detail\class_rep.hpp" />
+    <ClInclude Include="..\luabind\detail\class_rep_scope.hpp" />
+    <ClInclude Include="..\luabind\detail\constructor.hpp" />
+    <ClInclude Include="..\luabind\detail\construct_rep.hpp" />
+    <ClInclude Include="..\luabind\detail\convert_to_lua.hpp" />
+    <ClInclude Include="..\luabind\detail\debug.hpp" />
+    <ClInclude Include="..\luabind\detail\decorate_type.hpp" />
+    <ClInclude Include="..\luabind\detail\enum_maker.hpp" />
+    <ClInclude Include="..\luabind\detail\find_best_match.hpp" />
+    <ClInclude Include="..\luabind\detail\garbage_collector.hpp" />
+    <ClInclude Include="..\luabind\detail\get_overload_signature.hpp" />
+    <ClInclude Include="..\luabind\detail\get_signature.hpp" />
+    <ClInclude Include="..\luabind\detail\implicit_cast.hpp" />
+    <ClInclude Include="..\luabind\detail\is_indirect_const.hpp" />
+    <ClInclude Include="..\luabind\detail\link_compatibility.hpp" />
+    <ClInclude Include="..\luabind\detail\method_rep.hpp" />
+    <ClInclude Include="..\luabind\detail\object_funs.hpp" />
+    <ClInclude Include="..\luabind\detail\object_rep.hpp" />
+    <ClInclude Include="..\luabind\detail\open.hpp" />
+    <ClInclude Include="..\luabind\detail\operators.hpp" />
+    <ClInclude Include="..\luabind\detail\operator_id.hpp" />
+    <ClInclude Include="..\luabind\detail\other.hpp" />
+    <ClInclude Include="..\luabind\detail\overload_rep.hpp" />
+    <ClInclude Include="..\luabind\detail\overload_rep_base.hpp" />
+    <ClInclude Include="..\luabind\detail\overload_rep_impl.hpp" />
+    <ClInclude Include="..\luabind\detail\pcall.hpp" />
+    <ClInclude Include="..\luabind\detail\pointee_sizeof.hpp" />
+    <ClInclude Include="..\luabind\detail\pointee_typeid.hpp" />
+    <ClInclude Include="..\luabind\detail\policy.hpp" />
+    <ClInclude Include="..\luabind\detail\primitives.hpp" />
+    <ClInclude Include="..\luabind\detail\property.hpp" />
+    <ClInclude Include="..\luabind\detail\ref.hpp" />
+    <ClInclude Include="..\luabind\detail\signature_match.hpp" />
+    <ClInclude Include="..\luabind\detail\stack_utils.hpp" />
+    <ClInclude Include="..\luabind\detail\typetraits.hpp" />
+    <ClInclude Include="..\luabind\detail\yes_no.hpp" />
+    <ClInclude Include="..\luabind\discard_result_policy.hpp" />
+    <ClInclude Include="..\luabind\error.hpp" />
+    <ClInclude Include="..\luabind\function.hpp" />
+    <ClInclude Include="..\luabind\functor.hpp" />
+    <ClInclude Include="..\luabind\iterator_policy.hpp" />
+    <ClInclude Include="..\luabind\library_linkage.h" />
+    <ClInclude Include="..\luabind\luabind.hpp" />
+    <ClInclude Include="..\luabind\luabind_auto_ptr.h" />
+    <ClInclude Include="..\luabind\luabind_delete.h" />
+    <ClInclude Include="..\luabind\luabind_memory.h" />
+    <ClInclude Include="..\luabind\luabind_memory_allocator.h" />
+    <ClInclude Include="..\luabind\luabind_memory_allocator_inline.h" />
+    <ClInclude Include="..\luabind\luabind_memory_manager_generator.h" />
+    <ClInclude Include="..\luabind\luabind_types.h" />
+    <ClInclude Include="..\luabind\lua_include.hpp" />
+    <ClInclude Include="..\luabind\object.hpp" />
+    <ClInclude Include="..\luabind\open.hpp" />
+    <ClInclude Include="..\luabind\operator.hpp" />
+    <ClInclude Include="..\luabind\out_value_policy.hpp" />
+    <ClInclude Include="..\luabind\prefix.hpp" />
+    <ClInclude Include="..\luabind\raw_policy.hpp" />
+    <ClInclude Include="..\luabind\return_reference_to_policy.hpp" />
+    <ClInclude Include="..\luabind\scope.hpp" />
+    <ClInclude Include="..\luabind\weak_ref.hpp" />
+    <ClInclude Include="..\luabind\wrapper_base.hpp" />
+    <ClInclude Include="..\luabind\yield_policy.hpp" />
+    <ClInclude Include="..\pch.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <Filter Include="Sources">
+      <UniqueIdentifier>{ca4ed806-a92a-460d-82e1-12c6d54eb9e2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Headers">
+      <UniqueIdentifier>{d77de1d4-f96c-4241-9861-1cb5acd23a2b}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/ode/contrib/msvc7/ode_default/vs2022/default.vcxproj b/src/3rd party/ode/contrib/msvc7/ode_default/vs2022/default.vcxproj
new file mode 100644
index 0000000..ffad871
--- /dev/null
+++ b/src/3rd party/ode/contrib/msvc7/ode_default/vs2022/default.vcxproj	
@@ -0,0 +1,314 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectName>ode</ProjectName>
+    <ProjectGuid>{1BF75FEB-87DD-486C-880B-227987D191C2}</ProjectGuid>
+    <Keyword>AtlProj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <UseOfAtl>false</UseOfAtl>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <UseOfAtl>false</UseOfAtl>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <UseOfAtl>false</UseOfAtl>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <IgnoreImportLibrary>true</IgnoreImportLibrary>
+    <LinkIncremental>false</LinkIncremental>
+    <PostBuildEventUseInBuild>false</PostBuildEventUseInBuild>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <IgnoreImportLibrary>true</IgnoreImportLibrary>
+    <LinkIncremental>false</LinkIncremental>
+    <PostBuildEventUseInBuild>false</PostBuildEventUseInBuild>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <IgnoreImportLibrary>true</IgnoreImportLibrary>
+    <LinkIncremental>false</LinkIncremental>
+    <PostBuildEventUseInBuild>false</PostBuildEventUseInBuild>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>false</MkTypLibCompatible>
+      <GenerateStublessProxies>true</GenerateStublessProxies>
+      <TypeLibraryName>$(IntDir)default.tlb</TypeLibraryName>
+      <HeaderFileName>default.h</HeaderFileName>
+      <DllDataFileName>
+      </DllDataFileName>
+      <InterfaceIdentifierFileName>default_i.c</InterfaceIdentifierFileName>
+      <ProxyFileName>default_p.c</ProxyFileName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>../../../../include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;dSINGLE;MSVC;dNODEBUG;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4100;4505;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+      <AdditionalIncludeDirectories>$(IntDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+    </ResourceCompile>
+    <Link>
+      <ModuleDefinitionFile>../../../config/msvcdefs.def</ModuleDefinitionFile>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Windows</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+    </Link>
+    <PostBuildEvent>
+      <Message>Performing registration</Message>
+      <Command>regsvr32 /s /c "$(TargetPath)"</Command>
+    </PostBuildEvent>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>false</MkTypLibCompatible>
+      <GenerateStublessProxies>true</GenerateStublessProxies>
+      <TypeLibraryName>$(IntDir)default.tlb</TypeLibraryName>
+      <HeaderFileName>default.h</HeaderFileName>
+      <DllDataFileName>
+      </DllDataFileName>
+      <InterfaceIdentifierFileName>default_i.c</InterfaceIdentifierFileName>
+      <ProxyFileName>default_p.c</ProxyFileName>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>../../../../include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;_WINDOWS;NDEBUG;dSINGLE;MSVC;dNODEBUG;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <DisableSpecificWarnings>4100;4505;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+      <AdditionalIncludeDirectories>$(IntDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+    </ResourceCompile>
+    <Link>
+      <ModuleDefinitionFile>../../../config/msvcdefs.def</ModuleDefinitionFile>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Windows</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+    </Link>
+    <PostBuildEvent>
+      <Message>Performing registration</Message>
+      <Command>regsvr32 /s /c "$(TargetPath)"</Command>
+    </PostBuildEvent>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>false</MkTypLibCompatible>
+      <GenerateStublessProxies>true</GenerateStublessProxies>
+      <TypeLibraryName>$(IntDir)default.tlb</TypeLibraryName>
+      <HeaderFileName>default.h</HeaderFileName>
+      <DllDataFileName>
+      </DllDataFileName>
+      <InterfaceIdentifierFileName>default_i.c</InterfaceIdentifierFileName>
+      <ProxyFileName>default_p.c</ProxyFileName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>../../../../include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;dSINGLE;MSVC;dNODEBUG;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <DisableSpecificWarnings>4100;4505;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+      <AdditionalIncludeDirectories>$(IntDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+    </ResourceCompile>
+    <Link>
+      <ModuleDefinitionFile>../../../config/msvcdefs.def</ModuleDefinitionFile>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Windows</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+    </Link>
+    <PostBuildEvent>
+      <Message>Performing registration</Message>
+      <Command>regsvr32 /s /c "$(TargetPath)"</Command>
+    </PostBuildEvent>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\..\..\include\ode\collision.h" />
+    <ClInclude Include="..\..\..\..\include\ode\collision_space.h" />
+    <ClInclude Include="..\..\..\..\include\ode\collision_trimesh.h" />
+    <ClInclude Include="..\..\..\..\include\ode\common.h" />
+    <ClInclude Include="..\..\..\..\include\ode\compatibility.h" />
+    <ClInclude Include="..\..\..\..\include\ode\config.h" />
+    <ClInclude Include="..\..\..\..\include\ode\contact.h" />
+    <ClInclude Include="..\..\..\..\include\ode\error.h" />
+    <ClInclude Include="..\..\..\..\include\ode\export-dif.h" />
+    <ClInclude Include="..\..\..\..\include\ode\geom.h" />
+    <ClInclude Include="..\..\..\..\include\ode\mass.h" />
+    <ClInclude Include="..\..\..\..\include\ode\matrix.h" />
+    <ClInclude Include="..\..\..\..\include\ode\memory.h" />
+    <ClInclude Include="..\..\..\..\include\ode\misc.h" />
+    <ClInclude Include="..\..\..\..\include\ode\objects.h" />
+    <ClInclude Include="..\..\..\..\include\ode\ode.h" />
+    <ClInclude Include="..\..\..\..\include\ode\odecpp.h" />
+    <ClInclude Include="..\..\..\..\include\ode\odecpp_collision.h" />
+    <ClInclude Include="..\..\..\..\include\ode\odemath.h" />
+    <ClInclude Include="..\..\..\..\include\ode\rotation.h" />
+    <ClInclude Include="..\..\..\..\include\ode\space.h" />
+    <ClInclude Include="..\..\..\..\include\ode\timer.h" />
+    <ClInclude Include="..\..\..\..\ode\src\array.h" />
+    <ClInclude Include="..\..\..\..\ode\src\Bounder33.h" />
+    <ClInclude Include="..\..\..\..\ode\src\collision_kernel.h" />
+    <ClInclude Include="..\..\..\..\ode\src\collision_space_internal.h" />
+    <ClInclude Include="..\..\..\..\ode\src\collision_std.h" />
+    <ClInclude Include="..\..\..\..\ode\src\collision_transform.h" />
+    <ClInclude Include="..\..\..\..\ode\src\collision_trimesh_internal.h" />
+    <ClInclude Include="..\..\..\..\ode\src\collision_util.h" />
+    <ClInclude Include="..\..\..\..\ode\src\geom_internal.h" />
+    <ClInclude Include="..\..\..\..\ode\src\joint.h" />
+    <ClInclude Include="..\..\..\..\ode\src\lcp.h" />
+    <ClInclude Include="..\..\..\..\ode\src\Lcp33.h" />
+    <ClInclude Include="..\..\..\..\ode\src\mat.h" />
+    <ClInclude Include="..\..\..\..\ode\src\objects.h" />
+    <ClInclude Include="..\..\..\..\ode\src\obstack.h" />
+    <ClInclude Include="..\..\..\..\ode\src\quickstep.h" />
+    <ClInclude Include="..\..\..\..\ode\src\stack.h" />
+    <ClInclude Include="..\..\..\..\ode\src\step.h" />
+    <ClInclude Include="..\..\..\..\ode\src\StepJointInternal.h" />
+    <ClInclude Include="..\..\..\..\ode\src\testing.h" />
+    <ClInclude Include="..\..\..\..\ode\src\util.h" />
+    <ClInclude Include="..\de_padf_integration.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\..\..\ode\src\array.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\Bounder33.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\collision_kernel.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\collision_quadtreespace.cpp">
+      <DisableSpecificWarnings Condition="'$(Configuration)|$(Platform)'=='Release|x64'">4244;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <DisableSpecificWarnings Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">4244;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <DisableSpecificWarnings Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">4244;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\collision_space.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\collision_std.cpp">
+      <DisableSpecificWarnings Condition="'$(Configuration)|$(Platform)'=='Release|x64'">4244;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <DisableSpecificWarnings Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">4244;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <DisableSpecificWarnings Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">4244;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\collision_transform.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\collision_util.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\error.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\export-dif.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\fastdot.c" />
+    <ClCompile Include="..\..\..\..\ode\src\fastldlt.c" />
+    <ClCompile Include="..\..\..\..\ode\src\fastlsolve.c" />
+    <ClCompile Include="..\..\..\..\ode\src\fastltsolve.c" />
+    <ClCompile Include="..\..\..\..\ode\src\joint.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\lcp.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\mass.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\mat.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\matrix.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\memory.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\misc.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\obstack.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\ode.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\odemath.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\quickstep.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\rotation.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\step.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\stepfast.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\StepJointInternal.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\testing.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\timer.cpp" />
+    <ClCompile Include="..\..\..\..\ode\src\util.cpp" />
+    <ClCompile Include="..\de_padf_integration.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="..\..\..\..\config\msvcdefs.def" />
+  </ItemGroup>
+  <ItemGroup>
+    <Text Include="..\ReadMe.txt" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="0" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/ode/contrib/msvc7/ode_default/vs2022/default.vcxproj.filters b/src/3rd party/ode/contrib/msvc7/ode_default/vs2022/default.vcxproj.filters
new file mode 100644
index 0000000..f0b17f9
--- /dev/null
+++ b/src/3rd party/ode/contrib/msvc7/ode_default/vs2022/default.vcxproj.filters	
@@ -0,0 +1,259 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Header Files">
+      <UniqueIdentifier>{9fdfa76d-f051-4dc8-9a3d-53175862022c}</UniqueIdentifier>
+      <Extensions>h;hpp;hxx;hm;inl;inc</Extensions>
+    </Filter>
+    <Filter Include="Shared Header Files">
+      <UniqueIdentifier>{3680acf5-86cb-4089-aff7-905530353130}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{543628a7-869c-466f-bfa2-7713c66a81f9}</UniqueIdentifier>
+      <Extensions>cpp;c;cxx;def;odl;idl;hpj;bat;asm</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\..\..\include\ode\collision.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\collision_space.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\collision_trimesh.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\common.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\compatibility.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\config.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\contact.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\error.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\export-dif.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\geom.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\mass.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\matrix.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\memory.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\misc.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\objects.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\ode.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\odecpp.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\odecpp_collision.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\odemath.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\rotation.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\space.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\include\ode\timer.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\array.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\Bounder33.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\collision_kernel.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\collision_space_internal.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\collision_std.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\collision_transform.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\collision_trimesh_internal.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\collision_util.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\geom_internal.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\joint.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\lcp.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\Lcp33.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\mat.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\objects.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\obstack.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\quickstep.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\stack.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\step.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\StepJointInternal.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\testing.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\..\..\ode\src\util.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="..\de_padf_integration.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\..\..\ode\src\array.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\Bounder33.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\collision_kernel.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\collision_quadtreespace.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\collision_space.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\collision_std.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\collision_transform.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\collision_util.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\error.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\export-dif.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\fastdot.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\fastldlt.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\fastlsolve.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\fastltsolve.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\joint.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\lcp.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\mass.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\mat.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\matrix.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\memory.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\misc.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\obstack.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\ode.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\odemath.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\quickstep.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\rotation.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\step.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\stepfast.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\StepJointInternal.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\testing.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\timer.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\..\..\ode\src\util.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="..\de_padf_integration.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="..\..\..\..\config\msvcdefs.def">
+      <Filter>Source Files</Filter>
+    </None>
+  </ItemGroup>
+  <ItemGroup>
+    <Text Include="..\ReadMe.txt" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/openal/OpenAL-Windows/Router/vs2022/Router.vcxproj b/src/3rd party/openal/OpenAL-Windows/Router/vs2022/Router.vcxproj
new file mode 100644
index 0000000..c8480d4
--- /dev/null
+++ b/src/3rd party/openal/OpenAL-Windows/Router/vs2022/Router.vcxproj	
@@ -0,0 +1,257 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectName>OpenAL32</ProjectName>
+    <ProjectGuid>{566551F4-4EF1-4CB4-A131-F982E7606907}</ProjectGuid>
+    <RootNamespace>OpenAL32</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <UseOfMfc>false</UseOfMfc>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(SolutionDir)3rd party\openal\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <PrecompiledHeaderOutputFile>
+      </PrecompiledHeaderOutputFile>
+      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
+      <ObjectFileName>$(IntDir)</ObjectFileName>
+      <ProgramDataBaseFileName>$(IntDir)</ProgramDataBaseFileName>
+      <BrowseInformation>
+      </BrowseInformation>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>version.lib;winmm.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <LargeAddressAware>true</LargeAddressAware>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>$(SolutionDir)3rd party\openal\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_WINDOWS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <PrecompiledHeaderOutputFile>
+      </PrecompiledHeaderOutputFile>
+      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
+      <ObjectFileName>$(IntDir)</ObjectFileName>
+      <ProgramDataBaseFileName>$(IntDir)</ProgramDataBaseFileName>
+      <BrowseInformation>
+      </BrowseInformation>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>version.lib;winmm.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <LargeAddressAware>true</LargeAddressAware>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(SolutionDir)3rd party\openal\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <PrecompiledHeaderOutputFile>
+      </PrecompiledHeaderOutputFile>
+      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
+      <ObjectFileName>$(IntDir)</ObjectFileName>
+      <ProgramDataBaseFileName>$(IntDir)</ProgramDataBaseFileName>
+      <BrowseInformation>
+      </BrowseInformation>
+      <ExceptionHandling>false</ExceptionHandling>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>version.lib;winmm.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <LargeAddressAware>true</LargeAddressAware>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\al.cpp">
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='Release|x64'">MaxSpeed</Optimization>
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">MaxSpeed</Optimization>
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">MaxSpeed</Optimization>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </BrowseInformation>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </BrowseInformation>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </BrowseInformation>
+    </ClCompile>
+    <ClCompile Include="..\alc.cpp">
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='Release|x64'">MaxSpeed</Optimization>
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">MaxSpeed</Optimization>
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">MaxSpeed</Optimization>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </BrowseInformation>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </BrowseInformation>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </BrowseInformation>
+    </ClCompile>
+    <ClCompile Include="..\alList.cpp">
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='Release|x64'">MaxSpeed</Optimization>
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">MaxSpeed</Optimization>
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">MaxSpeed</Optimization>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </BrowseInformation>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </BrowseInformation>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </BrowseInformation>
+    </ClCompile>
+    <ClCompile Include="..\OpenAL32.cpp">
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='Release|x64'">MaxSpeed</Optimization>
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">MaxSpeed</Optimization>
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">MaxSpeed</Optimization>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <PreprocessorDefinitions Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">WIN32;NDEBUG;_WINDOWS;_MBCS;_USRDLL;ROUTER_EXPORTS</PreprocessorDefinitions>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </BrowseInformation>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </BrowseInformation>
+      <BrowseInformation Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </BrowseInformation>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\OpenAL32.rc" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\alList.h" />
+    <ClInclude Include="..\OpenAL32.h" />
+    <ClInclude Include="..\resource.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/openal/OpenAL-Windows/Router/vs2022/Router.vcxproj.filters b/src/3rd party/openal/OpenAL-Windows/Router/vs2022/Router.vcxproj.filters
new file mode 100644
index 0000000..19c899d
--- /dev/null
+++ b/src/3rd party/openal/OpenAL-Windows/Router/vs2022/Router.vcxproj.filters	
@@ -0,0 +1,47 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{b0eb70e7-e76c-4c7d-beed-372b5b11e056}</UniqueIdentifier>
+      <Extensions>cpp;c;cxx;rc;def;r;odl;idl;hpj;bat</Extensions>
+    </Filter>
+    <Filter Include="Header Files">
+      <UniqueIdentifier>{a64258d3-ea3c-4357-9978-10d12ab066ed}</UniqueIdentifier>
+      <Extensions>h;hpp;hxx;hm;inl</Extensions>
+    </Filter>
+    <Filter Include="Resource Files">
+      <UniqueIdentifier>{6a1133a6-f794-4f1d-b157-2c1db8847e42}</UniqueIdentifier>
+      <Extensions>ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="al.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="alc.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="alList.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="OpenAL32.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="OpenAL32.rc">
+      <Filter>Source Files</Filter>
+    </ResourceCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="alList.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="OpenAL32.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="resource.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/3rd party/reshade/reshade.hpp b/src/3rd party/reshade/reshade.hpp
new file mode 100644
index 0000000..2f09032
--- /dev/null
+++ b/src/3rd party/reshade/reshade.hpp	
@@ -0,0 +1,224 @@
+/*
+ * Copyright (C) 2021 Patrick Mours
+ * SPDX-License-Identifier: BSD-3-Clause OR MIT
+ */
+
+#pragma once
+
+#include "reshade_events.hpp"
+#include "reshade_overlay.hpp"
+#include <charconv>
+#include <Windows.h>
+
+#define RESHADE_API_VERSION 5
+
+ // Use the kernel32 variant of module enumeration functions so it can be safely called from 'DllMain'
+extern "C" BOOL WINAPI K32EnumProcessModules(HANDLE hProcess, HMODULE *lphModule, DWORD cb, LPDWORD lpcbNeeded);
+
+namespace reshade
+{
+	namespace internal
+	{
+		/// <summary>
+		/// Gets the handle to the ReShade module.
+		/// </summary>
+		inline HMODULE &get_reshade_module_handle()
+		{
+			static HMODULE handle = nullptr;
+			if (handle == nullptr)
+			{
+				HMODULE modules[1024]; DWORD num = 0;
+				if (K32EnumProcessModules(GetCurrentProcess(), modules, sizeof(modules), &num))
+				{
+					if (num > sizeof(modules))
+						num = sizeof(modules);
+
+					for (DWORD i = 0; i < num / sizeof(HMODULE); ++i)
+					{
+						if (GetProcAddress(modules[i], "ReShadeRegisterAddon") &&
+							GetProcAddress(modules[i], "ReShadeUnregisterAddon"))
+						{
+							handle = modules[i];
+							break;
+						}
+					}
+				}
+			}
+			return handle;
+		}
+
+		/// <summary>
+		/// Gets the handle to the current add-on module.
+		/// </summary>
+		inline HMODULE &get_current_module_handle()
+		{
+			static HMODULE handle = nullptr;
+			return handle;
+		}
+	}
+
+	/// <summary>
+	/// Writes a message to ReShade's log.
+	/// </summary>
+	/// <param name="level">Severity level (1 = error, 2 = warning, 3 = info, 4 = debug).</param>
+	/// <param name="message">A null-terminated message string.</param>
+	inline void log_message(int level, const char *message)
+	{
+		static const auto func = reinterpret_cast<void(*)(HMODULE, int, const char *)>(
+			GetProcAddress(internal::get_reshade_module_handle(), "ReShadeLogMessage"));
+		func(internal::get_current_module_handle(), level, message);
+	}
+
+	/// <summary>
+	/// Gets a value from one of ReShade's config files.
+	/// </summary>
+	/// <param name="runtime">Optional effect runtime to use the config file from, or <see langword="nullptr"/> to use the global config file.</param>
+	/// <param name="section">Name of the config section.</param>
+	/// <param name="key">Name of the config value.</param>
+	/// <param name="value">Pointer to a string buffer that is filled with the config value.</param>
+	/// <param name="length">Pointer to an integer that contains the size of the string buffer and upon completion is set to the actual length of the string.</param>
+	/// <returns><see langword="true"/> if the specified config value exists, <see cref="false"/> otherwise.</returns>
+	inline bool config_get_value(api::effect_runtime *runtime, const char *section, const char *key, char *value, size_t *length)
+	{
+		static const auto func = reinterpret_cast<bool(*)(HMODULE, api::effect_runtime *, const char *, const char *, char *, size_t *)>(
+			GetProcAddress(internal::get_reshade_module_handle(), "ReShadeGetConfigValue"));
+		return func(internal::get_current_module_handle(), runtime, section, key, value, length);
+	}
+	template <typename T>
+	inline bool config_get_value(api::effect_runtime *runtime, const char *section, const char *key, T &value)
+	{
+		char value_string[32] = ""; size_t value_length = sizeof(value_string) - 1;
+		if (!config_get_value(runtime, section, key, value_string, &value_length))
+			return false;
+		return std::from_chars(value_string, value_string + value_length, value).ec == std::errc {};
+	}
+	template <>
+	inline bool config_get_value<bool>(api::effect_runtime *runtime, const char *section, const char *key, bool &value)
+	{
+		int value_int = 0;
+		if (!config_get_value<int>(runtime, section, key, value_int))
+			return false;
+		value = value_int != 0;
+		return true;
+	}
+
+	/// <summary>
+	/// Sets and saves a value in one of ReShade's config files.
+	/// </summary>
+	/// <param name="runtime">Optional effect runtime to use the config file from, or <see langword="nullptr"/> to use the global config file.</param>
+	/// <param name="section">Name of the config section.</param>
+	/// <param name="key">Name of the config value.</param>
+	/// <param name="value">Config value to set.</param>
+	inline void config_set_value(api::effect_runtime *runtime, const char *section, const char *key, const char *value)
+	{
+		static const auto func = reinterpret_cast<void(*)(HMODULE, api::effect_runtime *, const char *, const char *, const char *)>(
+			GetProcAddress(internal::get_reshade_module_handle(), "ReShadeSetConfigValue"));
+		func(internal::get_current_module_handle(), runtime, section, key, value);
+	}
+	template <typename T>
+	inline void config_set_value(api::effect_runtime *runtime, const char *section, const char *key, const T &value)
+	{
+		char value_string[32] = "";
+		std::to_chars(value_string, value_string + sizeof(value_string) - 1, value);
+		config_set_value(runtime, section, key, static_cast<const char *>(value_string));
+	}
+	template <>
+	inline void config_set_value<bool>(api::effect_runtime *runtime, const char *section, const char *key, const bool &value)
+	{
+		config_set_value<int>(runtime, section, key, value ? 1 : 0);
+	}
+
+	/// <summary>
+	/// Registers this module as an add-on with ReShade.
+	/// Call this in 'DllMain' during process attach, before any of the other API functions!
+	/// </summary>
+	/// <param name="module">Handle of the current add-on module.</param>
+	inline bool register_addon(HMODULE module)
+	{
+		internal::get_current_module_handle() = module;
+
+		const HMODULE reshade_module = internal::get_reshade_module_handle();
+		if (reshade_module == nullptr)
+			return false;
+
+		// Check that the ReShade module supports the used API
+		const auto func = reinterpret_cast<bool(*)(HMODULE, uint32_t)>(
+			GetProcAddress(reshade_module, "ReShadeRegisterAddon"));
+		if (!func(module, RESHADE_API_VERSION))
+			return false;
+
+#if defined(IMGUI_VERSION_NUM)
+		// Check that the ReShade module was built with Dear ImGui support and supports the used version
+		const auto imgui_func = reinterpret_cast<const imgui_function_table *(*)(uint32_t)>(
+			GetProcAddress(reshade_module, "ReShadeGetImGuiFunctionTable"));
+		if (imgui_func == nullptr || !(imgui_function_table_instance() = imgui_func(IMGUI_VERSION_NUM)))
+			return false;
+#endif
+
+		return true;
+	}
+	/// <summary>
+	/// Unregisters this module. Call this in 'DllMain' during process detach, after any of the other API functions.
+	/// </summary>
+	/// <param name="module">Handle of the current add-on module.</param>
+	inline void unregister_addon(HMODULE module)
+	{
+		const HMODULE reshade_module = internal::get_reshade_module_handle();
+		if (reshade_module == nullptr)
+			return;
+
+		const auto func = reinterpret_cast<bool(*)(HMODULE)>(
+			GetProcAddress(reshade_module, "ReShadeUnregisterAddon"));
+		func(module);
+	}
+
+	/// <summary>
+	/// Registers a callback for the specified event (via template) with ReShade.
+	/// <para>The callback function is then called whenever the application performs a task associated with this event (see also the <see cref="addon_event"/> enumeration).</para>
+	/// </summary>
+	/// <param name="callback">Pointer to the callback function.</param>
+	template <reshade::addon_event ev>
+	inline void register_event(typename reshade::addon_event_traits<ev>::decl callback)
+	{
+		static const auto func = reinterpret_cast<void(*)(reshade::addon_event, void *)>(
+			GetProcAddress(internal::get_reshade_module_handle(), "ReShadeRegisterEvent"));
+		func(ev, static_cast<void *>(callback));
+	}
+	/// <summary>
+	/// Unregisters a callback for the specified event (via template) that was previously registered via <see cref="register_event"/>.
+	/// </summary>
+	/// <param name="callback">Pointer to the callback function.</param>
+	template <reshade::addon_event ev>
+	inline void unregister_event(typename reshade::addon_event_traits<ev>::decl callback)
+	{
+		static const auto func = reinterpret_cast<void(*)(reshade::addon_event, void *)>(
+			GetProcAddress(internal::get_reshade_module_handle(), "ReShadeUnregisterEvent"));
+		func(ev, static_cast<void *>(callback));
+	}
+
+	/// <summary>
+	/// Registers an overlay with ReShade.
+	/// <para>The callback function is then called when the overlay is visible and allows adding Dear ImGui widgets for user interaction.</para>
+	/// </summary>
+	/// <param name="title">Null-terminated title string, or <see langword="nullptr"/> to register a settings overlay for this add-on.</param>
+	/// <param name="callback">Pointer to the callback function.</param>
+	inline void register_overlay(const char *title, void(*callback)(reshade::api::effect_runtime *runtime))
+	{
+		static const auto func = reinterpret_cast<void(*)(const char *, void(*)(reshade::api::effect_runtime *))>(
+			GetProcAddress(internal::get_reshade_module_handle(), "ReShadeRegisterOverlay"));
+		if (func != nullptr)
+			func(title, callback);
+	}
+	/// <summary>
+	/// Unregisters an overlay that was previously registered via <see cref="register_overlay"/>.
+	/// </summary>
+	/// <param name="title">Null-terminated title string.</param>
+	/// <param name="callback">Pointer to the callback function.</param>
+	inline void unregister_overlay(const char *title, void(*callback)(reshade::api::effect_runtime *runtime))
+	{
+		static const auto func = reinterpret_cast<void(*)(const char *, void(*)(reshade::api::effect_runtime *))>(
+			GetProcAddress(internal::get_reshade_module_handle(), "ReShadeUnregisterOverlay"));
+		if (func != nullptr)
+			func(title, callback);
+	}
+}
diff --git a/src/3rd party/reshade/reshade_api.hpp b/src/3rd party/reshade/reshade_api.hpp
new file mode 100644
index 0000000..dd23584
--- /dev/null
+++ b/src/3rd party/reshade/reshade_api.hpp	
@@ -0,0 +1,605 @@
+/*
+ * Copyright (C) 2021 Patrick Mours
+ * SPDX-License-Identifier: BSD-3-Clause OR MIT
+ */
+
+#pragma once
+
+#include "reshade_api_device.hpp"
+
+namespace reshade::api
+{
+	/// <summary>
+	/// An opaque handle to a technique in an effect.
+	/// </summary>
+	/// <remarks>
+	/// This handle is only valid until effects are next reloaded again (<see cref="addon_event::reshade_reloaded_effects"/>).
+	/// </remarks>
+	RESHADE_DEFINE_HANDLE(effect_technique);
+	/// <summary>
+	/// An opaque handle to a texture variable in an effect.
+	/// </summary>
+	/// <remarks>
+	/// This handle is only valid until effects are next reloaded again (<see cref="addon_event::reshade_reloaded_effects"/>).
+	/// </remarks>
+	RESHADE_DEFINE_HANDLE(effect_texture_variable);
+	/// <summary>
+	/// An opaque handle to a uniform variable in an effect.
+	/// </summary>
+	/// <remarks>
+	/// This handle is only valid until effects are next reloaded again (<see cref="addon_event::reshade_reloaded_effects"/>).
+	/// </remarks>
+	RESHADE_DEFINE_HANDLE(effect_uniform_variable);
+
+	/// <summary>
+	/// A ReShade effect runtime, used to control effects.
+	/// <para>A separate runtime is instantiated for every swap chain.</para>
+	/// </summary>
+	RESHADE_DEFINE_INTERFACE_WITH_BASE(effect_runtime, swapchain)
+	{
+		/// <summary>
+		/// Gets the main graphics command queue associated with this effect runtime.
+		/// This may potentially be different from the presentation queue and should be used to execute graphics commands on.
+		/// </summary>
+		virtual command_queue *get_command_queue() = 0;
+
+		/// <summary>
+		/// Applies post-processing effects to the specified render targets and prevents the usual rendering of effects before swap chain presentation of the current frame.
+		/// This can be used to force ReShade to render effects at a certain point during the frame to e.g. avoid effects being applied to user interface elements of the application.
+		/// </summary>
+		/// <remarks>
+		/// The width and height of the specified render target have to match those reported by <see cref="effect_runtime::get_screenshot_width_and_height"/>!
+		/// The resource the render target views point to has to be in the <see cref="resource_usage::render_target"/> state.
+		/// This call may modify current state on the command list (render targets, descriptor sets, ...), so it may be necessary for an add-on to backup and restore state around it if the application does not bind all state again afterwards already.
+		/// </remarks>
+		/// <param name="cmd_list">Command list to add effect rendering commands to.</param>
+		/// <param name="rtv">Render target view to use for passes that write to the back buffer with <c>SRGBWriteEnabled</c> state set to <see langword="false"/>.</param>
+		/// <param name="rtv_srgb">Render target view to use for passes that write to the back buffer with <c>SRGBWriteEnabled</c> state set to <see langword="true"/>, or zero in which case the view from <paramref name="rtv"/> is used.</param>
+		virtual void render_effects(command_list *cmd_list, resource_view rtv, resource_view rtv_srgb = { 0 }) = 0;
+
+		/// <summary>
+		/// Captures a screenshot of the current back buffer resource and returns its image data in 32 bits-per-pixel RGBA format.
+		/// </summary>
+		/// <param name="pixels">Pointer to an array of <c>width * height * 4</c> bytes the image data is written to.</param>
+		virtual bool capture_screenshot(uint8_t *pixels) = 0;
+
+		/// <summary>
+		/// Gets the current buffer dimensions of the swap chain as used with effect rendering.
+		/// The returned values are equivalent to <c>BUFFER_WIDTH</c> and <c>BUFFER_HEIGHT</c> in ReShade FX.
+		/// </summary>
+		virtual void get_screenshot_width_and_height(uint32_t *out_width, uint32_t *out_height) const = 0;
+
+		/// <summary>
+		/// Gets the current status of the specified key.
+		/// </summary>
+		/// <param name="keycode">The virtual key code to check.</param>
+		/// <returns><see langword="true"/> if the key is currently pressed down, <see langword="false"/> otherwise.</returns>
+		virtual bool is_key_down(uint32_t keycode) const = 0;
+		/// <summary>
+		/// Gets whether the specified key was pressed this frame.
+		/// </summary>
+		/// <param name="keycode">The virtual key code to check.</param>
+		/// <returns><see langword="true"/> if the key was pressed this frame, <see langword="false"/> otherwise.</returns>
+		virtual bool is_key_pressed(uint32_t keycode) const = 0;
+		/// <summary>
+		/// Gets whether the specified key was released this frame.
+		/// </summary>
+		/// <param name="keycode">The virtual key code to check.</param>
+		/// <returns><see langword="true"/> if the key was released this frame, <see langword="false"/> otherwise.</returns>
+		virtual bool is_key_released(uint32_t keycode) const = 0;
+		/// <summary>
+		/// Gets the current status of the specified mouse button.
+		/// </summary>
+		/// <param name="button">The mouse button index to check (0 = left, 1 = middle, 2 = right).</param>
+		/// <returns><see langword="true"/> if the mouse button is currently pressed down, <see langword="false"/> otherwise.</returns>
+		virtual bool is_mouse_button_down(uint32_t button) const = 0;
+		/// <summary>
+		/// Gets whether the specified mouse button was pressed this frame.
+		/// </summary>
+		/// <param name="button">The mouse button index to check (0 = left, 1 = middle, 2 = right).</param>
+		/// <returns><see langword="true"/> if the mouse button was pressed this frame, <see langword="false"/> otherwise.</returns>
+		virtual bool is_mouse_button_pressed(uint32_t button) const = 0;
+		/// <summary>
+		/// Gets whether the specified mouse button was released this frame.
+		/// </summary>
+		/// <param name="button">The mouse button index to check (0 = left, 1 = middle, 2 = right).</param>
+		/// <returns><see langword="true"/> if the mouse button was released this frame, <see langword="false"/> otherwise.</returns>
+		virtual bool is_mouse_button_released(uint32_t button) const = 0;
+
+		/// <summary>
+		/// Gets the current absolute position of the mouse cursor in screen coordinates.
+		/// </summary>
+		/// <param name="out_x">Pointer to a variable that is set to the X coordinate of the current cursor position.</param>
+		/// <param name="out_y">Pointer to a variable that is set to the Y coordinate of the current cursor position.</param>
+		/// <param name="out_wheel_delta">Optional pointer to a variable that is set to the mouse wheel delta since the last frame.</param>
+		virtual void get_mouse_cursor_position(uint32_t *out_x, uint32_t *out_y, int16_t *out_wheel_delta = nullptr) const = 0;
+
+		/// <summary>
+		/// Enumerates all uniform variables of loaded effects and calls the specified <paramref name="callback"/> function with a handle for each one.
+		/// </summary>
+		/// <param name="effect_name">File name of the effect file to enumerate uniform variables from, or <see langword="nullptr"/> to enumerate those of all loaded effects.</param>
+		/// <param name="callback">Function to call for every uniform variable.</param>
+		/// <param name="user_data">Optional pointer passed to the callback function.</param>
+		virtual void enumerate_uniform_variables(const char *effect_name, void(*callback)(effect_runtime *runtime, effect_uniform_variable variable, void *user_data), void *user_data) = 0;
+		/// <summary>
+		/// Enumerates all uniform variables of loaded effects and calls the specified callback function with a handle for each one.
+		/// </summary>
+		/// <param name="effect_name">File name of the effect file to enumerate uniform variables from, or <see langword="nullptr"/> to enumerate those of all loaded effects.</param>
+		/// <param name="lambda">Function to call for every uniform variable.</param>
+		template <typename F>
+		inline  void enumerate_uniform_variables(const char *effect_name, F lambda) {
+			enumerate_uniform_variables(effect_name, [](effect_runtime *runtime, effect_uniform_variable variable, void *user_data) { static_cast<F *>(user_data)->operator()(runtime, variable); }, &lambda);
+		}
+
+		/// <summary>
+		/// Finds a specific uniform variable in the loaded effects and returns a handle to it.
+		/// </summary>
+		/// <param name="effect_name">File name of the effect file the variable is declared in, or <see langword="nullptr"/> to search in all loaded effects.</param>
+		/// <param name="variable_name">Name of the uniform variable declaration to find.</param>
+		/// <returns>Opaque handle to the uniform variable, or zero in case it was not found.</returns>
+		virtual effect_uniform_variable find_uniform_variable(const char *effect_name, const char *variable_name) const = 0;
+
+		/// <summary>
+		/// Gets information about the data type of a uniform <paramref name="variable"/>.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="out_base_type">Optional pointer to a variable that is set to the base type of the uniform variable (<see cref="format::r32_typeless"/>, <see cref="format::r32_sint"/>, <see cref="format::r32_uint"/> or <see cref="format::r32_float"/>).</param>
+		/// <param name="out_rows">Optional pointer to a variable that is set to the number of vector rows of the uniform variable type.</param>
+		/// <param name="out_columns">Optional pointer to a variable that is set to the number of matrix column of the uniform variable type.</param>
+		/// <param name="out_array_length">Optional pointer to a variable that is set to the number of array elements of the uniform variable type.</param>
+		virtual void get_uniform_variable_type(effect_uniform_variable variable, format *out_base_type, uint32_t *out_rows = nullptr, uint32_t *out_columns = nullptr, uint32_t *out_array_length = nullptr) const = 0;
+
+		/// <summary>
+		/// Gets the name of a uniform <paramref name="variable"/>.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="name">Pointer to a string buffer that is filled with the name of the uniform variable.</param>
+		/// <param name="length">Pointer to an integer that contains the size of the string buffer and upon completion is set to the actual length of the string.</param>
+		virtual void get_uniform_variable_name(effect_uniform_variable variable, char *name, size_t *length) const = 0;
+		template <size_t SIZE>
+		inline  void get_uniform_variable_name(effect_uniform_variable variable, char(&name)[SIZE]) const {
+			size_t length = SIZE;
+			get_uniform_variable_name(variable, name, &length);
+		}
+
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified uniform <paramref name="variable"/> as boolean values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of booleans that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_bool_from_uniform_variable(effect_uniform_variable variable, const char *name, bool *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified uniform <paramref name="variable"/> as floating-point values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of floating-points that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_float_from_uniform_variable(effect_uniform_variable variable, const char *name, float *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified uniform <paramref name="variable"/> as signed integer values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of signed integers that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_int_from_uniform_variable(effect_uniform_variable variable, const char *name, int32_t *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified uniform <paramref name="variable"/> as unsigned integer values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of unsigned integers that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_uint_from_uniform_variable(effect_uniform_variable variable, const char *name, uint32_t *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from a string annotation attached to the specified uniform <paramref name="variable"/>.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="value">Pointer to a string buffer that is filled with the value of the annotation.</param>
+		/// <param name="length">Pointer to an integer that contains the size of the string buffer and upon completion is set to the actual length of the string.</param>
+		virtual bool get_annotation_string_from_uniform_variable(effect_uniform_variable variable, const char *name, char *value, size_t *length) const = 0;
+		template <size_t SIZE>
+		inline  bool get_annotation_string_from_uniform_variable(effect_uniform_variable variable, const char *name, char(&value)[SIZE]) const {
+			size_t length = SIZE;
+			return get_annotation_string_from_uniform_variable(variable, name, value, &length);
+		}
+
+		/// <summary>
+		/// Gets the value of the specified uniform <paramref name="variable"/> as boolean values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="values">Pointer to an array of booleans that is filled with the values of this uniform variable.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when this uniform variable is an array variable.</param>
+		virtual void get_uniform_value_bool(effect_uniform_variable variable, bool *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value of the specified uniform <paramref name="variable"/> as floating-point values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="values">Pointer to an array of floating-points that is filled with the values of this uniform variable.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when this uniform variable is an array variable.</param>
+		virtual void get_uniform_value_float(effect_uniform_variable variable, float *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value of the specified uniform <paramref name="variable"/> as signed integer values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="values">Pointer to an array of signed integers that is filled with the values of this uniform variable.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when this uniform variable is an array variable.</param>
+		virtual void get_uniform_value_int(effect_uniform_variable variable, int32_t *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value of the specified uniform <paramref name="variable"/> as unsigned integer values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="values">Pointer to an array of unsigned integers that is filled with the values of this uniform variable.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when this uniform variable is an array variable.</param>
+		virtual void get_uniform_value_uint(effect_uniform_variable variable, uint32_t *values, size_t count, size_t array_index = 0) const = 0;
+
+		/// <summary>
+		/// Sets the value of the specified uniform <paramref name="variable"/> as boolean values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="values">Pointer to an array of booleans that are used to update this uniform variable.</param>
+		/// <param name="count">Number of values to write.</param>
+		/// <param name="array_index">Array offset to start writing values to when this uniform variable is an array variable.</param>
+		virtual void set_uniform_value_bool(effect_uniform_variable variable, const bool *values, size_t count, size_t array_index = 0) = 0;
+		/// <summary>
+		/// Sets the value of the specified uniform <paramref name="variable"/> as a vector of boolean values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="x">Value of the first component in the vector that is used to update this uniform variable.</param>
+		/// <param name="y">Optional value of the second component in the vector that is used to update this uniform variable.</param>
+		/// <param name="z">Optional value of the third component in the vector that is used to update this uniform variable.</param>
+		/// <param name="w">Optional value of the fourth component in the vector that is used to update this uniform variable.</param>
+		inline  void set_uniform_value_bool(effect_uniform_variable variable, bool x, bool y = bool(0), bool z = bool(0), bool w = bool(0)) {
+			const bool values[4] = { x, y, z, w };
+			set_uniform_value_bool(variable, values, 4);
+		}
+		/// <summary>
+		/// Sets the value of the specified uniform <paramref name="variable"/> as floating-point values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="values">Pointer to an array of floating-points that are used to update this uniform variable.</param>
+		/// <param name="count">Number of values to write.</param>
+		/// <param name="array_index">Array offset to start writing values to when this uniform variable is an array variable.</param>
+		virtual void set_uniform_value_float(effect_uniform_variable variable, const float *values, size_t count, size_t array_index = 0) = 0;
+		/// <summary>
+		/// Sets the value of the specified uniform <paramref name="variable"/> as a vector of floating-point values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="x">Value of the first component in the vector that is used to update this uniform variable.</param>
+		/// <param name="y">Optional value of the second component in the vector that is used to update this uniform variable.</param>
+		/// <param name="z">Optional value of the third component in the vector that is used to update this uniform variable.</param>
+		/// <param name="w">Optional value of the fourth component in the vector that is used to update this uniform variable.</param>
+		inline  void set_uniform_value_float(effect_uniform_variable variable, float x, float y = float(0), float z = float(0), float w = float(0)) {
+			const float values[4] = { x, y, z, w };
+			set_uniform_value_float(variable, values, 4);
+		}
+		/// <summary>
+		/// Sets the value of the specified uniform <paramref name="variable"/> as signed integer values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="values">Pointer to an array of signed integers that are used to update this uniform variable.</param>
+		/// <param name="count">Number of values to write.</param>
+		/// <param name="array_index">Array offset to start writing values to when this uniform variable is an array variable.</param>
+		virtual void set_uniform_value_int(effect_uniform_variable variable, const int32_t *values, size_t count, size_t array_index = 0) = 0;
+		/// <summary>
+		/// Sets the value of the specified uniform <paramref name="variable"/> as a vector of signed integer values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="x">Value of the first component in the vector that is used to update this uniform variable.</param>
+		/// <param name="y">Optional value of the second component in the vector that is used to update this uniform variable.</param>
+		/// <param name="z">Optional value of the third component in the vector that is used to update this uniform variable.</param>
+		/// <param name="w">Optional value of the fourth component in the vector that is used to update this uniform variable.</param>
+		inline  void set_uniform_value_int(effect_uniform_variable variable, int32_t x, int32_t y = int32_t(0), int32_t z = int32_t(0), int32_t w = int32_t(0)) {
+			const int32_t values[4] = { x, y, z, w };
+			set_uniform_value_int(variable, values, 4);
+		}
+		/// <summary>
+		/// Sets the value of the specified uniform <paramref name="variable"/> as unsigned integer values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="values">Pointer to an array of unsigned integers that are used to update this uniform variable.</param>
+		/// <param name="count">Number of values to write.</param>
+		/// <param name="array_index">Array offset to start writing values to when this uniform variable is an array variable.</param>
+		virtual void set_uniform_value_uint(effect_uniform_variable variable, const uint32_t *values, size_t count, size_t array_index = 0) = 0;
+		/// <summary>
+		/// Sets the value of the specified uniform <paramref name="variable"/> as a vector of unsigned integer values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the uniform variable.</param>
+		/// <param name="x">Value of the first component in the vector that is used to update this uniform variable.</param>
+		/// <param name="y">Optional value of the second component in the vector that is used to update this uniform variable.</param>
+		/// <param name="z">Optional value of the third component in the vector that is used to update this uniform variable.</param>
+		/// <param name="w">Optional value of the fourth component in the vector that is used to update this uniform variable.</param>
+		inline  void set_uniform_value_uint(effect_uniform_variable variable, uint32_t x, uint32_t y = uint32_t(0), uint32_t z = uint32_t(0), uint32_t w = uint32_t(0)) {
+			const uint32_t values[4] = { x, y, z, w };
+			set_uniform_value_uint(variable, values, 4);
+		}
+
+		/// <summary>
+		/// Enumerates all texture variables of loaded effects and calls the specified <paramref name="callback"/> function with a handle for each one.
+		/// </summary>
+		/// <param name="effect_name">File name of the effect file to enumerate texture variables from, or <see langword="nullptr"/> to enumerate those of all loaded effects.</param>
+		/// <param name="callback">Function to call for every texture variable.</param>
+		/// <param name="user_data">Optional pointer passed to the callback function.</param>
+		virtual void enumerate_texture_variables(const char *effect_name, void(*callback)(effect_runtime *runtime, effect_texture_variable variable, void *user_data), void *user_data) = 0;
+		/// <summary>
+		/// Enumerates all texture variables of loaded effects and calls the specified callback function with a handle for each one.
+		/// </summary>
+		/// <param name="effect_name">File name of the effect file to enumerate texture variables from, or <see langword="nullptr"/> to enumerate those of all loaded effects.</param>
+		/// <param name="lambda">Function to call for every texture variable.</param>
+		template <typename F>
+		inline  void enumerate_texture_variables(const char *effect_name, F lambda) {
+			enumerate_texture_variables(effect_name, [](effect_runtime *runtime, effect_texture_variable variable, void *user_data) { static_cast<F *>(user_data)->operator()(runtime, variable); }, &lambda);
+		}
+
+		/// <summary>
+		/// Finds a specific texture variable in the loaded effects and returns a handle to it.
+		/// </summary>
+		/// <param name="effect_name">File name of the effect file the variable is declared in, or <see langword="nullptr"/> to search in all loaded effects.</param>
+		/// <param name="variable_name">Name of the texture variable declaration to find.</param>
+		/// <returns>Opaque handle to the texture variable, or zero in case it was not found.</returns>
+		virtual effect_texture_variable find_texture_variable(const char *effect_name, const char *variable_name) const = 0;
+
+		/// <summary>
+		/// Gets the name of a texture <paramref name="variable"/>.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the texture variable.</param>
+		/// <param name="name">Pointer to a string buffer that is filled with the name of the texture variable.</param>
+		/// <param name="length">Pointer to an integer that contains the size of the string buffer and upon completion is set to the actual length of the string.</param>
+		virtual void get_texture_variable_name(effect_texture_variable variable, char *name, size_t *length) const = 0;
+		template <size_t SIZE>
+		inline  void get_texture_variable_name(effect_texture_variable variable, char(&name)[SIZE]) const {
+			size_t length = SIZE;
+			get_texture_variable_name(variable, name, &length);
+		}
+
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified texture <paramref name="variable"/> as boolean values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the texture variable.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of booleans that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_bool_from_texture_variable(effect_texture_variable variable, const char *name, bool *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified texture <paramref name="variable"/> as floating-point values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the texture variable.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of floating-points that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_float_from_texture_variable(effect_texture_variable variable, const char *name, float *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified texture <paramref name="variable"/> as signed integer values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the texture variable.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of signed integers that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_int_from_texture_variable(effect_texture_variable variable, const char *name, int32_t *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified texture <paramref name="variable"/> as unsigned integer values.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the texture variable.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of unsigned integers that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_uint_from_texture_variable(effect_texture_variable variable, const char *name, uint32_t *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from a string annotation attached to the specified texture <paramref name="variable"/>.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the texture variable.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="value">Pointer to a string buffer that is filled with the value of the annotation.</param>
+		/// <param name="length">Pointer to an integer that contains the size of the string buffer and upon completion is set to the actual length of the string.</param>
+		virtual bool get_annotation_string_from_texture_variable(effect_texture_variable variable, const char *name, char *value, size_t *length) const = 0;
+		template <size_t SIZE>
+		inline  bool get_annotation_string_from_texture_variable(effect_texture_variable variable, const char *name, char(&value)[SIZE]) const {
+			size_t length = SIZE;
+			return get_annotation_string_from_texture_variable(variable, name, value, &length);
+		}
+
+		/// <summary>
+		/// Uploads 32 bits-per-pixel RGBA image data to the specified texture <paramref name="variable"/>.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the texture variable.</param>
+		/// <param name="width">Width of the image data.</param>
+		/// <param name="height">Height of the image data.</param>
+		/// <param name="pixels">Pointer to an array of <c>width * height * 4</c> bytes the image data is read from.</param>
+		virtual void update_texture(effect_texture_variable variable, const uint32_t width, const uint32_t height, const uint8_t *pixels) = 0;
+
+		/// <summary>
+		/// Gets the shader resource view that is bound to the specified texture <paramref name="variable"/>.
+		/// </summary>
+		/// <param name="variable">Opaque handle to the texture variable.</param>
+		/// <param name="out_srv">Pointer to a variable that is set to the shader resource view.</param>
+		/// <param name="out_srv_srgb">Pointer to a variable that is set to the sRGB shader resource view.</param>
+		virtual void get_texture_binding(effect_texture_variable variable, resource_view *out_srv, resource_view *out_srv_srgb = nullptr) const = 0;
+
+		/// <summary>
+		/// Binds a new shader resource view to all texture variables that use the specified <paramref name="semantic"/>.
+		/// </summary>
+		/// <remarks>
+		/// The resource the shader resource views point to has to be in the <see cref="resource_usage::shader_resource"/> state at the time <see cref="render_effects"/> is executed.
+		/// </remarks>
+		/// <param name="semantic">ReShade FX semantic to filter textures to update by (<c>texture name : SEMANTIC</c>).</param>
+		/// <param name="srv">Shader resource view to use for samplers with <c>SRGBTexture</c> state set to <see langword="false"/>.</param>
+		/// <param name="srv_srgb">Shader resource view to use for samplers with <c>SRGBTexture</c> state set to <see langword="true"/>, or zero in which case the view from <paramref name="srv"/> is used.</param>
+		virtual void update_texture_bindings(const char *semantic, resource_view srv, resource_view srv_srgb = { 0 }) = 0;
+
+		/// <summary>
+		/// Enumerates all techniques of loaded effects and calls the specified <paramref name="callback"/> function with a handle for each one.
+		/// </summary>
+		/// <param name="effect_name">File name of the effect file to enumerate techniques from, or <see langword="nullptr"/> to enumerate those of all loaded effects.</param>
+		/// <param name="callback">Function to call for every technique.</param>
+		/// <param name="user_data">Optional pointer passed to the callback function.</param>
+		virtual void enumerate_techniques(const char *effect_name, void(*callback)(effect_runtime *runtime, effect_technique technique, void *user_data), void *user_data) = 0;
+		/// <summary>
+		/// Enumerates all techniques of loaded effects and calls the specified callback function with a handle for each one.
+		/// </summary>
+		/// <param name="effect_name">File name of the effect file to enumerate techniques from, or <see langword="nullptr"/> to enumerate those of all loaded effects.</param>
+		/// <param name="lambda">Function to call for every technique.</param>
+		template <typename F>
+		inline  void enumerate_techniques(const char *effect_name, F lambda) {
+			enumerate_techniques(effect_name, [](effect_runtime *runtime, effect_technique technique, void *user_data) { static_cast<F *>(user_data)->operator()(runtime, technique); }, &lambda);
+		}
+
+		/// <summary>
+		/// Finds a specific technique in the loaded effects and returns a handle to it.
+		/// </summary>
+		/// <param name="effect_name">File name of the effect file the technique is declared in, or <see langword="nullptr"/> to search in all loaded effects.</param>
+		/// <param name="technique_name">Name of the technique to find.</param>
+		/// <returns>Opaque handle to the technique, or zero in case it was not found.</returns>
+		virtual effect_technique find_technique(const char *effect_name, const char *technique_name) = 0;
+
+		/// <summary>
+		/// Gets the name of a <paramref name="technique"/>.
+		/// </summary>
+		/// <param name="technique">Opaque handle to the technique.</param>
+		/// <param name="name">Pointer to a string buffer that is filled with the name of the technique.</param>
+		/// <param name="length">Pointer to an integer that contains the size of the string buffer and upon completion is set to the actual length of the string.</param>
+		virtual void get_technique_name(effect_technique technique, char *name, size_t *length) const = 0;
+		template <size_t SIZE>
+		inline  void get_technique_name(effect_technique technique, char(&name)[SIZE]) const {
+			size_t length = SIZE;
+			get_technique_name(technique, name, &length);
+		}
+
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified <paramref name="technique"/> as boolean values.
+		/// </summary>
+		/// <param name="technique">Opaque handle to the technique.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of booleans that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_bool_from_technique(effect_technique technique, const char *name, bool *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified <paramref name="technique"/> as floating-point values.
+		/// </summary>
+		/// <param name="technique">Opaque handle to the technique.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of floating-points that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_float_from_technique(effect_technique technique, const char *name, float *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified <paramref name="technique"/> as signed integer values.
+		/// </summary>
+		/// <param name="technique">Opaque handle to the technique.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of signed integers that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_int_from_technique(effect_technique technique, const char *name, int32_t *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from an annotation attached to the specified <paramref name="technique"/> as unsigned integer values.
+		/// </summary>
+		/// <param name="technique">Opaque handle to the technique.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="values">Pointer to an array of unsigned integers that is filled with the values of the annotation.</param>
+		/// <param name="count">Number of values to read.</param>
+		/// <param name="array_index">Array offset to start reading values from when the annotation is an array.</param>
+		virtual bool get_annotation_uint_from_technique(effect_technique technique, const char *name, uint32_t *values, size_t count, size_t array_index = 0) const = 0;
+		/// <summary>
+		/// Gets the value from a string annotation attached to the specified <paramref name="technique"/>.
+		/// </summary>
+		/// <param name="technique">Opaque handle to the technique.</param>
+		/// <param name="name">Name of the annotation.</param>
+		/// <param name="value">Pointer to a string buffer that is filled with the value of the annotation.</param>
+		/// <param name="length">Pointer to an integer that contains the size of the string buffer and upon completion is set to the actual length of the string.</param>
+		virtual bool get_annotation_string_from_technique(effect_technique technique, const char *name, char *value, size_t *length) const = 0;
+		template <size_t SIZE>
+		inline  bool get_annotation_string_from_technique(effect_technique technique, const char *name, char(&value)[SIZE]) const {
+			size_t length = SIZE;
+			return get_annotation_string_from_technique(technique, name, value, &length);
+		}
+
+		/// <summary>
+		/// Gets the state of a <paramref name="technique"/>.
+		/// </summary>
+		/// <param name="technique">Opaque handle to the technique.</param>
+		virtual bool get_technique_state(effect_technique technique) const = 0;
+		/// <summary>
+		/// Enables or disables the specified <paramref name="technique"/>.
+		/// </summary>
+		/// <param name="technique">Opaque handle to the technique.</param>
+		/// <param name="enabled">Set to <see langword="true"/> to enable the technique, or <see langword="false"/> to disable it.</param>
+		virtual void set_technique_state(effect_technique technique, bool enabled) = 0;
+
+		/// <summary>
+		/// Gets the value of global preprocessor definition.
+		/// </summary>
+		/// <param name="name">Name of the definition.</param>
+		/// <param name="value">Pointer to a string buffer that is filled with the value of the definition.</param>
+		/// <param name="length">Pointer to an integer that contains the size of the string buffer and upon completion is set to the actual length of the string.</param>
+		virtual bool get_preprocessor_definition(const char *name, char *value, size_t *length) const = 0;
+		template <size_t SIZE>
+		inline  bool get_preprocessor_definition(const char *name, char(&value)[SIZE]) const {
+			size_t length = SIZE;
+			return get_preprocessor_definition(name, value, &length);
+		}
+		/// <summary>
+		/// Defines a global preprocessor definition to the specified <paramref name="value"/>.
+		/// </summary>
+		/// <param name="name">Name of the definition.</param>
+		/// <param name="value">Value of the definition.</param>
+		virtual void set_preprocessor_definition(const char *name, const char *value) = 0;
+
+		/// <summary>
+		/// Applies a <paramref name="technique"/> to the specified render targets (regardless of the state of this technique).
+		/// </summary>
+		/// <remarks>
+		/// The width and height of the specified render target have to match those reported by <see cref="effect_runtime::get_screenshot_width_and_height"/>!
+		/// The resource the render target views point to has to be in the <see cref="resource_usage::render_target"/> state.
+		/// This call may modify current state on the command list (render targets, descriptor sets, ...), so it may be necessary for an add-on to backup and restore state around it if the application does not bind all state again afterwards already.
+		/// </remarks>
+		/// <param name="technique">Opaque handle to the technique.</param>
+		/// <param name="cmd_list">Command list to add effect rendering commands to.</param>
+		/// <param name="rtv">Render target view to use for passes that write to the back buffer with <c>SRGBWriteEnabled</c> state set to <see langword="false"/>.</param>
+		/// <param name="rtv_srgb">Render target view to use for passes that write to the back buffer with <c>SRGBWriteEnabled</c> state set to <see langword="true"/>, or zero in which case the view from <paramref name="rtv"/> is used.</param>
+		virtual void render_technique(effect_technique technique, command_list *cmd_list, resource_view rtv, resource_view rtv_srgb = { 0 }) = 0;
+
+		/// <summary>
+		/// Gets whether effects are enabled or disabled.
+		/// </summary>
+		virtual bool get_effects_state() const = 0;
+		/// <summary>
+		/// Enables or disables all effects.
+		/// </summary>
+		/// <param name="enabled">Set to <see langword="true"/> to enable effects, or <see langword="false"/> to disable them.</param>
+		virtual void set_effects_state(bool enabled) = 0;
+
+		/// <summary>
+		/// Gets the file path to the currently active preset.
+		/// </summary>
+		/// <param name="name">Pointer to a string buffer that is filled with the file path to the preset.</param>
+		/// <param name="length">Pointer to an integer that contains the size of the string buffer and upon completion is set to the actual length of the string.</param>
+		virtual void get_current_preset_path(char *path, size_t *length) const = 0;
+		template <size_t SIZE>
+		inline  void get_current_preset_path(char(&path)[SIZE]) const {
+			size_t length = SIZE;
+			get_current_preset_path(path, &length);
+		}
+		/// <summary>
+		/// Saves the currently active preset and then switches to the specified new preset.
+		/// </summary>
+		/// <param name="path">File path to the preset to switch to.</param>
+		virtual void set_current_preset_path(const char *path) = 0;
+	};
+}
diff --git a/src/3rd party/reshade/reshade_api_device.hpp b/src/3rd party/reshade/reshade_api_device.hpp
new file mode 100644
index 0000000..1de40dd
--- /dev/null
+++ b/src/3rd party/reshade/reshade_api_device.hpp	
@@ -0,0 +1,1013 @@
+/*
+ * Copyright (C) 2021 Patrick Mours
+ * SPDX-License-Identifier: BSD-3-Clause OR MIT
+ */
+
+#pragma once
+
+#define RESHADE_DEFINE_INTERFACE(name) \
+	struct __declspec(novtable) name
+#define RESHADE_DEFINE_INTERFACE_WITH_BASE(name, base) \
+	struct __declspec(novtable) name : public base
+
+#include "reshade_api_pipeline.hpp"
+
+namespace reshade::api
+{
+	/// <summary>
+	/// The underlying render API a device is using, as returned by <see cref="device::get_api"/>.
+	/// </summary>
+	enum class device_api
+	{
+		/// <summary>Direct3D 9</summary>
+		/// <remarks>https://docs.microsoft.com/windows/win32/direct3d9</remarks>
+		d3d9 = 0x9000,
+		/// <summary>Direct3D 10</summary>
+		/// <remarks>https://docs.microsoft.com/windows/win32/direct3d10</remarks>
+		d3d10 = 0xa000,
+		/// <summary>Direct3D 11</summary>
+		/// <remarks>https://docs.microsoft.com/windows/win32/direct3d11</remarks>
+		d3d11 = 0xb000,
+		/// <summary>Direct3D 12</summary>
+		/// <remarks>https://docs.microsoft.com/windows/win32/direct3d12</remarks>
+		d3d12 = 0xc000,
+		/// <summary>OpenGL</summary>
+		/// <remarks>https://www.khronos.org/opengl/</remarks>
+		opengl = 0x10000,
+		/// <summary>Vulkan</summary>
+		/// <remarks>https://www.khronos.org/vulkan/</remarks>
+		vulkan = 0x20000
+	};
+
+	/// <summary>
+	/// The available features a device may support.
+	/// </summary>
+	enum class device_caps
+	{
+		/// <summary>
+		/// Specifies whether compute shaders are supported.
+		/// If this feature is not present, the <see cref="pipeline_stage::compute_shader"/> stage and <see cref="command_list::dispatch"/> must not be used.
+		/// </summary>
+		compute_shader = 1,
+		/// <summary>
+		/// Specifies whether geometry shaders are supported.
+		/// If this feature is not present, the <see cref="pipeline_stage::geometry_shader"/> stage must not be used.
+		/// </summary>
+		geometry_shader,
+		/// <summary>
+		/// Specifies whether hull and domain (tessellation) shaders are supported.
+		/// If this feature is not present, the <see cref="pipeline_stage::hull_shader"/> and <see cref="pipeline_stage::domain_shader"/> stages must not be used.
+		/// </summary>
+		hull_and_domain_shader,
+		/// <summary>
+		/// Specifies whether logic operations are available in the blend state.
+		/// If this feature is not present, the <see cref="blend_desc::logic_op_enable"/> and <see cref="blend_desc::logic_op"/> fields are ignored.
+		/// </summary>
+		logic_op,
+		/// <summary>
+		/// Specifies whether blend operations which take two sources are supported.
+		/// If this feature is not present, <see cref="blend_factor::source1_color"/>, <see cref="blend_factor::one_minus_source1_color"/>, <see cref="blend_factor::source1_alpha"/> and <see cref="blend_factor::one_minus_source1_alpha"/> must not be used.
+		/// </summary>
+		dual_source_blend,
+		/// <summary>
+		/// Specifies whether blend state is controlled independently per render target.
+		/// If this feature is not present, the blend state settings for all render targets must be identical.
+		/// </summary>
+		independent_blend,
+		/// <summary>
+		/// Specifies whether point and wireframe fill modes are supported.
+		/// If this feature is not present, <see cref="fill_mode::point"/> and <see cref="fill_mode::wireframe"/> must not be used.
+		/// </summary>
+		fill_mode_non_solid,
+		/// <summary>
+		/// Specifies whether conservative rasterization is supported.
+		/// If this feature is not present, the <see cref="rasterizer_desc::conservative_rasterization"/> field must be 0.
+		/// </summary>
+		conservative_rasterization,
+		/// <summary>
+		/// Specifies whether binding individual render target and depth-stencil resource views is supported.
+		/// If this feature is not present, <see cref="command_list::bind_render_targets_and_depth_stencil"/> must not be used (only render passes).
+		/// </summary>
+		bind_render_targets_and_depth_stencil,
+		/// <summary>
+		/// Specifies whther more than one viewport is supported.
+		/// If this feature is not present, the "first" and "count" parameters to <see cref="command_list::bind_viewports"/> and <see cref="command_list::bind_scissor_rects"/> must be 0 and 1.
+		/// </summary>
+		multi_viewport,
+		/// <summary>
+		/// Specifies whether partial push constant updates are supported.
+		/// If this feature is not present, the "first" parameter to <see cref="command_list::push_constants"/> must be 0 and "count" must cover the entire constant range.
+		/// </summary>
+		partial_push_constant_updates,
+		/// <summary>
+		/// Specifies whether partial push descriptor updates are supported.
+		/// If this feature is not present, the "first" parameter to <see cref="command_list::push_descriptors"/> must be 0 and "count" must cover the entire descriptor range.
+		/// </summary>
+		partial_push_descriptor_updates,
+		/// <summary>
+		/// Specifies whether instancing is supported.
+		/// If this feature is not present, the "instance_count" and "first_instance" parameters to <see cref="command_list::draw"/> and <see cref="command_list::draw_indexed"/> must be 1 and 0.
+		/// </summary>
+		draw_instanced,
+		/// <summary>
+		/// Specifies whether indirect draw or dispatch calls are supported.
+		/// If this feature is not present, <see cref="command_list::draw_or_dispatch_indirect"/> must not be used.
+		/// </summary>
+		draw_or_dispatch_indirect,
+		/// <summary>
+		/// Specifies whether copying between buffers is supported.
+		/// If this feature is not present, <see cref="command_list::copy_buffer_region"/> must not be used.
+		/// </summary>
+		copy_buffer_region,
+		/// <summary>
+		/// Specifies whether copying between buffers and textures is supported.
+		/// If this feature is not present, <see cref="command_list::copy_buffer_to_texture"/> and <see cref="command_list::copy_texture_to_buffer"/> must not be used.
+		/// </summary>
+		copy_buffer_to_texture,
+		/// <summary>
+		/// Specifies whether blitting between resources is supported.
+		/// If this feature is not present, the "source_box" and "dest_box" parameters to <see cref="command_list::copy_texture_region"/> must have the same dimensions.
+		/// </summary>
+		blit,
+		/// <summary>
+		/// Specifies whether resolving a region of a resource rather than its entirety is supported.
+		/// If this feature is not present, the "source_box", "dest_x", "dest_y" and "dest_z" parameters to <see cref="command_list::resolve_texture_region"/> must be <see langword="nullptr"/> and zero.
+		/// </summary>
+		resolve_region,
+		/// <summary>
+		/// Specifies whether copying query results to a buffer is supported.
+		/// If this feature is not present, <see cref="command_list::copy_query_pool_results"/> must not be used.
+		/// </summary>
+		copy_query_pool_results,
+		/// <summary>
+		/// Specifies whether comparison sampling is supported.
+		/// If this feature is not present, the <see cref="sampler_desc::compare_op"/> field is ignored and the compare filter types have no effect.
+		/// </summary>
+		sampler_compare,
+		/// <summary>
+		/// Specifies whether anisotropic filtering is supported.
+		/// If this feature is not present, <see cref="filter_mode::anisotropic"/> must not be used.
+		/// </summary>
+		sampler_anisotropic,
+		/// <summary>
+		/// Specifies whether combined sampler and resource view descriptors are supported.
+		/// If this feature is not present, <see cref="descriptor_type::sampler_with_resource_view"/> must not be used.
+		/// </summary>
+		sampler_with_resource_view,
+		/// <summary>
+		/// Specifies whether resource sharing is supported.
+		/// If this feature is not present, <see cref="resource_flags::shared"/> must not be used.
+		/// </summary>
+		shared_resource,
+		/// <summary>
+		/// Specifies whether resource sharing with NT handles is supported.
+		/// If this feature is not present, <see cref="resource_flags::shared_nt_handle"/> must not be used.
+		/// </summary>
+		shared_resource_nt_handle
+	};
+
+	/// <summary>
+	/// The base class for objects provided by the ReShade API.
+	/// <para>This lets you store and retrieve custom data with objects, e.g. to be able to communicate persistent information between event callbacks.</para>
+	/// </summary>
+	RESHADE_DEFINE_INTERFACE(api_object)
+	{
+		/// <summary>
+		/// Gets the underlying native object for this API object.
+		/// </summary>
+		/// <remarks>
+		/// For <see cref="device"/> this will be be a pointer to a 'IDirect3DDevice9', 'ID3D10Device', 'ID3D11Device' or 'ID3D12Device' object or a 'HGLRC' or 'VkDevice' handle.<br/>
+		/// For <see cref="command_list"/> this will be a pointer to a 'ID3D11DeviceContext' (when recording), 'ID3D11CommandList' (when executing) or 'ID3D12GraphicsCommandList' object or a 'VkCommandBuffer' handle.<br/>
+		/// For <see cref="command_queue"/> this will be a pointer to a 'ID3D11DeviceContext' or 'ID3D12CommandQueue' object or a 'VkQueue' handle.<br/>
+		/// For <see cref="swapchain"/> this will be a pointer to a 'IDirect3DSwapChain9' or 'IDXGISwapChain' object or a 'HDC' or 'VkSwapchainKHR' handle.
+		/// </remarks>
+		virtual uint64_t get_native() const = 0;
+
+		/// <summary>
+		/// Gets a user-defined 64-bit value from the object that was previously set via <see cref="set_private_data"/>, or zero if none associated with the specified <paramref name="guid"/> exists.
+		/// </summary>
+		virtual     void get_private_data(const uint8_t guid[16], uint64_t *data) const = 0;
+		/// <summary>
+		/// Stores a user-defined 64-bit value in the object and associates it with the specified <paramref name="guid"/>.
+		/// </summary>
+		/// <remarks>
+		/// This function may NOT be called concurrently from multiple threads!
+		/// </remarks>
+		virtual     void set_private_data(const uint8_t guid[16], const uint64_t data)  = 0;
+
+		/// <summary>
+		/// Gets a reference to user-defined data from the object that was previously allocated via <see cref="create_private_data"/>.
+		/// </summary>
+		template <typename T> inline T &get_private_data() const
+		{
+			uint64_t res;
+			get_private_data(reinterpret_cast<const uint8_t *>(&__uuidof(T)), &res);
+			return *reinterpret_cast<T *>(static_cast<uintptr_t>(res));
+		}
+		/// <summary>
+		/// Allocates user-defined data and stores it in the object.
+		/// </summary>
+		template <typename T> inline T &create_private_data()
+		{
+			uint64_t res = reinterpret_cast<uintptr_t>(new T());
+			set_private_data(reinterpret_cast<const uint8_t *>(&__uuidof(T)),  res);
+			return *reinterpret_cast<T *>(static_cast<uintptr_t>(res));
+		}
+		/// <summary>
+		/// Frees user-defined data that was previously allocated via <see cref="create_private_data"/>.
+		/// </summary>
+		template <typename T> inline void destroy_private_data()
+		{
+			uint64_t res;
+			get_private_data(reinterpret_cast<const uint8_t *>(&__uuidof(T)), &res);
+			delete  reinterpret_cast<T *>(static_cast<uintptr_t>(res));
+			set_private_data(reinterpret_cast<const uint8_t *>(&__uuidof(T)), 0);
+		}
+	};
+
+	/// <summary>
+	/// A logical render device, used for resource creation and global operations.
+	/// <para>Functionally equivalent to a 'IDirect3DDevice9', 'ID3D10Device', 'ID3D11Device', 'ID3D12Device', 'HGLRC' or 'VkDevice'.</para>
+	/// </summary>
+	/// <remarks>
+	/// This class is safe to use concurrently from multiple threads in D3D10+ and Vulkan.
+	/// </remarks>
+	RESHADE_DEFINE_INTERFACE_WITH_BASE(device, api_object)
+	{
+		/// <summary>
+		/// Gets the underlying render API used by this device.
+		/// </summary>
+		virtual device_api get_api() const = 0;
+
+		/// <summary>
+		/// Checks whether the device supports the specified <paramref name="capability"/>.
+		/// </summary>
+		virtual bool check_capability(device_caps capability) const = 0;
+		/// <summary>
+		/// Checks whether the specified texture <paramref name="format"/> supports the specified <paramref name="usage"/>.
+		/// </summary>
+		virtual bool check_format_support(format format, resource_usage usage) const = 0;
+
+		/// <summary>
+		/// Creates a new sampler state object.
+		/// </summary>
+		/// <param name="desc">Description of the sampler to create.</param>
+		/// <param name="out_handle">Pointer to a variable that is set to the handle of the created sampler.</param>
+		/// <returns><see langword="true"/> if the sampler was successfully created, <see langword="false"/> otherwise (in this case <paramref name="out_handle"/> is set to zero).</returns>
+		virtual bool create_sampler(const sampler_desc &desc, sampler *out_handle) = 0;
+		/// <summary>
+		/// Instantly destroys a sampler that was previously created via <see cref="create_sampler"/>.
+		/// </summary>
+		virtual void destroy_sampler(sampler handle) = 0;
+
+		/// <summary>
+		/// Allocates and creates a new resource.
+		/// </summary>
+		/// <param name="desc">Description of the resource to create.</param>
+		/// <param name="initial_data">Optional data to upload to the resource after creation. This should point to an array of <see cref="mapped_subresource"/>, one for each subresource (mipmap levels and array layers). Can be <see langword="nullptr"/> to indicate no initial data to upload.</param>
+		/// <param name="initial_state">Initial state of the resource after creation. This can later be changed via <see cref="command_list::barrier"/>.</param>
+		/// <param name="out_handle">Pointer to a variable that is set to the handle of the created resource.</param>
+		/// <param name="shared_handle">Optional pointer to a variable of type <c>HANDLE</c> used when <see cref="resource_desc::flags"/> contains <see cref="resource_flags::shared"/>. When that variable is a <see langword="nullptr"/>, it is set to the exported shared handle of the created resource. When that variable is a valid handle, the resource is imported from that shared handle.</param>
+		/// <returns><see langword="true"/> if the resource was successfully created, <see langword="false"/> otherwise (in this case <paramref name="out_handle"/> is set to zero).</returns>
+		virtual bool create_resource(const resource_desc &desc, const subresource_data *initial_data, resource_usage initial_state, resource *out_handle, void **shared_handle = nullptr) = 0;
+		/// <summary>
+		/// Instantly destroys a resource that was previously created via <see cref="create_resource"/> and frees its memory.
+		/// Make sure the resource is no longer in use on the GPU (via any command list that may reference it and is still being executed) before doing this and never try to destroy resources created by the application!
+		/// </summary>
+		virtual void destroy_resource(resource handle) = 0;
+
+		/// <summary>
+		/// Gets the description of the specified resource.
+		/// </summary>
+		virtual resource_desc get_resource_desc(resource resource) const = 0;
+
+		/// <summary>
+		/// Creates a new resource view for the specified <paramref name="resource"/>.
+		/// </summary>
+		/// <param name="resource">Resource to create the view to.</param>
+		/// <param name="usage_type">Usage type of the resource view to create. Set to <see cref="resource_usage::shader_resource"/> to create a shader resource view, <see cref="resource_usage::depth_stencil"/> for a depth-stencil view, <see cref="resource_usage::render_target"/> for a render target etc.</param>
+		/// <param name="desc">Description of the resource view to create.</param>
+		/// <param name="out_handle">Pointer to a variable that is set to the handle of the created resource view.</param>
+		/// <returns><see langword="true"/> if the resource view was successfully created, <see langword="false"/> otherwise (in this case <paramref name="out_handle"/> is set to zero).</returns>
+		virtual bool create_resource_view(resource resource, resource_usage usage_type, const resource_view_desc &desc, resource_view *out_handle) = 0;
+		/// <summary>
+		/// Instantly destroys a resource view that was previously created via <see cref="create_resource_view"/>.
+		/// </summary>
+		virtual void destroy_resource_view(resource_view handle) = 0;
+
+		/// <summary>
+		/// Gets the handle to the underlying resource the specified resource <paramref name="view"/> was created for.
+		/// </summary>
+		/// <remarks>
+		/// Resource views may be created without a resource in D3D12, which is used to initialize a null descriptor (reading zeroes, writes are discarded). This may therefore return zero for such views.
+		/// </remarks>
+		virtual resource get_resource_from_view(resource_view view) const = 0;
+		/// <summary>
+		/// Gets the description of the specified resource view.
+		/// </summary>
+		virtual resource_view_desc get_resource_view_desc(resource_view view) const = 0;
+
+		/// <summary>
+		/// Maps the memory of a buffer resource into application address space.
+		/// </summary>
+		/// <param name="resource">Buffer resource to map to host memory.</param>
+		/// <param name="offset">Offset (in bytes) into the buffer resource to start mapping.</param>
+		/// <param name="size">Number of bytes to map. Set to -1 (UINT64_MAX) to indicate that the entire buffer should be mapped.</param>
+		/// <param name="access">Hint on how the returned data pointer will be accessed.</param>
+		/// <param name="out_data">Pointer to a variable that is set to a pointer to the memory of the buffer resource.</param>
+		/// <returns><see langword="true"/> if the memory of the buffer resource was successfully mapped, <see langword="false"/> otherwise (in this case <paramref name="out_data"/> is set to <see langword="nullptr"/>).</returns>
+		virtual bool map_buffer_region(resource resource, uint64_t offset, uint64_t size, map_access access, void **out_data) = 0;
+		/// <summary>
+		/// Unmaps a previously mapped buffer resource.
+		/// </summary>
+		/// <param name="resource">Buffer resource to unmap from host memory.</param>
+		virtual void unmap_buffer_region(resource resource) = 0;
+		/// <summary>
+		/// Maps the memory of a texture resource into application address space.
+		/// </summary>
+		/// <param name="resource">Texture resource to map to host memory.</param>
+		/// <param name="subresource">Index of the subresource to map (<c>level + (layer * levels)</c>).</param>
+		/// <param name="box">Optional 3D box (or <see langword="nullptr"/> to reference the entire subresource) that defines the region in the <paramref name="resource"/> to map.</param>
+		/// <param name="access">Hint on how the returned data pointer will be accessed.</param>
+		/// <param name="out_data">Pointer to a variable that is set to a pointer to the memory of the texture resource and optionally the row and slice pitch of that data (depending on the resource type).</param>
+		/// <returns><see langword="true"/> if the memory of the texture resource was successfully mapped, <see langword="false"/> otherwise (in this case <paramref name="out_data"/> is set to <see langword="nullptr"/>).</returns>
+		virtual bool map_texture_region(resource resource, uint32_t subresource, const subresource_box *box, map_access access, subresource_data *out_data) = 0;
+		/// <summary>
+		/// Unmaps a previously mapped texture resource.
+		/// </summary>
+		/// <param name="resource">Texture resource to unmap from host memory.</param>
+		/// <param name="subresource">Index of the subresource to unmap (<c>level + (layer * levels)</c>).</param>
+		virtual void unmap_texture_region(resource resource, uint32_t subresource) = 0;
+
+		/// <summary>
+		/// Uploads data to a buffer resource.
+		/// </summary>
+		/// <param name="data">Pointer to the data to upload.</param>
+		/// <param name="resource">Buffer resource to upload to.</param>
+		/// <param name="offset">Offset (in bytes) into the buffer resource to start uploading to.</param>
+		/// <param name="size">Number of bytes to upload.</param>
+		virtual void update_buffer_region(const void *data, resource resource, uint64_t offset, uint64_t size) = 0;
+		/// <summary>
+		/// Uploads data to a texture resource.
+		/// </summary>
+		/// <param name="data">Pointer to the data to upload.</param>
+		/// <param name="resource">Texture resource to upload to.</param>
+		/// <param name="subresource">Index of the subresource to upload to (<c>level + (layer * levels)</c>).</param>
+		/// <param name="box">Optional 3D box (or <see langword="nullptr"/> to reference the entire subresource) that defines the region in the <paramref name="resource"/> to upload to.</param>
+		virtual void update_texture_region(const subresource_data &data, resource resource, uint32_t subresource, const subresource_box *box = nullptr) = 0;
+
+		/// <summary>
+		/// Creates a new pipeline state object.
+		/// </summary>
+		/// <param name="layout">Pipeline layout to use.</param>
+		/// <param name="subobject_count">Number of sub-objects.</param>
+		/// <param name="subobjects">Pointer to an array of sub-objects that describe this pipeline.</param>
+		/// <param name="out_handle">Pointer to a variable that is set to the handle of the created pipeline state object.</param>
+		/// <returns><see langword="true"/> if the pipeline state object was successfully created, <see langword="false"/> otherwise (in this case <paramref name="out_handle"/> is set to zero).</returns>
+		virtual bool create_pipeline(pipeline_layout layout, uint32_t subobject_count, const pipeline_subobject *subobjects, pipeline *out_handle) = 0;
+		/// <summary>
+		/// Instantly destroys a pipeline state object that was previously created via <see cref="create_pipeline"/>.
+		/// </summary>
+		virtual void destroy_pipeline(pipeline handle) = 0;
+
+		/// <summary>
+		/// Creates a new pipeline layout.
+		/// </summary>
+		/// <param name="param_count">Number of layout parameters.</param>
+		/// <param name="params">Pointer to an array of layout parameters that describe this pipeline layout.</param>
+		/// <param name="out_handle">Pointer to a variable that is set to the handle of the created pipeline layout.</param>
+		/// <returns><see langword="true"/> if the pipeline layout was successfully created, <see langword="false"/> otherwise (in this case <paramref name="out_handle"/> is set to zero).</returns>
+		virtual bool create_pipeline_layout(uint32_t param_count, const pipeline_layout_param *params, pipeline_layout *out_handle) = 0;
+		/// <summary>
+		/// Instantly destroys a pipeline layout that was previously created via <see cref="create_pipeline_layout"/>.
+		/// </summary>
+		virtual void destroy_pipeline_layout(pipeline_layout handle) = 0;
+
+		/// <summary>
+		/// Allocates a descriptor set from an internal pool.
+		/// </summary>
+		/// <param name="layout">Pipeline layout that contains a parameter that describes the descriptor set.</param>
+		/// <param name="param">Index of the pipeline layout parameter that describes the descriptor set.</param>
+		/// <param name="out_handle">Pointer to a a variable that is set to the handles of the created descriptor set.</param>
+		/// <returns><see langword="true"/> if the descriptor set was successfully created, <see langword="false"/> otherwise (in this case <paramref name="out_handle"/> is set to zeroe).</returns>
+		inline  bool allocate_descriptor_set(pipeline_layout layout, uint32_t param, descriptor_set *out_handle) { return allocate_descriptor_sets(1, layout, param, out_handle); }
+		/// <summary>
+		/// Allocates one or more descriptor sets from an internal pool.
+		/// </summary>
+		/// <param name="count">Number of descriptor sets to allocate.</param>
+		/// <param name="layout">Pipeline layout that contains a parameter that describes the descriptor set.</param>
+		/// <param name="param">Index of the pipeline layout parameter that describes the descriptor set.</param>
+		/// <param name="out_handles">Pointer to an array of handles with at least <paramref name="count"/> elements that is filled with the handles of the created descriptor sets.</param>
+		/// <returns><see langword="true"/> if the descriptor sets were successfully created, <see langword="false"/> otherwise (in this case <paramref name="out_handles"/> is filled with zeroes).</returns>
+		virtual bool allocate_descriptor_sets(uint32_t count, pipeline_layout layout, uint32_t param, descriptor_set *out_handles) = 0;
+		/// <summary>
+		/// Frees adescriptor set that was previously allocated via <see cref="create_descriptor_set"/>.
+		/// </summary>
+		inline  void free_descriptor_set(descriptor_set handle) { free_descriptor_sets(1, &handle); }
+		/// <summary>
+		/// Frees one or more descriptor sets that were previously allocated via <see cref="create_descriptor_sets"/>.
+		/// </summary>
+		virtual void free_descriptor_sets(uint32_t count, const descriptor_set *handles) = 0;
+
+		/// <summary>
+		/// Gets the offset (in descriptors) of the specified binding in the underlying descriptor pool.
+		/// </summary>
+		/// <param name="set">Descriptor set to get the offset from.</param>
+		/// <param name="binding">Binding in the descriptor set to get the offset from.</param>
+		/// <param name="array_offset">Array index in the specified <paramref name="binding"/>.</param>
+		/// <param name="out_pool">Pointer to a variable that is set to the handle of the underlying descriptor pool the <paramref name="set"/> was allocated from.</param>
+		/// <param name="out_offset">Pointer to a variable that is set to the offset of the descriptor set in the underlying pool.</param>
+		virtual void get_descriptor_pool_offset(descriptor_set set, uint32_t binding, uint32_t array_offset, descriptor_pool *out_pool, uint32_t *out_offset) const = 0;
+
+		/// <summary>
+		/// Copies the contents of a descriptor set to another descriptor set.
+		/// </summary>
+		/// <param name="copy">Descriptor set copy to process.</param>
+		inline  void copy_descriptors(const descriptor_set_copy &copy) { copy_descriptor_sets(1, &copy); }
+		/// <summary>
+		/// Copies the contents between multiple descriptor sets.
+		/// </summary>
+		/// <param name="count">Number of <paramref name="copies"/> to process.</param>
+		/// <param name="copies">Pointer to an array of descriptor set copies to process.</param>
+		virtual void copy_descriptor_sets(uint32_t count, const descriptor_set_copy *copies) = 0;
+		/// <summary>
+		/// Updates the contents of a descriptor set with the specified descriptors.
+		/// </summary>
+		/// <param name="update">Descriptor set update to process.</param>
+		inline  void update_descriptors(const descriptor_set_update &update) { update_descriptor_sets(1, &update); }
+		/// <summary>
+		/// Updates the contents of multiple descriptor sets with the specified descriptors.
+		/// </summary>
+		/// <param name="count">Number of <paramref name="updates"/> to process.</param>
+		/// <param name="updates">Pointer to an array of descriptor set updates to process.</param>
+		virtual void update_descriptor_sets(uint32_t count, const descriptor_set_update *updates) = 0;
+
+		/// <summary>
+		/// Creates a new query pool.
+		/// </summary>
+		/// <param name="type">Type of queries that will be used with this pool.</param>
+		/// <param name="size">Number of queries to allocate in the pool.</param>
+		/// <param name="out_handle">Pointer to a variable that is set to the handle of the created query pool.</param>
+		/// <returns><see langword="true"/> if the query pool was successfully created, <see langword="false"/> otherwise (in this case <paramref name="out_handle"/> is set to zero).</returns>
+		virtual bool create_query_pool(query_type type, uint32_t size, query_pool *out_handle) = 0;
+		/// <summary>
+		/// Instantly destroys a query pool that was previously created via <see cref="create_query_pool"/>.
+		/// </summary>
+		virtual void destroy_query_pool(query_pool handle) = 0;
+
+		/// <summary>
+		/// Gets the results of queries in a query pool.
+		/// </summary>
+		/// <param name="pool">Query pool that contains the queries.</param>
+		/// <param name="first">Index of the first query in the pool to copy the results from.</param>
+		/// <param name="count">Number of query results to copy.</param>
+		/// <param name="results">Pointer to an array that is filled with the results.</param>
+		/// <param name="stride">Size (in bytes) of each element in the <paramref name="results"/> array.</param>
+		/// <returns><see langword="true"/> if the query results were successfully downloaded from the GPU, <see langword="false"/> otherwise.</returns>
+		virtual bool get_query_pool_results(query_pool pool, uint32_t first, uint32_t count, void *results, uint32_t stride) = 0;
+
+		/// <summary>
+		/// Associates a name with a resource, for easier debugging in external tools.
+		/// </summary>
+		/// <param name="handle">Resource to associate a name with.</param>
+		/// <param name="name">Null-terminated name string.</param>
+		virtual void set_resource_name(resource handle, const char *name) = 0;
+		/// <summary>
+		/// Associates a name with a resource view, for easier debugging in external tools.
+		/// </summary>
+		/// <param name="handle">Resource view to associate a name with.</param>
+		/// <param name="name">Null-terminated name string.</param>
+		virtual void set_resource_view_name(resource_view handle, const char *name) = 0;
+	};
+
+	/// <summary>
+	/// The base class for objects that are children to a logical render <see cref="device"/>.
+	/// </summary>
+	RESHADE_DEFINE_INTERFACE_WITH_BASE(device_object, api_object)
+	{
+		/// <summary>
+		/// Gets the parent device for this object.
+		/// </summary>
+		virtual device *get_device() = 0;
+	};
+
+	/// <summary>
+	/// The available indirect command types.
+	/// </summary>
+	enum class indirect_command
+	{
+		unknown,
+		draw,
+		draw_indexed,
+		dispatch
+	};
+
+	/// <summary>
+	/// A command list, used to enqueue render commands on the CPU, before later executing them in a command queue.
+	/// <para>Functionally equivalent to a 'ID3D11CommandList', 'ID3D12CommandList' or 'VkCommandBuffer'.</para>
+	/// </summary>
+	/// <remarks>
+	/// This class may NOT be used concurrently from multiple threads!
+	/// </remarks>
+	RESHADE_DEFINE_INTERFACE_WITH_BASE(command_list, device_object)
+	{
+		/// <summary>
+		/// Adds a barrier for the specified <paramref name="resource"/> to the command stream.
+		/// When both <paramref name="old_state"/> and <paramref name="new_state"/> are <see cref="resource_usage::unordered_access"/> a UAV barrier is added, otherwise a state transition is performed.
+		/// </summary>
+		/// <param name="resource">Resource to transition.</param>
+		/// <param name="old_state">Usage flags describing how the <paramref name="resource"/> was used before this barrier.</param>
+		/// <param name="new_state">Usage flags describing how the <paramref name="resource"/> will be used after this barrier.</param>
+		inline  void barrier(resource resource, resource_usage old_state, resource_usage new_state) { barrier(1, &resource, &old_state, &new_state); }
+		/// <summary>
+		/// Adds a barrier for the specified <paramref name="resources"/> to the command stream.
+		/// </summary>
+		/// <param name="count">Number of resources to transition.</param>
+		/// <param name="resources">Pointer to an array of resources to transition.</param>
+		/// <param name="old_states">Pointer to an array of usage flags describing how the <paramref name="resources"/> were used before this barrier.</param>
+		/// <param name="new_states">Pointer to an array of usage flags describing how the <paramref name="resources"/> will be used after this barrier.</param>
+		virtual void barrier(uint32_t count, const resource *resources, const resource_usage *old_states, const resource_usage *new_states) = 0;
+
+		/// <summary>
+		/// Begins a render pass and binds render target and depth-stencil resource views.
+		/// </summary>
+		/// <param name="count">Number of render target views to bind.</param>
+		/// <param name="rts">Pointer to an array of render target descriptions.</param>
+		/// <param name="ds">Optional pointer to a depth-stencil description, or <see langword="nullptr"/> to bind none.</param>
+		virtual void begin_render_pass(uint32_t count, const render_pass_render_target_desc *rts, const render_pass_depth_stencil_desc *ds = nullptr) = 0;
+		/// <summary>
+		/// Ends a render pass.
+		/// This must be preceeded by a call to <see cref="begin_render_pass"/>.
+		/// Render passes cannot be nested.
+		/// </summary>
+		virtual void end_render_pass() = 0;
+		/// <summary>
+		/// Binds individual render target and depth-stencil resource views.
+		/// This must not be called between <see cref="begin_render_pass"/> and <see cref="end_render_pass"/>.
+		/// </summary>
+		/// <seealso cref="device_caps::bind_render_targets_and_depth_stencil"/>
+		/// <param name="count">Number of render target views to bind.</param>
+		/// <param name="rtvs">Pointer to an array of render target views to bind.</param>
+		/// <param name="dsv">Depth-stencil view to bind, or zero to bind none.</param>
+		virtual void bind_render_targets_and_depth_stencil(uint32_t count, const resource_view *rtvs, resource_view dsv = { 0 }) = 0;
+
+		/// <summary>
+		/// Binds a pipeline state object.
+		/// </summary>
+		/// <param name="stages">Pipeline stages to update with state from the pipeline state object.</param>
+		/// <param name="pipeline">Pipeline state object to bind.</param>
+		virtual void bind_pipeline(pipeline_stage stages, pipeline pipeline) = 0;
+		/// <summary>
+		/// Updates the specfified pipeline <paramref name="state"/> to the specified <paramref name="value"/>.
+		/// This is only valid for states that have been listed in the dynamic states provided at creation of the currently bound pipeline state object (<see cref="pipeline_subobject_type::dynamic_pipeline_states"/>).
+		/// </summary>
+		/// <param name="state">Pipeline state to update.</param>
+		/// <param name="value">Value to update the pipeline state to.</param>
+		inline  void bind_pipeline_state(dynamic_state state, uint32_t value) { bind_pipeline_states(1, &state, &value); }
+		/// <summary>
+		/// Updates the specfified pipeline <paramref name="states"/> to the specified <paramref name="values"/>.
+		/// This is only valid for states that have been listed in the dynamic states provided at creation of the currently bound pipeline state object (<see cref="pipeline_subobject_type::dynamic_pipeline_states"/>).
+		/// </summary>
+		/// <param name="count">Number of pipeline states to update.</param>
+		/// <param name="states">Pointer to an array of pipeline states to update.</param>
+		/// <param name="values">Pointer to an array of values to update the pipeline states to, with one for each state in <paramref name="states"/>.</param>
+		virtual void bind_pipeline_states(uint32_t count, const dynamic_state *states, const uint32_t *values) = 0;
+		/// <summary>
+		/// Binds an array of viewports to the rasterizer stage.
+		/// </summary>
+		/// <seealso cref="device_caps::multi_viewport"/>
+		/// <param name="first">Index of the first viewport to bind. In D3D9, D3D10, D3D11 and D3D12 this has to be 0.</param>
+		/// <param name="count">Number of viewports to bind.</param>
+		/// <param name="viewports">Pointer to an array of viewports.</param>
+		virtual void bind_viewports(uint32_t first, uint32_t count, const viewport *viewports) = 0;
+		/// <summary>
+		/// Binds an array of scissor rectangles to the rasterizer stage.
+		/// </summary>
+		/// <seealso cref="device_caps::multi_viewport"/>
+		/// <param name="first">Index of the first scissor rectangle to bind. In D3D9, D3D10, D3D11 and D3D12 this has to be 0.</param>
+		/// <param name="count">Number of scissor rectangles to bind.</param>
+		/// <param name="rects">Pointer to an array of scissor rectangles.</param>
+		virtual void bind_scissor_rects(uint32_t first, uint32_t count, const rect *rects) = 0;
+
+		/// <summary>
+		/// Directly updates constant values in the specified shader pipeline stages.
+		/// <para>In D3D9 this updates the values of uniform registers, in D3D10/11 and OpenGL the constant buffer specified in the pipeline layout, in D3D12 it sets root constants and in Vulkan push constants.</para>
+		/// </summary>
+		/// <seealso cref="device_caps::partial_push_constant_updates"/>
+		/// <param name="stages">Shader stages that will use the updated constants.</param>
+		/// <param name="layout">Pipeline layout that describes where the constants are located.</param>
+		/// <param name="param">Layout parameter index of the constant range in the pipeline <paramref name="layout"/> (root parameter index in D3D12).</param>
+		/// <param name="first">Start offset (in 32-bit values) to the first constant in the constant range to begin updating.</param>
+		/// <param name="count">Number of 32-bit values to update.</param>
+		/// <param name="values">Pointer to an array of 32-bit values to set the constants to. These can be floating-point, integer or boolean depending on what the shader is expecting.</param>
+		virtual void push_constants(shader_stage stages, pipeline_layout layout, uint32_t param, uint32_t first, uint32_t count, const void *values) = 0;
+		/// <summary>
+		/// Directly binds a temporary descriptor set for the specfified shader pipeline stage and updates with an array of descriptors.
+		/// </summary>
+		/// <seealso cref="device_caps::partial_push_descriptor_updates"/>
+		/// <param name="stages">Shader stages that will use the updated descriptors.</param>
+		/// <param name="layout">Pipeline layout that describes the descriptors.</param>
+		/// <param name="param">Layout parameter index of the descriptor set in the pipeline <paramref name="layout"/> (root parameter index in D3D12, descriptor set index in Vulkan).</param>
+		/// <param name="update">Range of descriptors to update in the temporary set (<see cref="descriptor_set_update::set"/> is ignored).</param>
+		virtual void push_descriptors(shader_stage stages, pipeline_layout layout, uint32_t param, const descriptor_set_update &update) = 0;
+		/// <summary>
+		/// Binds a single descriptor set.
+		/// </summary>
+		/// <param name="stages">Shader stages that will use the descriptors.</param>
+		/// <param name="layout">Pipeline layout that describes the descriptors.</param>
+		/// <param name="param">Index of the pipeline <paramref name="layout"/> parameter that describes the descriptor set (root parameter index in D3D12, descriptor set index in Vulkan).</param>
+		/// <param name="set">Descriptor set to bind.</param>
+		inline  void bind_descriptor_set(shader_stage stages, pipeline_layout layout, uint32_t param, descriptor_set set) { bind_descriptor_sets(stages, layout, param, 1, &set); }
+		/// <summary>
+		/// Binds an array of descriptor sets.
+		/// </summary>
+		/// <param name="stages">Shader stages that will use the descriptors.</param>
+		/// <param name="layout">Pipeline layout that describes the descriptors.</param>
+		/// <param name="first">Index of the first pipeline <paramref name="layout"/> parameter that describes the first descriptor set to bind.</param>
+		/// <param name="count">Number of descriptor sets to bind.</param>
+		/// <param name="sets">Pointer to an array of descriptor sets to bind.</param>
+		virtual void bind_descriptor_sets(shader_stage stages, pipeline_layout layout, uint32_t first, uint32_t count, const descriptor_set *sets) = 0;
+
+		/// <summary>
+		/// Binds an index buffer to the input-assembler stage.
+		/// </summary>
+		/// <param name="buffer">Index buffer resource. This resource must have been created with the <see cref="resource_usage::index_buffer"/> usage.</param>
+		/// <param name="offset">Offset (in bytes) from the start of the index buffer to the first index to use. In D3D9 this has to be 0.</param>
+		/// <param name="index_size">Size (in bytes) of each index. Can typically be 2 (16-bit indices) or 4 (32-bit indices).</param>
+		virtual void bind_index_buffer(resource buffer, uint64_t offset, uint32_t index_size) = 0;
+		/// <summary>
+		/// Binds a single vertex buffer to the input-assembler stage.
+		/// </summary>
+		/// <param name="index">Input slot for binding.</param>
+		/// <param name="buffer">Vertex buffer resource. This resources must have been created with the <see cref="resource_usage::vertex_buffer"/> usage.</param>
+		/// <param name="offset">Offset (in bytes) from the start of the vertex buffer to the first vertex element to use.</param>
+		/// <param name="stride">Size (in bytes) of the vertex element that will be used from the vertex buffer (is added to an element offset to advance to the next).</param>
+		inline  void bind_vertex_buffer(uint32_t index, resource buffer, uint64_t offset, uint32_t stride) { bind_vertex_buffers(index, 1, &buffer, &offset, &stride); }
+		/// <summary>
+		/// Binds an array of vertex buffers to the input-assembler stage.
+		/// </summary>
+		/// <param name="first">First input slot for binding.</param>
+		/// <param name="count">Number of vertex buffers to bind.</param>
+		/// <param name="buffers">Pointer to an array of vertex buffer resources. These resources must have been created with the <see cref="resource_usage::vertex_buffer"/> usage.</param>
+		/// <param name="offsets">Pointer to an array of offset values, one for each buffer. Each offset is the number of bytes from the start of the vertex buffer to the first vertex element to use.</param>
+		/// <param name="strides">Pointer to an array of stride values, one for each buffer. Each stride is the size (in bytes) of the vertex element that will be used from that vertex buffer (is added to an element offset to advance to the next).</param>
+		virtual void bind_vertex_buffers(uint32_t first, uint32_t count, const resource *buffers, const uint64_t *offsets, const uint32_t *strides) = 0;
+
+		/// <summary>
+		/// Binds an array of buffers to the stream-output stage.
+		/// </summary>
+		/// <param name="first">First stream-output slot for binding.</param>
+		/// <param name="count">Number of stream-output targets to bind.</param>
+		/// <param name="buffers">Pointer to an array of buffer resources. These resources must have been created with the <see cref="resource_usage::stream_output"/> usage.</param>
+		/// <param name="offsets">Pointer to an array of offset values, one for each buffer. Each offset is the number of bytes from the start of the buffer to the first element to write to.</param>
+		/// <param name="max_sizes">Optional pointer to an array of size values, one for each buffer. Can be <see langword="nullptr"/> or have elements set to UINT64_MAX to use the entire buffer.</param>
+		virtual void bind_stream_output_buffers(uint32_t first, uint32_t count, const api::resource *buffers, const uint64_t *offsets, const uint64_t *max_sizes) = 0;
+
+		/// <summary>
+		/// Draws non-indexed primitives.
+		/// </summary>
+		/// <seealso cref="device_caps::draw_instanced"/>
+		/// <param name="vertex_count">Number of vertices to draw.</param>
+		/// <param name="instance_count">Number of instances to draw. In D3D9 this has to be 1.</param>
+		/// <param name="first_vertex">Index of the first vertex.</param>
+		/// <param name="first_instance">Value added to each index before reading per-instance data from a vertex buffer. In D3D9 this has to be 0.</param>
+		virtual void draw(uint32_t vertex_count, uint32_t instance_count, uint32_t first_vertex, uint32_t first_instance) = 0;
+		/// <summary>
+		/// Draws indexed primitives.
+		/// </summary>
+		/// <seealso cref="device_caps::draw_instanced"/>
+		/// <param name="index_count">Number of indices read from the index buffer for each instance.</param>
+		/// <param name="instance_count">Number of instances to draw. In D3D9 this has to be 1.</param>
+		/// <param name="first_index">Location of the first index read from the index buffer.</param>
+		/// <param name="vertex_offset">Value added to each index before reading per-vertex data from a vertex buffer.</param>
+		/// <param name="first_instance">Value added to each index before reading per-instance data from a vertex buffer. In D3D9 this has to be 0.</param>
+		virtual void draw_indexed(uint32_t index_count, uint32_t instance_count, uint32_t first_index, int32_t vertex_offset, uint32_t first_instance) = 0;
+		/// <summary>
+		/// Performs a compute shader dispatch.
+		/// </summary>
+		/// <seealso cref="device_caps::compute_shader"/>
+		/// <param name="group_count_x">Number of thread groups dispatched in the x direction.</param>
+		/// <param name="group_count_y">Number of thread groups dispatched in the y direction.</param>
+		/// <param name="group_count_z">Number of thread groups dispatched in the z direction.</param>
+		virtual void dispatch(uint32_t group_count_x, uint32_t group_count_y, uint32_t group_count_z) = 0;
+		/// <summary>
+		/// Executes indirect draw or dispatch commands.
+		/// </summary>
+		/// <seealso cref="device_caps::draw_or_dispatch_indirect"/>
+		/// <param name="type">Specifies whether this is an indirect draw, indexed draw or dispatch command.</param>
+		/// <param name="buffer">Buffer resource that contains command arguments.</param>
+		/// <param name="offset">Offset (in bytes) from the start of the argument buffer to the first argument to use.</param>
+		/// <param name="draw_count">Number of commands to execute.</param>
+		/// <param name="stride">Stride (in bytes) between commands in the argument buffer.</param>
+		virtual void draw_or_dispatch_indirect(indirect_command type, resource buffer, uint64_t offset, uint32_t draw_count, uint32_t stride) = 0;
+
+		/// <summary>
+		/// Copies the entire contents of the <paramref name="source"/> resource to the <paramref name="dest"/>ination resource. Dimensions of the two resources have to match.
+		/// </summary>
+		/// <remarks>
+		/// The <paramref name="source"/> resource has to be in the <see cref="resource_usage::copy_source"/> state.
+		/// The <paramref name="dest"/>ination resource has to be in the <see cref="resource_usage::copy_dest"/> state.
+		/// </remarks>
+		/// <param name="source">Resource to copy from.</param>
+		/// <param name="dest">Resource to copy to.</param>
+		virtual void copy_resource(resource source, resource dest) = 0;
+		/// <summary>
+		/// Copies a linear memory region from the <paramref name="source"/> buffer to the <paramref name="dest"/>ination buffer.
+		/// </summary>
+		/// <remarks>
+		/// The <paramref name="source"/> resource has to be in the <see cref="resource_usage::copy_source"/> state.
+		/// The <paramref name="dest"/>ination resource has to be in the <see cref="resource_usage::copy_dest"/> state.
+		/// </remarks>
+		/// <seealso cref="device_caps::copy_buffer_region"/>
+		/// <param name="source">Buffer resource to copy from.</param>
+		/// <param name="source_offset">Offset (in bytes) into the <paramref name="source"/> buffer to start copying at.</param>
+		/// <param name="dest">Buffer resource to copy to.</param>
+		/// <param name="dest_offset">Offset (in bytes) into the <paramref name="dest"/>ination buffer to start copying to.</param>
+		/// <param name="size">Number of bytes to copy.</param>
+		virtual void copy_buffer_region(resource source, uint64_t source_offset, resource dest, uint64_t dest_offset, uint64_t size) = 0;
+		/// <summary>
+		/// Copies a texture region from the <paramref name="source"/> buffer to the <paramref name="dest"/>ination texture.
+		/// </summary>
+		/// <remarks>
+		/// The <paramref name="source"/> resource has to be in the <see cref="resource_usage::copy_source"/> state.
+		/// The <paramref name="dest"/>ination resource has to be in the <see cref="resource_usage::copy_dest"/> state.
+		/// </remarks>
+		/// <seealso cref="device_caps::copy_buffer_to_texture"/>
+		/// <param name="source">Buffer resource to copy from.</param>
+		/// <param name="source_offset">Offset (in bytes) into the <paramref name="source"/> buffer to start copying at.</param>
+		/// <param name="row_length">Number of pixels from one row to the next (in the buffer), or zero if data is tightly packed.</param>
+		/// <param name="slice_height">Number of rows from one slice to the next (in the buffer) or zero if data is tightly packed.</param>
+		/// <param name="dest">Texture resource to copy to.</param>
+		/// <param name="dest_subresource">Index of the subresource of the <paramref name="dest"/>ination texture to copy to.</param>
+		/// <param name="dest_box">Optional 3D box (or <see langword="nullptr"/> to reference the entire subresource) that defines the region in the <paramref name="dest"/>ination texture to copy to.</param>
+		virtual void copy_buffer_to_texture(resource source, uint64_t source_offset, uint32_t row_length, uint32_t slice_height, resource dest, uint32_t dest_subresource, const subresource_box *dest_box = nullptr) = 0;
+		/// <summary>
+		/// Copies or blits a texture region from the <paramref name="source"/> texture to the <paramref name="dest"/>ination texture.
+		/// </summary>
+		/// <remarks>
+		/// The <paramref name="source"/> resource has to be in the <see cref="resource_usage::copy_source"/> state.
+		/// The <paramref name="dest"/>ination resource has to be in the <see cref="resource_usage::copy_dest"/> state.
+		/// </remarks>
+		/// <seealso cref="device_caps::blit"/>
+		/// <param name="source">Texture resource to copy from.</param>
+		/// <param name="source_subresource">Index of the subresource of the <paramref name="source"/> texture to copy from.</param>
+		/// <param name="source_box">Optional 3D box (or <see langword="nullptr"/> to reference the entire subresource) that defines the region in the <paramref name="source"/> texture to blit from.</param>
+		/// <param name="dest">Texture resource to copy to.</param>
+		/// <param name="dest_subresource">Index of the subresource of the <paramref name="dest"/>ination texture to copy to.</param>
+		/// <param name="dest_box">Optional 3D box (or <see langword="nullptr"/> to reference the entire subresource) that defines the region in the <paramref name="dest"/>ination texture to blit to.</param>
+		/// <param name="filter">Filter to apply when copy requires scaling.</param>
+		virtual void copy_texture_region(resource source, uint32_t source_subresource, const subresource_box *source_box, resource dest, uint32_t dest_subresource, const subresource_box *dest_box, filter_mode filter = filter_mode::min_mag_mip_point) = 0;
+		/// <summary>
+		/// Copies a texture region from the <paramref name="source"/> texture to the <paramref name="dest"/>ination buffer.
+		/// </summary>
+		/// <remarks>
+		/// The <paramref name="source"/> resource has to be in the <see cref="resource_usage::copy_source"/> state.
+		/// The <paramref name="dest"/>ination resource has to be in the <see cref="resource_usage::copy_dest"/> state.
+		/// </remarks>
+		/// <seealso cref="device_caps::copy_buffer_to_texture"/>
+		/// <param name="source">Texture resource to copy from.</param>
+		/// <param name="source_subresource">Index of the subresource of the <paramref name="source"/> texture to copy from.</param>
+		/// <param name="source_box">Optional 3D box (or <see langword="nullptr"/> to reference the entire subresource) that defines the region in the <paramref name="source"/> texture to copy from.</param>
+		/// <param name="dest">Buffer resource to copy to.</param>
+		/// <param name="dest_offset">Offset (in bytes) into the <paramref name="dest"/>ination buffer to start copying to.</param>
+		/// <param name="row_length">Number of pixels from one row to the next (in the buffer), or zero if data is tightly packed.</param>
+		/// <param name="slice_height">Number of rows from one slice to the next (in the buffer), or zero if data is tightly packed.</param>
+		virtual void copy_texture_to_buffer(resource source, uint32_t source_subresource, const subresource_box *source_box, resource dest, uint64_t dest_offset, uint32_t row_length = 0, uint32_t slice_height = 0) = 0;
+		/// <summary>
+		/// Copies a region from the multisampled <paramref name="source"/> texture to the non-multisampled <paramref name="dest"/>ination texture.
+		/// </summary>
+		/// <remarks>
+		/// The <paramref name="source"/> resource has to be in the <see cref="resource_usage::resolve_source"/> state.
+		/// The <paramref name="dest"/>ination resource has to be in the <see cref="resource_usage::resolve_dest"/> state.
+		/// </remarks>
+		/// <seealso cref="device_caps::resolve_region"/>
+		/// <param name="source">Texture resource to resolve from.</param>
+		/// <param name="source_subresource">Index of the subresource of the <paramref name="source"/> texture to resolve from.</param>
+		/// <param name="source_box">Optional 3D box (or <see langword="nullptr"/> to reference the entire subresource) that defines the region in the <paramref name="source"/> texture to resolve.</param>
+		/// <param name="dest">Texture resource to resolve to.</param>
+		/// <param name="dest_subresource">Index of the subresource of the <paramref name="dest"/>ination texture to resolve to.</param>
+		/// <param name="dest_x">Optional X offset (in texels) that defines the region in the <paramref name="dest"/>ination texture to resolve to.</param>
+		/// <param name="dest_y">Optional Y offset (in texels) that defines the region in the <paramref name="dest"/>ination texture to resolve to.</param>
+		/// <param name="dest_z">Optional Z offset (in texels) that defines the region in the <paramref name="dest"/>ination texture to resolve to.</param>
+		/// <param name="format">Format of the resource data.</param>
+		virtual void resolve_texture_region(resource source, uint32_t source_subresource, const subresource_box *source_box, resource dest, uint32_t dest_subresource, int32_t dest_x, int32_t dest_y, int32_t dest_z, format format) = 0;
+
+		/// <summary>
+		/// Clears the resource referenced by the depth-stencil view.
+		/// </summary>
+		/// <remarks>
+		/// The resource the depth-stencil view points to has to be in the <see cref="resource_usage::depth_stencil_write"/> state.
+		/// </remarks>
+		/// <param name="dsv">Resource view handle of the depth-stencil.</param>
+		/// <param name="depth">Optional value to clear the depth buffer with.</param>
+		/// <param name="stencil">Optional value to clear the stencil buffer with.</param>
+		/// <param name="rect_count">Number of rectangles to clear in the depth-stencil resource, or zero to clear the whole resource.</param>
+		/// <param name="rects">Pointer to an array of rectangles.</param>
+		virtual void clear_depth_stencil_view(resource_view dsv, const float *depth, const uint8_t *stencil, uint32_t rect_count = 0, const rect *rects = nullptr) = 0;
+		/// <summary>
+		/// Clears the resource referenced by the render target view.
+		/// </summary>
+		/// <remarks>
+		/// The resource the render target view points to has to be in the <see cref="resource_usage::render_target"/> state.
+		/// </remarks>
+		/// <param name="rtv">Resource view handle of the render target.</param>
+		/// <param name="color">Value to clear the resource with.</param>
+		/// <param name="rect_count">Number of rectangles to clear in the render target resource, or zero to clear the whole resource.</param>
+		/// <param name="rects">Pointer to an array of rectangles.</param>
+		virtual void clear_render_target_view(resource_view rtv, const float color[4], uint32_t rect_count = 0, const rect *rects = nullptr) = 0;
+		/// <summary>
+		/// Clears the resource referenced by the unordered access view.
+		/// </summary>
+		/// <remarks>
+		/// The resource the unordered access view points to has to be in the <see cref="resource_usage::unordered_access"/> state.
+		/// </remarks>
+		/// <param name="uav">Resource view handle of the unordered access view.</param>
+		/// <param name="values">Value to clear the resource with.</param>
+		/// <param name="rect_count">Number of rectangles to clear in the unordered access resource, or zero to clear the whole resource.</param>
+		/// <param name="rects">Pointer to an array of rectangles.</param>
+		virtual void clear_unordered_access_view_uint(resource_view uav, const uint32_t values[4], uint32_t rect_count = 0, const rect *rects = nullptr) = 0;
+		/// <summary>
+		/// Clears the resource referenced by the unordered access view.
+		/// </summary>
+		/// <remarks>
+		/// The resource the unordered access view points to has to be in the <see cref="resource_usage::unordered_access"/> state.
+		/// </remarks>
+		/// <param name="uav">Resource view handle of the unordered access view.</param>
+		/// <param name="values">Value to clear the resource with.</param>
+		/// <param name="rect_count">Number of rectangles to clear in the unordered access resource, or zero to clear the whole resource.</param>
+		/// <param name="rects">Pointer to an array of rectangles.</param>
+		virtual void clear_unordered_access_view_float(resource_view uav, const   float values[4], uint32_t rect_count = 0, const rect *rects = nullptr) = 0;
+
+		/// <summary>
+		/// Generates the lower mipmap levels for the specified shader resource view.
+		/// Uses the largest mipmap level of the view to recursively generate the lower levels of the mipmap chain and stops with the smallest level that is specified by the view.
+		/// </summary>
+		/// <remarks>
+		/// This will invalidate all previous descriptor bindings, which will need to be reset by calls to <see cref="bind_descriptor_set"/> or <see cref="push_descriptors"/>.
+		/// The resource the shader resource view points to has to be in the <see cref="resource_usage::shader_resource"/> state and has to have been created with the <see cref="resource_flags::generate_mipmaps"/> flag.
+		/// </remarks>
+		/// <param name="srv">Shader resource view to update.</param>
+		virtual void generate_mipmaps(resource_view srv) = 0;
+
+		/// <summary>
+		/// Begins a query.
+		/// </summary>
+		/// <param name="pool">Query pool that will manage the results of the query.</param>
+		/// <param name="type">Type of the query to begin.</param>
+		/// <param name="index">Index of the query in the pool.</param>
+		virtual void begin_query(query_pool pool, query_type type, uint32_t index) = 0;
+		/// <summary>
+		/// Ends a query.
+		/// </summary>
+		/// <param name="pool">Query pool that will manage the results of the query.</param>
+		/// <param name="type">Type of the query end.</param>
+		/// <param name="index">Index of the query in the pool.</param>
+		virtual void end_query(query_pool pool, query_type type, uint32_t index) = 0;
+		/// <summary>
+		/// Copies the results of queries in a query pool to a buffer resource.
+		/// </summary>
+		/// <remarks>
+		/// The <paramref name="dest"/>ination resource has to be in the <see cref="resource_usage::copy_dest"/> state.
+		/// </remarks>
+		/// <seealso cref="device_caps::copy_query_pool_results"/>
+		/// <param name="pool">Query pool that manages the results of the queries.</param>
+		/// <param name="type">Type of the queries to copy.</param>
+		/// <param name="first">Index of the first query in the pool to copy the result from.</param>
+		/// <param name="count">Number of query results to copy.</param>
+		/// <param name="dest">Buffer resource to copy to.</param>
+		/// <param name="dest_offset">Offset (in bytes) into the <paramref name="dest"/>ination buffer to start copying to.</param>
+		/// <param name="stride">Size (in bytes) of each result element.</param>
+		virtual void copy_query_pool_results(query_pool pool, query_type type, uint32_t first, uint32_t count, resource dest, uint64_t dest_offset, uint32_t stride) = 0;
+
+		/// <summary>
+		/// Opens a debug event region in the command list.
+		/// </summary>
+		/// <param name="label">Null-terminated string containing the label of the event.</param>
+		/// <param name="color">Optional RGBA color value associated with the event.</param>
+		virtual void begin_debug_event(const char *label, const float color[4] = nullptr) = 0;
+		/// <summary>
+		/// Closes the current debug event region (the last one opened with <see cref="begin_debug_event"/>).
+		/// </summary>
+		virtual void end_debug_event() = 0;
+		/// <summary>
+		/// Inserts a debug marker into the command list.
+		/// </summary>
+		/// <param name="label">Null-terminated string containing the label of the debug marker.</param>
+		/// <param name="color">Optional RGBA color value associated with the debug marker.</param>
+		virtual void insert_debug_marker(const char *label, const float color[4] = nullptr) = 0;
+	};
+
+	/// <summary>
+	/// A list of flags that represent the available command queue types, as returned by <see cref="command_queue::get_type"/>.
+	/// </summary>
+	enum class command_queue_type
+	{
+		graphics = 0x1,
+		compute = 0x2,
+		copy = 0x4
+	};
+	RESHADE_DEFINE_ENUM_FLAG_OPERATORS(command_queue_type);
+
+	/// <summary>
+	/// A command queue, used to execute command lists on the GPU.
+	/// <para>Functionally equivalent to the immediate 'ID3D11DeviceContext' or a 'ID3D12CommandQueue' or 'VkQueue'.</para>
+	/// </summary>
+	/// <remarks>
+	/// This class may NOT be used concurrently from multiple threads!
+	/// </remarks>
+	RESHADE_DEFINE_INTERFACE_WITH_BASE(command_queue, device_object)
+	{
+		/// <summary>
+		/// Gets the type of the command queue, which specifies what commands can be executed on it.
+		/// </summary>
+		virtual command_queue_type get_type() const = 0;
+
+		/// <summary>
+		/// Waits for all issued GPU operations on this queue to finish before returning.
+		/// This can be used to ensure that e.g. resources are no longer in use on the GPU before destroying them.
+		/// </summary>
+		virtual void wait_idle() const = 0;
+
+		/// <summary>
+		/// Flushes and executes the special immediate command list returned by <see cref="get_immediate_command_list"/> immediately.
+		/// This can be used to force commands to execute right away instead of waiting for the runtime to flush it automatically at some point.
+		/// </summary>
+		virtual void flush_immediate_command_list() const = 0;
+
+		/// <summary>
+		/// Gets a special command list, on which all issued commands are executed as soon as possible (or right before the application executes its next command list on this queue).
+		/// This only exists on command queues that contain the <see cref="command_queue_type::graphics"/> flag, on other queues <see langword="nullptr"/> is returned.
+		/// </summary>
+		virtual command_list *get_immediate_command_list() = 0;
+
+		/// <summary>
+		/// Opens a debug event region in the command queue.
+		/// </summary>
+		/// <param name="label">Null-terminated string containing the label of the event.</param>
+		/// <param name="color">Optional RGBA color value associated with the event.</param>
+		virtual void begin_debug_event(const char *label, const float color[4] = nullptr) = 0;
+		/// <summary>
+		/// Closes the current debug event region (the last one opened with <see cref="begin_debug_event"/>).
+		/// </summary>
+		virtual void end_debug_event() = 0;
+		/// <summary>
+		/// Inserts a debug marker into the command queue.
+		/// </summary>
+		/// <param name="label">Null-terminated string containing the label of the debug marker.</param>
+		/// <param name="color">Optional RGBA color value associated with the debug marker.</param>
+		virtual void insert_debug_marker(const char *label, const float color[4] = nullptr) = 0;
+	};
+
+	/// <summary>
+	/// Describes a swap chain and its back buffer resources.
+	/// </summary>
+	struct swapchain_desc : resource_desc
+	{
+		/// <summary>
+		/// Number of back buffer resources in the swap chain.
+		/// </summary>
+		uint32_t buffer_count = 0;
+
+		/// <summary>
+		/// Defines how the back buffers should be swapped when a present occurs.
+		/// </summary>
+		uint32_t present_mode = 0;
+
+		/// <summary>
+		/// Swap chain creation flags.
+		/// </summary>
+		uint32_t present_flags = 0;
+	};
+
+	/// <summary>
+	/// A swap chain, used to present images to the screen.
+	/// <para>Functionally equivalent to a 'IDirect3DSwapChain9', 'IDXGISwapChain', 'HDC' or 'VkSwapchainKHR'.</para>
+	/// </summary>
+	RESHADE_DEFINE_INTERFACE_WITH_BASE(swapchain, device_object)
+	{
+		/// <summary>
+		/// Gets the window handle of the window this swap chain was created with, or <see langword="nullptr"/> if this is an offscreen swap chain.
+		/// </summary>
+		virtual   void * get_hwnd() const = 0;
+
+		/// <summary>
+		/// Gets the back buffer resource at the specified <paramref name="index"/> in this swap chain.
+		/// </summary>
+		/// <param name="index">Index of the back buffer. This has to be between zero and the value returned by <see cref="get_back_buffer_count"/>.</param>
+		virtual resource get_back_buffer(uint32_t index) = 0;
+
+		/// <summary>
+		/// Gets the number of back buffer resources in this swap chain.
+		/// </summary>
+		virtual uint32_t get_back_buffer_count() const = 0;
+
+		/// <summary>
+		/// Gets the current back buffer resource.
+		/// </summary>
+		inline  resource get_current_back_buffer() { return get_back_buffer(get_current_back_buffer_index()); }
+		/// <summary>
+		/// Gets the index of the back buffer resource that can currently be rendered into.
+		/// </summary>
+		virtual uint32_t get_current_back_buffer_index() const = 0;
+	};
+}
diff --git a/src/3rd party/reshade/reshade_api_format.hpp b/src/3rd party/reshade/reshade_api_format.hpp
new file mode 100644
index 0000000..e695987
--- /dev/null
+++ b/src/3rd party/reshade/reshade_api_format.hpp	
@@ -0,0 +1,458 @@
+/*
+ * Copyright (C) 2021 Patrick Mours
+ * SPDX-License-Identifier: BSD-3-Clause OR MIT
+ */
+
+#pragma once
+
+#include <cfloat>
+#include <cstdint>
+
+namespace reshade::api
+{
+	/// <summary>
+	/// The available data and texture formats.
+	/// This is mostly compatible with 'DXGI_FORMAT'.
+	/// </summary>
+	enum class format : uint32_t
+	{
+		unknown = 0,
+
+		// Color formats
+
+		r1_unorm = 66,
+		l8_unorm = 0x3030384C,
+		a8_unorm = 65,
+		r8_typeless = 60,
+		r8_uint = 62,
+		r8_sint = 64,
+		r8_unorm = 61,
+		r8_snorm = 63,
+		l8a8_unorm = 0x3038414C,
+		r8g8_typeless = 48,
+		r8g8_uint = 50,
+		r8g8_sint = 52,
+		r8g8_unorm = 49,
+		r8g8_snorm = 51,
+		r8g8b8a8_typeless = 27,
+		r8g8b8a8_uint = 30,
+		r8g8b8a8_sint = 32,
+		r8g8b8a8_unorm = 28,
+		r8g8b8a8_unorm_srgb = 29,
+		r8g8b8a8_snorm = 31,
+		r8g8b8x8_typeless = 0x424757B8,
+		r8g8b8x8_unorm = 0x424757B9,
+		r8g8b8x8_unorm_srgb = 0x424757BA,
+		b8g8r8a8_typeless = 90,
+		b8g8r8a8_unorm = 87,
+		b8g8r8a8_unorm_srgb = 91,
+		b8g8r8x8_typeless = 92,
+		b8g8r8x8_unorm = 88,
+		b8g8r8x8_unorm_srgb = 93,
+		r10g10b10a2_typeless = 23,
+		r10g10b10a2_uint = 25,
+		r10g10b10a2_unorm = 24,
+		r10g10b10a2_xr_bias = 89,
+		b10g10r10a2_typeless = 0x42475330,
+		b10g10r10a2_uint = 0x42475332,
+		b10g10r10a2_unorm = 0x42475331,
+		l16_unorm = 0x3036314C,
+		r16_typeless = 53,
+		r16_uint = 57,
+		r16_sint = 59,
+		r16_float = 54,
+		r16_unorm = 56,
+		r16_snorm = 58,
+		l16a16_unorm = 0x3631414C,
+		r16g16_typeless = 33,
+		r16g16_uint = 36,
+		r16g16_sint = 38,
+		r16g16_float = 34,
+		r16g16_unorm = 35,
+		r16g16_snorm = 37,
+		r16g16b16a16_typeless = 9,
+		r16g16b16a16_uint = 12,
+		r16g16b16a16_sint = 14,
+		r16g16b16a16_float = 10,
+		r16g16b16a16_unorm = 11,
+		r16g16b16a16_snorm = 13,
+		r32_typeless = 39,
+		r32_uint = 42,
+		r32_sint = 43,
+		r32_float = 41,
+		r32g32_typeless = 15,
+		r32g32_uint = 17,
+		r32g32_sint = 18,
+		r32g32_float = 16,
+		r32g32b32_typeless = 5,
+		r32g32b32_uint = 7,
+		r32g32b32_sint = 8,
+		r32g32b32_float = 6,
+		r32g32b32a32_typeless = 1,
+		r32g32b32a32_uint = 3,
+		r32g32b32a32_sint = 4,
+		r32g32b32a32_float = 2,
+		r9g9b9e5 = 67,
+		r11g11b10_float = 26,
+		b5g6r5_unorm = 85,
+		b5g5r5a1_unorm = 86,
+		b5g5r5x1_unorm = 0x424757B5,
+		b4g4r4a4_unorm = 115,
+
+		// Depth-stencil formats
+
+		s8_uint = 0x30303853,
+		d16_unorm = 55,
+		d16_unorm_s8_uint = 0x38363144,
+		d24_unorm_x8_uint = 0x38343244,
+		d24_unorm_s8_uint = 45,
+		d32_float = 40,
+		d32_float_s8_uint = 20,
+
+		r24_g8_typeless = 44,
+		r24_unorm_x8_uint = 46,
+		x24_unorm_g8_uint = 47,
+		r32_g8_typeless = 19,
+		r32_float_x8_uint = 21,
+		x32_float_g8_uint = 22,
+
+		// Compressed data formats
+
+		bc1_typeless = 70,
+		bc1_unorm = 71,
+		bc1_unorm_srgb = 72,
+		bc2_typeless = 73,
+		bc2_unorm = 74,
+		bc2_unorm_srgb = 75,
+		bc3_typeless = 76,
+		bc3_unorm = 77,
+		bc3_unorm_srgb = 78,
+		bc4_typeless = 79,
+		bc4_unorm = 80,
+		bc4_snorm = 81,
+		bc5_typeless = 82,
+		bc5_unorm = 83,
+		bc5_snorm = 84,
+		bc6h_typeless = 94,
+		bc6h_ufloat = 95,
+		bc6h_sfloat = 96,
+		bc7_typeless = 97,
+		bc7_unorm = 98,
+		bc7_unorm_srgb = 99,
+
+		// Video formats
+
+		r8g8_b8g8_unorm = 68,
+		g8r8_g8b8_unorm = 69,
+
+		// Special purpose formats
+
+		intz = 0x5A544E49,
+	};
+
+	/// <summary>
+	/// The available color space types for presentation.
+	/// </summary>
+	enum class color_space : uint32_t
+	{
+		unknown = 0,
+
+		srgb_nonlinear,
+		extended_srgb_linear,
+		hdr10_st2084,
+		hdr10_hlg,
+	};
+
+	/// <summary>
+	/// Converts the specified format <paramref name="value"/> to its equivalent typeless variant.
+	/// </summary>
+	/// <param name="value">The format to convert.</param>
+	inline format format_to_typeless(format value)
+	{
+		switch (value)
+		{
+		case format::l8_unorm:
+		case format::r8_typeless:
+		case format::r8_uint:
+		case format::r8_sint:
+		case format::r8_unorm:
+		case format::r8_snorm:
+			return format::r8_typeless;
+		case format::l8a8_unorm:
+		case format::r8g8_typeless:
+		case format::r8g8_uint:
+		case format::r8g8_sint:
+		case format::r8g8_unorm:
+		case format::r8g8_snorm:
+			return format::r8g8_typeless;
+		case format::r8g8b8a8_typeless:
+		case format::r8g8b8a8_uint:
+		case format::r8g8b8a8_sint:
+		case format::r8g8b8a8_unorm:
+		case format::r8g8b8a8_unorm_srgb:
+		case format::r8g8b8a8_snorm:
+			return format::r8g8b8a8_typeless;
+		case format::b8g8r8a8_typeless:
+		case format::b8g8r8a8_unorm:
+		case format::b8g8r8a8_unorm_srgb:
+			return format::b8g8r8a8_typeless;
+		case format::b8g8r8x8_typeless:
+		case format::b8g8r8x8_unorm:
+		case format::b8g8r8x8_unorm_srgb:
+			return format::b8g8r8x8_typeless;
+		case format::r10g10b10a2_typeless:
+		case format::r10g10b10a2_uint:
+		case format::r10g10b10a2_unorm:
+		case format::r10g10b10a2_xr_bias:
+			return format::r10g10b10a2_typeless;
+		case format::b10g10r10a2_typeless:
+		case format::b10g10r10a2_uint:
+		case format::b10g10r10a2_unorm:
+			return format::b10g10r10a2_typeless;
+		case format::l16_unorm:
+		case format::d16_unorm:
+		case format::r16_typeless:
+		case format::r16_uint:
+		case format::r16_sint:
+		case format::r16_float:
+		case format::r16_unorm:
+		case format::r16_snorm:
+			return format::r16_typeless;
+		case format::l16a16_unorm:
+		case format::r16g16_typeless:
+		case format::r16g16_uint:
+		case format::r16g16_sint:
+		case format::r16g16_float:
+		case format::r16g16_unorm:
+		case format::r16g16_snorm:
+			return format::r16g16_typeless;
+		case format::r16g16b16a16_typeless:
+		case format::r16g16b16a16_uint:
+		case format::r16g16b16a16_sint:
+		case format::r16g16b16a16_float:
+		case format::r16g16b16a16_unorm:
+		case format::r16g16b16a16_snorm:
+			return format::r16g16b16a16_typeless;
+		case format::d32_float:
+		case format::r32_typeless:
+		case format::r32_uint:
+		case format::r32_sint:
+		case format::r32_float:
+			return format::r32_typeless;
+		case format::r32g32_typeless:
+		case format::r32g32_uint:
+		case format::r32g32_sint:
+		case format::r32g32_float:
+			return format::r32g32_typeless;
+		case format::r32g32b32_typeless:
+		case format::r32g32b32_uint:
+		case format::r32g32b32_sint:
+		case format::r32g32b32_float:
+			return format::r32g32b32_typeless;
+		case format::r32g32b32a32_typeless:
+		case format::r32g32b32a32_uint:
+		case format::r32g32b32a32_sint:
+		case format::r32g32b32a32_float:
+			return format::r32g32b32a32_typeless;
+		case format::d32_float_s8_uint:
+		case format::r32_g8_typeless:
+		case format::r32_float_x8_uint:
+		case format::x32_float_g8_uint:
+			return format::r32_g8_typeless;
+		case format::d24_unorm_s8_uint: // Do not also convert 'd24_unorm_x8_uint' here, to keep it distinguishable from 'd24_unorm_s8_uint'
+		case format::r24_g8_typeless:
+		case format::r24_unorm_x8_uint:
+		case format::x24_unorm_g8_uint:
+			return format::r24_g8_typeless;
+		case format::bc1_typeless:
+		case format::bc1_unorm:
+		case format::bc1_unorm_srgb:
+			return format::bc1_typeless;
+		case format::bc2_typeless:
+		case format::bc2_unorm:
+		case format::bc2_unorm_srgb:
+			return format::bc2_typeless;
+		case format::bc3_typeless:
+		case format::bc3_unorm:
+		case format::bc3_unorm_srgb:
+			return format::bc2_typeless;
+		case format::bc4_typeless:
+		case format::bc4_unorm:
+		case format::bc4_snorm:
+			return format::bc4_typeless;
+		case format::bc5_typeless:
+		case format::bc5_unorm:
+		case format::bc5_snorm:
+			return format::bc5_typeless;
+		case format::bc6h_typeless:
+		case format::bc6h_ufloat:
+		case format::bc6h_sfloat:
+			return format::bc6h_typeless;
+		case format::bc7_typeless:
+		case format::bc7_unorm:
+		case format::bc7_unorm_srgb:
+			return format::bc7_typeless;
+		default:
+			return value;
+		}
+	}
+
+	/// <summary>
+	/// Converts the specified format <paramref name="value"/> to its equivalent typed variant ("unorm" or "float").
+	/// </summary>
+	/// <param name="value">The format to convert.</param>
+	/// <param name="srgb_variant">Set to 1 to get sRGB variant, 0 to get linear variant and -1 to preserve existing one.</param>
+	inline format format_to_default_typed(format value, int srgb_variant = -1)
+	{
+		switch (value)
+		{
+		case format::r8_typeless:
+			return format::r8_unorm;
+		case format::r8g8_typeless:
+			return format::r8g8_unorm;
+		case format::r8g8b8a8_typeless:
+		case format::r8g8b8a8_unorm:
+			return srgb_variant == 1 ? format::r8g8b8a8_unorm_srgb : format::r8g8b8a8_unorm;
+		case format::r8g8b8a8_unorm_srgb:
+			return srgb_variant != 0 ? format::r8g8b8a8_unorm_srgb : format::r8g8b8a8_unorm;
+		case format::r8g8b8x8_typeless:
+		case format::r8g8b8x8_unorm:
+			return srgb_variant == 1 ? format::r8g8b8x8_unorm_srgb : format::r8g8b8x8_unorm;
+		case format::r8g8b8x8_unorm_srgb:
+			return srgb_variant != 0 ? format::r8g8b8x8_unorm_srgb : format::r8g8b8x8_unorm;
+		case format::b8g8r8a8_typeless:
+		case format::b8g8r8a8_unorm:
+			return srgb_variant == 1 ? format::b8g8r8a8_unorm_srgb : format::b8g8r8a8_unorm;
+		case format::b8g8r8a8_unorm_srgb:
+			return srgb_variant != 0 ? format::b8g8r8a8_unorm_srgb : format::b8g8r8a8_unorm;
+		case format::b8g8r8x8_typeless:
+		case format::b8g8r8x8_unorm:
+			return srgb_variant == 1 ? format::b8g8r8x8_unorm_srgb : format::b8g8r8x8_unorm;
+		case format::b8g8r8x8_unorm_srgb:
+			return srgb_variant != 0 ? format::b8g8r8x8_unorm_srgb : format::b8g8r8x8_unorm;
+		case format::r10g10b10a2_typeless:
+			return format::r10g10b10a2_unorm;
+		case format::b10g10r10a2_typeless:
+			return format::b10g10r10a2_unorm;
+		case format::d16_unorm:
+		case format::r16_typeless:
+			return format::r16_unorm;
+		case format::r16g16_typeless:
+			return format::r16g16_unorm;
+		case format::r16g16b16a16_typeless:
+			return format::r16g16b16a16_unorm;
+		case format::d32_float:
+		case format::r32_typeless:
+			return format::r32_float;
+		case format::r32g32_typeless:
+			return format::r32g32_float;
+		case format::r32g32b32_typeless:
+			return format::r32g32b32_float;
+		case format::r32g32b32a32_typeless:
+			return format::r32g32b32a32_float;
+		case format::d32_float_s8_uint:
+		case format::r32_g8_typeless:
+			return format::r32_float_x8_uint;
+		case format::d24_unorm_s8_uint: // Do not also convert 'd24_unorm_x8_uint' here, to keep it distinguishable from 'd24_unorm_s8_uint'
+		case format::r24_g8_typeless:
+			return format::r24_unorm_x8_uint;
+		case format::bc1_typeless:
+		case format::bc1_unorm:
+			return srgb_variant == 1 ? format::bc1_unorm_srgb : format::bc1_unorm;
+		case format::bc1_unorm_srgb:
+			return srgb_variant != 0 ? format::bc1_unorm_srgb : format::bc1_unorm;
+		case format::bc2_typeless:
+		case format::bc2_unorm:
+			return srgb_variant == 1 ? format::bc2_unorm_srgb : format::bc2_unorm;
+		case format::bc2_unorm_srgb:
+			return srgb_variant != 0 ? format::bc2_unorm_srgb : format::bc2_unorm;
+		case format::bc3_typeless:
+		case format::bc3_unorm:
+			return srgb_variant == 1 ? format::bc3_unorm_srgb : format::bc3_unorm;
+		case format::bc3_unorm_srgb:
+			return srgb_variant != 0 ? format::bc3_unorm_srgb : format::bc3_unorm;
+		case format::bc4_typeless:
+			return format::bc4_unorm;
+		case format::bc5_typeless:
+			return format::bc5_unorm;
+		case format::bc6h_typeless:
+			return format::bc6h_ufloat;
+		case format::bc7_typeless:
+		case format::bc7_unorm:
+			return srgb_variant == 1 ? format::bc7_unorm_srgb : format::bc7_unorm;
+		case format::bc7_unorm_srgb:
+			return srgb_variant != 0 ? format::bc7_unorm_srgb : format::bc7_unorm;
+		default:
+			return value;
+		}
+	}
+
+	/// <summary>
+	/// Converts the specified format <paramref name="value"/> to its equivalent depth-stencil variant.
+	/// </summary>
+	/// <param name="value">The format to convert.</param>
+	inline format format_to_depth_stencil_typed(format value)
+	{
+		switch (value)
+		{
+		case format::r16_typeless:
+		case format::r16_unorm:
+			return format::d16_unorm;
+		case format::r32_typeless:
+		case format::r32_float:
+			return format::d32_float;
+		case format::r32_g8_typeless:
+		case format::r32_float_x8_uint:
+		case format::x32_float_g8_uint:
+			return format::d32_float_s8_uint;
+		case format::r24_g8_typeless:
+		case format::r24_unorm_x8_uint:
+		case format::x24_unorm_g8_uint:
+			return format::d24_unorm_s8_uint;
+		default:
+			return value;
+		}
+	}
+
+	/// <summary>
+	/// Gets the number of bytes a texture row of the specified format <paramref name="value"/> occupies.
+	/// </summary>
+	inline const uint32_t format_row_pitch(format value, uint32_t width)
+	{
+		if (value == format::unknown)
+			return 0;
+
+		if (value <= format::r32g32b32a32_sint)
+			return 16 * width;
+		if (value <= format::r32g32b32_sint)
+			return 12 * width;
+		if (value <= format::x32_float_g8_uint)
+			return  8 * width;
+		if (value <= format::x24_unorm_g8_uint || value == format::l16a16_unorm)
+			return  4 * width;
+		if (value <= format::r16_sint || value == format::b5g6r5_unorm || value == format::b5g5r5a1_unorm || value == format::b5g5r5x1_unorm || value == format::l8a8_unorm || value == format::l16_unorm)
+			return  2 * width;
+		if (value <= format::a8_unorm || value == format::l8_unorm)
+			return  1 * width;
+		if (value <= format::g8r8_g8b8_unorm || (value >= format::b8g8r8a8_unorm && value <= format::b8g8r8x8_unorm_srgb) || (value >= format::r8g8b8x8_typeless && value <= format::r8g8b8x8_unorm_srgb))
+			return  4 * width;
+
+		// Block compressed formats are bytes per block, rather than per pixel
+		if ((value >= format::bc1_typeless && value <= format::bc1_unorm_srgb) || (value >= format::bc4_typeless && value <= format::bc4_snorm))
+			return  8 * ((width + 3) / 4);
+		if ((value >= format::bc2_typeless && value <= format::bc2_unorm_srgb) || (value >= format::bc3_typeless && value <= format::bc3_unorm_srgb) || (value >= format::bc5_typeless && value <= format::bc7_unorm_srgb))
+			return 16 * ((width + 3) / 4);
+
+		return 0;
+	}
+	/// <summary>
+	/// Gets the number of bytes a texture slice of the specified format <paramref name="value"/> occupies.
+	/// </summary>
+	inline const uint32_t format_slice_pitch(format value, uint32_t row_pitch, uint32_t height)
+	{
+		if ((value >= format::bc1_typeless && value <= format::bc5_snorm) || (value >= format::bc6h_typeless && value <= format::bc7_unorm_srgb))
+			return row_pitch * ((height + 3) / 4);
+
+		return row_pitch * height;
+	}
+}
diff --git a/src/3rd party/reshade/reshade_api_pipeline.hpp b/src/3rd party/reshade/reshade_api_pipeline.hpp
new file mode 100644
index 0000000..a6e2fa1
--- /dev/null
+++ b/src/3rd party/reshade/reshade_api_pipeline.hpp	
@@ -0,0 +1,984 @@
+/*
+ * Copyright (C) 2021 Patrick Mours
+ * SPDX-License-Identifier: BSD-3-Clause OR MIT
+ */
+
+#pragma once
+
+#include "reshade_api_resource.hpp"
+
+namespace reshade::api
+{
+	/// <summary>
+	/// A list of flags that represent the available shader stages in the render pipeline.
+	/// </summary>
+	enum class shader_stage : uint32_t
+	{
+		vertex = 0x1,
+		hull = 0x2,
+		domain = 0x4,
+		geometry = 0x8,
+		pixel = 0x10,
+		compute = 0x20,
+
+		all = 0x7FFFFFFF,
+		all_compute = compute,
+		all_graphics = vertex | hull | domain | geometry | pixel
+	};
+	RESHADE_DEFINE_ENUM_FLAG_OPERATORS(shader_stage);
+
+	/// <summary>
+	/// A list of flags that represent the available pipeline stages in the render pipeline.
+	/// </summary>
+	enum class pipeline_stage : uint32_t
+	{
+		vertex_shader = 0x8,
+		hull_shader = 0x10,
+		domain_shader = 0x20,
+		geometry_shader = 0x40,
+		pixel_shader = 0x80,
+		compute_shader = 0x800,
+
+		input_assembler = 0x2,
+		stream_output = 0x4,
+		rasterizer = 0x100,
+		depth_stencil = 0x200,
+		output_merger = 0x400,
+
+		all = 0x7FFFFFFF,
+		all_compute = compute_shader,
+		all_graphics = vertex_shader | hull_shader | domain_shader | geometry_shader | pixel_shader | input_assembler | stream_output | rasterizer | depth_stencil | output_merger,
+		all_shader_stages = vertex_shader | hull_shader | domain_shader | geometry_shader | pixel_shader | compute_shader
+	};
+	RESHADE_DEFINE_ENUM_FLAG_OPERATORS(pipeline_stage);
+
+	/// <summary>
+	/// The available descriptor types.
+	/// </summary>
+	enum class descriptor_type : uint32_t
+	{
+		sampler = 0,
+		sampler_with_resource_view = 1,
+		shader_resource_view = 2,
+		unordered_access_view = 3,
+		constant_buffer = 6,
+		shader_storage_buffer = 7
+	};
+
+	/// <summary>
+	/// The available pipeline layout parameter types.
+	/// </summary>
+	enum class pipeline_layout_param_type : uint32_t
+	{
+		push_constants = 1,
+		descriptor_set = 0,
+		push_descriptors = 2,
+		push_descriptors_ranges = 3
+	};
+
+	/// <summary>
+	/// Describes a range of constants in a pipeline layout.
+	/// </summary>
+	struct constant_range
+	{
+		/// <summary>
+		/// OpenGL uniform buffer binding index.
+		/// </summary>
+		uint32_t binding = 0;
+		/// <summary>
+		/// D3D10/D3D11/D3D12 constant buffer register index.
+		/// </summary>
+		uint32_t dx_register_index = 0;
+		/// <summary>
+		/// D3D12 constant buffer register space.
+		/// </summary>
+		uint32_t dx_register_space = 0;
+		/// <summary>
+		/// Number of constants in this range (in 32-bit values).
+		/// </summary>
+		uint32_t count = 0;
+		/// <summary>
+		/// Shader pipeline stages that can make use of the constants in this range.
+		/// </summary>
+		shader_stage visibility = shader_stage::all;
+	};
+
+	/// <summary>
+	/// Describes a range of descriptors in a descriptor set layout.
+	/// </summary>
+	struct descriptor_range
+	{
+		/// <summary>
+		/// OpenGL/Vulkan binding index (<c>layout(binding=X)</c> in GLSL).
+		/// In D3D this is equivalent to the offset (in descriptors) of this range in the descriptor set (since each binding can only have an array size of 1).
+		/// </summary>
+		uint32_t binding = 0;
+		/// <summary>
+		/// D3D9/D3D10/D3D11/D3D12 shader register index (<c>register(xX)</c> in HLSL).
+		/// </summary>
+		uint32_t dx_register_index = 0;
+		/// <summary>
+		/// D3D12 register space (<c>register(..., spaceX)</c> in HLSL).
+		/// </summary>
+		uint32_t dx_register_space = 0;
+		/// <summary>
+		/// Number of descriptors in this range.
+		/// </summary>
+		uint32_t count = 0;
+		/// <summary>
+		/// Shader pipeline stages that can make use of the descriptors in this range.
+		/// </summary>
+		shader_stage visibility = shader_stage::all;
+		/// <summary>
+		/// Size of the array in case this is an array binding.
+		/// Only meaningful in Vulkan, in OpenGL and other APIs this has to be 1 (since each array element is a separate binding there).
+		/// If this is less than the total number of descriptors specified in <see cref="count"/>, then the remaining descriptors are assigned a separate binding (with an array size of 1), with the binding index incrementing with each additional descriptor.
+		/// </summary>
+		uint32_t array_size = 1;
+		/// <summary>
+		/// Type of the descriptors in this range.
+		/// </summary>
+		descriptor_type type = descriptor_type::sampler;
+	};
+
+	/// <summary>
+	/// Describes a single parameter in a pipeline layout.
+	/// </summary>
+	struct pipeline_layout_param
+	{
+		constexpr pipeline_layout_param() : push_descriptors() {}
+		constexpr pipeline_layout_param(const constant_range &push_constants) : type(pipeline_layout_param_type::push_constants), push_constants(push_constants) {}
+		constexpr pipeline_layout_param(const descriptor_range &push_descriptors) : type(pipeline_layout_param_type::push_descriptors), push_descriptors(push_descriptors) {}
+		constexpr pipeline_layout_param(uint32_t count, const descriptor_range *ranges) : type(pipeline_layout_param_type::descriptor_set), descriptor_set({ count, ranges }) {}
+
+		/// <summary>
+		/// Type of the parameter.
+		/// </summary>
+		pipeline_layout_param_type type = pipeline_layout_param_type::push_descriptors;
+
+		union
+		{
+			/// <summary>
+			/// Used when parameter type is <see cref="pipeline_layout_param_type::push_constants"/>.
+			/// </summary>
+			constant_range push_constants;
+
+			/// <summary>
+			/// Used when parameter type is <see cref="pipeline_layout_param_type::push_descriptors"/>.
+			/// </summary>
+			descriptor_range push_descriptors;
+
+			/// <summary>
+			/// Used when parameter type is <see cref="pipeline_layout_param_type::descriptor_set"/> or <see cref="pipeline_layout_param_type::push_descriptors_ranges"/>.
+			/// </summary>
+			struct
+			{
+				uint32_t count;
+				const descriptor_range *ranges;
+			} descriptor_set;
+		};
+	};
+
+	/// <summary>
+	/// An opaque handle to a pipeline layout object.
+	/// <para>In D3D12 this is a pointer to a 'ID3D12RootSignature' object, in Vulkan a 'VkPipelineLayout' handle.</para>
+	/// </summary>
+	RESHADE_DEFINE_HANDLE(pipeline_layout);
+
+	/// <summary>
+	/// The fill mode to use when rendering triangles.
+	/// </summary>
+	enum class fill_mode : uint32_t
+	{
+		solid = 0,
+		wireframe = 1,
+		point = 2
+	};
+
+	/// <summary>
+	/// Indicates triangles facing a particular direction are not drawn.
+	/// </summary>
+	enum class cull_mode : uint32_t
+	{
+		none = 0,
+		front = 1,
+		back = 2,
+		front_and_back = front | back
+	};
+	RESHADE_DEFINE_ENUM_FLAG_OPERATORS(cull_mode);
+
+	/// <summary>
+	/// The available logic operations.
+	/// </summary>
+	enum class logic_op : uint32_t
+	{
+		clear = 0,
+		bitwise_and = 1,
+		bitwise_and_reverse = 2,
+		copy = 3,
+		bitwise_and_inverted = 4,
+		noop = 5,
+		bitwise_xor = 6,
+		bitwise_or = 7,
+		bitwise_nor = 8,
+		equivalent = 9,
+		invert = 10,
+		bitwise_or_reverse = 11,
+		copy_inverted = 12,
+		bitwise_or_inverted = 13,
+		bitwise_nand = 14,
+		set = 15
+	};
+
+	/// <summary>
+	/// The available color or alpha blending operations.
+	/// </summary>
+	enum class blend_op : uint32_t
+	{
+		add = 0,
+		subtract = 1,
+		reverse_subtract = 2,
+		min = 3,
+		max = 4
+	};
+
+	/// <summary>
+	/// The available blend factors in color or alpha blending operations.
+	/// </summary>
+	enum class blend_factor : uint32_t
+	{
+		zero = 0,
+		one = 1,
+		source_color = 2,
+		one_minus_source_color = 3,
+		dest_color = 4,
+		one_minus_dest_color = 5,
+		source_alpha = 6,
+		one_minus_source_alpha = 7,
+		dest_alpha = 8,
+		one_minus_dest_alpha = 9,
+		constant_color = 10,
+		one_minus_constant_color = 11,
+		constant_alpha = 12,
+		one_minus_constant_alpha = 13,
+		source_alpha_saturate = 14,
+		source1_color = 15,
+		one_minus_source1_color = 16,
+		source1_alpha = 17,
+		one_minus_source1_alpha = 18
+	};
+
+	/// <summary>
+	/// The available stencil operations that can be performed during depth-stencil testing.
+	/// </summary>
+	enum class stencil_op : uint32_t
+	{
+		keep = 0,
+		zero = 1,
+		replace = 2,
+		increment_saturate = 3,
+		decrement_saturate = 4,
+		invert = 5,
+		increment = 6,
+		decrement = 7
+	};
+
+	/// <summary>
+	/// Specifies how the pipeline interprets vertex data that is bound to the vertex input stage and subsequently renders it.
+	/// </summary>
+	enum class primitive_topology : uint32_t
+	{
+		undefined = 0,
+
+		point_list = 1,
+		line_list = 2,
+		line_strip = 3,
+		triangle_list = 4,
+		triangle_strip = 5,
+		triangle_fan = 6,
+		quad_list = 8,
+		quad_strip = 9,
+		line_list_adj = 10,
+		line_strip_adj = 11,
+		triangle_list_adj = 12,
+		triangle_strip_adj = 13,
+
+		patch_list_01_cp = 33,
+		patch_list_02_cp,
+		patch_list_03_cp,
+		patch_list_04_cp,
+		patch_list_05_cp,
+		patch_list_06_cp,
+		patch_list_07_cp,
+		patch_list_08_cp,
+		patch_list_09_cp,
+		patch_list_10_cp,
+		patch_list_11_cp,
+		patch_list_12_cp,
+		patch_list_13_cp,
+		patch_list_14_cp,
+		patch_list_15_cp,
+		patch_list_16_cp,
+		patch_list_17_cp,
+		patch_list_18_cp,
+		patch_list_19_cp,
+		patch_list_20_cp,
+		patch_list_21_cp,
+		patch_list_22_cp,
+		patch_list_23_cp,
+		patch_list_24_cp,
+		patch_list_25_cp,
+		patch_list_26_cp,
+		patch_list_27_cp,
+		patch_list_28_cp,
+		patch_list_29_cp,
+		patch_list_30_cp,
+		patch_list_31_cp,
+		patch_list_32_cp
+	};
+
+	/// <summary>
+	/// Describes a shader object.
+	/// </summary>
+	struct shader_desc
+	{
+		/// <summary>
+		/// Shader source code or binary.
+		/// </summary>
+		const void *code = nullptr;
+		/// <summary>
+		/// Size (in bytes) of the shader source <see cref="code"/> or binary.
+		/// </summary>
+		size_t code_size = 0;
+		/// <summary>
+		/// Optional entry point name if the shader source <see cref="code"/> or binary contains multiple entry points.
+		/// Can be <see langword="nullptr"/> if it does not, or to use the default "main" entry point.
+		/// </summary>
+		const char *entry_point = nullptr;
+
+		/// <summary>
+		/// Number of entries in the <see cref="spec_constant_ids"/> and <see cref="spec_constant_values"/> arrays.
+		/// This is meaningful only when the shader binary is a SPIR-V module and is ignored otherwise.
+		/// </summary>
+		uint32_t spec_constants = 0;
+		/// <summary>
+		/// Pointer to an array of specialization constant indices.
+		/// </summary>
+		const uint32_t *spec_constant_ids = nullptr;
+		/// <summary>
+		/// Pointer to an array of constant values, one for each specialization constant index in <see cref="spec_constant_ids"/>.
+		/// </summary>
+		const uint32_t *spec_constant_values = nullptr;
+	};
+
+	/// <summary>
+	/// Describes a single element in the vertex layout for the input-assembler stage.
+	/// </summary>
+	struct input_element
+	{
+		/// <summary>
+		/// GLSL attribute location associated with this element (<c>layout(location = X)</c>).
+		/// </summary>
+		uint32_t location = 0;
+		/// <summary>
+		/// HLSL semantic associated with this element.
+		/// </summary>
+		const char *semantic = nullptr;
+		/// <summary>
+		/// Optional index for the HLSL semantic (e.g. for "TEXCOORD1" set <see cref="semantic"/> to "TEXCOORD" and <see cref="semantic_index"/> to 1).
+		/// </summary>
+		uint32_t semantic_index = 0;
+		/// <summary>
+		/// Format of the element data.
+		/// </summary>
+		format format = format::unknown;
+		/// <summary>
+		/// Index of the vertex buffer binding.
+		/// </summary>
+		uint32_t buffer_binding = 0;
+		/// <summary>
+		/// Offset (in bytes) from the start of the vertex to this element.
+		/// </summary>
+		uint32_t offset = 0;
+		/// <summary>
+		/// Stride of the entire vertex (this has to be consistent for all elements per vertex buffer binding).
+		/// Set to zero in case this is unknown.
+		/// </summary>
+		uint32_t stride = 0;
+		/// <summary>
+		/// Number of instances to draw using the same per-instance data before advancing by one element.
+		/// This has to be consistent for all elements per vertex buffer binding.
+		/// Set to zero to indicate that this element is per-vertex rather than per-instance.
+		/// </summary>
+		uint32_t instance_step_rate = 0;
+	};
+
+	/// <summary>
+	/// Describes the state of the stream-output stage.
+	/// </summary>
+	struct stream_output_desc
+	{
+		/// <summary>
+		/// Index of the stream output stream to be sent to the rasterizer stage.
+		/// </summary>
+		uint32_t rasterized_stream = 0;
+	};
+
+	/// <summary>
+	/// Describes the state of the output-merger stage.
+	/// </summary>
+	struct blend_desc
+	{
+		/// <summary>
+		/// Use alpha-to-coverage as a multisampling technique when setting a pixel to a render target.
+		/// </summary>
+		bool alpha_to_coverage_enable = false;
+		/// <summary>
+		/// Enable or disable blending for each render target.
+		/// </summary>
+		/// <seealso cref="device_caps::independent_blend"/>
+		bool blend_enable[8] = { false, false, false, false, false, false, false, false };
+		/// <summary>
+		/// Enable or disable a logical operation for each render target.
+		/// </summary>
+		/// <seealso cref="device_caps::logic_op"/>
+		bool logic_op_enable[8] = { false, false, false, false, false, false, false, false };
+		/// <summary>
+		/// Source to use for the RGB value that the pixel shader outputs.
+		/// </summary>
+		/// <seealso cref="device_caps::independent_blend"/>
+		blend_factor source_color_blend_factor[8] = { blend_factor::one, blend_factor::one, blend_factor::one, blend_factor::one, blend_factor::one, blend_factor::one, blend_factor::one, blend_factor::one };
+		/// <summary>
+		/// Destination to use for the current RGB value in the render target.
+		/// </summary>
+		/// <seealso cref="device_caps::independent_blend"/>
+		blend_factor dest_color_blend_factor[8] = { blend_factor::zero, blend_factor::zero, blend_factor::zero, blend_factor::zero, blend_factor::zero, blend_factor::zero, blend_factor::zero, blend_factor::zero };
+		/// <summary>
+		/// Operation to use to combine <see cref="source_color_blend_factor"/> and <see cref="dest_color_blend_factor"/>.
+		/// </summary>
+		/// <seealso cref="device_caps::independent_blend"/>
+		blend_op color_blend_op[8] = { blend_op::add, blend_op::add, blend_op::add, blend_op::add, blend_op::add, blend_op::add, blend_op::add, blend_op::add };
+		/// <summary>
+		/// Source to use for the alpha value that the pixel shader outputs.
+		/// </summary>
+		/// <seealso cref="device_caps::independent_blend"/>
+		blend_factor source_alpha_blend_factor[8] = { blend_factor::one, blend_factor::one, blend_factor::one, blend_factor::one, blend_factor::one, blend_factor::one, blend_factor::one, blend_factor::one };
+		/// <summary>
+		/// Destination to use for the current alpha value in the render target.
+		/// </summary>
+		/// <seealso cref="device_caps::independent_blend"/>
+		blend_factor dest_alpha_blend_factor[8] = { blend_factor::zero, blend_factor::zero, blend_factor::zero, blend_factor::zero, blend_factor::zero, blend_factor::zero, blend_factor::zero, blend_factor::zero };
+		/// <summary>
+		/// Operation to use to combine <see cref="source_alpha_blend_factor"/> and <see cref="dest_alpha_blend_factor"/>.
+		/// </summary>
+		/// <seealso cref="device_caps::independent_blend"/>
+		blend_op alpha_blend_op[8] = { blend_op::add, blend_op::add, blend_op::add, blend_op::add, blend_op::add, blend_op::add, blend_op::add, blend_op::add };
+		/// <summary>
+		/// Constant RGBA value to use when <see cref="source_color_blend_factor"/> or <see cref="dest_color_blend_factor"/> is <see cref="blend_factor::constant_color"/>.
+		/// </summary>
+		float blend_constant[4] = { 1.0f, 1.0f, 1.0f, 1.0f };
+		/// <summary>
+		/// Logical operation for each render target. Ignored if <see cref="logic_op_enable"/> is <see langword="false"/>.
+		/// </summary>
+		/// <seealso cref="device_caps::logic_op"/>
+		logic_op logic_op[8] = { logic_op::noop, logic_op::noop, logic_op::noop, logic_op::noop, logic_op::noop, logic_op::noop, logic_op::noop, logic_op::noop };
+		/// <summary>
+		/// A write mask specifying which color components are written to each render target. Bitwise combination of <c>0x1</c> for red, <c>0x2</c> for green, <c>0x4</c> for blue and <c>0x8</c> for alpha.
+		/// </summary>
+		uint8_t render_target_write_mask[8] = { 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF };
+	};
+
+	/// <summary>
+	/// Describes the state of the rasterizer stage.
+	/// </summary>
+	struct rasterizer_desc
+	{
+		/// <summary>
+		/// Fill mode to use when rendering triangles.
+		/// </summary>
+		/// <seealso cref="device_caps::fill_mode_non_solid"/>
+		fill_mode fill_mode = fill_mode::solid;
+		/// <summary>
+		/// Triangles facing the specified direction are not drawn.
+		/// </summary>
+		cull_mode cull_mode = cull_mode::back;
+		/// <summary>
+		/// Determines if a triangle is front or back-facing.
+		/// </summary>
+		bool front_counter_clockwise = false;
+		/// <summary>
+		/// Depth value added to a given pixel.
+		/// </summary>
+		float depth_bias = 0.0f;
+		/// <summary>
+		/// Maximum depth bias of a pixel.
+		/// </summary>
+		float depth_bias_clamp = 0.0f;
+		/// <summary>
+		/// Scalar on the slope of a given pixel.
+		/// </summary>
+		float slope_scaled_depth_bias = 0.0f;
+		/// <summary>
+		/// Enable or disable clipping based on distance.
+		/// </summary>
+		bool depth_clip_enable = true;
+		/// <summary>
+		/// Enable or disable scissor testing (scissor rectangle culling).
+		/// </summary>
+		bool scissor_enable = false;
+		/// <summary>
+		/// Use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing render targets.
+		/// </summary>
+		bool multisample_enable = false;
+		/// <summary>
+		/// Enable or disable line antialiasing. Only applies if doing line drawing and <see cref="multisample_enable"/> is <see langword="false"/>.
+		/// </summary>
+		bool antialiased_line_enable = false;
+		/// <summary>
+		/// Enable or disable conservative rasterization mode.
+		/// </summary>
+		/// <seealso cref="device_caps::conservative_rasterization"/>
+		uint32_t conservative_rasterization = 0;
+	};
+
+	/// <summary>
+	/// Describes the state of the depth-stencil stage.
+	/// </summary>
+	struct depth_stencil_desc
+	{
+		/// <summary>
+		/// Enable or disable depth testing.
+		/// </summary>
+		bool depth_enable = true;
+		/// <summary>
+		/// Enable or disable writes to the depth-stencil buffer.
+		/// </summary>
+		bool depth_write_mask = true;
+		/// <summary>
+		/// Comparison function to use to compare new depth value from a fragment against current depth value in the depth-stencil buffer.
+		/// </summary>
+		compare_op depth_func = compare_op::less;
+		/// <summary>
+		/// Enable or disable stencil testing.
+		/// </summary>
+		bool stencil_enable = false;
+		/// <summary>
+		/// Mask applied to stencil values read from the depth-stencil buffer.
+		/// </summary>
+		uint8_t stencil_read_mask = 0xFF;
+		/// <summary>
+		/// Mask applied to stencil values written to the depth-stencil buffer.
+		/// </summary>
+		uint8_t stencil_write_mask = 0xFF;
+		/// <summary>
+		/// Reference value to perform against when doing stencil testing.
+		/// </summary>
+		uint8_t stencil_reference_value = 0;
+		/// <summary>
+		/// Comparison function to use to compare new stencil value from a fragment against current stencil value for pixels whose surface normal is facing towards the camera.
+		/// </summary>
+		compare_op front_stencil_func = compare_op::always;
+		/// <summary>
+		/// Stencil operation to perform when stencil testing and depth testing both pass for pixels whose surface normal is facing towards the camera.
+		/// </summary>
+		stencil_op front_stencil_pass_op = stencil_op::keep;
+		/// <summary>
+		/// Stencil operation to perform when stencil testing fails for pixels whose surface normal is towards the camera.
+		/// </summary>
+		stencil_op front_stencil_fail_op = stencil_op::keep;
+		/// <summary>
+		/// Stencil operation to perform when stencil testing passes and depth testing fails for pixels whose surface normal is facing towards the camera.
+		/// </summary>
+		stencil_op front_stencil_depth_fail_op = stencil_op::keep;
+		/// <summary>
+		/// Comparison function to use to compare new stencil value from a fragment against current stencil value for pixels whose surface normal is facing away from the camera.
+		/// </summary>
+		compare_op back_stencil_func = compare_op::always;
+		/// <summary>
+		/// Stencil operation to perform when stencil testing and depth testing both pass for pixels whose surface normal is facing away from the camera.
+		/// </summary>
+		stencil_op back_stencil_pass_op = stencil_op::keep;
+		/// <summary>
+		/// Stencil operation to perform when stencil testing fails for pixels whose surface normal is facing away from the camera.
+		/// </summary>
+		stencil_op back_stencil_fail_op = stencil_op::keep;
+		/// <summary>
+		/// Stencil operation to perform when stencil testing passes and depth testing fails for pixels whose surface normal is facing away from the camera.
+		/// </summary>
+		stencil_op back_stencil_depth_fail_op = stencil_op::keep;
+	};
+
+	/// <summary>
+	/// The available pipeline sub-object types.
+	/// </summary>
+	enum class pipeline_subobject_type : uint32_t
+	{
+		unknown,
+		/// <summary>
+		/// Vertex shader to use.
+		/// Sub-object data is a pointer to a <see cref="shader_desc"/>.
+		/// </summary>
+		/// <seealso cref="shader_stage::vertex"/>
+		/// <seealso cref="pipeline_stage::vertex_shader"/>
+		vertex_shader,
+		/// <summary>
+		/// Hull shader to use.
+		/// Sub-object data is a pointer to a <see cref="shader_desc"/>.
+		/// </summary>
+		/// <seealso cref="shader_stage::hull"/>
+		/// <seealso cref="pipeline_stage::hull_shader"/>
+		hull_shader,
+		/// <summary>
+		/// Domain shader to use.
+		/// Sub-object data is a pointer to a <see cref="shader_desc"/>.
+		/// </summary>
+		/// <seealso cref="shader_stage::domain"/>
+		/// <seealso cref="pipeline_stage::domain_shader"/>
+		domain_shader,
+		/// <summary>
+		/// Geometry shader to use.
+		/// Sub-object data is a pointer to a <see cref="shader_desc"/>.
+		/// </summary>
+		/// <seealso cref="shader_stage::geometry"/>
+		/// <seealso cref="pipeline_stage::geometry_shader"/>
+		geometry_shader,
+		/// <summary>
+		/// Pixel shader to use.
+		/// Sub-object data is a pointer to a <see cref="shader_desc"/>.
+		/// </summary>
+		/// <seealso cref="shader_stage::pixel"/>
+		/// <seealso cref="pipeline_stage::pixel_shader"/>
+		pixel_shader,
+		/// <summary>
+		/// Compute shader to use.
+		/// Sub-object data is a pointer to a <see cref="shader_desc"/>.
+		/// </summary>
+		/// <seealso cref="shader_stage::compute"/>
+		/// <seealso cref="pipeline_stage::compute_shader"/>
+		compute_shader,
+		/// <summary>
+		/// Vertex layout for the input-assembler stage.
+		/// Sub-object data is a pointer to an array of <see cref="input_element"/>.
+		/// </summary>
+		/// <seealso cref="pipeline_stage::input_assembler"/>
+		input_layout,
+		/// <summary>
+		/// State of the stream-output stage.
+		/// Sub-object data is a pointer to a <see cref="stream_output_desc"/>.
+		/// </summary>
+		/// <seealso cref="pipeline_stage::stream_output"/>
+		stream_output_state,
+		/// <summary>
+		/// State of the output-merger stage.
+		/// Sub-object data is a pointer to a <see cref="blend_desc"/>.
+		/// </summary>
+		/// <seealso cref="pipeline_stage::output_merger"/>
+		blend_state,
+		/// <summary>
+		/// State of the rasterizer stage.
+		/// Sub-object data is a pointer to a <see cref="rasterizer_desc"/>.
+		/// </summary>
+		/// <seealso cref="pipeline_stage::rasterizer"/>
+		rasterizer_state,
+		/// <summary>
+		/// State of the depth-stencil stage.
+		/// Sub-object data is a pointer to a <see cref="depth_stencil_desc"/>.
+		/// </summary>
+		/// <seealso cref="pipeline_stage::depth_stencil"/>
+		depth_stencil_state,
+		/// <summary>
+		/// Primitive topology to use when rendering.
+		/// Sub-object data is a pointer to a <see cref="primitive_topology"/> value.
+		/// </summary>
+		primitive_topology,
+		/// <summary>
+		/// Format of the depth-stencil view that may be used with this pipeline.
+		/// Sub-object data is a pointer to a <see cref="format"/> value.
+		/// </summary>
+		depth_stencil_format,
+		/// <summary>
+		/// Formats of the render target views that may be used with this pipeline.
+		/// Sub-object data is a pointer to an array of <see cref="format"/> values.
+		/// </summary>
+		render_target_formats,
+		/// <summary>
+		/// Mask applied to the coverage mask for a fragment during rasterization.
+		/// Sub-object data is a pointer to a 32-bit unsigned integer value.
+		/// </summary>
+		sample_mask,
+		/// <summary>
+		/// Number of samples used in rasterization.
+		/// Sub-object data is a pointer to a 32-bit unsigned integer value.
+		/// </summary>
+		sample_count,
+		/// <summary>
+		/// Maximum number of viewports that may be bound via <see cref="command_list::bind_viewports"/> with this pipeline.
+		/// Sub-object data is a pointer to a 32-bit unsigned integer value.
+		/// </summary>
+		viewport_count,
+		/// <summary>
+		/// States that may be dynamically updated via <see cref="command_list::bind_pipeline_states"/> after binding this pipeline.
+		/// Sub-object data is a pointer to an array of <see cref="dynamic_state"/> values.
+		/// </summary>
+		dynamic_pipeline_states,
+		/// <summary>
+		/// Maximum number of vertices a draw call with this pipeline will draw.
+		/// Sub-object data is a pointer to a 32-bit unsigned integer value.
+		/// </summary>
+		max_vertex_count
+	};
+
+	/// <summary>
+	/// Describes a pipeline sub-object.
+	/// </summary>
+	struct pipeline_subobject
+	{
+		/// <summary>
+		/// Type of the specified sub-object <see cref="data"/>.
+		/// </summary>
+		pipeline_subobject_type type = pipeline_subobject_type::unknown;
+		/// <summary>
+		/// Number of sub-object descriptions.
+		/// This should usually be 1, except for array sub-objects like <see cref="pipeline_subobject_type::render_target_formats"/> (where this specifies the number of render targets) or <see cref="pipeline_subobject_type::dynamic_pipeline_states"/>.
+		/// </summary>
+		uint32_t count = 0;
+		/// <summary>
+		/// Pointer to an array of sub-object descriptions (which should be as large as the specified <see cref="count"/>).
+		/// Depending on the sub-object <see cref="type"/> this should be a pointer to a <see cref="shader_desc"/>, <see cref="blend_desc"/>, <see cref="rasterizer_desc"/>, <see cref="depth_stencil_desc"/> or ...
+		/// </summary>
+		void *data = nullptr;
+	};
+
+	/// <summary>
+	/// An opaque handle to a pipeline state object.
+	/// <para>In D3D9, D3D10, D3D11 or D3D12 this is a pointer to a 'IDirect3D(...)Shader', 'ID3D10(...)(Shader/State)', 'ID3D11(...)(Shader/State)' or 'ID3D12PipelineState' object, in Vulkan a 'VkPipeline' handle.</para>
+	/// </summary>
+	RESHADE_DEFINE_HANDLE(pipeline);
+
+	/// <summary>
+	/// A constant buffer resource descriptor.
+	/// </summary>
+	struct buffer_range
+	{
+		/// <summary>
+		/// Constant buffer resource.
+		/// </summary>
+		resource buffer = { 0 };
+		/// <summary>
+		/// Offset from the start of the buffer resource (in bytes).
+		/// </summary>
+		uint64_t offset = 0;
+		/// <summary>
+		/// Number of elements this range covers in the buffer resource (in bytes).
+		/// Set to -1 (UINT64_MAX) to indicate that the whole buffer should be used.
+		/// </summary>
+		uint64_t size = UINT64_MAX;
+	};
+
+	/// <summary>
+	/// A combined sampler and resource view descriptor.
+	/// </summary>
+	struct sampler_with_resource_view
+	{
+		/// <summary>
+		/// Sampler to sampler the shader resource view with.
+		/// </summary>
+		sampler sampler = { 0 };
+		/// <summary>
+		/// Shader resource view.
+		/// </summary>
+		resource_view view = { 0 };
+	};
+
+	/// <summary>
+	/// An opaque handle to a descriptor set.
+	/// <para>In Vulkan this is a 'VkDescriptorSet' handle.</para>
+	/// </summary>
+	RESHADE_DEFINE_HANDLE(descriptor_set);
+
+	/// <summary>
+	/// All information needed to copy descriptors between descriptor sets.
+	/// </summary>
+	struct descriptor_set_copy
+	{
+		/// <summary>
+		/// Descriptor set to copy from.
+		/// </summary>
+		descriptor_set source_set = { 0 };
+		/// <summary>
+		/// Index of the binding in the source descriptor set.
+		/// </summary>
+		uint32_t source_binding = 0;
+		/// <summary>
+		/// Array index in the specified source binding to begin copying from.
+		/// </summary>
+		uint32_t source_array_offset = 0;
+		/// <summary>
+		/// Descriptor set to copy to.
+		/// </summary>
+		descriptor_set dest_set = { 0 };
+		/// <summary>
+		/// Index of the binding in the destination descriptor set.
+		/// </summary>
+		uint32_t dest_binding = 0;
+		/// <summary>
+		/// Array index in the specified destination binding to begin copying to.
+		/// </summary>
+		uint32_t dest_array_offset = 0;
+		/// <summary>
+		/// Number of descriptors to copy.
+		/// </summary>
+		uint32_t count = 0;
+	};
+
+	/// <summary>
+	/// All information needed to update descriptors in a descriptor set.
+	/// </summary>
+	struct descriptor_set_update
+	{
+		/// <summary>
+		/// Descriptor set to update.
+		/// </summary>
+		descriptor_set set = { 0 };
+		/// <summary>
+		/// OpenGL/Vulkan binding index in the descriptor set.
+		/// In D3D this is equivalent to the offset (in descriptors) from the start of the set.
+		/// </summary>
+		uint32_t binding = 0;
+		/// <summary>
+		/// Array index in the specified <see cref="binding"/> to begin updating at.
+		/// Only meaningful in Vulkan, in OpenGL and other APIs this has to be 0 (since each GLSL array element gets a separate binding index).
+		/// </summary>
+		uint32_t array_offset = 0;
+		/// <summary>
+		/// Number of descriptors to update, starting at the specified <see cref="binding"/>.
+		/// If the specified <see cref="binding"/> has fewer than <see cref="count"/> array elements starting from <see cref="array_offset"/>, then the remainder will be used to update the subsequent binding starting at array element zero, recursively.
+		/// </summary>
+		uint32_t count = 0;
+		/// <summary>
+		/// Type of the specified <see cref="descriptors"/>.
+		/// </summary>
+		descriptor_type type = descriptor_type::sampler;
+		/// <summary>
+		/// Pointer to an array of descriptors to update in the set (which should be as large as the specified <see cref="count"/>).
+		/// Depending on the descriptor <see cref="type"/> this should be pointer to an array of <see cref="buffer_range"/>, <see cref="resource_view"/>, <see cref="sampler"/> or <see cref="sampler_with_resource_view"/>.
+		/// </summary>
+		const void *descriptors = nullptr;
+	};
+
+	/// <summary>
+	/// An opaque handle to a descriptor pool.
+	/// <para>In D3D12 this is a pointer to a 'ID3D12DescriptorHeap' object, in Vulkan a 'VkDescriptorPool' handle.</para>
+	/// </summary>
+	RESHADE_DEFINE_HANDLE(descriptor_pool);
+
+	/// <summary>
+	/// The available query types.
+	/// </summary>
+	enum class query_type
+	{
+		occlusion = 0,
+		binary_occlusion = 1,
+		timestamp = 2,
+		pipeline_statistics = 3,
+		stream_output_statistics_0 = 4,
+		stream_output_statistics_1,
+		stream_output_statistics_2,
+		stream_output_statistics_3
+	};
+
+	/// <summary>
+	/// An opaque handle to a query pool.
+	/// <para>In D3D12 this is a pointer to a 'ID3D12QueryHeap' object, in Vulkan a 'VkQueryPool' handle.</para>
+	/// </summary>
+	RESHADE_DEFINE_HANDLE(query_pool);
+
+	/// <summary>
+	/// A list of all possible render pipeline states that can be set independent of pipeline state objects.
+	/// <para>Support for these varies between render APIs (e.g. modern APIs like D3D12 and Vulkan support much less dynamic states than D3D9).</para>
+	/// </summary>
+	enum class dynamic_state
+	{
+		unknown = 0,
+
+		alpha_test_enable = 15,
+		alpha_reference_value = 24,
+		alpha_func = 25,
+		srgb_write_enable = 194,
+		primitive_topology = 1000,
+		sample_mask = 162,
+
+		// Blend state
+
+		alpha_to_coverage_enable = 1003,
+		blend_enable = 27,
+		logic_op_enable = 1004,
+		source_color_blend_factor = 19,
+		dest_color_blend_factor = 20,
+		color_blend_op = 171,
+		source_alpha_blend_factor = 207,
+		dest_alpha_blend_factor = 208,
+		alpha_blend_op = 209,
+		logic_op = 1005,
+		blend_constant = 193,
+		render_target_write_mask = 168,
+
+		// Rasterizer state
+
+		fill_mode = 8,
+		cull_mode = 22,
+		front_counter_clockwise = 1001,
+		depth_bias = 195,
+		depth_bias_clamp = 1002,
+		depth_bias_slope_scaled = 175,
+		depth_clip_enable = 136,
+		scissor_enable = 174,
+		multisample_enable = 161,
+		antialiased_line_enable = 176,
+
+		// Depth-stencil state
+
+		depth_enable = 7,
+		depth_write_mask = 14,
+		depth_func = 23,
+		stencil_enable = 52,
+		stencil_read_mask = 58,
+		stencil_write_mask = 59,
+		stencil_reference_value = 57,
+		front_stencil_func = 56,
+		front_stencil_pass_op = 55,
+		front_stencil_fail_op = 53,
+		front_stencil_depth_fail_op = 54,
+		back_stencil_func = 189,
+		back_stencil_pass_op = 188,
+		back_stencil_fail_op = 186,
+		back_stencil_depth_fail_op = 187
+	};
+
+	/// <summary>
+	/// Describes a rectangle.
+	/// </summary>
+	struct rect
+	{
+		int32_t left = 0;
+		int32_t top = 0;
+		int32_t right = 0;
+		int32_t bottom = 0;
+
+		constexpr uint32_t width() const { return right - left; }
+		constexpr uint32_t height() const { return bottom - top; }
+	};
+
+	/// <summary>
+	/// Describes a render viewport.
+	/// </summary>
+	struct viewport
+	{
+		float x = 0.0f;
+		float y = 0.0f;
+		float width = 0.0f;
+		float height = 0.0f;
+		float min_depth = 0.0f;
+		float max_depth = 1.0f;
+	};
+}
diff --git a/src/3rd party/reshade/reshade_api_resource.hpp b/src/3rd party/reshade/reshade_api_resource.hpp
new file mode 100644
index 0000000..e4cb2d5
--- /dev/null
+++ b/src/3rd party/reshade/reshade_api_resource.hpp	
@@ -0,0 +1,526 @@
+/*
+ * Copyright (C) 2021 Patrick Mours
+ * SPDX-License-Identifier: BSD-3-Clause OR MIT
+ */
+
+#pragma once
+
+#define RESHADE_DEFINE_HANDLE(name) \
+	typedef struct { uint64_t handle; } name; \
+	constexpr bool operator< (name lhs, name rhs) { return lhs.handle < rhs.handle; } \
+	constexpr bool operator!=(name lhs, name rhs) { return lhs.handle != rhs.handle; } \
+	constexpr bool operator!=(name lhs, uint64_t rhs) { return lhs.handle != rhs; } \
+	constexpr bool operator==(name lhs, name rhs) { return lhs.handle == rhs.handle; } \
+	constexpr bool operator==(name lhs, uint64_t rhs) { return lhs.handle == rhs; }
+
+#define RESHADE_DEFINE_ENUM_FLAG_OPERATORS(type) \
+	constexpr type operator~(type a) { return static_cast<type>(~static_cast<uint32_t>(a)); } \
+	inline type &operator&=(type &a, type b) { return reinterpret_cast<type &>(reinterpret_cast<uint32_t &>(a) &= static_cast<uint32_t>(b)); } \
+	constexpr type operator&(type a, type b) { return static_cast<type>(static_cast<uint32_t>(a) & static_cast<uint32_t>(b)); } \
+	inline type &operator|=(type &a, type b) { return reinterpret_cast<type &>(reinterpret_cast<uint32_t &>(a) |= static_cast<uint32_t>(b)); } \
+	constexpr type operator|(type a, type b) { return static_cast<type>(static_cast<uint32_t>(a) | static_cast<uint32_t>(b)); } \
+	inline type &operator^=(type &a, type b) { return reinterpret_cast<type &>(reinterpret_cast<uint32_t &>(a) ^= static_cast<uint32_t>(b)); } \
+	constexpr type operator^(type a, type b) { return static_cast<type>(static_cast<uint32_t>(a) ^ static_cast<uint32_t>(b)); } \
+	constexpr bool operator==(type lhs, uint32_t rhs) { return static_cast<uint32_t>(lhs) == rhs; } \
+	constexpr bool operator!=(type lhs, uint32_t rhs) { return static_cast<uint32_t>(lhs) != rhs; }
+
+#include "reshade_api_format.hpp"
+
+namespace reshade::api
+{
+	/// <summary>
+	/// The available comparison types.
+	/// </summary>
+	enum class compare_op : uint32_t
+	{
+		never = 0,
+		less = 1,
+		equal = 2,
+		less_equal = 3,
+		greater = 4,
+		not_equal = 5,
+		greater_equal = 6,
+		always = 7
+	};
+
+	/// <summary>
+	/// The available filtering modes used for texture sampling operations.
+	/// </summary>
+	enum class filter_mode : uint32_t
+	{
+		min_mag_mip_point = 0,
+		min_mag_point_mip_linear = 0x1,
+		min_point_mag_linear_mip_point = 0x4,
+		min_point_mag_mip_linear = 0x5,
+		min_linear_mag_mip_point = 0x10,
+		min_linear_mag_point_mip_linear = 0x11,
+		min_mag_linear_mip_point = 0x14,
+		min_mag_mip_linear = 0x15,
+		anisotropic = 0x55,
+		compare_min_mag_mip_point = 0x80,
+		compare_min_mag_point_mip_linear = 0x81,
+		compare_min_point_mag_linear_mip_point = 0x84,
+		compare_min_point_mag_mip_linear = 0x85,
+		compare_min_linear_mag_mip_point = 0x90,
+		compare_min_linear_mag_point_mip_linear = 0x91,
+		compare_min_mag_linear_mip_point = 0x94,
+		compare_min_mag_mip_linear = 0x95,
+		compare_anisotropic = 0xd5
+	};
+
+	/// <summary>
+	/// Specifies behavior of sampling with texture coordinates outside a texture resource.
+	/// </summary>
+	enum class texture_address_mode : uint32_t
+	{
+		wrap = 1,
+		mirror = 2,
+		clamp = 3,
+		border = 4,
+		mirror_once = 5
+	};
+
+	/// <summary>
+	/// Describes a sampler state.
+	/// </summary>
+	struct sampler_desc
+	{
+		/// <summary>
+		/// Filtering mode to use when sampling a texture.
+		/// </summary>
+		filter_mode filter = filter_mode::min_mag_mip_linear;
+		/// <summary>
+		/// Method to use for resolving U texture coordinates outside 0 to 1 range.
+		/// </summary>
+		texture_address_mode address_u = texture_address_mode::clamp;
+		/// <summary>
+		/// Method to use for resolving V texture coordinates outside 0 to 1 range.
+		/// </summary>
+		texture_address_mode address_v = texture_address_mode::clamp;
+		/// <summary>
+		/// Method to use for resolving W texture coordinates outside 0 to 1 range.
+		/// </summary>
+		texture_address_mode address_w = texture_address_mode::clamp;
+		/// <summary>
+		/// Offset applied to the calculated mipmap level when sampling a texture.
+		/// </summary>
+		float mip_lod_bias = 0.0f;
+		/// <summary>
+		/// Clamping value to use when filtering mode is <see cref="filter_mode::anisotropic"/>.
+		/// </summary>
+		float max_anisotropy = 1.0f;
+		/// <summary>
+		/// Comparison function to use to compare sampled data against existing sampled data.
+		/// </summary>
+		compare_op compare_op = compare_op::never;
+		/// <summary>
+		/// RGBA value to return for texture coordinates outside 0 to 1 range when addressing mode is <see cref="texture_address_mode::border"/>.
+		/// </summary>
+		float border_color[4] = { 1.0f, 1.0f, 1.0f, 1.0f };
+		/// <summary>
+		/// Lower end of the mipmap range to clamp access to.
+		/// </summary>
+		float min_lod = -FLT_MAX;
+		/// <summary>
+		/// Upper end of the mipmap range to clamp access to.
+		/// </summary>
+		float max_lod = +FLT_MAX;
+	};
+
+	/// <summary>
+	/// An opaque handle to a sampler state object.
+	/// <para>Depending on the render API this can be a pointer to a 'ID3D10SamplerState', 'ID3D11SamplerState' or a 'D3D12_CPU_DESCRIPTOR_HANDLE' (to a sampler descriptor) or 'VkSampler' handle.</para>
+	/// </summary>
+	RESHADE_DEFINE_HANDLE(sampler);
+
+	/// <summary>
+	/// The available memory mapping access types.
+	/// </summary>
+	enum class map_access
+	{
+		read_only = 1,
+		write_only,
+		read_write,
+		write_discard
+	};
+
+	/// <summary>
+	/// The available memory heap types, which give a hint as to where to place the memory allocation for a resource.
+	/// </summary>
+	enum class memory_heap : uint32_t
+	{
+		unknown, // Usually indicates a resource that is reserved, but not yet bound to any memory.
+		gpu_only,
+		// Upload heap
+		cpu_to_gpu,
+		// Readback heap
+		gpu_to_cpu,
+		cpu_only,
+		custom
+	};
+
+	/// <summary>
+	/// The available resource types. The type of a resource is specified during creation and is immutable.
+	/// Various operations may have special requirements on the type of resources they operate on (e.g. copies can only happen between resources of the same type, ...).
+	/// </summary>
+	enum class resource_type : uint32_t
+	{
+		unknown,
+		buffer,
+		texture_1d,
+		texture_2d,
+		texture_3d,
+		surface // Special type for resources that are implicitly both resource and render target view.
+	};
+
+	/// <summary>
+	/// A list of flags that describe additional parameters of a resource.
+	/// </summary>
+	enum class resource_flags : uint32_t
+	{
+		none = 0,
+		dynamic = (1 << 3),
+		cube_compatible = (1 << 2),
+		generate_mipmaps = (1 << 0),
+		shared = (1 << 1),
+		shared_nt_handle = (1 << 11),
+		structured = (1 << 6),
+		sparse_binding = (1 << 18)
+	};
+	RESHADE_DEFINE_ENUM_FLAG_OPERATORS(resource_flags);
+
+	/// <summary>
+	/// A list of flags that specify how a resource is to be used.
+	/// This needs to be specified during creation and is also used to transition between different resource states within a command list.
+	/// </summary>
+	enum class resource_usage : uint32_t
+	{
+		undefined = 0,
+
+		index_buffer = 0x2,
+		vertex_buffer = 0x1,
+		constant_buffer = 0x8000,
+		stream_output = 0x100,
+		indirect_argument = 0x200,
+
+		depth_stencil = 0x30,
+		depth_stencil_read = 0x20,
+		depth_stencil_write = 0x10,
+		render_target = 0x4,
+		shader_resource = 0xC0,
+		shader_resource_pixel = 0x80,
+		shader_resource_non_pixel = 0x40,
+		unordered_access = 0x8,
+
+		copy_dest = 0x400,
+		copy_source = 0x800,
+		resolve_dest = 0x1000,
+		resolve_source = 0x2000,
+
+		// The following are special resource states and may only be used in barriers:
+
+		general = 0x80000000,
+		present = 0x80000000 | render_target | copy_source,
+		cpu_access = vertex_buffer | index_buffer | shader_resource | indirect_argument | copy_source
+	};
+	RESHADE_DEFINE_ENUM_FLAG_OPERATORS(resource_usage);
+
+	/// <summary>
+	/// Describes a resource, such as a buffer or texture.
+	/// </summary>
+	struct [[nodiscard]] resource_desc
+	{
+		constexpr resource_desc() : texture() {}
+		constexpr resource_desc(uint64_t size, memory_heap heap, resource_usage usage) :
+			type(resource_type::buffer), buffer({ size }), heap(heap), usage(usage) {}
+		constexpr resource_desc(uint32_t width, uint32_t height, uint16_t layers, uint16_t levels, format format, uint16_t samples, memory_heap heap, resource_usage usage, resource_flags flags = resource_flags::none) :
+			type(resource_type::texture_2d), texture({ width, height, layers, levels, format, samples }), heap(heap), usage(usage), flags(flags) {}
+		constexpr resource_desc(resource_type type, uint32_t width, uint32_t height, uint16_t depth_or_layers, uint16_t levels, format format, uint16_t samples, memory_heap heap, resource_usage usage, resource_flags flags = resource_flags::none) :
+			type(type), texture({ width, height, depth_or_layers, levels, format, samples }), heap(heap), usage(usage), flags(flags) {}
+
+		/// <summary>
+		/// Type of the resource.
+		/// </summary>
+		resource_type type = resource_type::unknown;
+
+		union
+		{
+			/// <summary>
+			/// Used when resource type is a buffer.
+			/// </summary>
+			struct
+			{
+				/// <summary>
+				/// Size of the buffer (in bytes).
+				/// </summary>
+				uint64_t size = 0;
+				/// <summary>
+				/// Structure stride for structured buffers (in bytes), otherwise zero.
+				/// </summary>
+				uint32_t stride = 0;
+			} buffer;
+
+			/// <summary>
+			/// Used when resource type is a texture or surface.
+			/// </summary>
+			struct
+			{
+				/// <summary>
+				/// Width of the texture (in texels).
+				/// </summary>
+				uint32_t width = 1;
+				/// <summary>
+				/// If this is a 2D or 3D texture, height of the texture (in texels), otherwise 1.
+				/// </summary>
+				uint32_t height = 1;
+				/// <summary>
+				/// If this is a 3D texture, depth of the texture (in texels), otherwise number of array layers.
+				/// </summary>
+				uint16_t depth_or_layers = 1;
+				/// <summary>
+				/// Maximum number of mipmap levels in the texture, including the base level, so at least 1.
+				/// Can also be zero in case the exact number of mipmap levels is unknown.
+				/// </summary>
+				uint16_t levels = 1;
+				/// <summary>
+				/// Data format of each texel in the texture.
+				/// </summary>
+				format   format = format::unknown;
+				/// <summary>
+				/// The number of samples per texel. Set to a value higher than 1 for multisampling.
+				/// </summary>
+				uint16_t samples = 1;
+			} texture;
+		};
+
+		/// <summary>
+		/// Memory heap the resource allocation is placed in.
+		/// </summary>
+		memory_heap heap = memory_heap::unknown;
+		/// <summary>
+		/// Flags that specify how this resource may be used.
+		/// </summary>
+		resource_usage usage = resource_usage::undefined;
+		/// <summary>
+		/// Flags that describe additional parameters.
+		/// </summary>
+		resource_flags flags = resource_flags::none;
+	};
+
+	/// <summary>
+	/// An opaque handle to a resource object (buffer, texture, ...).
+	/// <para>Resources created by the application are only guaranteed to be valid during event callbacks.
+	/// <para>Depending on the render API this can be a pointer to a 'IDirect3DResource9', 'ID3D10Resource', 'ID3D11Resource' or 'ID3D12Resource' object or a 'VkImage' handle.</para>
+	/// </summary>
+	RESHADE_DEFINE_HANDLE(resource);
+
+	/// <summary>
+	/// The available resource view types. These identify how a resource view interprets the data of its resource.
+	/// </summary>
+	enum class resource_view_type : uint32_t
+	{
+		unknown,
+		buffer,
+		texture_1d,
+		texture_1d_array,
+		texture_2d,
+		texture_2d_array,
+		texture_2d_multisample,
+		texture_2d_multisample_array,
+		texture_3d,
+		texture_cube,
+		texture_cube_array
+	};
+
+	/// <summary>
+	/// Describes a resource view, which specifies how to interpret the data of a resource.
+	/// </summary>
+	struct [[nodiscard]] resource_view_desc
+	{
+		constexpr resource_view_desc() : texture() {}
+		constexpr resource_view_desc(format format, uint64_t offset, uint64_t size) :
+			type(resource_view_type::buffer), format(format), buffer({ offset, size }) {}
+		constexpr resource_view_desc(format format, uint32_t first_level, uint32_t levels, uint32_t first_layer, uint32_t layers) :
+			type(resource_view_type::texture_2d), format(format), texture({ first_level, levels, first_layer, layers }) {}
+		constexpr resource_view_desc(resource_view_type type, format format, uint32_t first_level, uint32_t levels, uint32_t first_layer, uint32_t layers) :
+			type(type), format(format), texture({ first_level, levels, first_layer, layers }) {}
+		constexpr explicit resource_view_desc(format format) : type(resource_view_type::texture_2d), format(format), texture({ 0, 1, 0, 1 }) {}
+
+		/// <summary>
+		/// Resource type the view should interpret the resource data to.
+		/// </summary>
+		resource_view_type type = resource_view_type::unknown;
+		/// <summary>
+		/// Format the view should reinterpret the resource data to (can be different than the format of the resource as long as they are compatible).
+		/// </summary>
+		format format = format::unknown;
+
+		union
+		{
+			/// <summary>
+			/// Used when view type is a buffer.
+			/// </summary>
+			struct
+			{
+				/// <summary>
+				/// Offset from the start of the buffer resource (in bytes).
+				/// </summary>
+				uint64_t offset = 0;
+				/// <summary>
+				/// Number of elements this view covers in the buffer resource (in bytes).
+				/// Set to -1 (UINT64_MAX) to indicate that the entire buffer resource should be used.
+				/// </summary>
+				uint64_t size = UINT64_MAX;
+			} buffer;
+
+			/// <summary>
+			/// Used when view type is a texture.
+			/// </summary>
+			struct
+			{
+				/// <summary>
+				/// Index of the most detailed mipmap level to use. This number has to be between zero and the maximum number of mipmap levels in the texture minus 1.
+				/// </summary>
+				uint32_t first_level = 0;
+				/// <summary>
+				/// Maximum number of mipmap levels for the view of the texture.
+				/// Set to -1 (UINT32_MAX) to indicate that all mipmap levels down to the least detailed should be used.
+				/// </summary>
+				uint32_t level_count = UINT32_MAX;
+				/// <summary>
+				/// Index of the first array layer of the texture array to use. This value is ignored if the texture is not layered.
+				/// </summary>
+				uint32_t first_layer = 0;
+				/// <summary>
+				/// Maximum number of array layers for the view of the texture array. This value is ignored if the texture is not layered.
+				/// Set to -1 (UINT32_MAX) to indicate that all array layers should be used.
+				/// </summary>
+				uint32_t layer_count = UINT32_MAX;
+			} texture;
+		};
+	};
+
+	/// <summary>
+	/// An opaque handle to a resource view object (depth-stencil, render target, shader resource view, ...).
+	/// <para>Resource views created by the application are only guaranteed to be valid during event callbacks.
+	/// <para>Depending on the render API this can be a pointer to a 'IDirect3DResource9', 'ID3D10View' or 'ID3D11View' object, or a 'D3D12_CPU_DESCRIPTOR_HANDLE' (to a view descriptor) or 'VkImageView' handle.</para>
+	/// </summary>
+	RESHADE_DEFINE_HANDLE(resource_view);
+
+	/// <summary>
+	/// Describes a region inside a subresource.
+	/// </summary>
+	struct subresource_box
+	{
+		int32_t left = 0;
+		int32_t top = 0;
+		int32_t front = 0;
+		int32_t right = 0;
+		int32_t bottom = 0;
+		int32_t back = 0;
+
+		constexpr uint32_t width() const { return right - left; }
+		constexpr uint32_t height() const { return bottom - top; }
+		constexpr uint32_t depth() const { return back - front; }
+	};
+
+	/// <summary>
+	/// Describes the data of a subresource.
+	/// </summary>
+	struct subresource_data
+	{
+		/// <summary>
+		/// Pointer to the data.
+		/// </summary>
+		void *data = nullptr;
+		/// <summary>
+		/// Row pitch of the data (added to the data pointer to move between texture rows, unused for buffers and 1D textures).
+		/// </summary>
+		/// <seealso cref="format_row_pitch"/>
+		uint32_t row_pitch = 0;
+		/// <summary>
+		/// Depth pitch of the data (added to the data pointer to move between texture depth/array slices, unused for buffers and 1D/2D textures).
+		/// </summary>
+		/// <seealso cref="format_slice_pitch"/>
+		uint32_t slice_pitch = 0;
+	};
+
+	/// <summary>
+	/// Specifies how the contents of a render target or depth-stencil view are treated at the start of a render pass.
+	/// </summary>
+	enum class render_pass_load_op : uint32_t
+	{
+		load,
+		clear,
+		discard,
+		no_access
+	};
+
+	/// <summary>
+	/// Specifies how the contents of a render target or depth-stencil view are treated at the end of a render pass.
+	/// </summary>
+	enum class render_pass_store_op : uint32_t
+	{
+		store,
+		discard,
+		no_access
+	};
+
+	/// <summary>
+	/// Describes a depth-stencil view and how it is treated at the start and end of a render pass.
+	/// </summary>
+	struct render_pass_depth_stencil_desc
+	{
+		/// <summary>
+		/// Depth-stencil resource view.
+		/// </summary>
+		resource_view view = { 0 };
+		/// <summary>
+		/// Specifies how the depth contents of the depth-stencil view are treated at the start of the render pass.
+		/// </summary>
+		render_pass_load_op depth_load_op = render_pass_load_op::load;
+		/// <summary>
+		/// Specifies how the depth contents of the depth-stencil view are treated at the end of the render pass.
+		/// </summary>
+		render_pass_store_op depth_store_op = render_pass_store_op::store;
+		/// <summary>
+		/// Specifies how the stencil contents of the depth-stencil view are treated at the start of the render pass.
+		/// </summary>
+		render_pass_load_op stencil_load_op = render_pass_load_op::load;
+		/// <summary>
+		/// Specifies how the stencil contents of the depth-stencil view are treated at the end of the render pass.
+		/// </summary>
+		render_pass_store_op stencil_store_op = render_pass_store_op::store;
+		/// <summary>
+		/// Value the depth contents of the depth-stencil resource is cleared to when <see cref="depth_load_op"/> is <see cref="render_pass_load_op::clear"/>.
+		/// </summary>
+		float clear_depth = 0.0f;
+		/// <summary>
+		/// Value the stencil contents of the depth-stencil resource is cleared to when <see cref="stencil_load_op"/> is <see cref="render_pass_load_op::clear"/>.
+		/// </summary>
+		uint8_t clear_stencil = 0;
+	};
+
+	/// <summary>
+	/// Describes a render target view and how it is treated at the start and end of a render pass.
+	/// </summary>
+	struct render_pass_render_target_desc
+	{
+		/// <summary>
+		/// Render target resource view.
+		/// </summary>
+		resource_view view = { 0 };
+		/// <summary>
+		/// Specifies how the contents of the render target view are treated at the start of the render pass.
+		/// </summary>
+		render_pass_load_op load_op = render_pass_load_op::load;
+		/// <summary>
+		/// Specifies how the contents of the render target view are treated at the end of the render pass.
+		/// </summary>
+		render_pass_store_op store_op = render_pass_store_op::store;
+		/// <summary>
+		/// Value the render target resource is cleared to when <see cref="load_op"/> is <see cref="render_pass_load_op::clear"/>.
+		/// </summary>
+		float clear_color[4] = { 0.0f, 0.0f, 0.0f, 0.0f };
+	};
+}
diff --git a/src/3rd party/reshade/reshade_events.hpp b/src/3rd party/reshade/reshade_events.hpp
new file mode 100644
index 0000000..0dcabf3
--- /dev/null
+++ b/src/3rd party/reshade/reshade_events.hpp	
@@ -0,0 +1,1652 @@
+/*
+ * Copyright (C) 2021 Patrick Mours
+ * SPDX-License-Identifier: BSD-3-Clause OR MIT
+ */
+
+#pragma once
+
+#include "reshade_api.hpp"
+
+namespace reshade
+{
+	enum class addon_event : uint32_t
+	{
+		/// <summary>
+		/// Called after successfull device creation, from:
+		/// <list type="bullet">
+		/// <item><description>IDirect3D9::CreateDevice</description></item>
+		/// <item><description>IDirect3D9Ex::CreateDeviceEx</description></item>
+		/// <item><description>IDirect3DDevice9::Reset</description></item>
+		/// <item><description>IDirect3DDevice9Ex::ResetEx</description></item>
+		/// <item><description>D3D10CreateDevice</description></item>
+		/// <item><description>D3D10CreateDevice1</description></item>
+		/// <item><description>D3D10CreateDeviceAndSwapChain</description></item>
+		/// <item><description>D3D10CreateDeviceAndSwapChain1</description></item>
+		/// <item><description>D3D11CreateDevice</description></item>
+		/// <item><description>D3D11CreateDeviceAndSwapChain</description></item>
+		/// <item><description>D3D12CreateDevice</description></item>
+		/// <item><description>glMakeCurrent</description></item>
+		/// <item><description>vkCreateDevice</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device)</c></para>
+		/// </summary>
+		init_device,
+
+		/// <summary>
+		/// Called on device destruction, before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::Reset</description></item>
+		/// <item><description>IDirect3DDevice9Ex::ResetEx</description></item>
+		/// <item><description>IDirect3DDevice9::Release</description></item>
+		/// <item><description>ID3D10Device::Release</description></item>
+		/// <item><description>ID3D11Device::Release</description></item>
+		/// <item><description>ID3D12Device::Release</description></item>
+		/// <item><description>wglDeleteContext</description></item>
+		/// <item><description>vkDestroyDevice</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device)</c></para>
+		/// </summary>
+		destroy_device,
+
+		/// <summary>
+		/// Called after successfull command list creation, from:
+		/// <list type="bullet">
+		/// <item><description>ID3D11Device::CreateDeferredContext</description></item>
+		/// <item><description>ID3D11Device1::CreateDeferredContext1</description></item>
+		/// <item><description>ID3D11Device2::CreateDeferredContext2</description></item>
+		/// <item><description>ID3D11Device3::CreateDeferredContext3</description></item>
+		/// <item><description>ID3D12Device::CreateCommandList</description></item>
+		/// <item><description>ID3D12Device4::CreateCommandList1</description></item>
+		/// <item><description>vkAllocateCommandBuffers</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// In case of D3D9, D3D10, D3D11 and OpenGL this is called during device initialization as well and behaves as if an implicit immediate command list was created.
+		/// </remarks>
+		init_command_list,
+
+		/// <summary>
+		/// Called on command list destruction, before:
+		/// <list type="bullet">
+		/// <item><description>ID3D11CommandList::Release</description></item>
+		/// <item><description>ID3D12CommandList::Release</description></item>
+		/// <item><description>vkFreeCommandBuffers</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list)</c></para>
+		/// </summary>
+		destroy_command_list,
+
+		/// <summary>
+		/// Called after successfull command queue creation, from:
+		/// <list type="bullet">
+		/// <item><description>ID3D12Device::CreateCommandQueue</description></item>
+		/// <item><description>vkCreateDevice (for every queue associated with the device)</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_queue *queue)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// In case of D3D9, D3D10, D3D11 and OpenGL this is called during device initialization as well and behaves as if an implicit command queue was created.
+		/// </remarks>
+		init_command_queue,
+
+		/// <summary>
+		/// Called on command queue destruction, before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12CommandQueue::Release</description></item>
+		/// <item><description>vkDestroyDevice (for every queue associated with the device)</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_queue *queue)</c></para>
+		/// </summary>
+		destroy_command_queue,
+
+		/// <summary>
+		/// Called after successfull swap chain creation, from:
+		/// <list type="bullet">
+		/// <item><description>IDirect3D9::CreateDevice (for the implicit swap chain)</description></item>
+		/// <item><description>IDirect3D9Ex::CreateDeviceEx (for the implicit swap chain)</description></item>
+		/// <item><description>IDirect3D9Device::CreateAdditionalSwapChain</description></item>
+		/// <item><description>IDirect3DDevice9::Reset (for the implicit swap chain)</description></item>
+		/// <item><description>IDirect3DDevice9Ex::ResetEx (for the implicit swap chain)</description></item>
+		/// <item><description>IDXGIFactory::CreateSwapChain</description></item>
+		/// <item><description>IDXGIFactory2::CreateSwapChain(...)</description></item>
+		/// <item><description>IDXGISwapChain::ResizeBuffers</description></item>
+		/// <item><description>IDXGISwapChain3::ResizeBuffers1</description></item>
+		/// <item><description>wglMakeCurrent</description></item>
+		/// <item><description>wglSwapBuffers (after window was resized)</description></item>
+		/// <item><description>vkCreateSwapchainKHR</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::swapchain *swapchain)</c></para>
+		/// </summary>
+		init_swapchain,
+
+		/// <summary>
+		/// Called on swap chain creation, before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3D9::CreateDevice (for the implicit swap chain)</description></item>
+		/// <item><description>IDirect3D9Ex::CreateDeviceEx (for the implicit swap chain)</description></item>
+		/// <item><description>IDirect3D9Device::CreateAdditionalSwapChain</description></item>
+		/// <item><description>IDirect3D9Device::Reset (for the implicit swap chain)</description></item>
+		/// <item><description>IDirect3D9DeviceEx::ResetEx (for the implicit swap chain)</description></item>
+		/// <item><description>IDXGIFactory::CreateSwapChain</description></item>
+		/// <item><description>IDXGIFactory2::CreateSwapChain(...)</description></item>
+		/// <item><description>IDXGISwapChain::ResizeBuffers</description></item>
+		/// <item><description>IDXGISwapChain3::ResizeBuffers1</description></item>
+		/// <item><description>vkCreateSwapchainKHR</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::swapchain_desc &amp;desc, void *hwnd)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To overwrite the swap chain description, modify <c>desc</c> in the callback and return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Is not called in OpenGL (since it is not possible to influence swap chain creation there).
+		/// </remarks>
+		create_swapchain,
+
+		/// <summary>
+		/// Called on swap chain destruction, before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::Release (for the implicit swap chain)</description></item>
+		/// <item><description>IDirect3DSwapChain9::Release</description></item>
+		/// <item><description>IDXGISwapChain::Release</description></item>
+		/// <item><description>wglDeleteContext</description></item>
+		/// <item><description>wglSwapBuffers (after window was resized)</description></item>
+		/// <item><description>vkDestroySwapchainKHR</description></item>
+		/// </list>
+		/// In addition, called when swap chain is reset, before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::Reset (for the implicit swap chain)</description></item>
+		/// <item><description>IDirect3DDevice9Ex::ResetEx (for the implicit swap chain)</description></item>
+		/// <item><description>IDXGISwapChain::ResizeBuffers</description></item>
+		/// <item><description>IDXGISwapChain1::ResizeBuffers1</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::swapchain *swapchain)</c></para>
+		/// </summary>
+		destroy_swapchain,
+
+		/// <summary>
+		/// Called after effect runtime initialization (which happens after swap chain creation or a swap chain buffer resize).
+		/// <para>Callback function signature: <c>void (api::effect_runtime *runtime)</c></para>
+		/// </summary>
+		init_effect_runtime,
+
+		/// <summary>
+		/// Called when an effect runtime is reset or destroyed.
+		/// <para>Callback function signature: <c>void (api::effect_runtime *runtime)</c></para>
+		/// </summary>
+		destroy_effect_runtime,
+
+		/// <summary>
+		/// Called after successfull sampler creation from:
+		/// <list type="bullet">
+		/// <item><description>ID3D10Device::CreateSamplerState</description></item>
+		/// <item><description>ID3D11Device::CreateSamplerState</description></item>
+		/// <item><description>ID3D12Device::CreateSampler</description></item>
+		/// <item><description>vkCreateSampler</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, const api::sampler_desc &amp;desc, api::sampler sampler)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// Is not called in D3D9 (since samplers are loose state there) or OpenGL.
+		/// </remarks>
+		init_sampler,
+
+		/// <summary>
+		/// Called on sampler creation, before:
+		/// <list type="bullet">
+		/// <item><description>ID3D10Device::CreateSamplerState</description></item>
+		/// <item><description>ID3D11Device::CreateSamplerState</description></item>
+		/// <item><description>ID3D12Device::CreateSampler</description></item>
+		/// <item><description>vkCreateSampler</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::device *device, api::sampler_desc &amp;desc)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To overwrite the sampler description, modify <c>desc</c> in the callback and return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Is not called in D3D9 (since samplers are loose state there) or OpenGL.
+		/// </remarks>
+		create_sampler,
+
+		/// <summary>
+		/// Called on sampler destruction, before:
+		/// <list type="bullet">
+		/// <item><description>ID3D10SamplerState::Release</description></item>
+		/// <item><description>ID3D11SamplerState::Release</description></item>
+		/// <item><description>glDeleteSamplers</description></item>
+		/// <item><description>vkDestroySampler</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::sampler sampler)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// Is not called in D3D9 (since samplers are loose state there), D3D12 (since samplers are descriptor handles instead of objects there) or OpenGL.
+		/// </remarks>
+		destroy_sampler,
+
+		/// <summary>
+		/// Called after successfull resource creation from:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::CreateVertexBuffer</description></item>
+		/// <item><description>IDirect3DDevice9::CreateIndexBuffer</description></item>
+		/// <item><description>IDirect3DDevice9::CreateTexture</description></item>
+		/// <item><description>IDirect3DDevice9::CreateCubeTexture</description></item>
+		/// <item><description>IDirect3DDevice9::CreateVolumeTexture</description></item>
+		/// <item><description>IDirect3DDevice9::CreateRenderTargetSurface</description></item>
+		/// <item><description>IDirect3DDevice9::CreateDepthStencilSurface</description></item>
+		/// <item><description>IDirect3DDevice9::CreateOffscreenPlainSurface</description></item>
+		/// <item><description>IDirect3DDevice9Ex::CreateRenderTargetSurfaceEx</description></item>
+		/// <item><description>IDirect3DDevice9Ex::CreateDepthStencilSurfaceEx</description></item>
+		/// <item><description>IDirect3DDevice9Ex::CreateOffscreenPlainSurfaceEx</description></item>
+		/// <item><description>ID3D10Device::CreateBuffer</description></item>
+		/// <item><description>ID3D10Device::CreateTexture1D</description></item>
+		/// <item><description>ID3D10Device::CreateTexture2D</description></item>
+		/// <item><description>ID3D10Device::CreateTexture2D</description></item>
+		/// <item><description>ID3D11Device::CreateBuffer</description></item>
+		/// <item><description>ID3D11Device::CreateTexture1D</description></item>
+		/// <item><description>ID3D11Device::CreateTexture2D</description></item>
+		/// <item><description>ID3D11Device::CreateTexture3D</description></item>
+		/// <item><description>ID3D11Device3::CreateTexture2D</description></item>
+		/// <item><description>ID3D11Device3::CreateTexture3D</description></item>
+		/// <item><description>ID3D12Device::CreateCommittedResource</description></item>
+		/// <item><description>ID3D12Device::CreatePlacedResource</description></item>
+		/// <item><description>ID3D12Device::CreateReservedResource</description></item>
+		/// <item><description>ID3D12Device4::CreateCommittedResource1</description></item>
+		/// <item><description>ID3D12Device4::CreateReservedResource1</description></item>
+		/// <item><description>glBufferData</description></item>
+		/// <item><description>glBufferStorage</description></item>
+		/// <item><description>glNamedBufferData</description></item>
+		/// <item><description>glNamedBufferStorage</description></item>
+		/// <item><description>glTexImage1D</description></item>
+		/// <item><description>glTexImage2D</description></item>
+		/// <item><description>glTexImage2DMultisample</description></item>
+		/// <item><description>glTexImage3D</description></item>
+		/// <item><description>glTexImage3DMultisample</description></item>
+		/// <item><description>glCompressedTexImage1D</description></item>
+		/// <item><description>glCompressedTexImage2D</description></item>
+		/// <item><description>glCompressedTexImage3D</description></item>
+		/// <item><description>glTexStorage1D</description></item>
+		/// <item><description>glTexStorage2D</description></item>
+		/// <item><description>glTexStorage2DMultisample</description></item>
+		/// <item><description>glTexStorage3D</description></item>
+		/// <item><description>glTexStorage3DMultisample</description></item>
+		/// <item><description>glTextureStorage1D</description></item>
+		/// <item><description>glTextureStorage2D</description></item>
+		/// <item><description>glTextureStorage2DMultisample</description></item>
+		/// <item><description>glTextureStorage3D</description></item>
+		/// <item><description>glTextureStorage3DMultisample</description></item>
+		/// <item><description>glRenderbufferStorage</description></item>
+		/// <item><description>glRenderbufferStorageMultisample</description></item>
+		/// <item><description>glNamedRenderbufferStorage</description></item>
+		/// <item><description>glNamedRenderbufferStorageMultisample</description></item>
+		/// <item><description>vkBindBufferMemory</description></item>
+		/// <item><description>vkBindBufferMemory2</description></item>
+		/// <item><description>vkBindImageMemory</description></item>
+		/// <item><description>vkBindImageMemory2</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, const api::resource_desc &amp;desc, const api::subresource_data *initial_data, api::resource_usage initial_state, api::resource resource)</c></para>
+		/// </summary>
+		init_resource,
+
+		/// <summary>
+		/// Called on resource creation, before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::CreateVertexBuffer</description></item>
+		/// <item><description>IDirect3DDevice9::CreateIndexBuffer</description></item>
+		/// <item><description>IDirect3DDevice9::CreateTexture</description></item>
+		/// <item><description>IDirect3DDevice9::CreateCubeTexture</description></item>
+		/// <item><description>IDirect3DDevice9::CreateVolumeTexture</description></item>
+		/// <item><description>IDirect3DDevice9::CreateRenderTargetSurface</description></item>
+		/// <item><description>IDirect3DDevice9::CreateDepthStencilSurface</description></item>
+		/// <item><description>IDirect3DDevice9::CreateOffscreenPlainSurface</description></item>
+		/// <item><description>IDirect3DDevice9Ex::CreateRenderTargetSurfaceEx</description></item>
+		/// <item><description>IDirect3DDevice9Ex::CreateDepthStencilSurfaceEx</description></item>
+		/// <item><description>IDirect3DDevice9Ex::CreateOffscreenPlainSurfaceEx</description></item>
+		/// <item><description>ID3D10Device::CreateBuffer</description></item>
+		/// <item><description>ID3D10Device::CreateTexture1D</description></item>
+		/// <item><description>ID3D10Device::CreateTexture2D</description></item>
+		/// <item><description>ID3D10Device::CreateTexture2D</description></item>
+		/// <item><description>ID3D11Device::CreateBuffer</description></item>
+		/// <item><description>ID3D11Device::CreateTexture1D</description></item>
+		/// <item><description>ID3D11Device::CreateTexture2D</description></item>
+		/// <item><description>ID3D11Device::CreateTexture3D</description></item>
+		/// <item><description>ID3D11Device3::CreateTexture2D</description></item>
+		/// <item><description>ID3D11Device3::CreateTexture3D</description></item>
+		/// <item><description>ID3D12Device::CreateCommittedResource</description></item>
+		/// <item><description>ID3D12Device::CreatePlacedResource</description></item>
+		/// <item><description>ID3D12Device::CreateReservedResource</description></item>
+		/// <item><description>ID3D12Device4::CreateCommittedResource1</description></item>
+		/// <item><description>ID3D12Device4::CreateReservedResource1</description></item>
+		/// <item><description>glBufferData</description></item>
+		/// <item><description>glBufferStorage</description></item>
+		/// <item><description>glNamedBufferData</description></item>
+		/// <item><description>glNamedBufferStorage</description></item>
+		/// <item><description>glTexImage1D</description></item>
+		/// <item><description>glTexImage2D</description></item>
+		/// <item><description>glTexImage2DMultisample</description></item>
+		/// <item><description>glTexImage3D</description></item>
+		/// <item><description>glTexImage3DMultisample</description></item>
+		/// <item><description>glCompressedTexImage1D</description></item>
+		/// <item><description>glCompressedTexImage2D</description></item>
+		/// <item><description>glCompressedTexImage3D</description></item>
+		/// <item><description>glTexStorage1D</description></item>
+		/// <item><description>glTexStorage2D</description></item>
+		/// <item><description>glTexStorage2DMultisample</description></item>
+		/// <item><description>glTexStorage3D</description></item>
+		/// <item><description>glTexStorage3DMultisample</description></item>
+		/// <item><description>glTextureStorage1D</description></item>
+		/// <item><description>glTextureStorage2D</description></item>
+		/// <item><description>glTextureStorage2DMultisample</description></item>
+		/// <item><description>glTextureStorage3D</description></item>
+		/// <item><description>glTextureStorage3DMultisample</description></item>
+		/// <item><description>glRenderbufferStorage</description></item>
+		/// <item><description>glRenderbufferStorageMultisample</description></item>
+		/// <item><description>glNamedRenderbufferStorage</description></item>
+		/// <item><description>glNamedRenderbufferStorageMultisample</description></item>
+		/// <item><description>vkCreateBuffer</description></item>
+		/// <item><description>vkCreateImage</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::device *device, api::resource_desc &amp;desc, api::subresource_data *initial_data, api::resource_usage initial_state)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To overwrite the resource description, modify <c>desc</c> in the callback and return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		create_resource,
+
+		/// <summary>
+		/// Called on resource destruction, before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DResource9::Release</description></item>
+		/// <item><description>ID3D10Resource::Release</description></item>
+		/// <item><description>ID3D11Resource::Release</description></item>
+		/// <item><description>ID3D12Resource::Release</description></item>
+		/// <item><description>glDeleteBuffers</description></item>
+		/// <item><description>glDeleteTextures</description></item>
+		/// <item><description>glDeleteRenderbuffers</description></item>
+		/// <item><description>vkDestroyBuffer</description></item>
+		/// <item><description>vkDestroyImage</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::resource resource)</c></para>
+		/// </summary>
+		destroy_resource,
+
+		/// <summary>
+		/// Called after successfull resource view creation from:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::CreateTexture</description></item>
+		/// <item><description>IDirect3DDevice9::CreateCubeTexture</description></item>
+		/// <item><description>IDirect3DDevice9::CreateVolumeTexture</description></item>
+		/// <item><description>ID3D10Device::CreateShaderResourceView</description></item>
+		/// <item><description>ID3D10Device::CreateRenderTargetView</description></item>
+		/// <item><description>ID3D10Device::CreateDepthStencilView</description></item>
+		/// <item><description>ID3D10Device1::CreateShaderResourceView1</description></item>
+		/// <item><description>ID3D11Device::CreateShaderResourceView</description></item>
+		/// <item><description>ID3D11Device::CreateUnorderedAccessView</description></item>
+		/// <item><description>ID3D11Device::CreateRenderTargetView</description></item>
+		/// <item><description>ID3D11Device::CreateDepthStencilView</description></item>
+		/// <item><description>ID3D11Device3::CreateShaderResourceView1</description></item>
+		/// <item><description>ID3D11Device3::CreateUnorderedAccessView1</description></item>
+		/// <item><description>ID3D11Device3::CreateRenderTargetView1</description></item>
+		/// <item><description>ID3D12Device::CreateShaderResourceView</description></item>
+		/// <item><description>ID3D12Device::CreateUnorderedAccessView</description></item>
+		/// <item><description>ID3D12Device::CreateRenderTargetView</description></item>
+		/// <item><description>ID3D12Device::CreateDepthStencilView</description></item>
+		/// <item><description>glTexBuffer</description></item>
+		/// <item><description>glTextureBuffer</description></item>
+		/// <item><description>glTextureView</description></item>
+		/// <item><description>vkCreateBufferView</description></item>
+		/// <item><description>vkCreateImageView</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::resource resource, api::resource_usage usage_type, const api::resource_view_desc &amp;desc, api::resource_view view)</c></para>
+		/// </summary>
+		init_resource_view,
+
+		/// <summary>
+		/// Called on resource view creation, before:
+		/// <list type="bullet">
+		/// <item><description>ID3D10Device::CreateShaderResourceView</description></item>
+		/// <item><description>ID3D10Device::CreateRenderTargetView</description></item>
+		/// <item><description>ID3D10Device::CreateDepthStencilView</description></item>
+		/// <item><description>ID3D10Device1::CreateShaderResourceView1</description></item>
+		/// <item><description>ID3D11Device::CreateShaderResourceView</description></item>
+		/// <item><description>ID3D11Device::CreateUnorderedAccessView</description></item>
+		/// <item><description>ID3D11Device::CreateRenderTargetView</description></item>
+		/// <item><description>ID3D11Device::CreateDepthStencilView</description></item>
+		/// <item><description>ID3D11Device3::CreateShaderResourceView1</description></item>
+		/// <item><description>ID3D11Device3::CreateUnorderedAccessView1</description></item>
+		/// <item><description>ID3D11Device3::CreateRenderTargetView1</description></item>
+		/// <item><description>ID3D12Device::CreateShaderResourceView</description></item>
+		/// <item><description>ID3D12Device::CreateUnorderedAccessView</description></item>
+		/// <item><description>ID3D12Device::CreateRenderTargetView</description></item>
+		/// <item><description>ID3D12Device::CreateDepthStencilView</description></item>
+		/// <item><description>glTexBuffer</description></item>
+		/// <item><description>glTextureBuffer</description></item>
+		/// <item><description>glTextureView</description></item>
+		/// <item><description>vkCreateBufferView</description></item>
+		/// <item><description>vkCreateImageView</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::device *device, api::resource resource, api::resource_usage usage_type, api::resource_view_desc &amp;desc)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To overwrite the resource view description, modify <c>desc</c> in the callback and return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Is not called in D3D9 (since resource views are tied to resources there).
+		/// </remarks>
+		create_resource_view,
+
+		/// <summary>
+		/// Called on resource view destruction, before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DResource9::Release</description></item>
+		/// <item><description>ID3D10View::Release</description></item>
+		/// <item><description>ID3D11View::Release</description></item>
+		/// <item><description>glDeleteTextures</description></item>
+		/// <item><description>vkDestroyBufferView</description></item>
+		/// <item><description>vkDestroyImageView</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::resource_view view)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// Is not called in D3D12 (since resource views are descriptor handles instead of objects there).
+		/// </remarks>
+		destroy_resource_view,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DVertexBuffer9::Lock</description></item>
+		/// <item><description>IDirect3DIndexBuffer9::Lock</description></item>
+		/// <item><description>ID3D10Resource::Map</description></item>
+		/// <item><description>ID3D11DeviceContext::Map</description></item>
+		/// <item><description>ID3D12Resource::Map</description></item>
+		/// <item><description>glMapBuffer</description></item>
+		/// <item><description>glMapBufferRange</description></item>
+		/// <item><description>glMapNamedBuffer</description></item>
+		/// <item><description>glMapNamedBufferRange</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::resource resource, uint64_t offset, uint64_t size, api::map_access access, void **data)</c></para>
+		/// </summary>
+		map_buffer_region,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DVertexBuffer9::Unlock</description></item>
+		/// <item><description>IDirect3DIndexBuffer9::Unlock</description></item>
+		/// <item><description>ID3D10Resource::Unmap</description></item>
+		/// <item><description>ID3D11DeviceContext::Unmap</description></item>
+		/// <item><description>ID3D12Resource::Unmap</description></item>
+		/// <item><description>glUnmapBuffer</description></item>
+		/// <item><description>glUnmapNamedBuffer</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::resource resource)</c></para>
+		/// </summary>
+		unmap_buffer_region,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DSurface9::LockRect</description></item>
+		/// <item><description>IDirect3DVolume9::LockBox</description></item>
+		/// <item><description>IDirect3DTexture9::LockRect</description></item>
+		/// <item><description>IDirect3DVolumeTexture9::LockBox</description></item>
+		/// <item><description>IDirect3DCubeTexture9::LockRect</description></item>
+		/// <item><description>ID3D10Resource::Map</description></item>
+		/// <item><description>ID3D11DeviceContext::Map</description></item>
+		/// <item><description>ID3D12Resource::Map</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::resource resource, uint32_t subresource, const api::subresource_box *box, api::map_access access, api::subresource_data *data)</c></para>
+		/// </summary>
+		map_texture_region,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DSurface9::UnlockRect</description></item>
+		/// <item><description>IDirect3DVolume9::UnlockBox</description></item>
+		/// <item><description>IDirect3DTexture9::UnlockRect</description></item>
+		/// <item><description>IDirect3DVolumeTexture9::UnlockBox</description></item>
+		/// <item><description>IDirect3DCubeTexture9::UnlockRect</description></item>
+		/// <item><description>ID3D10Resource::Unmap</description></item>
+		/// <item><description>ID3D11DeviceContext::Unmap</description></item>
+		/// <item><description>ID3D12Resource::Unmap</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::resource resource, uint32_t subresource)</c></para>
+		/// </summary>
+		unmap_texture_region,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D10Device::UpdateSubresource</description></item>
+		/// <item><description>ID3D11DeviceContext::UpdateSubresource</description></item>
+		/// <item><description>glBufferSubData</description></item>
+		/// <item><description>glNamedBufferSubData</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::device *device, const void *data, api::resource resource, uint64_t offset, uint64_t size)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Destination resource will be in the <see cref="api::resource_usage::copy_dest"/> state.
+		/// </remarks>
+		update_buffer_region,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D10Device::UpdateSubresource</description></item>
+		/// <item><description>ID3D11DeviceContext::UpdateSubresource</description></item>
+		/// <item><description>glTexSubData1D</description></item>
+		/// <item><description>glTexSubData2D</description></item>
+		/// <item><description>glTexSubData3D</description></item>
+		/// <item><description>glTextureSubData1D</description></item>
+		/// <item><description>glTextureSubData2D</description></item>
+		/// <item><description>glTextureSubData3D</description></item>
+		/// <item><description>glCompressedTexSubData1D</description></item>
+		/// <item><description>glCompressedTexSubData2D</description></item>
+		/// <item><description>glCompressedTexSubData3D</description></item>
+		/// <item><description>glCompressedTextureSubData1D</description></item>
+		/// <item><description>glCompressedTextureSubData2D</description></item>
+		/// <item><description>glCompressedTextureSubData3D</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::device *device, const api::subresource_data &data, api::resource resource, uint32_t subresource, const api::subresource_box *box)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Destination resource will be in the <see cref="api::resource_usage::copy_dest"/> state.
+		/// </remarks>
+		update_texture_region,
+
+		/// <summary>
+		/// Called after successfull pipeline creation from:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::CreateVertexShader</description></item>
+		/// <item><description>IDirect3DDevice9::CreatePixelShader</description></item>
+		/// <item><description>IDirect3DDevice9::CreateVertexDeclaration</description></item>
+		/// <item><description>ID3D10Device::CreateVertexShader</description></item>
+		/// <item><description>ID3D10Device::CreateGeometryShader</description></item>
+		/// <item><description>ID3D10Device::CreateGeometryShaderWithStreamOutput</description></item>
+		/// <item><description>ID3D10Device::CreatePixelShader</description></item>
+		/// <item><description>ID3D10Device::CreateInputLayout</description></item>
+		/// <item><description>ID3D10Device::CreateBlendState</description></item>
+		/// <item><description>ID3D10Device::CreateDepthStencilState</description></item>
+		/// <item><description>ID3D10Device::CreateRasterizerState</description></item>
+		/// <item><description>ID3D10Device1::CreateBlendState1</description></item>
+		/// <item><description>ID3D11Device::CreateVertexShader</description></item>
+		/// <item><description>ID3D11Device::CreateHullShader</description></item>
+		/// <item><description>ID3D11Device::CreateDomainShader</description></item>
+		/// <item><description>ID3D11Device::CreateGeometryShader</description></item>
+		/// <item><description>ID3D11Device::CreateGeometryShaderWithStreamOutput</description></item>
+		/// <item><description>ID3D11Device::CreatePixelShader</description></item>
+		/// <item><description>ID3D11Device::CreateComputeShader</description></item>
+		/// <item><description>ID3D11Device::CreateInputLayout</description></item>
+		/// <item><description>ID3D11Device::CreateBlendState</description></item>
+		/// <item><description>ID3D11Device::CreateDepthStencilState</description></item>
+		/// <item><description>ID3D11Device::CreateRasterizerState</description></item>
+		/// <item><description>ID3D11Device1::CreateBlendState1</description></item>
+		/// <item><description>ID3D11Device1::CreateRasterizerState1</description></item>
+		/// <item><description>ID3D11Device3::CreateRasterizerState2</description></item>
+		/// <item><description>ID3D12Device::CreateComputePipelineState</description></item>
+		/// <item><description>ID3D12Device::CreateGraphicsPipelineState</description></item>
+		/// <item><description>ID3D12Device2::CreatePipelineState</description></item>
+		/// <item><description>ID3D12PipelineLibrary::LoadComputePipeline</description></item>
+		/// <item><description>ID3D12PipelineLibrary::LoadGraphicsPipeline</description></item>
+		/// <item><description>ID3D12PipelineLibrary1::LoadPipeline</description></item>
+		/// <item><description>glLinkProgram</description></item>
+		/// <item><description>vkCreateComputePipelines</description></item>
+		/// <item><description>vkCreateGraphicsPipelines</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::pipeline_layout layout, uint32_t subobject_count, const api::pipeline_subobject *subobjects, api::pipeline pipeline)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// May be called multiple times with the same pipeline handle (whenever the pipeline is updated or its reference count is incremented).
+		/// </remarks>
+		init_pipeline,
+
+		/// <summary>
+		/// Called on pipeline creation, before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::CreateVertexShader</description></item>
+		/// <item><description>IDirect3DDevice9::CreatePixelShader</description></item>
+		/// <item><description>IDirect3DDevice9::CreateVertexDeclaration</description></item>
+		/// <item><description>ID3D10Device::CreateVertexShader</description></item>
+		/// <item><description>ID3D10Device::CreateGeometryShader</description></item>
+		/// <item><description>ID3D10Device::CreateGeometryShaderWithStreamOutput</description></item>
+		/// <item><description>ID3D10Device::CreatePixelShader</description></item>
+		/// <item><description>ID3D10Device::CreateInputLayout</description></item>
+		/// <item><description>ID3D10Device::CreateBlendState</description></item>
+		/// <item><description>ID3D10Device::CreateDepthStencilState</description></item>
+		/// <item><description>ID3D10Device::CreateRasterizerState</description></item>
+		/// <item><description>ID3D10Device1::CreateBlendState1</description></item>
+		/// <item><description>ID3D11Device::CreateVertexShader</description></item>
+		/// <item><description>ID3D11Device::CreateHullShader</description></item>
+		/// <item><description>ID3D11Device::CreateDomainShader</description></item>
+		/// <item><description>ID3D11Device::CreateGeometryShader</description></item>
+		/// <item><description>ID3D11Device::CreateGeometryShaderWithStreamOutput</description></item>
+		/// <item><description>ID3D11Device::CreatePixelShader</description></item>
+		/// <item><description>ID3D11Device::CreateComputeShader</description></item>
+		/// <item><description>ID3D11Device::CreateInputLayout</description></item>
+		/// <item><description>ID3D11Device::CreateBlendState</description></item>
+		/// <item><description>ID3D11Device::CreateDepthStencilState</description></item>
+		/// <item><description>ID3D11Device::CreateRasterizerState</description></item>
+		/// <item><description>ID3D11Device1::CreateBlendState1</description></item>
+		/// <item><description>ID3D11Device1::CreateRasterizerState1</description></item>
+		/// <item><description>ID3D11Device3::CreateRasterizerState2</description></item>
+		/// <item><description>ID3D12Device::CreateComputePipelineState</description></item>
+		/// <item><description>ID3D12Device::CreateGraphicsPipelineState</description></item>
+		/// <item><description>ID3D12Device2::CreatePipelineState</description></item>
+		/// <item><description>glShaderSource</description></item>
+		/// <item><description>vkCreateComputePipelines</description></item>
+		/// <item><description>vkCreateGraphicsPipelines</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::device *device, api::pipeline_layout layout, uint32_t subobject_count, const api::pipeline_subobject *subobjects)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To overwrite the pipeline description, modify <c>desc</c> in the callback and return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		create_pipeline,
+
+		/// <summary>
+		/// Called on pipeline destruction, before:
+		/// <list type="bullet">
+		/// <item><description>ID3D10VertexShader::Release</description></item>
+		/// <item><description>ID3D10GeometryShader::Release</description></item>
+		/// <item><description>ID3D10PixelShader::Release</description></item>
+		/// <item><description>ID3D10InputLayout::Release</description></item>
+		/// <item><description>ID3D10BlendState::Release</description></item>
+		/// <item><description>ID3D10DepthStencilState::Release</description></item>
+		/// <item><description>ID3D10RasterizerState::Release</description></item>
+		/// <item><description>ID3D11VertexShader::Release</description></item>
+		/// <item><description>ID3D11HullShader::Release</description></item>
+		/// <item><description>ID3D11DomainShader::Release</description></item>
+		/// <item><description>ID3D11GeometryShader::Release</description></item>
+		/// <item><description>ID3D11PixelShader::Release</description></item>
+		/// <item><description>ID3D11ComputeShader::Release</description></item>
+		/// <item><description>ID3D11InputLayout::Release</description></item>
+		/// <item><description>ID3D11BlendState::Release</description></item>
+		/// <item><description>ID3D11DepthStencilState::Release</description></item>
+		/// <item><description>ID3D11RasterizerState::Release</description></item>
+		/// <item><description>ID3D12PipelineState::Release</description></item>
+		/// <item><description>glDeleteProgram</description></item>
+		/// <item><description>vkDestroyPipeline</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::pipeline pipeline)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// Is not called in D3D9.
+		/// </remarks>
+		destroy_pipeline,
+
+		/// <summary>
+		/// Called after successfull pipeline layout creation from:
+		/// <list type="bullet">
+		/// <item><description>ID3D12Device::CreateRootSignature</description></item>
+		/// <item><description>vkCreatePipelineLayout</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, uint32_t param_count, const api::pipeline_layout_param *params, api::pipeline_layout layout)</c></para>
+		/// </summary>
+		init_pipeline_layout,
+
+		/// <summary>
+		/// Called on pipeline layout creation.
+		/// <para>Callback function signature: <c>bool (api::device *device, uint32_t param_count, const api::pipeline_layout_param *params)</c></para>
+		/// </summary>
+		create_pipeline_layout,
+
+		/// <summary>
+		/// Called on pipeline layout destruction, before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12RootSignature::Release</description></item>
+		/// <item><description>VkDestroyPipelineLayout</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::pipeline_layout layout)</c></para>
+		/// </summary>
+		destroy_pipeline_layout,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12Device::CopyDescriptors</description></item>
+		/// <item><description>ID3D12Device::CopyDescriptorsSimple</description></item>
+		/// <item><description>vkUpdateDescriptorSets</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::device *device, uint32_t count, const api::descriptor_set_copy *copies)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		copy_descriptor_sets,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12Device::CreateConstantBufferView</description></item>
+		/// <item><description>ID3D12Device::CreateShaderResourceView</description></item>
+		/// <item><description>ID3D12Device::CreateUnorderedAccessView</description></item>
+		/// <item><description>ID3D12Device::CreateSampler</description></item>
+		/// <item><description>vkUpdateDescriptorSets</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::device *device, uint32_t count, const api::descriptor_set_update *updates)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		update_descriptor_sets,
+
+		/// <summary>
+		/// Called after successfull query pool creation from:
+		/// <list type="bullet">
+		/// <item><description>ID3D12Device::CreateQueryHeap</description></item>
+		/// <item><description>vkCreateQueryPool</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::query_type type, uint32_t size, api::query_pool pool)</c></para>
+		/// </summary>
+		init_query_pool,
+
+		/// <summary>
+		/// Called on query pool creation, before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12Device::CreateQueryHeap</description></item>
+		/// <item><description>vkCreateQueryPool</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::device *device, api::query_type type, uint32_t &amp;size)</c></para>
+		/// </summary>
+		create_query_pool,
+
+		/// <summary>
+		/// Called on query pool destruction, before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12QueryHeap::Release</description></item>
+		/// <item><description>vkDestroyQueryPool</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::device *device, api::query_pool pool)</c></para>
+		/// </summary>
+		destroy_query_pool,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>vkGetQueryPoolResults</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::device *device, api::query_pool pool, uint32_t first, uint32_t count, void *results, uint32_t stride)</c></para>
+		/// </summary>
+		get_query_pool_results,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>ID3D12GraphicsCommandList::ResourceBarrier</description></item>
+		/// <item><description>ID3D12GraphicsCommandList7::Barrier</description></item>
+		/// <item><description>vkCmdPipelineBarrier</description></item>
+		/// <item><description>vkCmdPipelineBarrier2</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, uint32_t count, const api::resource *resources, const api::resource_usage *old_states, const api::resource_usage *new_states)</c></para>
+		/// </summary>
+		barrier,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12GraphicsCommandList4::BeginRenderPass</description></item>
+		/// <item><description>vkCmdBeginRenderPass</description></item>
+		/// <item><description>vkCmdBeginRenderPass2</description></item>
+		/// <item><description>vkCmdNextSubpass</description></item>
+		/// <item><description>vkCmdNextSubpass2</description></item>
+		/// <item><description>vkCmdBeginRendering</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, uint32_t count, const api::render_pass_render_target_desc *rts, const api::render_pass_depth_stencil_desc *ds)</c></para>
+		/// </summary>
+		begin_render_pass,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12GraphicsCommandList4::EndRenderPass</description></item>
+		/// <item><description>vkCmdEndRenderPass</description></item>
+		/// <item><description>vkCmdEndRenderPass2</description></item>
+		/// <item><description>vkCmdNextSubpass</description></item>
+		/// <item><description>vkCmdNextSubpass2</description></item>
+		/// <item><description>vkCmdEndRendering</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list)</c></para>
+		/// </summary>
+		end_render_pass,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::SetRenderTarget</description></item>
+		/// <item><description>IDirect3DDevice9::SetDepthStencilSurface</description></item>
+		/// <item><description>ID3D10Device::OMSetRenderTargets</description></item>
+		/// <item><description>ID3D11DeviceContext::OMSetRenderTargets</description></item>
+		/// <item><description>ID3D11DeviceContext::OMSetRenderTargetsAndUnorderedAccessViews</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::OMSetRenderTargets</description></item>
+		/// <item><description>glBindFramebuffer</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, uint32_t count, const api::resource_view *rtvs, api::resource_view dsv)</c></para>
+		/// </summary>
+		bind_render_targets_and_depth_stencil,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::SetVertexShader</description></item>
+		/// <item><description>IDirect3DDevice9::SetPixelShader</description></item>
+		/// <item><description>IDirect3DDevice9::SetVertexDeclaration</description></item>
+		/// <item><description>IDirect3DDevice9::ProcessVertices</description></item>
+		/// <item><description>ID3D10Device::VSSetShader</description></item>
+		/// <item><description>ID3D10Device::GSSetShader</description></item>
+		/// <item><description>ID3D10Device::PSSetShader</description></item>
+		/// <item><description>ID3D10Device::IASetInputLayout</description></item>
+		/// <item><description>ID3D10Device::OMSetBlendState</description></item>
+		/// <item><description>ID3D10Device::OMSetDepthStencilState</description></item>
+		/// <item><description>ID3D10Device::RSSetState</description></item>
+		/// <item><description>ID3D11DeviceContext::VSSetShader</description></item>
+		/// <item><description>ID3D11DeviceContext::HSSetShader</description></item>
+		/// <item><description>ID3D11DeviceContext::DSSetShader</description></item>
+		/// <item><description>ID3D11DeviceContext::GSSetShader</description></item>
+		/// <item><description>ID3D11DeviceContext::PSSetShader</description></item>
+		/// <item><description>ID3D11DeviceContext::CSSetShader</description></item>
+		/// <item><description>ID3D11DeviceContext::IASetInputLayout</description></item>
+		/// <item><description>ID3D11DeviceContext::OMSetBlendState</description></item>
+		/// <item><description>ID3D11DeviceContext::OMSetDepthStencilState</description></item>
+		/// <item><description>ID3D11DeviceContext::RSSetState</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::Reset</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetPipelineState</description></item>
+		/// <item><description>glUseProgram</description></item>
+		/// <item><description>vkCmdBindPipeline</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, api::pipeline_stage stages, api::pipeline pipeline)</c></para>
+		/// </summary>
+		bind_pipeline,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::SetRenderState</description></item>
+		/// <item><description>ID3D10Device::IASetPrimitiveTopology</description></item>
+		/// <item><description>ID3D10Device::OMSetBlendState</description></item>
+		/// <item><description>ID3D10Device::OMSetDepthStencilState</description></item>
+		/// <item><description>ID3D11DeviceContext::IASetPrimitiveTopology</description></item>
+		/// <item><description>ID3D11DeviceContext::OMSetBlendState</description></item>
+		/// <item><description>ID3D11DeviceContext::OMSetDepthStencilState</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::IASetPrimitiveTopology</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::OMSetBlendFactor</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::OMSetStencilRef</description></item>
+		/// <item><description>gl(...)</description></item>
+		/// <item><description>vkCmdSetDepthBias</description></item>
+		/// <item><description>vkCmdSetBlendConstants</description></item>
+		/// <item><description>vkCmdSetStencilCompareMask</description></item>
+		/// <item><description>vkCmdSetStencilWriteMask</description></item>
+		/// <item><description>vkCmdSetStencilReference</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, uint32_t count, const api::dynamic_state *states, const uint32_t *values)</c></para>
+		/// </summary>
+		bind_pipeline_states,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::SetViewport</description></item>
+		/// <item><description>IDirect3DDevice9::SetRenderTarget (implicitly updates the viewport)</description></item>
+		/// <item><description>ID3D10Device::RSSetViewports</description></item>
+		/// <item><description>ID3D11DeviceContext::RSSetViewports</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::RSSetViewports</description></item>
+		/// <item><description>glViewport</description></item>
+		/// <item><description>glViewportArrayv</description></item>
+		/// <item><description>glViewportIndexedf</description></item>
+		/// <item><description>glViewportIndexedfv</description></item>
+		/// <item><description>vkCmdSetViewport</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, uint32_t first, uint32_t count, const api::viewport *viewports)</c></para>
+		/// </summary>
+		bind_viewports,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::SetScissorRect</description></item>
+		/// <item><description>ID3D10Device::RSSetScissorRects</description></item>
+		/// <item><description>ID3D11DeviceContext::RSSetScissorRects</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::RSSetScissorRects</description></item>
+		/// <item><description>glScissor</description></item>
+		/// <item><description>glScissorArrayv</description></item>
+		/// <item><description>glScissorIndexed</description></item>
+		/// <item><description>glScissorIndexedv</description></item>
+		/// <item><description>vkCmdSetScissor</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, uint32_t first, uint32_t count, const api::rect *rects)</c></para>
+		/// </summary>
+		bind_scissor_rects,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::SetVertexShaderConstantF</description></item>
+		/// <item><description>IDirect3DDevice9::SetPixelShaderConstantF</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetComputeRoot32BitConstant</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetComputeRoot32BitConstants</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetGraphicsRoot32BitConstant</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetGraphicsRoot32BitConstants</description></item>
+		/// <item><description>glUniform(...)</description></item>
+		/// <item><description>vkCmdPushConstants</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, api::shader_stage stages, api::pipeline_layout layout, uint32_t layout_param, uint32_t first, uint32_t count, const uint32_t *values)</c></para>
+		/// </summary>
+		push_constants,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::SetTexture</description></item>
+		/// <item><description>ID3D10Device::VSSetSamplers</description></item>
+		/// <item><description>ID3D10Device::VSSetShaderResources</description></item>
+		/// <item><description>ID3D10Device::VSSetConstantBuffers</description></item>
+		/// <item><description>ID3D10Device::GSSetSamplers</description></item>
+		/// <item><description>ID3D10Device::GSSetShaderResources</description></item>
+		/// <item><description>ID3D10Device::GSSetConstantBuffers</description></item>
+		/// <item><description>ID3D10Device::PSSetSamplers</description></item>
+		/// <item><description>ID3D10Device::PSSetShaderResources</description></item>
+		/// <item><description>ID3D10Device::PSSetConstantBuffers</description></item>
+		/// <item><description>ID3D11DeviceContext::VSSetSamplers</description></item>
+		/// <item><description>ID3D11DeviceContext::VSSetShaderResources</description></item>
+		/// <item><description>ID3D11DeviceContext::VSSetConstantBuffers</description></item>
+		/// <item><description>ID3D11DeviceContext::HSSetSamplers</description></item>
+		/// <item><description>ID3D11DeviceContext::HSSetShaderResources</description></item>
+		/// <item><description>ID3D11DeviceContext::HSSetConstantBuffers</description></item>
+		/// <item><description>ID3D11DeviceContext::DSSetSamplers</description></item>
+		/// <item><description>ID3D11DeviceContext::DSSetShaderResources</description></item>
+		/// <item><description>ID3D11DeviceContext::DSSetConstantBuffers</description></item>
+		/// <item><description>ID3D11DeviceContext::GSSetSamplers</description></item>
+		/// <item><description>ID3D11DeviceContext::GSSetShaderResources</description></item>
+		/// <item><description>ID3D11DeviceContext::GSSetConstantBuffers</description></item>
+		/// <item><description>ID3D11DeviceContext::PSSetSamplers</description></item>
+		/// <item><description>ID3D11DeviceContext::PSSetShaderResources</description></item>
+		/// <item><description>ID3D11DeviceContext::PSSetConstantBuffers</description></item>
+		/// <item><description>ID3D11DeviceContext::CSSetSamplers</description></item>
+		/// <item><description>ID3D11DeviceContext::CSSetShaderResources</description></item>
+		/// <item><description>ID3D11DeviceContext::CSSetUnorderedAccessViews</description></item>
+		/// <item><description>ID3D11DeviceContext::CSSetConstantBuffers</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetComputeRootConstantBufferView</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetGraphicsRootConstantBufferView</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetComputeRootShaderResourceView</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetGraphicsRootShaderResourceView</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetComputeRootUnorderedAccessView</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetGraphicsRootUnorderedAccessView</description></item>
+		/// <item><description>glBindBufferBase</description></item>
+		/// <item><description>glBindBufferRange</description></item>
+		/// <item><description>glBindBuffersBase</description></item>
+		/// <item><description>glBindBuffersRange</description></item>
+		/// <item><description>glBindTexture</description></item>
+		/// <item><description>glBindImageTexture</description></item>
+		/// <item><description>glBindTextures</description></item>
+		/// <item><description>glBindImageTextures</description></item>
+		/// <item><description>glBindTextureUnit</description></item>
+		/// <item><description>glBindMultiTextureEXT</description></item>
+		/// <item><description>vkCmdPushDescriptorSetKHR</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, api::shader_stage stages, api::pipeline_layout layout, uint32_t layout_param, const api::descriptor_set_update &amp;update)</c></para>
+		/// </summary>
+		push_descriptors,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>ID3D12GraphicsCommandList::SetComputeRootSignature</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetGraphicsRootSignature</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetComputeRootDescriptorTable</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SetGraphicsRootDescriptorTable</description></item>
+		/// <item><description>vkCmdBindDescriptorSets</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, api::shader_stage stages, api::pipeline_layout layout, uint32_t first, uint32_t count, const api::descriptor_set *sets)</c></para>
+		/// </summary>
+		bind_descriptor_sets,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::SetIndices</description></item>
+		/// <item><description>ID3D10Device::IASetIndexBuffer</description></item>
+		/// <item><description>ID3D11DeviceContext::IASetIndexBuffer</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::IASetIndexBuffer</description></item>
+		/// <item><description>glBindBuffer</description></item>
+		/// <item><description>vkCmdBindIndexBuffer</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, api::resource buffer, uint64_t offset, uint32_t index_size)</c></para>
+		/// </summary>
+		bind_index_buffer,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::SetStreamSource</description></item>
+		/// <item><description>ID3D10Device::IASetVertexBuffers</description></item>
+		/// <item><description>ID3D11DeviceContext::IASetVertexBuffers</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::IASetVertexBuffers</description></item>
+		/// <item><description>glBindBuffer</description></item>
+		/// <item><description>glBindVertexBuffer</description></item>
+		/// <item><description>glBindVertexBuffers</description></item>
+		/// <item><description>vkCmdBindVertexBuffers</description></item>
+		/// <item><description>vkCmdBindVertexBuffers2</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, uint32_t first, uint32_t count, const api::resource *buffers, const uint64_t *offsets, const uint32_t *strides)</c></para>
+		/// </summary>
+		bind_vertex_buffers,
+
+		/// <summary>
+		/// Called after:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::ProcessVertices</description></item>
+		/// <item><description>ID3D10Device::SOSetTargets</description></item>
+		/// <item><description>ID3D11DeviceContext::SOSetTargets</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::SOSetTargets</description></item>
+		/// <item><description>glBindBufferBase</description></item>
+		/// <item><description>glBindBufferRange</description></item>
+		/// <item><description>glBindBuffersBase</description></item>
+		/// <item><description>glBindBuffersRange</description></item>
+		/// <item><description>vkCmdBindTransformFeedbackBuffersEXT</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, uint32_t first, uint32_t count, const api::resource *buffers, const uint64_t *offsets, const uint64_t *max_sizes)</c></para>
+		/// </summary>
+		bind_stream_output_buffers,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::DrawPrimitive</description></item>
+		/// <item><description>IDirect3DDevice9::DrawPrimitiveUP</description></item>
+		/// <item><description>IDirect3DDevice9::ProcessVertices</description></item>
+		/// <item><description>ID3D10Device::Draw</description></item>
+		/// <item><description>ID3D10Device::DrawInstanced</description></item>
+		/// <item><description>ID3D11DeviceContext::Draw</description></item>
+		/// <item><description>ID3D11DeviceContext::DrawInstanced</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::DrawInstanced</description></item>
+		/// <item><description>glDrawArrays</description></item>
+		/// <item><description>glDrawArraysInstanced</description></item>
+		/// <item><description>glDrawArraysInstancedBaseInstance</description></item>
+		/// <item><description>glMultiDrawArrays</description></item>
+		/// <item><description>vkCmdDraw</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, uint32_t vertex_count, uint32_t instance_count, uint32_t first_vertex, uint32_t first_instance)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		draw,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::DrawIndexedPrimitive</description></item>
+		/// <item><description>IDirect3DDevice9::DrawIndexedPrimitiveUP</description></item>
+		/// <item><description>ID3D10Device::DrawIndexed</description></item>
+		/// <item><description>ID3D10Device::DrawIndexedInstanced</description></item>
+		/// <item><description>ID3D11DeviceContext::DrawIndexed</description></item>
+		/// <item><description>ID3D11DeviceContext::DrawIndexedInstanced</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::DrawIndexedInstanced</description></item>
+		/// <item><description>glDrawElements</description></item>
+		/// <item><description>glDrawElementsBaseVertex</description></item>
+		/// <item><description>glDrawElementsInstanced</description></item>
+		/// <item><description>glDrawElementsInstancedBaseVertex</description></item>
+		/// <item><description>glDrawElementsInstancedBaseInstance</description></item>
+		/// <item><description>glDrawElementsInstancedBaseVertexBaseInstance</description></item>
+		/// <item><description>glMultiDrawElements</description></item>
+		/// <item><description>glMultiDrawElementsBaseVertex</description></item>
+		/// <item><description>vkCmdDrawIndexed</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, uint32_t index_count, uint32_t instance_count, uint32_t first_index, int32_t vertex_offset, uint32_t first_instance)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		draw_indexed,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D11DeviceContext::Dispatch</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::Dispatch</description></item>
+		/// <item><description>glDispatchCompute</description></item>
+		/// <item><description>vkCmdDispatch</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, uint32_t group_count_x, uint32_t group_count_y, uint32_t group_count_z)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		dispatch,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D11DeviceContext::DrawInstancedIndirect</description></item>
+		/// <item><description>ID3D11DeviceContext::DrawIndexedInstancedIndirect</description></item>
+		/// <item><description>ID3D11DeviceContext::DispatchIndirect</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::ExecuteIndirect</description></item>
+		/// <item><description>glDrawArraysIndirect</description></item>
+		/// <item><description>glDrawElementsIndirect</description></item>
+		/// <item><description>glMultiDrawArraysIndirect</description></item>
+		/// <item><description>glMultiDrawElementsIndirect</description></item>
+		/// <item><description>glDispatchComputeIndirect</description></item>
+		/// <item><description>vkCmdDrawIndirect</description></item>
+		/// <item><description>vkCmdDrawIndexedIndirect</description></item>
+		/// <item><description>vkCmdDispatchIndirect</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::indirect_command type, api::resource buffer, uint64_t offset, uint32_t draw_count, uint32_t stride)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		draw_or_dispatch_indirect,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::UpdateTexture</description></item>
+		/// <item><description>IDirect3DDevice9::GetRenderTargetData</description></item>
+		/// <item><description>ID3D10Device::CopyResource</description></item>
+		/// <item><description>ID3D11DeviceContext::CopyResource</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::CopyResource</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::resource source, api::resource dest)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Source resource will be in the <see cref="api::resource_usage::copy_source"/> state.
+		/// Destination resource will be in the <see cref="api::resource_usage::copy_dest"/> state.
+		/// </remarks>
+		copy_resource,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12GraphicsCommandList::CopyBufferRegion</description></item>
+		/// <item><description>glCopyBufferSubData</description></item>
+		/// <item><description>glCopyNamedBufferSubData</description></item>
+		/// <item><description>vkCmdCopyBuffer</description></item>
+		/// <item><description>vkCmdCopyBuffer2</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::resource source, uint64_t source_offset, api::resource dest, uint64_t dest_offset, uint64_t size)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Source resource will be in the <see cref="api::resource_usage::copy_source"/> state.
+		/// Destination resource will be in the <see cref="api::resource_usage::copy_dest"/> state.
+		/// </remarks>
+		copy_buffer_region,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12GraphicsCommandList::CopyTextureRegion</description></item>
+		/// <item><description>vkCmdCopyBufferToImage</description></item>
+		/// <item><description>vkCmdCopyBufferToImage2</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::resource source, uint64_t source_offset, uint32_t row_length, uint32_t slice_height, api::resource dest, uint32_t dest_subresource, const api::subresource_box *dest_box)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Source resource will be in the <see cref="api::resource_usage::copy_source"/> state.
+		/// Destination resource will be in the <see cref="api::resource_usage::copy_dest"/> state.
+		/// </remarks>
+		copy_buffer_to_texture,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::UpdateSurface</description></item>
+		/// <item><description>IDirect3DDevice9::StretchRect</description></item>
+		/// <item><description>ID3D10Device::CopySubresourceRegion</description></item>
+		/// <item><description>ID3D11DeviceContext::CopySubresourceRegion</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::CopyTextureRegion</description></item>
+		/// <item><description>glBlitFramebuffer</description></item>
+		/// <item><description>glBlitNamedFramebuffer</description></item>
+		/// <item><description>glCopyImageSubData</description></item>
+		/// <item><description>glCopyTexSubImage1D</description></item>
+		/// <item><description>glCopyTexSubImage2D</description></item>
+		/// <item><description>glCopyTexSubImage3D</description></item>
+		/// <item><description>glCopyTextureSubImage1D</description></item>
+		/// <item><description>glCopyTextureSubImage2D</description></item>
+		/// <item><description>glCopyTextureSubImage3D</description></item>
+		/// <item><description>vkCmdBlitImage</description></item>
+		/// <item><description>vkCmdBlitImage2</description></item>
+		/// <item><description>vkCmdCopyImage</description></item>
+		/// <item><description>vkCmdCopyImage2</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::resource source, uint32_t source_subresource, const api::subresource_box *source_box, api::resource dest, uint32_t dest_subresource, const api::subresource_box *dest_box, api::filter_mode filter)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Source resource will be in the <see cref="api::resource_usage::copy_source"/> state.
+		/// Destination resource will be in the <see cref="api::resource_usage::copy_dest"/> state.
+		/// </remarks>
+		copy_texture_region,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12GraphicsCommandList::CopyTextureRegion</description></item>
+		/// <item><description>vkCmdCopyImageToBuffer</description></item>
+		/// <item><description>vkCmdCopyImageToBuffer2</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::resource source, uint32_t source_subresource, const api::subresource_box *source_box, api::resource dest, uint64_t dest_offset, uint32_t row_length, uint32_t slice_height)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Source resource will be in the <see cref="api::resource_usage::copy_source"/> state.
+		/// Destination resource will be in the <see cref="api::resource_usage::copy_dest"/> state.
+		/// </remarks>
+		copy_texture_to_buffer,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::StretchRect</description></item>
+		/// <item><description>ID3D10Device::ResolveSubresource</description></item>
+		/// <item><description>ID3D11DeviceContext::ResolveSubresource</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::ResolveSubresource</description></item>
+		/// <item><description>ID3D12GraphicsCommandList1::ResolveSubresourceRegion</description></item>
+		/// <item><description>glBlitFramebuffer</description></item>
+		/// <item><description>glBlitNamedFramebuffer</description></item>
+		/// <item><description>vkCmdResolveImage</description></item>
+		/// <item><description>vkCmdResolveImage2</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::resource source, uint32_t source_subresource, const api::subresource_box *source_box, api::resource dest, uint32_t dest_subresource, int32_t dest_x, int32_t dest_y, int32_t dest_z, api::format format)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Source resource will be in the <see cref="api::resource_usage::resolve_source"/> state.
+		/// Destination resource will be in the <see cref="api::resource_usage::resolve_dest"/> state.
+		/// </remarks>
+		resolve_texture_region,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::Clear</description></item>
+		/// <item><description>ID3D10Device::ClearDepthStencilView</description></item>
+		/// <item><description>ID3D11DeviceContext::ClearDepthStencilView</description></item>
+		/// <item><description>ID3D11DeviceContext1::ClearView (for depth-stencil views)</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::ClearDepthStencilView</description></item>
+		/// <item><description>glClear</description></item>
+		/// <item><description>glClearBufferfi</description></item>
+		/// <item><description>glClearBufferfv</description></item>
+		/// <item><description>glClearNamedFramebufferfi</description></item>
+		/// <item><description>glClearNamedFramebufferfv</description></item>
+		/// <item><description>vkCmdClearDepthStencilImage</description></item>
+		/// <item><description>vkCmdClearAttachments</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::resource_view dsv, const float *depth, const uint8_t *stencil, uint32_t rect_count, const api::rect *rects)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Resource will be in the <see cref="api::resource_usage::depth_stencil_write"/> state.
+		/// </remarks>
+		clear_depth_stencil_view,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::Clear</description></item>
+		/// <item><description>IDirect3DDevice9::ColorFill</description></item>
+		/// <item><description>ID3D10Device::ClearRenderTargetView</description></item>
+		/// <item><description>ID3D11DeviceContext::ClearRenderTargetView</description></item>
+		/// <item><description>ID3D11DeviceContext1::ClearView (for render target views)</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::ClearRenderTargetView</description></item>
+		/// <item><description>glClear</description></item>
+		/// <item><description>glClearBufferfv</description></item>
+		/// <item><description>glClearNamedFramebufferfv</description></item>
+		/// <item><description>vkCmdClearColorImage</description></item>
+		/// <item><description>vkCmdClearAttachments</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::resource_view rtv, const float color[4], uint32_t rect_count, const api::rect *rects)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Resources will be in the <see cref="api::resource_usage::render_target"/> state.
+		/// </remarks>
+		clear_render_target_view,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D11DeviceContext::ClearUnorderedAccessViewUint</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::ClearUnorderedAccessViewUint</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::resource_view uav, const uint32_t values[4], uint32_t rect_count, const api::rect *rects)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Resource will be in the <see cref="api::resource_usage::unordered_access"/> state.
+		/// </remarks>
+		clear_unordered_access_view_uint,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D11DeviceContext::ClearUnorderedAccessViewFloat</description></item>
+		/// <item><description>ID3D11DeviceContext1::ClearView (for unordered access views)</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::ClearUnorderedAccessViewFloat</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::resource_view uav, const float values[4], uint32_t rect_count, const api::rect *rects)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// Resource will be in the <see cref="api::resource_usage::unordered_access"/> state.
+		/// </remarks>
+		clear_unordered_access_view_float,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D10Device::GenerateMips</description></item>
+		/// <item><description>ID3D11DeviceContext::GenerateMips</description></item>
+		/// <item><description>glGenerateMipmap</description></item>
+		/// <item><description>glGenerateTextureMipmap</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::resource_view srv)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		generate_mipmaps,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12GraphicsCommandList::BeginQuery</description></item>
+		/// <item><description>vkCmdBeginQuery</description></item>
+		/// <item><description>vkCmdBeginQueryIndexedEXT</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::query_pool pool, api::query_type type, uint32_t index)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		begin_query,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12GraphicsCommandList::EndQuery</description></item>
+		/// <item><description>vkCmdEndQuery</description></item>
+		/// <item><description>vkCmdEndQueryIndexedEXT</description></item>
+		/// <item><description>vkCmdWriteTimestamp</description></item>
+		/// <item><description>vkCmdWriteTimestamp2</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::query_pool pool, api::query_type type, uint32_t index)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		end_query,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12GraphicsCommandList::ResolveQueryData</description></item>
+		/// <item><description>vkCmdCopyQueryPoolResults</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>bool (api::command_list *cmd_list, api::query_pool pool, api::query_type type, uint32_t first, uint32_t count, api::resource dest, uint64_t dest_offset, uint32_t stride)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent this command from being executed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		copy_query_pool_results,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D12GraphicsCommandList::Reset</description></item>
+		/// <item><description>vkBeginCommandBuffer</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list)</c></para>
+		/// </summary>
+		reset_command_list,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>ID3D11DeviceContext::FinishCommandList</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::Close</description></item>
+		/// <item><description>vkEndCommandBuffer</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list)</c></para>
+		/// </summary>
+		close_command_list,
+
+		/// <summary>
+		/// Called when a command list is submitted to a command queue (or an immediate command list is flushed), before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::EndScene</description></item>
+		/// <item><description>ID3D10Device::Flush</description></item>
+		/// <item><description>ID3D11DeviceContext::Flush</description></item>
+		/// <item><description>ID3D12CommandQueue::ExecuteCommandLists</description></item>
+		/// <item><description>glFlush</description></item>
+		/// <item><description>vkQueueSubmit</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_queue *queue, api::command_list *cmd_list)</c></para>
+		/// </summary>
+		execute_command_list,
+
+		/// <summary>
+		/// Called when a secondary command list is executed on a primary command list, before:
+		/// <list type="bullet">
+		/// <item><description>ID3D11DeviceContext::ExecuteCommandList</description></item>
+		/// <item><description>ID3D12GraphicsCommandList::ExecuteBundle</description></item>
+		/// <item><description>vkCmdExecuteCommands</description></item>
+		/// </list>
+		/// In addition, called after:
+		/// <list type="bullet">
+		/// <item><description>ID3D11DeviceContext::FinishCommandList</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_list *cmd_list, api::command_list *secondary_cmd_list)</c></para>
+		/// </summary>
+		execute_secondary_command_list,
+
+		/// <summary>
+		/// Called before:
+		/// <list type="bullet">
+		/// <item><description>IDirect3DDevice9::Present</description></item>
+		/// <item><description>IDirect3DDevice9Ex::PresentEx</description></item>
+		/// <item><description>IDirect3DSwapChain9::Present</description></item>
+		/// <item><description>IDXGISwapChain::Present</description></item>
+		/// <item><description>IDXGISwapChain3::Present1</description></item>
+		/// <item><description>ID3D12CommandQueueDownlevel::Present</description></item>
+		/// <item><description>wglSwapBuffers</description></item>
+		/// <item><description>vkQueuePresentKHR</description></item>
+		/// <item><description>IVRCompositor::Submit</description></item>
+		/// </list>
+		/// <para>Callback function signature: <c>void (api::command_queue *queue, api::swapchain *swapchain, const api::rect *source_rect, const api::rect *dest_rect, uint32_t dirty_rect_count, const api::rect *dirty_rects)</c></para>
+		/// </summary>
+		present,
+
+		/// <summary>
+		/// Called after ReShade has rendered its overlay.
+		/// <para>Callback function signature: <c>void (api::effect_runtime *runtime)</c></para>
+		/// </summary>
+		reshade_present,
+
+		/// <summary>
+		/// Called right before ReShade effects are rendered.
+		/// <para>Callback function signature: <c>void (api::effect_runtime *runtime, api::command_list *cmd_list, api::resource_view rtv, api::resource_view rtv_srgb)</c></para>
+		/// </summary>
+		reshade_begin_effects,
+
+		/// <summary>
+		/// Called right after ReShade effects were rendered.
+		/// <para>Callback function signature: <c>void (api::effect_runtime *runtime, api::command_list *cmd_list, api::resource_view rtv, api::resource_view rtv_srgb)</c></para>
+		/// </summary>
+		reshade_finish_effects,
+
+		/// <summary>
+		/// Called right after all ReShade effects were reloaded.
+		/// This occurs during effect runtime initialization or because the user pressed the "Reload" button in the overlay.
+		/// <para>Callback function signature: <c>void (api::effect_runtime *runtime)</c></para>
+		/// </summary>
+		reshade_reloaded_effects,
+
+		/// <summary>
+		/// Called before a uniform variable is changed.
+		/// <para>Callback function signature: <c>bool (api::effect_runtime *runtime, api::effect_uniform_variable variable, const void *data, size_t size)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent the variable from being changed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		reshade_set_uniform_value,
+		/// <summary>
+		/// Called before a technique is enabled or disabled.
+		/// <para>Callback function signature: <c>bool (api::effect_runtime *runtime, api::effect_technique technique, bool enabled)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// To prevent the technique from being changed, return <see langword="true"/>, otherwise return <see langword="false"/>.
+		/// </remarks>
+		reshade_set_technique_state,
+
+		/// <summary>
+		/// Called between the <c>ImGui::NewFrame</c> and <c>ImGui::EndFrame</c> calls for the ReShade overlay.
+		/// Can be used to perform custom Dear ImGui calls, but it is recommended to instead use <see cref="register_overlay"/> to register a dedicated overlay.
+		/// <para>Callback function signature: <c>void (api::effect_runtime *runtime)</c></para>
+		/// </summary>
+		/// <remarks>
+		/// This is not called for effect runtimes in VR.
+		/// </remarks>
+		reshade_overlay,
+
+		/// <summary>
+		/// Called after a screenshot was taken and saved to disk.
+		/// <para>Callback function signature: <c>void (api::effect_runtime *runtime, const char *filename)</c></para>
+		/// </summary>
+		reshade_screenshot,
+
+		/// <summary>
+		/// Called for each technique after it was rendered, usually between <see cref="reshade_begin_effects"/> and <see cref="reshade_finish_effects"/>.
+		/// <para>Callback function signature: <c>void (api::effect_runtime *runtime, api::effect_technique technique, api::command_list *cmd_list, api::resource_view rtv, api::resource_view rtv_srgb)</c></para>
+		/// </summary>
+		reshade_render_technique,
+
+#ifdef RESHADE_ADDON
+		max // Last value used internally by ReShade to determine number of events in this enum
+#endif
+	};
+
+	template <addon_event ev>
+	struct addon_event_traits;
+
+#define RESHADE_DEFINE_ADDON_EVENT_TRAITS(ev, ret, ...) \
+	template <> \
+	struct addon_event_traits<ev> { \
+		using decl = ret(*)(__VA_ARGS__); \
+		using type = ret; \
+	}
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::init_device, void, api::device *device);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::destroy_device, void, api::device *device);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::init_command_list, void, api::command_list *cmd_list);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::destroy_command_list, void, api::command_list *cmd_list);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::init_command_queue, void, api::command_queue *queue);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::destroy_command_queue, void, api::command_queue *queue);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::init_swapchain, void, api::swapchain *swapchain);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::create_swapchain, bool, api::swapchain_desc &desc, void *hwnd);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::destroy_swapchain, void, api::swapchain *swapchain);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::init_effect_runtime, void, api::effect_runtime *runtime);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::destroy_effect_runtime, void, api::effect_runtime *runtime);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::init_sampler, void, api::device *device, const api::sampler_desc &desc, api::sampler sampler);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::create_sampler, bool, api::device *device, api::sampler_desc &desc);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::destroy_sampler, void, api::device *device, api::sampler sampler);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::init_resource, void, api::device *device, const api::resource_desc &desc, const api::subresource_data *initial_data, api::resource_usage initial_state, api::resource resource);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::create_resource, bool, api::device *device, api::resource_desc &desc, api::subresource_data *initial_data, api::resource_usage initial_state);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::destroy_resource, void, api::device *device, api::resource resource);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::init_resource_view, void, api::device *device, api::resource resource, api::resource_usage usage_type, const api::resource_view_desc &desc, api::resource_view view);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::create_resource_view, bool, api::device *device, api::resource resource, api::resource_usage usage_type, api::resource_view_desc &desc);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::destroy_resource_view, void, api::device *device, api::resource_view view);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::map_buffer_region, void, api::device *device, api::resource resource, uint64_t offset, uint64_t size, api::map_access access, void **data);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::unmap_buffer_region, void, api::device *device, api::resource resource);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::map_texture_region, void, api::device *device, api::resource resource, uint32_t subresource, const api::subresource_box *box, api::map_access access, api::subresource_data *data);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::unmap_texture_region, void, api::device *device, api::resource resource, uint32_t subresource);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::update_buffer_region, bool, api::device *device, const void *data, api::resource resource, uint64_t offset, uint64_t size);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::update_texture_region, bool, api::device *device, const api::subresource_data &data, api::resource resource, uint32_t subresource, const api::subresource_box *box);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::init_pipeline, void, api::device *device, api::pipeline_layout layout, uint32_t subobject_count, const api::pipeline_subobject *subobjects, api::pipeline pipeline);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::create_pipeline, bool, api::device *device, api::pipeline_layout layout, uint32_t subobject_count, const api::pipeline_subobject *subobjects);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::destroy_pipeline, void, api::device *device, api::pipeline pipeline);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::init_pipeline_layout, void, api::device *device, uint32_t param_count, const api::pipeline_layout_param *params, api::pipeline_layout layout);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::create_pipeline_layout, bool, api::device *device, uint32_t param_count, const api::pipeline_layout_param *params);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::destroy_pipeline_layout, void, api::device *device, api::pipeline_layout layout);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::copy_descriptor_sets, bool, api::device *device, uint32_t count, const api::descriptor_set_copy *copies);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::update_descriptor_sets, bool, api::device *device, uint32_t count, const api::descriptor_set_update *updates);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::init_query_pool, void, api::device *device, api::query_type type, uint32_t size, api::query_pool pool);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::create_query_pool, bool, api::device *device, api::query_type type, uint32_t &size);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::destroy_query_pool, void, api::device *device, api::query_pool pool);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::get_query_pool_results, bool, api::device *device, api::query_pool pool, uint32_t first, uint32_t count, void *results, uint32_t stride);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::barrier, void, api::command_list *cmd_list, uint32_t count, const api::resource *resources, const api::resource_usage *old_states, const api::resource_usage *new_states);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::begin_render_pass, void, api::command_list *cmd_list, uint32_t count, const api::render_pass_render_target_desc *rts, const api::render_pass_depth_stencil_desc *ds);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::end_render_pass, void, api::command_list *cmd_list);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::bind_render_targets_and_depth_stencil, void, api::command_list *cmd_list, uint32_t count, const api::resource_view *rtvs, api::resource_view dsv);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::bind_pipeline, void, api::command_list *cmd_list, api::pipeline_stage stages, api::pipeline pipeline);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::bind_pipeline_states, void, api::command_list *cmd_list, uint32_t count, const api::dynamic_state *states, const uint32_t *values);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::bind_viewports, void, api::command_list *cmd_list, uint32_t first, uint32_t count, const api::viewport *viewports);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::bind_scissor_rects, void, api::command_list *cmd_list, uint32_t first, uint32_t count, const api::rect *rects);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::push_constants, void, api::command_list *cmd_list, api::shader_stage stages, api::pipeline_layout layout, uint32_t layout_param, uint32_t first, uint32_t count, const uint32_t *values);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::push_descriptors, void, api::command_list *cmd_list, api::shader_stage stages, api::pipeline_layout layout, uint32_t layout_param, const api::descriptor_set_update &update);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::bind_descriptor_sets, void, api::command_list *cmd_list, api::shader_stage stages, api::pipeline_layout layout, uint32_t first, uint32_t count, const api::descriptor_set *sets);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::bind_index_buffer, void, api::command_list *cmd_list, api::resource buffer, uint64_t offset, uint32_t index_size);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::bind_vertex_buffers, void, api::command_list *cmd_list, uint32_t first, uint32_t count, const api::resource *buffers, const uint64_t *offsets, const uint32_t *strides);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::bind_stream_output_buffers, void, api::command_list *cmd_list, uint32_t first, uint32_t count, const api::resource *buffers, const uint64_t *offsets, const uint64_t *max_sizes);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::draw, bool, api::command_list *cmd_list, uint32_t vertex_count, uint32_t instance_count, uint32_t first_vertex, uint32_t first_instance);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::draw_indexed, bool, api::command_list *cmd_list, uint32_t index_count, uint32_t instance_count, uint32_t first_index, int32_t vertex_offset, uint32_t first_instance);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::dispatch, bool, api::command_list *cmd_list, uint32_t group_count_x, uint32_t group_count_y, uint32_t group_count_z);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::draw_or_dispatch_indirect, bool, api::command_list *cmd_list, api::indirect_command type, api::resource buffer, uint64_t offset, uint32_t draw_count, uint32_t stride);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::copy_resource, bool, api::command_list *cmd_list, api::resource source, api::resource dest);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::copy_buffer_region, bool, api::command_list *cmd_list, api::resource source, uint64_t source_offset, api::resource dest, uint64_t dest_offset, uint64_t size);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::copy_buffer_to_texture, bool, api::command_list *cmd_list, api::resource source, uint64_t source_offset, uint32_t row_length, uint32_t slice_height, api::resource dest, uint32_t dest_subresource, const api::subresource_box *dest_box);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::copy_texture_region, bool, api::command_list *cmd_list, api::resource source, uint32_t source_subresource, const api::subresource_box *source_box, api::resource dest, uint32_t dest_subresource, const api::subresource_box *dest_box, api::filter_mode filter);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::copy_texture_to_buffer, bool, api::command_list *cmd_list, api::resource source, uint32_t source_subresource, const api::subresource_box *source_box, api::resource dest, uint64_t dest_offset, uint32_t row_length, uint32_t slice_height);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::resolve_texture_region, bool, api::command_list *cmd_list, api::resource source, uint32_t source_subresource, const api::subresource_box *source_box, api::resource dest, uint32_t dest_subresource, int32_t dest_x, int32_t dest_y, int32_t dest_z, api::format format);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::clear_depth_stencil_view, bool, api::command_list *cmd_list, api::resource_view dsv, const float *depth, const uint8_t *stencil, uint32_t rect_count, const api::rect *rects);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::clear_render_target_view, bool, api::command_list *cmd_list, api::resource_view rtv, const float color[4], uint32_t rect_count, const api::rect *rects);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::clear_unordered_access_view_uint, bool, api::command_list *cmd_list, api::resource_view uav, const uint32_t values[4], uint32_t rect_count, const api::rect *rects);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::clear_unordered_access_view_float, bool, api::command_list *cmd_list, api::resource_view uav, const float values[4], uint32_t rect_count, const api::rect *rects);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::generate_mipmaps, bool, api::command_list *cmd_list, api::resource_view srv);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::begin_query, bool, api::command_list *cmd_list, api::query_pool pool, api::query_type type, uint32_t index);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::end_query, bool, api::command_list *cmd_list, api::query_pool pool, api::query_type type, uint32_t index);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::copy_query_pool_results, bool, api::command_list *cmd_list, api::query_pool pool, api::query_type type, uint32_t first, uint32_t count, api::resource dest, uint64_t dest_offset, uint32_t stride);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::reset_command_list, void, api::command_list *cmd_list);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::close_command_list, void, api::command_list *cmd_list);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::execute_command_list, void, api::command_queue *queue, api::command_list *cmd_list);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::execute_secondary_command_list, void, api::command_list *cmd_list, api::command_list *secondary_cmd_list);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::present, void, api::command_queue *queue, api::swapchain *swapchain, const api::rect *source_rect, const api::rect *dest_rect, uint32_t dirty_rect_count, const api::rect *dirty_rects);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::reshade_present, void, api::effect_runtime *runtime);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::reshade_begin_effects, void, api::effect_runtime *runtime, api::command_list *cmd_list, api::resource_view rtv, api::resource_view rtv_srgb);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::reshade_finish_effects, void, api::effect_runtime *runtime, api::command_list *cmd_list, api::resource_view rtv, api::resource_view rtv_srgb);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::reshade_reloaded_effects, void, api::effect_runtime *runtime);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::reshade_set_uniform_value, bool, api::effect_runtime *runtime, api::effect_uniform_variable variable, const void *data, size_t size);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::reshade_set_technique_state, bool, api::effect_runtime *runtime, api::effect_technique technique, bool enabled);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::reshade_overlay, void, api::effect_runtime *runtime);
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::reshade_screenshot, void, api::effect_runtime *runtime, const char *filename);
+
+	RESHADE_DEFINE_ADDON_EVENT_TRAITS(addon_event::reshade_render_technique, void, api::effect_runtime *runtime, api::effect_technique technique, api::command_list *cmd_list, api::resource_view rtv, api::resource_view rtv_srgb);
+}
diff --git a/src/3rd party/reshade/reshade_overlay.hpp b/src/3rd party/reshade/reshade_overlay.hpp
new file mode 100644
index 0000000..50eca24
--- /dev/null
+++ b/src/3rd party/reshade/reshade_overlay.hpp	
@@ -0,0 +1,857 @@
+/*
+ * Copyright (C) 2021 Patrick Mours
+ * Copyright (C) 2014-2022 Omar Cornut
+ * SPDX-License-Identifier: BSD-3-Clause OR MIT
+ */
+
+#pragma once
+
+#if defined(IMGUI_VERSION_NUM)
+
+// Check that the 'ImTextureID' type has the same size as 'reshade::api::resource_view'
+static_assert(sizeof(ImTextureID) == 8, "missing \"#define ImTextureID ImU64\" before \"#include <imgui.h>\"");
+
+struct imgui_function_table
+{
+	ImGuiIO&(*GetIO)();
+	ImGuiStyle&(*GetStyle)();
+	const char*(*GetVersion)();
+	bool(*Begin)(const char* name, bool* p_open, ImGuiWindowFlags flags);
+	void(*End)();
+	bool(*BeginChild)(const char* str_id, const ImVec2& size, bool border, ImGuiWindowFlags flags);
+	bool(*BeginChild2)(ImGuiID id, const ImVec2& size, bool border, ImGuiWindowFlags flags);
+	void(*EndChild)();
+	bool(*IsWindowAppearing)();
+	bool(*IsWindowCollapsed)();
+	bool(*IsWindowFocused)(ImGuiFocusedFlags flags);
+	bool(*IsWindowHovered)(ImGuiHoveredFlags flags);
+	ImDrawList*(*GetWindowDrawList)();
+	float(*GetWindowDpiScale)();
+	ImVec2(*GetWindowPos)();
+	ImVec2(*GetWindowSize)();
+	float(*GetWindowWidth)();
+	float(*GetWindowHeight)();
+	void(*SetNextWindowPos)(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot);
+	void(*SetNextWindowSize)(const ImVec2& size, ImGuiCond cond);
+	void(*SetNextWindowSizeConstraints)(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback, void* custom_callback_data);
+	void(*SetNextWindowContentSize)(const ImVec2& size);
+	void(*SetNextWindowCollapsed)(bool collapsed, ImGuiCond cond);
+	void(*SetNextWindowFocus)();
+	void(*SetNextWindowBgAlpha)(float alpha);
+	void(*SetWindowPos)(const ImVec2& pos, ImGuiCond cond);
+	void(*SetWindowSize)(const ImVec2& size, ImGuiCond cond);
+	void(*SetWindowCollapsed)(bool collapsed, ImGuiCond cond);
+	void(*SetWindowFocus)();
+	void(*SetWindowFontScale)(float scale);
+	void(*SetWindowPos2)(const char* name, const ImVec2& pos, ImGuiCond cond);
+	void(*SetWindowSize2)(const char* name, const ImVec2& size, ImGuiCond cond);
+	void(*SetWindowCollapsed2)(const char* name, bool collapsed, ImGuiCond cond);
+	void(*SetWindowFocus2)(const char* name);
+	ImVec2(*GetContentRegionAvail)();
+	ImVec2(*GetContentRegionMax)();
+	ImVec2(*GetWindowContentRegionMin)();
+	ImVec2(*GetWindowContentRegionMax)();
+	float(*GetScrollX)();
+	float(*GetScrollY)();
+	void(*SetScrollX)(float scroll_x);
+	void(*SetScrollY)(float scroll_y);
+	float(*GetScrollMaxX)();
+	float(*GetScrollMaxY)();
+	void(*SetScrollHereX)(float center_x_ratio);
+	void(*SetScrollHereY)(float center_y_ratio);
+	void(*SetScrollFromPosX)(float local_x, float center_x_ratio);
+	void(*SetScrollFromPosY)(float local_y, float center_y_ratio);
+	void(*PushFont)(ImFont* font);
+	void(*PopFont)();
+	void(*PushStyleColor)(ImGuiCol idx, ImU32 col);
+	void(*PushStyleColor2)(ImGuiCol idx, const ImVec4& col);
+	void(*PopStyleColor)(int count);
+	void(*PushStyleVar)(ImGuiStyleVar idx, float val);
+	void(*PushStyleVar2)(ImGuiStyleVar idx, const ImVec2& val);
+	void(*PopStyleVar)(int count);
+	void(*PushAllowKeyboardFocus)(bool allow_keyboard_focus);
+	void(*PopAllowKeyboardFocus)();
+	void(*PushButtonRepeat)(bool repeat);
+	void(*PopButtonRepeat)();
+	void(*PushItemWidth)(float item_width);
+	void(*PopItemWidth)();
+	void(*SetNextItemWidth)(float item_width);
+	float(*CalcItemWidth)();
+	void(*PushTextWrapPos)(float wrap_local_pos_x);
+	void(*PopTextWrapPos)();
+	ImFont*(*GetFont)();
+	float(*GetFontSize)();
+	ImVec2(*GetFontTexUvWhitePixel)();
+	ImU32(*GetColorU32)(ImGuiCol idx, float alpha_mul);
+	ImU32(*GetColorU322)(const ImVec4& col);
+	ImU32(*GetColorU323)(ImU32 col);
+	const ImVec4&(*GetStyleColorVec4)(ImGuiCol idx);
+	void(*Separator)();
+	void(*SameLine)(float offset_from_start_x, float spacing);
+	void(*NewLine)();
+	void(*Spacing)();
+	void(*Dummy)(const ImVec2& size);
+	void(*Indent)(float indent_w);
+	void(*Unindent)(float indent_w);
+	void(*BeginGroup)();
+	void(*EndGroup)();
+	ImVec2(*GetCursorPos)();
+	float(*GetCursorPosX)();
+	float(*GetCursorPosY)();
+	void(*SetCursorPos)(const ImVec2& local_pos);
+	void(*SetCursorPosX)(float local_x);
+	void(*SetCursorPosY)(float local_y);
+	ImVec2(*GetCursorStartPos)();
+	ImVec2(*GetCursorScreenPos)();
+	void(*SetCursorScreenPos)(const ImVec2& pos);
+	void(*AlignTextToFramePadding)();
+	float(*GetTextLineHeight)();
+	float(*GetTextLineHeightWithSpacing)();
+	float(*GetFrameHeight)();
+	float(*GetFrameHeightWithSpacing)();
+	void(*PushID)(const char* str_id);
+	void(*PushID2)(const char* str_id_begin, const char* str_id_end);
+	void(*PushID3)(const void* ptr_id);
+	void(*PushID4)(int int_id);
+	void(*PopID)();
+	ImGuiID(*GetID)(const char* str_id);
+	ImGuiID(*GetID2)(const char* str_id_begin, const char* str_id_end);
+	ImGuiID(*GetID3)(const void* ptr_id);
+	void(*TextUnformatted)(const char* text, const char* text_end);
+	void(*TextV)(const char* fmt, va_list args);
+	void(*TextColoredV)(const ImVec4& col, const char* fmt, va_list args);
+	void(*TextDisabledV)(const char* fmt, va_list args);
+	void(*TextWrappedV)(const char* fmt, va_list args);
+	void(*LabelTextV)(const char* label, const char* fmt, va_list args);
+	void(*BulletTextV)(const char* fmt, va_list args);
+	bool(*Button)(const char* label, const ImVec2& size);
+	bool(*SmallButton)(const char* label);
+	bool(*InvisibleButton)(const char* str_id, const ImVec2& size, ImGuiButtonFlags flags);
+	bool(*ArrowButton)(const char* str_id, ImGuiDir dir);
+	void(*Image)(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& tint_col, const ImVec4& border_col);
+	bool(*ImageButton)(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, int frame_padding, const ImVec4& bg_col, const ImVec4& tint_col);
+	bool(*Checkbox)(const char* label, bool* v);
+	bool(*CheckboxFlags)(const char* label, int* flags, int flags_value);
+	bool(*CheckboxFlags2)(const char* label, unsigned int* flags, unsigned int flags_value);
+	bool(*RadioButton)(const char* label, bool active);
+	bool(*RadioButton2)(const char* label, int* v, int v_button);
+	void(*ProgressBar)(float fraction, const ImVec2& size_arg, const char* overlay);
+	void(*Bullet)();
+	bool(*BeginCombo)(const char* label, const char* preview_value, ImGuiComboFlags flags);
+	void(*EndCombo)();
+	bool(*Combo)(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items);
+	bool(*Combo2)(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items);
+	bool(*Combo3)(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items);
+	bool(*DragFloat)(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*DragFloat2)(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*DragFloat3)(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*DragFloat4)(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*DragFloatRange2)(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* format, const char* format_max, ImGuiSliderFlags flags);
+	bool(*DragInt)(const char* label, int* v, float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*DragInt2)(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*DragInt3)(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*DragInt4)(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*DragIntRange2)(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* format, const char* format_max, ImGuiSliderFlags flags);
+	bool(*DragScalar)(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
+	bool(*DragScalarN)(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
+	bool(*SliderFloat)(const char* label, float* v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*SliderFloat2)(const char* label, float v[2], float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*SliderFloat3)(const char* label, float v[3], float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*SliderFloat4)(const char* label, float v[4], float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*SliderAngle)(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max, const char* format, ImGuiSliderFlags flags);
+	bool(*SliderInt)(const char* label, int* v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*SliderInt2)(const char* label, int v[2], int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*SliderInt3)(const char* label, int v[3], int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*SliderInt4)(const char* label, int v[4], int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*SliderScalar)(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
+	bool(*SliderScalarN)(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
+	bool(*VSliderFloat)(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*VSliderInt)(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
+	bool(*VSliderScalar)(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
+	bool(*InputText)(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);
+	bool(*InputTextMultiline)(const char* label, char* buf, size_t buf_size, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);
+	bool(*InputTextWithHint)(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);
+	bool(*InputFloat)(const char* label, float* v, float step, float step_fast, const char* format, ImGuiInputTextFlags flags);
+	bool(*InputFloat2)(const char* label, float v[2], const char* format, ImGuiInputTextFlags flags);
+	bool(*InputFloat3)(const char* label, float v[3], const char* format, ImGuiInputTextFlags flags);
+	bool(*InputFloat4)(const char* label, float v[4], const char* format, ImGuiInputTextFlags flags);
+	bool(*InputInt)(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags flags);
+	bool(*InputInt2)(const char* label, int v[2], ImGuiInputTextFlags flags);
+	bool(*InputInt3)(const char* label, int v[3], ImGuiInputTextFlags flags);
+	bool(*InputInt4)(const char* label, int v[4], ImGuiInputTextFlags flags);
+	bool(*InputDouble)(const char* label, double* v, double step, double step_fast, const char* format, ImGuiInputTextFlags flags);
+	bool(*InputScalar)(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags);
+	bool(*InputScalarN)(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags);
+	bool(*ColorEdit3)(const char* label, float col[3], ImGuiColorEditFlags flags);
+	bool(*ColorEdit4)(const char* label, float col[4], ImGuiColorEditFlags flags);
+	bool(*ColorPicker3)(const char* label, float col[3], ImGuiColorEditFlags flags);
+	bool(*ColorPicker4)(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col);
+	bool(*ColorButton)(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec2 size);
+	void(*SetColorEditOptions)(ImGuiColorEditFlags flags);
+	bool(*TreeNode)(const char* label);
+	bool(*TreeNodeV)(const char* str_id, const char* fmt, va_list args);
+	bool(*TreeNodeV2)(const void* ptr_id, const char* fmt, va_list args);
+	bool(*TreeNodeEx)(const char* label, ImGuiTreeNodeFlags flags);
+	bool(*TreeNodeExV)(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args);
+	bool(*TreeNodeExV2)(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args);
+	void(*TreePush)(const char* str_id);
+	void(*TreePush2)(const void* ptr_id);
+	void(*TreePop)();
+	float(*GetTreeNodeToLabelSpacing)();
+	bool(*CollapsingHeader)(const char* label, ImGuiTreeNodeFlags flags);
+	bool(*CollapsingHeader2)(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags);
+	void(*SetNextItemOpen)(bool is_open, ImGuiCond cond);
+	bool(*Selectable)(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2& size);
+	bool(*Selectable2)(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2& size);
+	bool(*BeginListBox)(const char* label, const ImVec2& size);
+	void(*EndListBox)();
+	bool(*ListBox)(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items);
+	bool(*ListBox2)(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int height_in_items);
+	void(*PlotLines)(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride);
+	void(*PlotLines2)(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size);
+	void(*PlotHistogram)(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride);
+	void(*PlotHistogram2)(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size);
+	void(*Value)(const char* prefix, bool b);
+	void(*Value2)(const char* prefix, int v);
+	void(*Value3)(const char* prefix, unsigned int v);
+	void(*Value4)(const char* prefix, float v, const char* float_format);
+	bool(*BeginMenuBar)();
+	void(*EndMenuBar)();
+	bool(*BeginMainMenuBar)();
+	void(*EndMainMenuBar)();
+	bool(*BeginMenu)(const char* label, bool enabled);
+	void(*EndMenu)();
+	bool(*MenuItem)(const char* label, const char* shortcut, bool selected, bool enabled);
+	bool(*MenuItem2)(const char* label, const char* shortcut, bool* p_selected, bool enabled);
+	void(*BeginTooltip)();
+	void(*EndTooltip)();
+	void(*SetTooltipV)(const char* fmt, va_list args);
+	bool(*BeginPopup)(const char* str_id, ImGuiWindowFlags flags);
+	bool(*BeginPopupModal)(const char* name, bool* p_open, ImGuiWindowFlags flags);
+	void(*EndPopup)();
+	void(*OpenPopup)(const char* str_id, ImGuiPopupFlags popup_flags);
+	void(*OpenPopup2)(ImGuiID id, ImGuiPopupFlags popup_flags);
+	void(*OpenPopupOnItemClick)(const char* str_id, ImGuiPopupFlags popup_flags);
+	void(*CloseCurrentPopup)();
+	bool(*BeginPopupContextItem)(const char* str_id, ImGuiPopupFlags popup_flags);
+	bool(*BeginPopupContextWindow)(const char* str_id, ImGuiPopupFlags popup_flags);
+	bool(*BeginPopupContextVoid)(const char* str_id, ImGuiPopupFlags popup_flags);
+	bool(*IsPopupOpen)(const char* str_id, ImGuiPopupFlags flags);
+	bool(*BeginTable)(const char* str_id, int column, ImGuiTableFlags flags, const ImVec2& outer_size, float inner_width);
+	void(*EndTable)();
+	void(*TableNextRow)(ImGuiTableRowFlags row_flags, float min_row_height);
+	bool(*TableNextColumn)();
+	bool(*TableSetColumnIndex)(int column_n);
+	void(*TableSetupColumn)(const char* label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id);
+	void(*TableSetupScrollFreeze)(int cols, int rows);
+	void(*TableHeadersRow)();
+	void(*TableHeader)(const char* label);
+	ImGuiTableSortSpecs*(*TableGetSortSpecs)();
+	int(*TableGetColumnCount)();
+	int(*TableGetColumnIndex)();
+	int(*TableGetRowIndex)();
+	const char*(*TableGetColumnName)(int column_n);
+	ImGuiTableColumnFlags(*TableGetColumnFlags)(int column_n);
+	void(*TableSetColumnEnabled)(int column_n, bool v);
+	void(*TableSetBgColor)(ImGuiTableBgTarget target, ImU32 color, int column_n);
+	void(*Columns)(int count, const char* id, bool border);
+	void(*NextColumn)();
+	int(*GetColumnIndex)();
+	float(*GetColumnWidth)(int column_index);
+	void(*SetColumnWidth)(int column_index, float width);
+	float(*GetColumnOffset)(int column_index);
+	void(*SetColumnOffset)(int column_index, float offset_x);
+	int(*GetColumnsCount)();
+	bool(*BeginTabBar)(const char* str_id, ImGuiTabBarFlags flags);
+	void(*EndTabBar)();
+	bool(*BeginTabItem)(const char* label, bool* p_open, ImGuiTabItemFlags flags);
+	void(*EndTabItem)();
+	bool(*TabItemButton)(const char* label, ImGuiTabItemFlags flags);
+	void(*SetTabItemClosed)(const char* tab_or_docked_window_label);
+	ImGuiID(*DockSpace)(ImGuiID id, const ImVec2& size, ImGuiDockNodeFlags flags, const ImGuiWindowClass* window_class);
+	void(*SetNextWindowDockID)(ImGuiID dock_id, ImGuiCond cond);
+	void(*SetNextWindowClass)(const ImGuiWindowClass* window_class);
+	ImGuiID(*GetWindowDockID)();
+	bool(*IsWindowDocked)();
+	bool(*BeginDragDropSource)(ImGuiDragDropFlags flags);
+	bool(*SetDragDropPayload)(const char* type, const void* data, size_t sz, ImGuiCond cond);
+	void(*EndDragDropSource)();
+	bool(*BeginDragDropTarget)();
+	const ImGuiPayload*(*AcceptDragDropPayload)(const char* type, ImGuiDragDropFlags flags);
+	void(*EndDragDropTarget)();
+	const ImGuiPayload*(*GetDragDropPayload)();
+	void(*BeginDisabled)(bool disabled);
+	void(*EndDisabled)();
+	void(*PushClipRect)(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect);
+	void(*PopClipRect)();
+	void(*SetItemDefaultFocus)();
+	void(*SetKeyboardFocusHere)(int offset);
+	bool(*IsItemHovered)(ImGuiHoveredFlags flags);
+	bool(*IsItemActive)();
+	bool(*IsItemFocused)();
+	bool(*IsItemClicked)(ImGuiMouseButton mouse_button);
+	bool(*IsItemVisible)();
+	bool(*IsItemEdited)();
+	bool(*IsItemActivated)();
+	bool(*IsItemDeactivated)();
+	bool(*IsItemDeactivatedAfterEdit)();
+	bool(*IsItemToggledOpen)();
+	bool(*IsAnyItemHovered)();
+	bool(*IsAnyItemActive)();
+	bool(*IsAnyItemFocused)();
+	ImVec2(*GetItemRectMin)();
+	ImVec2(*GetItemRectMax)();
+	ImVec2(*GetItemRectSize)();
+	void(*SetItemAllowOverlap)();
+	bool(*IsRectVisible)(const ImVec2& size);
+	bool(*IsRectVisible2)(const ImVec2& rect_min, const ImVec2& rect_max);
+	double(*GetTime)();
+	int(*GetFrameCount)();
+	ImDrawList*(*GetBackgroundDrawList)();
+	ImDrawList*(*GetForegroundDrawList)();
+	ImDrawList*(*GetBackgroundDrawList2)(ImGuiViewport* viewport);
+	ImDrawList*(*GetForegroundDrawList2)(ImGuiViewport* viewport);
+	ImDrawListSharedData*(*GetDrawListSharedData)();
+	const char*(*GetStyleColorName)(ImGuiCol idx);
+	void(*SetStateStorage)(ImGuiStorage* storage);
+	ImGuiStorage*(*GetStateStorage)();
+	bool(*BeginChildFrame)(ImGuiID id, const ImVec2& size, ImGuiWindowFlags flags);
+	void(*EndChildFrame)();
+	ImVec2(*CalcTextSize)(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width);
+	ImVec4(*ColorConvertU32ToFloat4)(ImU32 in);
+	ImU32(*ColorConvertFloat4ToU32)(const ImVec4& in);
+	void(*ColorConvertRGBtoHSV)(float r, float g, float b, float& out_h, float& out_s, float& out_v);
+	void(*ColorConvertHSVtoRGB)(float h, float s, float v, float& out_r, float& out_g, float& out_b);
+	int(*GetKeyIndex)(ImGuiKey imgui_key);
+	bool(*IsKeyDown)(int user_key_index);
+	bool(*IsKeyPressed)(int user_key_index, bool repeat);
+	bool(*IsKeyReleased)(int user_key_index);
+	int(*GetKeyPressedAmount)(int key_index, float repeat_delay, float rate);
+	void(*CaptureKeyboardFromApp)(bool want_capture_keyboard_value);
+	bool(*IsMouseDown)(ImGuiMouseButton button);
+	bool(*IsMouseClicked)(ImGuiMouseButton button, bool repeat);
+	bool(*IsMouseReleased)(ImGuiMouseButton button);
+	bool(*IsMouseDoubleClicked)(ImGuiMouseButton button);
+	int(*GetMouseClickedCount)(ImGuiMouseButton button);
+	bool(*IsMouseHoveringRect)(const ImVec2& r_min, const ImVec2& r_max, bool clip);
+	bool(*IsMousePosValid)(const ImVec2* mouse_pos);
+	bool(*IsAnyMouseDown)();
+	ImVec2(*GetMousePos)();
+	ImVec2(*GetMousePosOnOpeningCurrentPopup)();
+	bool(*IsMouseDragging)(ImGuiMouseButton button, float lock_threshold);
+	ImVec2(*GetMouseDragDelta)(ImGuiMouseButton button, float lock_threshold);
+	void(*ResetMouseDragDelta)(ImGuiMouseButton button);
+	ImGuiMouseCursor(*GetMouseCursor)();
+	void(*SetMouseCursor)(ImGuiMouseCursor cursor_type);
+	void(*CaptureMouseFromApp)(bool want_capture_mouse_value);
+	const char*(*GetClipboardText)();
+	void(*SetClipboardText)(const char* text);
+	bool(*DebugCheckVersionAndDataLayout)(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx);
+	void(*SetAllocatorFunctions)(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void* user_data);
+	void(*GetAllocatorFunctions)(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, void** p_user_data);
+	void*(*MemAlloc)(size_t size);
+	void(*MemFree)(void* ptr);
+	int(*ImGuiStorage_GetInt)(const ImGuiStorage *_this, ImGuiID key, int default_val);
+	void(*ImGuiStorage_SetInt)(ImGuiStorage *_this, ImGuiID key, int val);
+	bool(*ImGuiStorage_GetBool)(const ImGuiStorage *_this, ImGuiID key, bool default_val);
+	void(*ImGuiStorage_SetBool)(ImGuiStorage *_this, ImGuiID key, bool val);
+	float(*ImGuiStorage_GetFloat)(const ImGuiStorage *_this, ImGuiID key, float default_val);
+	void(*ImGuiStorage_SetFloat)(ImGuiStorage *_this, ImGuiID key, float val);
+	void*(*ImGuiStorage_GetVoidPtr)(const ImGuiStorage *_this, ImGuiID key);
+	void(*ImGuiStorage_SetVoidPtr)(ImGuiStorage *_this, ImGuiID key, void* val);
+	int*(*ImGuiStorage_GetIntRef)(ImGuiStorage *_this, ImGuiID key, int default_val);
+	bool*(*ImGuiStorage_GetBoolRef)(ImGuiStorage *_this, ImGuiID key, bool default_val);
+	float*(*ImGuiStorage_GetFloatRef)(ImGuiStorage *_this, ImGuiID key, float default_val);
+	void**(*ImGuiStorage_GetVoidPtrRef)(ImGuiStorage *_this, ImGuiID key, void* default_val);
+	void(*ImGuiStorage_SetAllInt)(ImGuiStorage *_this, int val);
+	void(*ImGuiStorage_BuildSortByKey)(ImGuiStorage *_this);
+	void(*ConstructImGuiListClipper)(ImGuiListClipper *_this);
+	void(*DestructImGuiListClipper)(ImGuiListClipper *_this);
+	void(*ImGuiListClipper_Begin)(ImGuiListClipper *_this, int items_count, float items_height);
+	void(*ImGuiListClipper_End)(ImGuiListClipper *_this);
+	bool(*ImGuiListClipper_Step)(ImGuiListClipper *_this);
+	void(*ImGuiListClipper_ForceDisplayRangeByIndices)(ImGuiListClipper *_this, int item_min, int item_max);
+	void(*ImDrawList_PushClipRect)(ImDrawList *_this, ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect);
+	void(*ImDrawList_PushClipRectFullScreen)(ImDrawList *_this);
+	void(*ImDrawList_PopClipRect)(ImDrawList *_this);
+	void(*ImDrawList_PushTextureID)(ImDrawList *_this, ImTextureID texture_id);
+	void(*ImDrawList_PopTextureID)(ImDrawList *_this);
+	void(*ImDrawList_AddLine)(ImDrawList *_this, const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness);
+	void(*ImDrawList_AddRect)(ImDrawList *_this, const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, ImDrawFlags flags, float thickness);
+	void(*ImDrawList_AddRectFilled)(ImDrawList *_this, const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, ImDrawFlags flags);
+	void(*ImDrawList_AddRectFilledMultiColor)(ImDrawList *_this, const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);
+	void(*ImDrawList_AddQuad)(ImDrawList *_this, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness);
+	void(*ImDrawList_AddQuadFilled)(ImDrawList *_this, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col);
+	void(*ImDrawList_AddTriangle)(ImDrawList *_this, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness);
+	void(*ImDrawList_AddTriangleFilled)(ImDrawList *_this, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col);
+	void(*ImDrawList_AddCircle)(ImDrawList *_this, const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness);
+	void(*ImDrawList_AddCircleFilled)(ImDrawList *_this, const ImVec2& center, float radius, ImU32 col, int num_segments);
+	void(*ImDrawList_AddNgon)(ImDrawList *_this, const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness);
+	void(*ImDrawList_AddNgonFilled)(ImDrawList *_this, const ImVec2& center, float radius, ImU32 col, int num_segments);
+	void(*ImDrawList_AddText)(ImDrawList *_this, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end);
+	void(*ImDrawList_AddText2)(ImDrawList *_this, const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end, float wrap_width, const ImVec4* cpu_fine_clip_rect);
+	void(*ImDrawList_AddPolyline)(ImDrawList *_this, const ImVec2* points, int num_points, ImU32 col, ImDrawFlags flags, float thickness);
+	void(*ImDrawList_AddConvexPolyFilled)(ImDrawList *_this, const ImVec2* points, int num_points, ImU32 col);
+	void(*ImDrawList_AddBezierCubic)(ImDrawList *_this, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments);
+	void(*ImDrawList_AddBezierQuadratic)(ImDrawList *_this, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness, int num_segments);
+	void(*ImDrawList_AddImage)(ImDrawList *_this, ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min, const ImVec2& uv_max, ImU32 col);
+	void(*ImDrawList_AddImageQuad)(ImDrawList *_this, ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& uv1, const ImVec2& uv2, const ImVec2& uv3, const ImVec2& uv4, ImU32 col);
+	void(*ImDrawList_AddImageRounded)(ImDrawList *_this, ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min, const ImVec2& uv_max, ImU32 col, float rounding, ImDrawFlags flags);
+	void(*ImDrawList_PathArcTo)(ImDrawList *_this, const ImVec2& center, float radius, float a_min, float a_max, int num_segments);
+	void(*ImDrawList_PathArcToFast)(ImDrawList *_this, const ImVec2& center, float radius, int a_min_of_12, int a_max_of_12);
+	void(*ImDrawList_PathBezierCubicCurveTo)(ImDrawList *_this, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments);
+	void(*ImDrawList_PathBezierQuadraticCurveTo)(ImDrawList *_this, const ImVec2& p2, const ImVec2& p3, int num_segments);
+	void(*ImDrawList_PathRect)(ImDrawList *_this, const ImVec2& rect_min, const ImVec2& rect_max, float rounding, ImDrawFlags flags);
+	void(*ImDrawList_AddCallback)(ImDrawList *_this, ImDrawCallback callback, void* callback_data);
+	void(*ImDrawList_AddDrawCmd)(ImDrawList *_this);
+	ImDrawList*(*ImDrawList_CloneOutput)(const ImDrawList *_this);
+	void(*ImDrawList_PrimReserve)(ImDrawList *_this, int idx_count, int vtx_count);
+	void(*ImDrawList_PrimUnreserve)(ImDrawList *_this, int idx_count, int vtx_count);
+	void(*ImDrawList_PrimRect)(ImDrawList *_this, const ImVec2& a, const ImVec2& b, ImU32 col);
+	void(*ImDrawList_PrimRectUV)(ImDrawList *_this, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);
+	void(*ImDrawList_PrimQuadUV)(ImDrawList *_this, const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col);
+	void(*ConstructImFont)(ImFont *_this);
+	void(*DestructImFont)(ImFont *_this);
+	const ImFontGlyph*(*ImFont_FindGlyph)(const ImFont *_this, ImWchar c);
+	const ImFontGlyph*(*ImFont_FindGlyphNoFallback)(const ImFont *_this, ImWchar c);
+	ImVec2(*ImFont_CalcTextSizeA)(const ImFont *_this, float size, float max_width, float wrap_width, const char* text_begin, const char* text_end, const char** remaining);
+	const char*(*ImFont_CalcWordWrapPositionA)(const ImFont *_this, float scale, const char* text, const char* text_end, float wrap_width);
+	void(*ImFont_RenderChar)(const ImFont *_this, ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c);
+	void(*ImFont_RenderText)(const ImFont *_this, ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width, bool cpu_fine_clip);
+
+};
+
+inline const imgui_function_table *&imgui_function_table_instance()
+{
+	static const imgui_function_table *instance = nullptr;
+	return instance;
+}
+
+#ifndef RESHADE_ADDON
+
+namespace ImGui
+{
+	inline ImGuiIO& GetIO() { return imgui_function_table_instance()->GetIO(); }
+	inline ImGuiStyle& GetStyle() { return imgui_function_table_instance()->GetStyle(); }
+	inline const char* GetVersion() { return imgui_function_table_instance()->GetVersion(); }
+	inline bool Begin(const char* name, bool* p_open, ImGuiWindowFlags flags) { return imgui_function_table_instance()->Begin(name, p_open, flags); }
+	inline void End() { imgui_function_table_instance()->End(); }
+	inline bool BeginChild(const char* str_id, const ImVec2& size, bool border, ImGuiWindowFlags flags) { return imgui_function_table_instance()->BeginChild(str_id, size, border, flags); }
+	inline bool BeginChild(ImGuiID id, const ImVec2& size, bool border, ImGuiWindowFlags flags) { return imgui_function_table_instance()->BeginChild2(id, size, border, flags); }
+	inline void EndChild() { imgui_function_table_instance()->EndChild(); }
+	inline bool IsWindowAppearing() { return imgui_function_table_instance()->IsWindowAppearing(); }
+	inline bool IsWindowCollapsed() { return imgui_function_table_instance()->IsWindowCollapsed(); }
+	inline bool IsWindowFocused(ImGuiFocusedFlags flags) { return imgui_function_table_instance()->IsWindowFocused(flags); }
+	inline bool IsWindowHovered(ImGuiHoveredFlags flags) { return imgui_function_table_instance()->IsWindowHovered(flags); }
+	inline ImDrawList* GetWindowDrawList() { return imgui_function_table_instance()->GetWindowDrawList(); }
+	inline float GetWindowDpiScale() { return imgui_function_table_instance()->GetWindowDpiScale(); }
+	inline ImVec2 GetWindowPos() { return imgui_function_table_instance()->GetWindowPos(); }
+	inline ImVec2 GetWindowSize() { return imgui_function_table_instance()->GetWindowSize(); }
+	inline float GetWindowWidth() { return imgui_function_table_instance()->GetWindowWidth(); }
+	inline float GetWindowHeight() { return imgui_function_table_instance()->GetWindowHeight(); }
+	inline void SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot) { imgui_function_table_instance()->SetNextWindowPos(pos, cond, pivot); }
+	inline void SetNextWindowSize(const ImVec2& size, ImGuiCond cond) { imgui_function_table_instance()->SetNextWindowSize(size, cond); }
+	inline void SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback, void* custom_callback_data) { imgui_function_table_instance()->SetNextWindowSizeConstraints(size_min, size_max, custom_callback, custom_callback_data); }
+	inline void SetNextWindowContentSize(const ImVec2& size) { imgui_function_table_instance()->SetNextWindowContentSize(size); }
+	inline void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond) { imgui_function_table_instance()->SetNextWindowCollapsed(collapsed, cond); }
+	inline void SetNextWindowFocus() { imgui_function_table_instance()->SetNextWindowFocus(); }
+	inline void SetNextWindowBgAlpha(float alpha) { imgui_function_table_instance()->SetNextWindowBgAlpha(alpha); }
+	inline void SetWindowPos(const ImVec2& pos, ImGuiCond cond) { imgui_function_table_instance()->SetWindowPos(pos, cond); }
+	inline void SetWindowSize(const ImVec2& size, ImGuiCond cond) { imgui_function_table_instance()->SetWindowSize(size, cond); }
+	inline void SetWindowCollapsed(bool collapsed, ImGuiCond cond) { imgui_function_table_instance()->SetWindowCollapsed(collapsed, cond); }
+	inline void SetWindowFocus() { imgui_function_table_instance()->SetWindowFocus(); }
+	inline void SetWindowFontScale(float scale) { imgui_function_table_instance()->SetWindowFontScale(scale); }
+	inline void SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond) { imgui_function_table_instance()->SetWindowPos2(name, pos, cond); }
+	inline void SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond) { imgui_function_table_instance()->SetWindowSize2(name, size, cond); }
+	inline void SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond) { imgui_function_table_instance()->SetWindowCollapsed2(name, collapsed, cond); }
+	inline void SetWindowFocus(const char* name) { imgui_function_table_instance()->SetWindowFocus2(name); }
+	inline ImVec2 GetContentRegionAvail() { return imgui_function_table_instance()->GetContentRegionAvail(); }
+	inline ImVec2 GetContentRegionMax() { return imgui_function_table_instance()->GetContentRegionMax(); }
+	inline ImVec2 GetWindowContentRegionMin() { return imgui_function_table_instance()->GetWindowContentRegionMin(); }
+	inline ImVec2 GetWindowContentRegionMax() { return imgui_function_table_instance()->GetWindowContentRegionMax(); }
+	inline float GetScrollX() { return imgui_function_table_instance()->GetScrollX(); }
+	inline float GetScrollY() { return imgui_function_table_instance()->GetScrollY(); }
+	inline void SetScrollX(float scroll_x) { imgui_function_table_instance()->SetScrollX(scroll_x); }
+	inline void SetScrollY(float scroll_y) { imgui_function_table_instance()->SetScrollY(scroll_y); }
+	inline float GetScrollMaxX() { return imgui_function_table_instance()->GetScrollMaxX(); }
+	inline float GetScrollMaxY() { return imgui_function_table_instance()->GetScrollMaxY(); }
+	inline void SetScrollHereX(float center_x_ratio) { imgui_function_table_instance()->SetScrollHereX(center_x_ratio); }
+	inline void SetScrollHereY(float center_y_ratio) { imgui_function_table_instance()->SetScrollHereY(center_y_ratio); }
+	inline void SetScrollFromPosX(float local_x, float center_x_ratio) { imgui_function_table_instance()->SetScrollFromPosX(local_x, center_x_ratio); }
+	inline void SetScrollFromPosY(float local_y, float center_y_ratio) { imgui_function_table_instance()->SetScrollFromPosY(local_y, center_y_ratio); }
+	inline void PushFont(ImFont* font) { imgui_function_table_instance()->PushFont(font); }
+	inline void PopFont() { imgui_function_table_instance()->PopFont(); }
+	inline void PushStyleColor(ImGuiCol idx, ImU32 col) { imgui_function_table_instance()->PushStyleColor(idx, col); }
+	inline void PushStyleColor(ImGuiCol idx, const ImVec4& col) { imgui_function_table_instance()->PushStyleColor2(idx, col); }
+	inline void PopStyleColor(int count) { imgui_function_table_instance()->PopStyleColor(count); }
+	inline void PushStyleVar(ImGuiStyleVar idx, float val) { imgui_function_table_instance()->PushStyleVar(idx, val); }
+	inline void PushStyleVar(ImGuiStyleVar idx, const ImVec2& val) { imgui_function_table_instance()->PushStyleVar2(idx, val); }
+	inline void PopStyleVar(int count) { imgui_function_table_instance()->PopStyleVar(count); }
+	inline void PushAllowKeyboardFocus(bool allow_keyboard_focus) { imgui_function_table_instance()->PushAllowKeyboardFocus(allow_keyboard_focus); }
+	inline void PopAllowKeyboardFocus() { imgui_function_table_instance()->PopAllowKeyboardFocus(); }
+	inline void PushButtonRepeat(bool repeat) { imgui_function_table_instance()->PushButtonRepeat(repeat); }
+	inline void PopButtonRepeat() { imgui_function_table_instance()->PopButtonRepeat(); }
+	inline void PushItemWidth(float item_width) { imgui_function_table_instance()->PushItemWidth(item_width); }
+	inline void PopItemWidth() { imgui_function_table_instance()->PopItemWidth(); }
+	inline void SetNextItemWidth(float item_width) { imgui_function_table_instance()->SetNextItemWidth(item_width); }
+	inline float CalcItemWidth() { return imgui_function_table_instance()->CalcItemWidth(); }
+	inline void PushTextWrapPos(float wrap_local_pos_x) { imgui_function_table_instance()->PushTextWrapPos(wrap_local_pos_x); }
+	inline void PopTextWrapPos() { imgui_function_table_instance()->PopTextWrapPos(); }
+	inline ImFont* GetFont() { return imgui_function_table_instance()->GetFont(); }
+	inline float GetFontSize() { return imgui_function_table_instance()->GetFontSize(); }
+	inline ImVec2 GetFontTexUvWhitePixel() { return imgui_function_table_instance()->GetFontTexUvWhitePixel(); }
+	inline ImU32 GetColorU32(ImGuiCol idx, float alpha_mul) { return imgui_function_table_instance()->GetColorU32(idx, alpha_mul); }
+	inline ImU32 GetColorU32(const ImVec4& col) { return imgui_function_table_instance()->GetColorU322(col); }
+	inline ImU32 GetColorU32(ImU32 col) { return imgui_function_table_instance()->GetColorU323(col); }
+	inline const ImVec4& GetStyleColorVec4(ImGuiCol idx) { return imgui_function_table_instance()->GetStyleColorVec4(idx); }
+	inline void Separator() { imgui_function_table_instance()->Separator(); }
+	inline void SameLine(float offset_from_start_x, float spacing) { imgui_function_table_instance()->SameLine(offset_from_start_x, spacing); }
+	inline void NewLine() { imgui_function_table_instance()->NewLine(); }
+	inline void Spacing() { imgui_function_table_instance()->Spacing(); }
+	inline void Dummy(const ImVec2& size) { imgui_function_table_instance()->Dummy(size); }
+	inline void Indent(float indent_w) { imgui_function_table_instance()->Indent(indent_w); }
+	inline void Unindent(float indent_w) { imgui_function_table_instance()->Unindent(indent_w); }
+	inline void BeginGroup() { imgui_function_table_instance()->BeginGroup(); }
+	inline void EndGroup() { imgui_function_table_instance()->EndGroup(); }
+	inline ImVec2 GetCursorPos() { return imgui_function_table_instance()->GetCursorPos(); }
+	inline float GetCursorPosX() { return imgui_function_table_instance()->GetCursorPosX(); }
+	inline float GetCursorPosY() { return imgui_function_table_instance()->GetCursorPosY(); }
+	inline void SetCursorPos(const ImVec2& local_pos) { imgui_function_table_instance()->SetCursorPos(local_pos); }
+	inline void SetCursorPosX(float local_x) { imgui_function_table_instance()->SetCursorPosX(local_x); }
+	inline void SetCursorPosY(float local_y) { imgui_function_table_instance()->SetCursorPosY(local_y); }
+	inline ImVec2 GetCursorStartPos() { return imgui_function_table_instance()->GetCursorStartPos(); }
+	inline ImVec2 GetCursorScreenPos() { return imgui_function_table_instance()->GetCursorScreenPos(); }
+	inline void SetCursorScreenPos(const ImVec2& pos) { imgui_function_table_instance()->SetCursorScreenPos(pos); }
+	inline void AlignTextToFramePadding() { imgui_function_table_instance()->AlignTextToFramePadding(); }
+	inline float GetTextLineHeight() { return imgui_function_table_instance()->GetTextLineHeight(); }
+	inline float GetTextLineHeightWithSpacing() { return imgui_function_table_instance()->GetTextLineHeightWithSpacing(); }
+	inline float GetFrameHeight() { return imgui_function_table_instance()->GetFrameHeight(); }
+	inline float GetFrameHeightWithSpacing() { return imgui_function_table_instance()->GetFrameHeightWithSpacing(); }
+	inline void PushID(const char* str_id) { imgui_function_table_instance()->PushID(str_id); }
+	inline void PushID(const char* str_id_begin, const char* str_id_end) { imgui_function_table_instance()->PushID2(str_id_begin, str_id_end); }
+	inline void PushID(const void* ptr_id) { imgui_function_table_instance()->PushID3(ptr_id); }
+	inline void PushID(int int_id) { imgui_function_table_instance()->PushID4(int_id); }
+	inline void PopID() { imgui_function_table_instance()->PopID(); }
+	inline ImGuiID GetID(const char* str_id) { return imgui_function_table_instance()->GetID(str_id); }
+	inline ImGuiID GetID(const char* str_id_begin, const char* str_id_end) { return imgui_function_table_instance()->GetID2(str_id_begin, str_id_end); }
+	inline ImGuiID GetID(const void* ptr_id) { return imgui_function_table_instance()->GetID3(ptr_id); }
+	inline void TextUnformatted(const char* text, const char* text_end) { imgui_function_table_instance()->TextUnformatted(text, text_end); }
+	inline void Text(const char* fmt, ...) { va_list args; va_start(args, fmt); imgui_function_table_instance()->TextV(fmt, args); va_end(args); }
+	inline void TextV(const char* fmt, va_list args) { imgui_function_table_instance()->TextV(fmt, args); }
+	inline void TextColored(const ImVec4& col, const char* fmt, ...) { va_list args; va_start(args, fmt); imgui_function_table_instance()->TextColoredV(col, fmt, args); va_end(args); }
+	inline void TextColoredV(const ImVec4& col, const char* fmt, va_list args) { imgui_function_table_instance()->TextColoredV(col, fmt, args); }
+	inline void TextDisabled(const char* fmt, ...) { va_list args; va_start(args, fmt); imgui_function_table_instance()->TextDisabledV(fmt, args); va_end(args); }
+	inline void TextDisabledV(const char* fmt, va_list args) { imgui_function_table_instance()->TextDisabledV(fmt, args); }
+	inline void TextWrapped(const char* fmt, ...) { va_list args; va_start(args, fmt); imgui_function_table_instance()->TextWrappedV(fmt, args); va_end(args); }
+	inline void TextWrappedV(const char* fmt, va_list args) { imgui_function_table_instance()->TextWrappedV(fmt, args); }
+	inline void LabelText(const char* label, const char* fmt, ...) { va_list args; va_start(args, fmt); imgui_function_table_instance()->LabelTextV(label, fmt, args); va_end(args); }
+	inline void LabelTextV(const char* label, const char* fmt, va_list args) { imgui_function_table_instance()->LabelTextV(label, fmt, args); }
+	inline void BulletText(const char* fmt, ...) { va_list args; va_start(args, fmt); imgui_function_table_instance()->BulletTextV(fmt, args); va_end(args); }
+	inline void BulletTextV(const char* fmt, va_list args) { imgui_function_table_instance()->BulletTextV(fmt, args); }
+	inline bool Button(const char* label, const ImVec2& size) { return imgui_function_table_instance()->Button(label, size); }
+	inline bool SmallButton(const char* label) { return imgui_function_table_instance()->SmallButton(label); }
+	inline bool InvisibleButton(const char* str_id, const ImVec2& size, ImGuiButtonFlags flags) { return imgui_function_table_instance()->InvisibleButton(str_id, size, flags); }
+	inline bool ArrowButton(const char* str_id, ImGuiDir dir) { return imgui_function_table_instance()->ArrowButton(str_id, dir); }
+	inline void Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& tint_col, const ImVec4& border_col) { imgui_function_table_instance()->Image(user_texture_id, size, uv0, uv1, tint_col, border_col); }
+	inline bool ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, int frame_padding, const ImVec4& bg_col, const ImVec4& tint_col) { return imgui_function_table_instance()->ImageButton(user_texture_id, size, uv0, uv1, frame_padding, bg_col, tint_col); }
+	inline bool Checkbox(const char* label, bool* v) { return imgui_function_table_instance()->Checkbox(label, v); }
+	inline bool CheckboxFlags(const char* label, int* flags, int flags_value) { return imgui_function_table_instance()->CheckboxFlags(label, flags, flags_value); }
+	inline bool CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value) { return imgui_function_table_instance()->CheckboxFlags2(label, flags, flags_value); }
+	inline bool RadioButton(const char* label, bool active) { return imgui_function_table_instance()->RadioButton(label, active); }
+	inline bool RadioButton(const char* label, int* v, int v_button) { return imgui_function_table_instance()->RadioButton2(label, v, v_button); }
+	inline void ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay) { imgui_function_table_instance()->ProgressBar(fraction, size_arg, overlay); }
+	inline void Bullet() { imgui_function_table_instance()->Bullet(); }
+	inline bool BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags) { return imgui_function_table_instance()->BeginCombo(label, preview_value, flags); }
+	inline void EndCombo() { imgui_function_table_instance()->EndCombo(); }
+	inline bool Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items) { return imgui_function_table_instance()->Combo(label, current_item, items, items_count, popup_max_height_in_items); }
+	inline bool Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items) { return imgui_function_table_instance()->Combo2(label, current_item, items_separated_by_zeros, popup_max_height_in_items); }
+	inline bool Combo(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items) { return imgui_function_table_instance()->Combo3(label, current_item, items_getter, data, items_count, popup_max_height_in_items); }
+	inline bool DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragFloat(label, v, v_speed, v_min, v_max, format, flags); }
+	inline bool DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragFloat2(label, v, v_speed, v_min, v_max, format, flags); }
+	inline bool DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragFloat3(label, v, v_speed, v_min, v_max, format, flags); }
+	inline bool DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragFloat4(label, v, v_speed, v_min, v_max, format, flags); }
+	inline bool DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* format, const char* format_max, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragFloatRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags); }
+	inline bool DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragInt(label, v, v_speed, v_min, v_max, format, flags); }
+	inline bool DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragInt2(label, v, v_speed, v_min, v_max, format, flags); }
+	inline bool DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragInt3(label, v, v_speed, v_min, v_max, format, flags); }
+	inline bool DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragInt4(label, v, v_speed, v_min, v_max, format, flags); }
+	inline bool DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* format, const char* format_max, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragIntRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags); }
+	inline bool DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragScalar(label, data_type, p_data, v_speed, p_min, p_max, format, flags); }
+	inline bool DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->DragScalarN(label, data_type, p_data, components, v_speed, p_min, p_max, format, flags); }
+	inline bool SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->SliderFloat(label, v, v_min, v_max, format, flags); }
+	inline bool SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->SliderFloat2(label, v, v_min, v_max, format, flags); }
+	inline bool SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->SliderFloat3(label, v, v_min, v_max, format, flags); }
+	inline bool SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->SliderFloat4(label, v, v_min, v_max, format, flags); }
+	inline bool SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->SliderAngle(label, v_rad, v_degrees_min, v_degrees_max, format, flags); }
+	inline bool SliderInt(const char* label, int* v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->SliderInt(label, v, v_min, v_max, format, flags); }
+	inline bool SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->SliderInt2(label, v, v_min, v_max, format, flags); }
+	inline bool SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->SliderInt3(label, v, v_min, v_max, format, flags); }
+	inline bool SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->SliderInt4(label, v, v_min, v_max, format, flags); }
+	inline bool SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->SliderScalar(label, data_type, p_data, p_min, p_max, format, flags); }
+	inline bool SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->SliderScalarN(label, data_type, p_data, components, p_min, p_max, format, flags); }
+	inline bool VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->VSliderFloat(label, size, v, v_min, v_max, format, flags); }
+	inline bool VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->VSliderInt(label, size, v, v_min, v_max, format, flags); }
+	inline bool VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags) { return imgui_function_table_instance()->VSliderScalar(label, size, data_type, p_data, p_min, p_max, format, flags); }
+	inline bool InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data) { return imgui_function_table_instance()->InputText(label, buf, buf_size, flags, callback, user_data); }
+	inline bool InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data) { return imgui_function_table_instance()->InputTextMultiline(label, buf, buf_size, size, flags, callback, user_data); }
+	inline bool InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data) { return imgui_function_table_instance()->InputTextWithHint(label, hint, buf, buf_size, flags, callback, user_data); }
+	inline bool InputFloat(const char* label, float* v, float step, float step_fast, const char* format, ImGuiInputTextFlags flags) { return imgui_function_table_instance()->InputFloat(label, v, step, step_fast, format, flags); }
+	inline bool InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags flags) { return imgui_function_table_instance()->InputFloat2(label, v, format, flags); }
+	inline bool InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags flags) { return imgui_function_table_instance()->InputFloat3(label, v, format, flags); }
+	inline bool InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags flags) { return imgui_function_table_instance()->InputFloat4(label, v, format, flags); }
+	inline bool InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags flags) { return imgui_function_table_instance()->InputInt(label, v, step, step_fast, flags); }
+	inline bool InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags) { return imgui_function_table_instance()->InputInt2(label, v, flags); }
+	inline bool InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags) { return imgui_function_table_instance()->InputInt3(label, v, flags); }
+	inline bool InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags) { return imgui_function_table_instance()->InputInt4(label, v, flags); }
+	inline bool InputDouble(const char* label, double* v, double step, double step_fast, const char* format, ImGuiInputTextFlags flags) { return imgui_function_table_instance()->InputDouble(label, v, step, step_fast, format, flags); }
+	inline bool InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags) { return imgui_function_table_instance()->InputScalar(label, data_type, p_data, p_step, p_step_fast, format, flags); }
+	inline bool InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags) { return imgui_function_table_instance()->InputScalarN(label, data_type, p_data, components, p_step, p_step_fast, format, flags); }
+	inline bool ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags) { return imgui_function_table_instance()->ColorEdit3(label, col, flags); }
+	inline bool ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags) { return imgui_function_table_instance()->ColorEdit4(label, col, flags); }
+	inline bool ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags) { return imgui_function_table_instance()->ColorPicker3(label, col, flags); }
+	inline bool ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col) { return imgui_function_table_instance()->ColorPicker4(label, col, flags, ref_col); }
+	inline bool ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec2 size) { return imgui_function_table_instance()->ColorButton(desc_id, col, flags, size); }
+	inline void SetColorEditOptions(ImGuiColorEditFlags flags) { imgui_function_table_instance()->SetColorEditOptions(flags); }
+	inline bool TreeNode(const char* label) { return imgui_function_table_instance()->TreeNode(label); }
+	inline bool TreeNode(const char* str_id, const char* fmt, ...) { va_list args; va_start(args, fmt); return imgui_function_table_instance()->TreeNodeV(str_id, fmt, args); va_end(args); }
+	inline bool TreeNode(const void* ptr_id, const char* fmt, ...) { va_list args; va_start(args, fmt); return imgui_function_table_instance()->TreeNodeV2(ptr_id, fmt, args); va_end(args); }
+	inline bool TreeNodeV(const char* str_id, const char* fmt, va_list args) { return imgui_function_table_instance()->TreeNodeV(str_id, fmt, args); }
+	inline bool TreeNodeV(const void* ptr_id, const char* fmt, va_list args) { return imgui_function_table_instance()->TreeNodeV2(ptr_id, fmt, args); }
+	inline bool TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags) { return imgui_function_table_instance()->TreeNodeEx(label, flags); }
+	inline bool TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) { va_list args; va_start(args, fmt); return imgui_function_table_instance()->TreeNodeExV(str_id, flags, fmt, args); va_end(args); }
+	inline bool TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) { va_list args; va_start(args, fmt); return imgui_function_table_instance()->TreeNodeExV2(ptr_id, flags, fmt, args); va_end(args); }
+	inline bool TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) { return imgui_function_table_instance()->TreeNodeExV(str_id, flags, fmt, args); }
+	inline bool TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) { return imgui_function_table_instance()->TreeNodeExV2(ptr_id, flags, fmt, args); }
+	inline void TreePush(const char* str_id) { imgui_function_table_instance()->TreePush(str_id); }
+	inline void TreePush(const void* ptr_id) { imgui_function_table_instance()->TreePush2(ptr_id); }
+	inline void TreePop() { imgui_function_table_instance()->TreePop(); }
+	inline float GetTreeNodeToLabelSpacing() { return imgui_function_table_instance()->GetTreeNodeToLabelSpacing(); }
+	inline bool CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags) { return imgui_function_table_instance()->CollapsingHeader(label, flags); }
+	inline bool CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags) { return imgui_function_table_instance()->CollapsingHeader2(label, p_visible, flags); }
+	inline void SetNextItemOpen(bool is_open, ImGuiCond cond) { imgui_function_table_instance()->SetNextItemOpen(is_open, cond); }
+	inline bool Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2& size) { return imgui_function_table_instance()->Selectable(label, selected, flags, size); }
+	inline bool Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2& size) { return imgui_function_table_instance()->Selectable2(label, p_selected, flags, size); }
+	inline bool BeginListBox(const char* label, const ImVec2& size) { return imgui_function_table_instance()->BeginListBox(label, size); }
+	inline void EndListBox() { imgui_function_table_instance()->EndListBox(); }
+	inline bool ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items) { return imgui_function_table_instance()->ListBox(label, current_item, items, items_count, height_in_items); }
+	inline bool ListBox(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int height_in_items) { return imgui_function_table_instance()->ListBox2(label, current_item, items_getter, data, items_count, height_in_items); }
+	inline void PlotLines(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride) { imgui_function_table_instance()->PlotLines(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride); }
+	inline void PlotLines(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size) { imgui_function_table_instance()->PlotLines2(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size); }
+	inline void PlotHistogram(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride) { imgui_function_table_instance()->PlotHistogram(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride); }
+	inline void PlotHistogram(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size) { imgui_function_table_instance()->PlotHistogram2(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size); }
+	inline void Value(const char* prefix, bool b) { imgui_function_table_instance()->Value(prefix, b); }
+	inline void Value(const char* prefix, int v) { imgui_function_table_instance()->Value2(prefix, v); }
+	inline void Value(const char* prefix, unsigned int v) { imgui_function_table_instance()->Value3(prefix, v); }
+	inline void Value(const char* prefix, float v, const char* float_format) { imgui_function_table_instance()->Value4(prefix, v, float_format); }
+	inline bool BeginMenuBar() { return imgui_function_table_instance()->BeginMenuBar(); }
+	inline void EndMenuBar() { imgui_function_table_instance()->EndMenuBar(); }
+	inline bool BeginMainMenuBar() { return imgui_function_table_instance()->BeginMainMenuBar(); }
+	inline void EndMainMenuBar() { imgui_function_table_instance()->EndMainMenuBar(); }
+	inline bool BeginMenu(const char* label, bool enabled) { return imgui_function_table_instance()->BeginMenu(label, enabled); }
+	inline void EndMenu() { imgui_function_table_instance()->EndMenu(); }
+	inline bool MenuItem(const char* label, const char* shortcut, bool selected, bool enabled) { return imgui_function_table_instance()->MenuItem(label, shortcut, selected, enabled); }
+	inline bool MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled) { return imgui_function_table_instance()->MenuItem2(label, shortcut, p_selected, enabled); }
+	inline void BeginTooltip() { imgui_function_table_instance()->BeginTooltip(); }
+	inline void EndTooltip() { imgui_function_table_instance()->EndTooltip(); }
+	inline void SetTooltip(const char* fmt, ...) { va_list args; va_start(args, fmt); imgui_function_table_instance()->SetTooltipV(fmt, args); va_end(args); }
+	inline void SetTooltipV(const char* fmt, va_list args) { imgui_function_table_instance()->SetTooltipV(fmt, args); }
+	inline bool BeginPopup(const char* str_id, ImGuiWindowFlags flags) { return imgui_function_table_instance()->BeginPopup(str_id, flags); }
+	inline bool BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags) { return imgui_function_table_instance()->BeginPopupModal(name, p_open, flags); }
+	inline void EndPopup() { imgui_function_table_instance()->EndPopup(); }
+	inline void OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags) { imgui_function_table_instance()->OpenPopup(str_id, popup_flags); }
+	inline void OpenPopup(ImGuiID id, ImGuiPopupFlags popup_flags) { imgui_function_table_instance()->OpenPopup2(id, popup_flags); }
+	inline void OpenPopupOnItemClick(const char* str_id, ImGuiPopupFlags popup_flags) { imgui_function_table_instance()->OpenPopupOnItemClick(str_id, popup_flags); }
+	inline void CloseCurrentPopup() { imgui_function_table_instance()->CloseCurrentPopup(); }
+	inline bool BeginPopupContextItem(const char* str_id, ImGuiPopupFlags popup_flags) { return imgui_function_table_instance()->BeginPopupContextItem(str_id, popup_flags); }
+	inline bool BeginPopupContextWindow(const char* str_id, ImGuiPopupFlags popup_flags) { return imgui_function_table_instance()->BeginPopupContextWindow(str_id, popup_flags); }
+	inline bool BeginPopupContextVoid(const char* str_id, ImGuiPopupFlags popup_flags) { return imgui_function_table_instance()->BeginPopupContextVoid(str_id, popup_flags); }
+	inline bool IsPopupOpen(const char* str_id, ImGuiPopupFlags flags) { return imgui_function_table_instance()->IsPopupOpen(str_id, flags); }
+	inline bool BeginTable(const char* str_id, int column, ImGuiTableFlags flags, const ImVec2& outer_size, float inner_width) { return imgui_function_table_instance()->BeginTable(str_id, column, flags, outer_size, inner_width); }
+	inline void EndTable() { imgui_function_table_instance()->EndTable(); }
+	inline void TableNextRow(ImGuiTableRowFlags row_flags, float min_row_height) { imgui_function_table_instance()->TableNextRow(row_flags, min_row_height); }
+	inline bool TableNextColumn() { return imgui_function_table_instance()->TableNextColumn(); }
+	inline bool TableSetColumnIndex(int column_n) { return imgui_function_table_instance()->TableSetColumnIndex(column_n); }
+	inline void TableSetupColumn(const char* label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id) { imgui_function_table_instance()->TableSetupColumn(label, flags, init_width_or_weight, user_id); }
+	inline void TableSetupScrollFreeze(int cols, int rows) { imgui_function_table_instance()->TableSetupScrollFreeze(cols, rows); }
+	inline void TableHeadersRow() { imgui_function_table_instance()->TableHeadersRow(); }
+	inline void TableHeader(const char* label) { imgui_function_table_instance()->TableHeader(label); }
+	inline ImGuiTableSortSpecs* TableGetSortSpecs() { return imgui_function_table_instance()->TableGetSortSpecs(); }
+	inline int TableGetColumnCount() { return imgui_function_table_instance()->TableGetColumnCount(); }
+	inline int TableGetColumnIndex() { return imgui_function_table_instance()->TableGetColumnIndex(); }
+	inline int TableGetRowIndex() { return imgui_function_table_instance()->TableGetRowIndex(); }
+	inline const char* TableGetColumnName(int column_n) { return imgui_function_table_instance()->TableGetColumnName(column_n); }
+	inline ImGuiTableColumnFlags TableGetColumnFlags(int column_n) { return imgui_function_table_instance()->TableGetColumnFlags(column_n); }
+	inline void TableSetColumnEnabled(int column_n, bool v) { imgui_function_table_instance()->TableSetColumnEnabled(column_n, v); }
+	inline void TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n) { imgui_function_table_instance()->TableSetBgColor(target, color, column_n); }
+	inline void Columns(int count, const char* id, bool border) { imgui_function_table_instance()->Columns(count, id, border); }
+	inline void NextColumn() { imgui_function_table_instance()->NextColumn(); }
+	inline int GetColumnIndex() { return imgui_function_table_instance()->GetColumnIndex(); }
+	inline float GetColumnWidth(int column_index) { return imgui_function_table_instance()->GetColumnWidth(column_index); }
+	inline void SetColumnWidth(int column_index, float width) { imgui_function_table_instance()->SetColumnWidth(column_index, width); }
+	inline float GetColumnOffset(int column_index) { return imgui_function_table_instance()->GetColumnOffset(column_index); }
+	inline void SetColumnOffset(int column_index, float offset_x) { imgui_function_table_instance()->SetColumnOffset(column_index, offset_x); }
+	inline int GetColumnsCount() { return imgui_function_table_instance()->GetColumnsCount(); }
+	inline bool BeginTabBar(const char* str_id, ImGuiTabBarFlags flags) { return imgui_function_table_instance()->BeginTabBar(str_id, flags); }
+	inline void EndTabBar() { imgui_function_table_instance()->EndTabBar(); }
+	inline bool BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags) { return imgui_function_table_instance()->BeginTabItem(label, p_open, flags); }
+	inline void EndTabItem() { imgui_function_table_instance()->EndTabItem(); }
+	inline bool TabItemButton(const char* label, ImGuiTabItemFlags flags) { return imgui_function_table_instance()->TabItemButton(label, flags); }
+	inline void SetTabItemClosed(const char* tab_or_docked_window_label) { imgui_function_table_instance()->SetTabItemClosed(tab_or_docked_window_label); }
+	inline ImGuiID DockSpace(ImGuiID id, const ImVec2& size, ImGuiDockNodeFlags flags, const ImGuiWindowClass* window_class) { return imgui_function_table_instance()->DockSpace(id, size, flags, window_class); }
+	inline void SetNextWindowDockID(ImGuiID dock_id, ImGuiCond cond) { imgui_function_table_instance()->SetNextWindowDockID(dock_id, cond); }
+	inline void SetNextWindowClass(const ImGuiWindowClass* window_class) { imgui_function_table_instance()->SetNextWindowClass(window_class); }
+	inline ImGuiID GetWindowDockID() { return imgui_function_table_instance()->GetWindowDockID(); }
+	inline bool IsWindowDocked() { return imgui_function_table_instance()->IsWindowDocked(); }
+	inline bool BeginDragDropSource(ImGuiDragDropFlags flags) { return imgui_function_table_instance()->BeginDragDropSource(flags); }
+	inline bool SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond) { return imgui_function_table_instance()->SetDragDropPayload(type, data, sz, cond); }
+	inline void EndDragDropSource() { imgui_function_table_instance()->EndDragDropSource(); }
+	inline bool BeginDragDropTarget() { return imgui_function_table_instance()->BeginDragDropTarget(); }
+	inline const ImGuiPayload* AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags) { return imgui_function_table_instance()->AcceptDragDropPayload(type, flags); }
+	inline void EndDragDropTarget() { imgui_function_table_instance()->EndDragDropTarget(); }
+	inline const ImGuiPayload* GetDragDropPayload() { return imgui_function_table_instance()->GetDragDropPayload(); }
+	inline void BeginDisabled(bool disabled) { imgui_function_table_instance()->BeginDisabled(disabled); }
+	inline void EndDisabled() { imgui_function_table_instance()->EndDisabled(); }
+	inline void PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect) { imgui_function_table_instance()->PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect); }
+	inline void PopClipRect() { imgui_function_table_instance()->PopClipRect(); }
+	inline void SetItemDefaultFocus() { imgui_function_table_instance()->SetItemDefaultFocus(); }
+	inline void SetKeyboardFocusHere(int offset) { imgui_function_table_instance()->SetKeyboardFocusHere(offset); }
+	inline bool IsItemHovered(ImGuiHoveredFlags flags) { return imgui_function_table_instance()->IsItemHovered(flags); }
+	inline bool IsItemActive() { return imgui_function_table_instance()->IsItemActive(); }
+	inline bool IsItemFocused() { return imgui_function_table_instance()->IsItemFocused(); }
+	inline bool IsItemClicked(ImGuiMouseButton mouse_button) { return imgui_function_table_instance()->IsItemClicked(mouse_button); }
+	inline bool IsItemVisible() { return imgui_function_table_instance()->IsItemVisible(); }
+	inline bool IsItemEdited() { return imgui_function_table_instance()->IsItemEdited(); }
+	inline bool IsItemActivated() { return imgui_function_table_instance()->IsItemActivated(); }
+	inline bool IsItemDeactivated() { return imgui_function_table_instance()->IsItemDeactivated(); }
+	inline bool IsItemDeactivatedAfterEdit() { return imgui_function_table_instance()->IsItemDeactivatedAfterEdit(); }
+	inline bool IsItemToggledOpen() { return imgui_function_table_instance()->IsItemToggledOpen(); }
+	inline bool IsAnyItemHovered() { return imgui_function_table_instance()->IsAnyItemHovered(); }
+	inline bool IsAnyItemActive() { return imgui_function_table_instance()->IsAnyItemActive(); }
+	inline bool IsAnyItemFocused() { return imgui_function_table_instance()->IsAnyItemFocused(); }
+	inline ImVec2 GetItemRectMin() { return imgui_function_table_instance()->GetItemRectMin(); }
+	inline ImVec2 GetItemRectMax() { return imgui_function_table_instance()->GetItemRectMax(); }
+	inline ImVec2 GetItemRectSize() { return imgui_function_table_instance()->GetItemRectSize(); }
+	inline void SetItemAllowOverlap() { imgui_function_table_instance()->SetItemAllowOverlap(); }
+	inline bool IsRectVisible(const ImVec2& size) { return imgui_function_table_instance()->IsRectVisible(size); }
+	inline bool IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max) { return imgui_function_table_instance()->IsRectVisible2(rect_min, rect_max); }
+	inline double GetTime() { return imgui_function_table_instance()->GetTime(); }
+	inline int GetFrameCount() { return imgui_function_table_instance()->GetFrameCount(); }
+	inline ImDrawList* GetBackgroundDrawList() { return imgui_function_table_instance()->GetBackgroundDrawList(); }
+	inline ImDrawList* GetForegroundDrawList() { return imgui_function_table_instance()->GetForegroundDrawList(); }
+	inline ImDrawList* GetBackgroundDrawList(ImGuiViewport* viewport) { return imgui_function_table_instance()->GetBackgroundDrawList2(viewport); }
+	inline ImDrawList* GetForegroundDrawList(ImGuiViewport* viewport) { return imgui_function_table_instance()->GetForegroundDrawList2(viewport); }
+	inline ImDrawListSharedData* GetDrawListSharedData() { return imgui_function_table_instance()->GetDrawListSharedData(); }
+	inline const char* GetStyleColorName(ImGuiCol idx) { return imgui_function_table_instance()->GetStyleColorName(idx); }
+	inline void SetStateStorage(ImGuiStorage* storage) { imgui_function_table_instance()->SetStateStorage(storage); }
+	inline ImGuiStorage* GetStateStorage() { return imgui_function_table_instance()->GetStateStorage(); }
+	inline bool BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags flags) { return imgui_function_table_instance()->BeginChildFrame(id, size, flags); }
+	inline void EndChildFrame() { imgui_function_table_instance()->EndChildFrame(); }
+	inline ImVec2 CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width) { return imgui_function_table_instance()->CalcTextSize(text, text_end, hide_text_after_double_hash, wrap_width); }
+	inline ImVec4 ColorConvertU32ToFloat4(ImU32 in) { return imgui_function_table_instance()->ColorConvertU32ToFloat4(in); }
+	inline ImU32 ColorConvertFloat4ToU32(const ImVec4& in) { return imgui_function_table_instance()->ColorConvertFloat4ToU32(in); }
+	inline void ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v) { imgui_function_table_instance()->ColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v); }
+	inline void ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b) { imgui_function_table_instance()->ColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b); }
+	inline int GetKeyIndex(ImGuiKey imgui_key) { return imgui_function_table_instance()->GetKeyIndex(imgui_key); }
+	inline bool IsKeyDown(int user_key_index) { return imgui_function_table_instance()->IsKeyDown(user_key_index); }
+	inline bool IsKeyPressed(int user_key_index, bool repeat) { return imgui_function_table_instance()->IsKeyPressed(user_key_index, repeat); }
+	inline bool IsKeyReleased(int user_key_index) { return imgui_function_table_instance()->IsKeyReleased(user_key_index); }
+	inline int GetKeyPressedAmount(int key_index, float repeat_delay, float rate) { return imgui_function_table_instance()->GetKeyPressedAmount(key_index, repeat_delay, rate); }
+	inline void CaptureKeyboardFromApp(bool want_capture_keyboard_value) { imgui_function_table_instance()->CaptureKeyboardFromApp(want_capture_keyboard_value); }
+	inline bool IsMouseDown(ImGuiMouseButton button) { return imgui_function_table_instance()->IsMouseDown(button); }
+	inline bool IsMouseClicked(ImGuiMouseButton button, bool repeat) { return imgui_function_table_instance()->IsMouseClicked(button, repeat); }
+	inline bool IsMouseReleased(ImGuiMouseButton button) { return imgui_function_table_instance()->IsMouseReleased(button); }
+	inline bool IsMouseDoubleClicked(ImGuiMouseButton button) { return imgui_function_table_instance()->IsMouseDoubleClicked(button); }
+	inline int GetMouseClickedCount(ImGuiMouseButton button) { return imgui_function_table_instance()->GetMouseClickedCount(button); }
+	inline bool IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip) { return imgui_function_table_instance()->IsMouseHoveringRect(r_min, r_max, clip); }
+	inline bool IsMousePosValid(const ImVec2* mouse_pos) { return imgui_function_table_instance()->IsMousePosValid(mouse_pos); }
+	inline bool IsAnyMouseDown() { return imgui_function_table_instance()->IsAnyMouseDown(); }
+	inline ImVec2 GetMousePos() { return imgui_function_table_instance()->GetMousePos(); }
+	inline ImVec2 GetMousePosOnOpeningCurrentPopup() { return imgui_function_table_instance()->GetMousePosOnOpeningCurrentPopup(); }
+	inline bool IsMouseDragging(ImGuiMouseButton button, float lock_threshold) { return imgui_function_table_instance()->IsMouseDragging(button, lock_threshold); }
+	inline ImVec2 GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold) { return imgui_function_table_instance()->GetMouseDragDelta(button, lock_threshold); }
+	inline void ResetMouseDragDelta(ImGuiMouseButton button) { imgui_function_table_instance()->ResetMouseDragDelta(button); }
+	inline ImGuiMouseCursor GetMouseCursor() { return imgui_function_table_instance()->GetMouseCursor(); }
+	inline void SetMouseCursor(ImGuiMouseCursor cursor_type) { imgui_function_table_instance()->SetMouseCursor(cursor_type); }
+	inline void CaptureMouseFromApp(bool want_capture_mouse_value) { imgui_function_table_instance()->CaptureMouseFromApp(want_capture_mouse_value); }
+	inline const char* GetClipboardText() { return imgui_function_table_instance()->GetClipboardText(); }
+	inline void SetClipboardText(const char* text) { imgui_function_table_instance()->SetClipboardText(text); }
+	inline bool DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx) { return imgui_function_table_instance()->DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx); }
+	inline void SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void* user_data) { imgui_function_table_instance()->SetAllocatorFunctions(alloc_func, free_func, user_data); }
+	inline void GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, void** p_user_data) { imgui_function_table_instance()->GetAllocatorFunctions(p_alloc_func, p_free_func, p_user_data); }
+	inline void* MemAlloc(size_t size) { return imgui_function_table_instance()->MemAlloc(size); }
+	inline void MemFree(void* ptr) { imgui_function_table_instance()->MemFree(ptr); }
+
+}
+
+inline int ImGuiStorage::GetInt(ImGuiID key, int default_val) const { return imgui_function_table_instance()->ImGuiStorage_GetInt(this, key, default_val); }
+inline void ImGuiStorage::SetInt(ImGuiID key, int val) { imgui_function_table_instance()->ImGuiStorage_SetInt(this, key, val); }
+inline bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const { return imgui_function_table_instance()->ImGuiStorage_GetBool(this, key, default_val); }
+inline void ImGuiStorage::SetBool(ImGuiID key, bool val) { imgui_function_table_instance()->ImGuiStorage_SetBool(this, key, val); }
+inline float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const { return imgui_function_table_instance()->ImGuiStorage_GetFloat(this, key, default_val); }
+inline void ImGuiStorage::SetFloat(ImGuiID key, float val) { imgui_function_table_instance()->ImGuiStorage_SetFloat(this, key, val); }
+inline void* ImGuiStorage::GetVoidPtr(ImGuiID key) const { return imgui_function_table_instance()->ImGuiStorage_GetVoidPtr(this, key); }
+inline void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val) { imgui_function_table_instance()->ImGuiStorage_SetVoidPtr(this, key, val); }
+inline int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val) { return imgui_function_table_instance()->ImGuiStorage_GetIntRef(this, key, default_val); }
+inline bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val) { return imgui_function_table_instance()->ImGuiStorage_GetBoolRef(this, key, default_val); }
+inline float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val) { return imgui_function_table_instance()->ImGuiStorage_GetFloatRef(this, key, default_val); }
+inline void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val) { return imgui_function_table_instance()->ImGuiStorage_GetVoidPtrRef(this, key, default_val); }
+inline void ImGuiStorage::SetAllInt(int val) { imgui_function_table_instance()->ImGuiStorage_SetAllInt(this, val); }
+inline void ImGuiStorage::BuildSortByKey() { imgui_function_table_instance()->ImGuiStorage_BuildSortByKey(this); }
+inline ImGuiListClipper::ImGuiListClipper() { imgui_function_table_instance()->ConstructImGuiListClipper(this); }
+inline ImGuiListClipper::~ImGuiListClipper() { imgui_function_table_instance()->DestructImGuiListClipper(this); }
+inline void ImGuiListClipper::Begin(int items_count, float items_height) { imgui_function_table_instance()->ImGuiListClipper_Begin(this, items_count, items_height); }
+inline void ImGuiListClipper::End() { imgui_function_table_instance()->ImGuiListClipper_End(this); }
+inline bool ImGuiListClipper::Step() { return imgui_function_table_instance()->ImGuiListClipper_Step(this); }
+inline void ImGuiListClipper::ForceDisplayRangeByIndices(int item_min, int item_max) { imgui_function_table_instance()->ImGuiListClipper_ForceDisplayRangeByIndices(this, item_min, item_max); }
+inline void ImDrawList::PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect) { imgui_function_table_instance()->ImDrawList_PushClipRect(this, clip_rect_min, clip_rect_max, intersect_with_current_clip_rect); }
+inline void ImDrawList::PushClipRectFullScreen() { imgui_function_table_instance()->ImDrawList_PushClipRectFullScreen(this); }
+inline void ImDrawList::PopClipRect() { imgui_function_table_instance()->ImDrawList_PopClipRect(this); }
+inline void ImDrawList::PushTextureID(ImTextureID texture_id) { imgui_function_table_instance()->ImDrawList_PushTextureID(this, texture_id); }
+inline void ImDrawList::PopTextureID() { imgui_function_table_instance()->ImDrawList_PopTextureID(this); }
+inline void ImDrawList::AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness) { imgui_function_table_instance()->ImDrawList_AddLine(this, p1, p2, col, thickness); }
+inline void ImDrawList::AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, ImDrawFlags flags, float thickness) { imgui_function_table_instance()->ImDrawList_AddRect(this, p_min, p_max, col, rounding, flags, thickness); }
+inline void ImDrawList::AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, ImDrawFlags flags) { imgui_function_table_instance()->ImDrawList_AddRectFilled(this, p_min, p_max, col, rounding, flags); }
+inline void ImDrawList::AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left) { imgui_function_table_instance()->ImDrawList_AddRectFilledMultiColor(this, p_min, p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left); }
+inline void ImDrawList::AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness) { imgui_function_table_instance()->ImDrawList_AddQuad(this, p1, p2, p3, p4, col, thickness); }
+inline void ImDrawList::AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col) { imgui_function_table_instance()->ImDrawList_AddQuadFilled(this, p1, p2, p3, p4, col); }
+inline void ImDrawList::AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness) { imgui_function_table_instance()->ImDrawList_AddTriangle(this, p1, p2, p3, col, thickness); }
+inline void ImDrawList::AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col) { imgui_function_table_instance()->ImDrawList_AddTriangleFilled(this, p1, p2, p3, col); }
+inline void ImDrawList::AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness) { imgui_function_table_instance()->ImDrawList_AddCircle(this, center, radius, col, num_segments, thickness); }
+inline void ImDrawList::AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments) { imgui_function_table_instance()->ImDrawList_AddCircleFilled(this, center, radius, col, num_segments); }
+inline void ImDrawList::AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness) { imgui_function_table_instance()->ImDrawList_AddNgon(this, center, radius, col, num_segments, thickness); }
+inline void ImDrawList::AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments) { imgui_function_table_instance()->ImDrawList_AddNgonFilled(this, center, radius, col, num_segments); }
+inline void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end) { imgui_function_table_instance()->ImDrawList_AddText(this, pos, col, text_begin, text_end); }
+inline void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end, float wrap_width, const ImVec4* cpu_fine_clip_rect) { imgui_function_table_instance()->ImDrawList_AddText2(this, font, font_size, pos, col, text_begin, text_end, wrap_width, cpu_fine_clip_rect); }
+inline void ImDrawList::AddPolyline(const ImVec2* points, int num_points, ImU32 col, ImDrawFlags flags, float thickness) { imgui_function_table_instance()->ImDrawList_AddPolyline(this, points, num_points, col, flags, thickness); }
+inline void ImDrawList::AddConvexPolyFilled(const ImVec2* points, int num_points, ImU32 col) { imgui_function_table_instance()->ImDrawList_AddConvexPolyFilled(this, points, num_points, col); }
+inline void ImDrawList::AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments) { imgui_function_table_instance()->ImDrawList_AddBezierCubic(this, p1, p2, p3, p4, col, thickness, num_segments); }
+inline void ImDrawList::AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness, int num_segments) { imgui_function_table_instance()->ImDrawList_AddBezierQuadratic(this, p1, p2, p3, col, thickness, num_segments); }
+inline void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min, const ImVec2& uv_max, ImU32 col) { imgui_function_table_instance()->ImDrawList_AddImage(this, user_texture_id, p_min, p_max, uv_min, uv_max, col); }
+inline void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& uv1, const ImVec2& uv2, const ImVec2& uv3, const ImVec2& uv4, ImU32 col) { imgui_function_table_instance()->ImDrawList_AddImageQuad(this, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col); }
+inline void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min, const ImVec2& uv_max, ImU32 col, float rounding, ImDrawFlags flags) { imgui_function_table_instance()->ImDrawList_AddImageRounded(this, user_texture_id, p_min, p_max, uv_min, uv_max, col, rounding, flags); }
+inline void ImDrawList::PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num_segments) { imgui_function_table_instance()->ImDrawList_PathArcTo(this, center, radius, a_min, a_max, num_segments); }
+inline void ImDrawList::PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of_12) { imgui_function_table_instance()->ImDrawList_PathArcToFast(this, center, radius, a_min_of_12, a_max_of_12); }
+inline void ImDrawList::PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments) { imgui_function_table_instance()->ImDrawList_PathBezierCubicCurveTo(this, p2, p3, p4, num_segments); }
+inline void ImDrawList::PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments) { imgui_function_table_instance()->ImDrawList_PathBezierQuadraticCurveTo(this, p2, p3, num_segments); }
+inline void ImDrawList::PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding, ImDrawFlags flags) { imgui_function_table_instance()->ImDrawList_PathRect(this, rect_min, rect_max, rounding, flags); }
+inline void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data) { imgui_function_table_instance()->ImDrawList_AddCallback(this, callback, callback_data); }
+inline void ImDrawList::AddDrawCmd() { imgui_function_table_instance()->ImDrawList_AddDrawCmd(this); }
+inline ImDrawList* ImDrawList::CloneOutput() const { return imgui_function_table_instance()->ImDrawList_CloneOutput(this); }
+inline void ImDrawList::PrimReserve(int idx_count, int vtx_count) { imgui_function_table_instance()->ImDrawList_PrimReserve(this, idx_count, vtx_count); }
+inline void ImDrawList::PrimUnreserve(int idx_count, int vtx_count) { imgui_function_table_instance()->ImDrawList_PrimUnreserve(this, idx_count, vtx_count); }
+inline void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col) { imgui_function_table_instance()->ImDrawList_PrimRect(this, a, b, col); }
+inline void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col) { imgui_function_table_instance()->ImDrawList_PrimRectUV(this, a, b, uv_a, uv_b, col); }
+inline void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col) { imgui_function_table_instance()->ImDrawList_PrimQuadUV(this, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col); }
+inline ImFont::ImFont() { imgui_function_table_instance()->ConstructImFont(this); }
+inline ImFont::~ImFont() { imgui_function_table_instance()->DestructImFont(this); }
+inline const ImFontGlyph* ImFont::FindGlyph(ImWchar c) const { return imgui_function_table_instance()->ImFont_FindGlyph(this, c); }
+inline const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c) const { return imgui_function_table_instance()->ImFont_FindGlyphNoFallback(this, c); }
+inline ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end, const char** remaining) const { return imgui_function_table_instance()->ImFont_CalcTextSizeA(this, size, max_width, wrap_width, text_begin, text_end, remaining); }
+inline const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const { return imgui_function_table_instance()->ImFont_CalcWordWrapPositionA(this, scale, text, text_end, wrap_width); }
+inline void ImFont::RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c) const { imgui_function_table_instance()->ImFont_RenderChar(this, draw_list, size, pos, col, c); }
+inline void ImFont::RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width, bool cpu_fine_clip) const { imgui_function_table_instance()->ImFont_RenderText(this, draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip); }
+
+
+#endif
+
+#endif
diff --git a/src/Include/xrAPI/xrAPI.h b/src/Include/xrAPI/xrAPI.h
index 522982b..37d2306 100644
--- a/src/Include/xrAPI/xrAPI.h
+++ b/src/Include/xrAPI/xrAPI.h
@@ -33,10 +33,8 @@ class CGameMtlLibrary;
 extern XRAPI_API CGameMtlLibrary* PGMLib;
 #endif
 
-#ifdef DEBUG
-	class IDebugRender;
-	extern XRAPI_API IDebugRender*	DRender;
-#endif // DEBUG
+class IDebugRender;
+extern XRAPI_API IDebugRender*	DRender;
 
 #else
 	class	CRender;
diff --git a/src/Include/xrRender/DebugRender.h b/src/Include/xrRender/DebugRender.h
index 03644c6..afe64ed 100644
--- a/src/Include/xrRender/DebugRender.h
+++ b/src/Include/xrRender/DebugRender.h
@@ -1,9 +1,4 @@
-#ifndef	DebugRender_included
-#define	DebugRender_included
 #pragma once
-
-#ifdef DEBUG
-
 #include "DebugShader.h"
 
 class IDebugRender
@@ -25,7 +20,7 @@ public:
 public:
 	virtual			~IDebugRender		()	{}
 	virtual void	Render				() = 0;
-	virtual void	add_lines			(Fvector const *vertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color) = 0;
+	virtual void	add_lines			(Fvector const *vertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color, bool bHud = false) = 0;
 	
 	// routed to RCache
 	virtual void	NextSceneMode		() = 0;
@@ -39,12 +34,5 @@ public:
 	// Shaders
 	virtual void	SetDebugShader		(dbgShaderHandle shdHandle) = 0;
 	virtual void	DestroyDebugShader	(dbgShaderHandle shdHandle) = 0;
-
-#ifdef DEBUG
 	virtual void	dbg_DrawTRI			(Fmatrix& T, Fvector& p1, Fvector& p2, Fvector& p3, u32 C) = 0;
-#endif	//	DEBUG
 };
-
-#endif // DEBUG
-
-#endif	//	DebugRender_included
diff --git a/src/Include/xrRender/RenderVisual.h b/src/Include/xrRender/RenderVisual.h
index 94bc87e..a31273a 100644
--- a/src/Include/xrRender/RenderVisual.h
+++ b/src/Include/xrRender/RenderVisual.h
@@ -25,6 +25,10 @@ public:
 	virtual shared_str	_BCL	getDebugName() = 0;
 #endif
 
+	//--DSR-- HeatVision_start
+	virtual void MarkAsHot(bool is_hot) {};
+	//--DSR-- HeatVision_end
+
 	virtual IKinematics* _BCL dcast_PKinematics() { return 0; }
 	virtual IKinematicsAnimated* dcast_PKinematicsAnimated() { return 0; }
 	virtual IParticleCustom* dcast_ParticleCustom() { return 0; }
diff --git a/src/Layers/xrAPI/vs2022/xrAPI.vcxproj b/src/Layers/xrAPI/vs2022/xrAPI.vcxproj
new file mode 100644
index 0000000..375ac2c
--- /dev/null
+++ b/src/Layers/xrAPI/vs2022/xrAPI.vcxproj
@@ -0,0 +1,158 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}</ProjectGuid>
+    <RootNamespace>xrAPI</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRAPI_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <SubSystem>Windows</SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRAPI_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <Optimization>Disabled</Optimization>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+    </ClCompile>
+    <Link>
+      <SubSystem>Windows</SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRAPI_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <SubSystem>Windows</SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\xrAPI.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\..\Include\xrAPI\xrAPI.h" />
+    <ClInclude Include="..\stdafx.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/Layers/xrAPI/vs2022/xrAPI.vcxproj.filters b/src/Layers/xrAPI/vs2022/xrAPI.vcxproj.filters
new file mode 100644
index 0000000..fb9aa84
--- /dev/null
+++ b/src/Layers/xrAPI/vs2022/xrAPI.vcxproj.filters
@@ -0,0 +1,25 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Kernel">
+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="stdafx.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="xrAPI.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="stdafx.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrAPI\xrAPI.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/Layers/xrAPI/xrAPI.cpp b/src/Layers/xrAPI/xrAPI.cpp
index ffd4021..066e507 100644
--- a/src/Layers/xrAPI/xrAPI.cpp
+++ b/src/Layers/xrAPI/xrAPI.cpp
@@ -17,9 +17,7 @@ XRAPI_API IUIRender* UIRender = NULL;
 //XRAPI_API CSound_manager_interface*	Sound = NULL;
 XRAPI_API CGameMtlLibrary* PGMLib = NULL;
 #endif
-#ifdef DEBUG
-	XRAPI_API IDebugRender*	DRender = NULL;
-#endif // DEBUG
+XRAPI_API IDebugRender*	DRender = NULL;
 
 /*
 // This is an example of an exported variable
diff --git a/src/Layers/xrRender/Blender_BmmD.cpp b/src/Layers/xrRender/Blender_BmmD.cpp
index 02e36cb..381d9ec 100644
--- a/src/Layers/xrRender/Blender_BmmD.cpp
+++ b/src/Layers/xrRender/Blender_BmmD.cpp
@@ -257,6 +257,11 @@ void CBlender_BmmD::Compile(CBlender_Compile& C)
 		C.r_dx10Texture("s_dn_b", strconcat(sizeof(mask), mask, oB_Name, "_bump"));
 		C.r_dx10Texture("s_dn_a", strconcat(sizeof(mask), mask, oA_Name, "_bump"));
 
+		C.r_dx10Texture("s_puddles_normal", "fx\\water_normal");
+		C.r_dx10Texture("s_puddles_perlin", "fx\\puddles_perlin");
+		C.r_dx10Texture("s_puddles_mask", strconcat(sizeof(mask), mask, C.L_textures[0].c_str(), "_puddles_mask"));
+		C.r_dx10Texture("s_rainsplash", "fx\\water_sbumpvolume");
+
 		C.r_dx10Sampler("smp_base");
 		C.r_dx10Sampler("smp_linear");
 
diff --git a/src/Layers/xrRender/Blender_Editor_Wire.cpp b/src/Layers/xrRender/Blender_Editor_Wire.cpp
index 79277e4..2d6c106 100644
--- a/src/Layers/xrRender/Blender_Editor_Wire.cpp
+++ b/src/Layers/xrRender/Blender_Editor_Wire.cpp
@@ -56,7 +56,8 @@ void CBlender_Editor_Wire::Compile(CBlender_Compile& C)
 	else
 #endif	//	USE_DX10
 	{
-		C.r_Pass("editor", "simple_color",FALSE,TRUE,TRUE);
+		C.r_Pass("editor", "simple_color", FALSE, FALSE, FALSE);
+		C.r_ColorWriteEnable();
 		C.r_End();
 	}
 }
diff --git a/src/Layers/xrRender/Blender_Recorder_StandartBinding.cpp b/src/Layers/xrRender/Blender_Recorder_StandartBinding.cpp
index 5035624..6d370c4 100644
--- a/src/Layers/xrRender/Blender_Recorder_StandartBinding.cpp
+++ b/src/Layers/xrRender/Blender_Recorder_StandartBinding.cpp
@@ -258,9 +258,26 @@ class cl_eye_P : public R_constant_setup
 		RCache.set_c(C, V.x, V.y, V.z, 1);
 	}
 };
-
 static cl_eye_P binder_eye_P;
 
+// interpolated eye position (crookr scope parallax)
+// We can improve this by clamping the magnitude of the travel here instead of in-shader. 
+// it would fix the issue with the fog "sticking" when moving too far off center
+extern float scope_fog_interp;
+extern float scope_fog_travel;
+class cl_eye_PL : public R_constant_setup
+{
+	Fvector tV;
+	virtual void setup(R_constant* C)
+	{
+		Fvector& V = RDEVICE.vCameraPosition;
+		tV = tV.lerp(tV, V, scope_fog_interp);
+
+		RCache.set_c(C, tV.x, tV.y, tV.z, 1);
+	}
+};
+static cl_eye_PL binder_eye_PL;
+
 // eye-params
 class cl_eye_D : public R_constant_setup
 {
@@ -270,9 +287,22 @@ class cl_eye_D : public R_constant_setup
 		RCache.set_c(C, V.x, V.y, V.z, 0);
 	}
 };
-
 static cl_eye_D binder_eye_D;
 
+// interpolated eye direction (crookr scope parallax)
+class cl_eye_DL : public R_constant_setup
+{
+	Fvector tV;
+	virtual void setup(R_constant* C)
+	{
+		Fvector& V = RDEVICE.vCameraDirection;
+		tV = tV.lerp(tV, V, scope_fog_interp);
+
+		RCache.set_c(C, tV.x, tV.y, tV.z, 0);
+	}
+};
+static cl_eye_DL binder_eye_DL;
+
 // eye-params
 class cl_eye_N : public R_constant_setup
 {
@@ -285,6 +315,97 @@ class cl_eye_N : public R_constant_setup
 
 static cl_eye_N binder_eye_N;
 
+
+// fake scope params (crookr)
+extern float scope_outerblur;
+extern float scope_innerblur;
+extern float scope_scrollpower;
+extern float scope_brightness;
+class cl_fakescope_params : public R_constant_setup
+{
+	virtual void setup(R_constant* C)
+	{
+		RCache.set_c(C, scope_scrollpower, scope_innerblur, scope_outerblur, scope_brightness);
+	}
+};
+static cl_fakescope_params binder_fakescope_params;
+
+extern float scope_ca;
+extern float scope_fog_attack;
+extern float scope_fog_mattack;
+//extern float scope_fog_travel;
+class cl_fakescope_ca : public R_constant_setup
+{
+	virtual void setup(R_constant* C)
+	{
+		RCache.set_c(C, scope_ca, scope_fog_attack, scope_fog_mattack, scope_fog_travel);
+	}
+};
+static cl_fakescope_ca binder_fakescope_ca;
+
+extern float scope_radius;
+extern float scope_fog_radius;
+extern float scope_fog_sharp;
+//extern float scope_drift_amount;
+class cl_fakescope_params3 : public R_constant_setup
+{
+	virtual void setup(R_constant* C)
+	{
+		RCache.set_c(C, scope_radius, scope_fog_radius, scope_fog_sharp, 0.0f);
+	}
+};
+static cl_fakescope_params3 binder_fakescope_params3;
+
+//--DSR-- HeatVision_start
+extern float heat_vision_mode;
+extern Fvector4 heat_vision_steps;
+extern Fvector4 heat_vision_blurring;
+extern Fvector4 heat_vision_args_1;
+extern Fvector4 heat_vision_args_2;
+
+static class cl_heatvision_hotness : public R_constant_setup
+{
+	virtual void setup(R_constant* C)
+	{
+		RCache.hemi.set_c_hotness(C);
+	}
+} binder_heatvision_hotness;
+
+static class cl_heatvision_steps : public R_constant_setup
+{
+	virtual void setup(R_constant* C)
+	{
+		RCache.set_c(C, ps_r2_heatvision, heat_vision_steps.x, heat_vision_steps.y, heat_vision_steps.z);
+	}
+} binder_heatvision_params1;
+
+static class cl_heatvision_blurring : public R_constant_setup
+{
+	virtual void setup(R_constant* C)
+	{
+		RCache.set_c(C, heat_vision_blurring.x, heat_vision_blurring.y, heat_vision_blurring.z, heat_vision_mode);
+	}
+} binder_heatvision_params2;
+
+static class cl_heatvision_args1 : public R_constant_setup
+{
+	virtual void setup(R_constant* C)
+	{
+		RCache.set_c(C, heat_vision_args_1.x, heat_vision_args_1.y, heat_vision_args_1.z, heat_vision_args_1.w);
+	}
+} binder_heatvision_args1;
+
+static class cl_heatvision_args2 : public R_constant_setup
+{
+	virtual void setup(R_constant* C)
+	{
+		RCache.set_c(C, heat_vision_args_2.x, heat_vision_args_2.y, heat_vision_args_2.z, heat_vision_args_2.w);
+	}
+} binder_heatvision_args2;
+
+//--DSR-- HeatVision_end
+
+
 #ifndef _EDITOR
 // D-Light0
 class cl_sun0_color : public R_constant_setup
@@ -384,6 +505,23 @@ class cl_hemi_color : public R_constant_setup
 };
 
 static cl_hemi_color binder_hemi_color;
+
+class cl_sky_color : public R_constant_setup
+{
+	u32 marker;
+	Fvector4 result;
+
+	virtual void setup(R_constant* C)
+	{
+		if (marker != Device.dwFrame)
+		{
+			CEnvDescriptor& desc = *g_pGamePersistent->Environment().CurrentEnv;
+			result.set(desc.sky_color.x, desc.sky_color.y, desc.sky_color.z, desc.sky_rotation);
+		}
+		RCache.set_c(C, result);
+	}
+};
+static cl_sky_color binder_sky_color;
 #endif
 
 static class cl_screen_res : public R_constant_setup
@@ -521,6 +659,10 @@ static class cl_near_far_plane : public R_constant_setup
 	}
 } binder_near_far_plane;
 
+// Screen Space Shaders Stuff
+extern Fvector4 ps_ssfx_wpn_dof_1;
+extern float ps_ssfx_wpn_dof_2;
+
 //Sneaky debug stuff
 extern Fvector4 ps_dev_param_1;
 extern Fvector4 ps_dev_param_2;
@@ -595,6 +737,22 @@ static class dev_param_8 : public R_constant_setup
 	}
 }    dev_param_8;
 
+static class ssfx_wpn_dof_1 : public R_constant_setup
+{
+	virtual void setup(R_constant* C)
+	{
+		RCache.set_c(C, ps_ssfx_wpn_dof_1.x, ps_ssfx_wpn_dof_1.y, ps_ssfx_wpn_dof_1.z, ps_ssfx_wpn_dof_1.w);
+	}
+}    ssfx_wpn_dof_1;
+
+static class ssfx_wpn_dof_2 : public R_constant_setup
+{
+	virtual void setup(R_constant* C)
+	{
+		RCache.set_c(C, ps_ssfx_wpn_dof_2, 0, 0, 0);
+	}
+}    ssfx_wpn_dof_2;
+
 // Standart constant-binding
 void CBlender_Compile::SetMapping()
 {
@@ -639,7 +797,9 @@ void CBlender_Compile::SetMapping()
 
 	// eye-params
 	r_Constant("eye_position", &binder_eye_P);
+	r_Constant("eye_position_lerp", &binder_eye_PL); // crookr
 	r_Constant("eye_direction", &binder_eye_D);
+	r_Constant("eye_direction_lerp", &binder_eye_DL); // crookr
 	r_Constant("eye_normal", &binder_eye_N);
 
 #ifndef _EDITOR
@@ -680,6 +840,11 @@ void CBlender_Compile::SetMapping()
 	// PDA
 	r_Constant("pda_params", &binder_pda_params);
 
+	// Screen Space Shaders
+	r_Constant("sky_color", &binder_sky_color);
+	r_Constant("ssfx_wpn_dof_1", &ssfx_wpn_dof_1);
+	r_Constant("ssfx_wpn_dof_2", &ssfx_wpn_dof_2);
+
 	// Shader stuff
 	r_Constant("shader_param_1", &dev_param_1);
 	r_Constant("shader_param_2", &dev_param_2);
@@ -690,10 +855,23 @@ void CBlender_Compile::SetMapping()
 	r_Constant("shader_param_7", &dev_param_7);
 	r_Constant("shader_param_8", &dev_param_8);
 
+	// crookr
+	r_Constant("fakescope_params1", &binder_fakescope_params);
+	r_Constant("fakescope_params2", &binder_fakescope_ca);
+	r_Constant("fakescope_params3", &binder_fakescope_params3);
+
 	// other common
 	for (u32 it = 0; it < DEV->v_constant_setup.size(); it++)
 	{
 		std::pair<shared_str, R_constant_setup*> cs = DEV->v_constant_setup[it];
 		r_Constant(*cs.first, cs.second);
 	}
+
+	//--DSR-- HeatVision_start
+	r_Constant("L_hotness", &binder_heatvision_hotness);
+	r_Constant("heatvision_params1", &binder_heatvision_params1);
+	r_Constant("heatvision_params2", &binder_heatvision_params2);
+	r_Constant("heatvision_params3", &binder_heatvision_args1);
+	r_Constant("heatvision_params4", &binder_heatvision_args2);
+	//--DSR-- HeatVision_end
 }
diff --git a/src/Layers/xrRender/Blender_tree.cpp b/src/Layers/xrRender/Blender_tree.cpp
index 7a8b831..234bee3 100644
--- a/src/Layers/xrRender/Blender_tree.cpp
+++ b/src/Layers/xrRender/Blender_tree.cpp
@@ -216,6 +216,11 @@ void CBlender_Tree::Compile(CBlender_Compile& C)
 	switch (C.iElement)
 	{
 	case SE_R2_NORMAL_HQ: // deffer
+
+		// Is a branch/bush. Use a different VS
+		if (oBlend.value)
+			tvs = "tree_branch";
+
 		if (bUseATOC)
 		{
 			uber_deffer(C, true, tvs, "base_atoc", oBlend.value, 0, true);
diff --git a/src/Layers/xrRender/D3DUtils.cpp b/src/Layers/xrRender/D3DUtils.cpp
index 1d0db2c..a91a893 100644
--- a/src/Layers/xrRender/D3DUtils.cpp
+++ b/src/Layers/xrRender/D3DUtils.cpp
@@ -181,7 +181,7 @@ void CDrawUtilities::UpdateGrid(int number_of_cell, float square_size, int subdi
 				m_GridPoints.push_back(right);
 			}
 		}
-		for (i = -m_GridCounts[1]; i <= m_GridCounts[1]; i++)
+		for (int i = -m_GridCounts[1]; i <= m_GridCounts[1]; i++)
 		{
 			if ((!!thin) != !!(i % m_GridSubDiv[1]))
 			{
@@ -244,7 +244,7 @@ void CDrawUtilities::OnDeviceCreate()
 	// initialize identity box
 	Fbox bb;
 	bb.set(-0.505f, -0.505f, -0.505f, 0.505f, 0.505f, 0.505f);
-	for (i = 0; i < 8; i++)
+	for (int i = 0; i < 8; i++)
 	{
 		Fvector S;
 		Fvector p;
diff --git a/src/Layers/xrRender/DetailManager.cpp b/src/Layers/xrRender/DetailManager.cpp
index 7d63982..bf1f074 100644
--- a/src/Layers/xrRender/DetailManager.cpp
+++ b/src/Layers/xrRender/DetailManager.cpp
@@ -292,7 +292,7 @@ void CDetailManager::UpdateVisibleM()
 				continue;
 			}
 			u32 mask = 0xff;
-			u32 res = View.testSAABB(MS.vis.sphere.P, MS.vis.sphere.R, MS.vis.box.data(), mask);
+			u32 res = View.testSphere(MS.vis.sphere.P, MS.vis.sphere.R, mask);
 			if (fcvNone == res)
 			{
 				continue; // invisible-view frustum
@@ -319,7 +319,7 @@ void CDetailManager::UpdateVisibleM()
 				if (fcvPartial == res)
 				{
 					u32 _mask = mask;
-					u32 _res = View.testSAABB(S.vis.sphere.P, S.vis.sphere.R, S.vis.box.data(), _mask);
+					u32 _res = View.testSphere(S.vis.sphere.P, S.vis.sphere.R, _mask);
 					if (fcvNone == _res)
 					{
 						continue; // invisible-view frustum
@@ -370,7 +370,9 @@ void CDetailManager::UpdateVisibleM()
 							if (ssa > r_ssaCHEAP) vis_id = Item.vis_ID;
 
 							sp.r_items[vis_id].push_back(*siIT);
-
+							
+							Item.distance = dist_sq;
+							Item.position = S.vis.sphere.P;
 							//2							visible[vis_id][sp.id].push_back(&Item);
 						}
 					}
@@ -458,3 +460,27 @@ void __stdcall CDetailManager::MT_CALC()
 		}
 	MT.Leave();
 }
+
+void CDetailManager::details_clear()
+{
+	// Disable fade, next render will be scene
+	fade_distance = 99999;
+
+	if (ps_ssfx_grass_shadows.x <= 0)
+		return;
+
+	for (u32 x = 0; x < 3; x++)
+	{
+		vis_list& list = m_visibles[x];
+
+		for (u32 O = 0; O < objects.size(); O++)
+		{
+			CDetail& Object = *objects[O];
+			xr_vector<SlotItemVec*>& vis = list[O];
+			if (!vis.empty())
+			{
+				vis.clear_not_free();
+			}
+		}
+	}
+}
\ No newline at end of file
diff --git a/src/Layers/xrRender/DetailManager.h b/src/Layers/xrRender/DetailManager.h
index 5851f93..95da475 100644
--- a/src/Layers/xrRender/DetailManager.h
+++ b/src/Layers/xrRender/DetailManager.h
@@ -64,6 +64,12 @@ const float		dm_fade = float(2 * dm_size) - .5f;
 class ECORE_API CDetailManager
 {
 public:
+
+	float fade_distance = 99999;
+	Fvector light_position;
+
+	void details_clear();
+
 	struct SlotItem
 	{
 		// îäèí êóñòèê
@@ -73,6 +79,8 @@ public:
 		u32 vis_ID; // èíäåêñ â visibility ñïèñêå îí æå òèï [íå êà÷àåòñÿ, êà÷àåòñÿ1, êà÷àåòñÿ2]
 		float c_hemi;
 		float c_sun;
+		float distance;
+		Fvector position;
 #if RENDER==R_R1
 		Fvector c_rgb;
 #endif
diff --git a/src/Layers/xrRender/DetailManager_VS.cpp b/src/Layers/xrRender/DetailManager_VS.cpp
index 92e7ef7..99227c2 100644
--- a/src/Layers/xrRender/DetailManager_VS.cpp
+++ b/src/Layers/xrRender/DetailManager_VS.cpp
@@ -87,7 +87,7 @@ void CDetailManager::hw_Load_Geom()
 #else	//	USE_DX10
 		R_CHK(hw_VB->Lock(0,0,(void**)&pV,0));
 #endif	//	USE_DX10
-		for (o = 0; o < objects.size(); o++)
+		for (u32 o = 0; o < objects.size(); o++)
 		{
 			const CDetail& D = *objects[o];
 			for (u32 batch = 0; batch < hw_BatchSize; batch++)
@@ -126,7 +126,7 @@ void CDetailManager::hw_Load_Geom()
 #else	//	USE_DX10
 		R_CHK(hw_IB->Lock(0,0,(void**)(&pI),0));
 #endif	//	USE_DX10
-		for (o = 0; o < objects.size(); o++)
+		for (u32 o = 0; o < objects.size(); o++)
 		{
 			const CDetail& D = *objects[o];
 			u16 offset = 0;
diff --git a/src/Layers/xrRender/FBasicVisual.cpp b/src/Layers/xrRender/FBasicVisual.cpp
index f8e4651..ba1455a 100644
--- a/src/Layers/xrRender/FBasicVisual.cpp
+++ b/src/Layers/xrRender/FBasicVisual.cpp
@@ -11,6 +11,7 @@
 
 #include "fbasicvisual.h"
 #include "../../xrEngine/fmesh.h"
+#include "dxRenderDeviceRender.h"
 
 //////////////////////////////////////////////////////////////////////
 // Construction/Destruction
@@ -76,6 +77,21 @@ void dxRender_Visual::Load(const char* N, IReader* data, u32)
 #endif
 }
 
+//--DSR-- HeatVision_start
+void dxRender_Visual::MarkAsHot(bool is_hot) {
+	Shader* s = shader._get();
+	if (0 == s) return;
+	ShaderElement* e = s->E[0]._get();
+	if (0 == e || e->passes.empty()) return;
+	SPass* p = e->passes[0]._get();
+	STextureList* l = p->T._get();
+	if (0 == l || l->empty()) return;
+	CTexture* t = l->at(0).second._get();
+	if (t)
+		t->m_is_hot = is_hot;
+}
+//--DSR-- HeatVision_end
+
 #define PCOPY(a)	a = pFrom->a
 
 void dxRender_Visual::Copy(dxRender_Visual* pFrom)
diff --git a/src/Layers/xrRender/FBasicVisual.h b/src/Layers/xrRender/FBasicVisual.h
index 666dccc..aad4252 100644
--- a/src/Layers/xrRender/FBasicVisual.h
+++ b/src/Layers/xrRender/FBasicVisual.h
@@ -77,6 +77,10 @@ public:
 
 	virtual vis_data& _BCL getVisData() { return vis; }
 	virtual u32 getType() { return Type; }
+	
+	//--DSR-- HeatVision_start
+	virtual void MarkAsHot(bool is_hot);
+	//--DSR-- HeatVision_end
 
 	dxRender_Visual();
 	virtual ~dxRender_Visual();
diff --git a/src/Layers/xrRender/FHierrarhyVisual.cpp b/src/Layers/xrRender/FHierrarhyVisual.cpp
index c5b821a..68dacdc 100644
--- a/src/Layers/xrRender/FHierrarhyVisual.cpp
+++ b/src/Layers/xrRender/FHierrarhyVisual.cpp
@@ -90,6 +90,15 @@ void FHierrarhyVisual::Load(const char* N, IReader* data, u32 dwFlags)
 	}
 }
 
+//--DSR-- HeatVision_start
+void FHierrarhyVisual::MarkAsHot(bool is_hot) 
+{
+	dxRender_Visual::MarkAsHot(is_hot);
+	for (u32 i = 0; i < children.size(); i++)
+		children[i]->MarkAsHot(is_hot);
+}
+//--DSR-- HeatVision_end
+
 void FHierrarhyVisual::Copy(dxRender_Visual* pSrc)
 {
 	dxRender_Visual::Copy(pSrc);
diff --git a/src/Layers/xrRender/FHierrarhyVisual.h b/src/Layers/xrRender/FHierrarhyVisual.h
index 5f20c61..960ffe0 100644
--- a/src/Layers/xrRender/FHierrarhyVisual.h
+++ b/src/Layers/xrRender/FHierrarhyVisual.h
@@ -21,6 +21,10 @@ public:
 	virtual void Load(const char* N, IReader* data, u32 dwFlags);
 	virtual void Copy(dxRender_Visual* pFrom);
 	virtual void Release();
+
+	//--DSR-- HeatVision_start
+	virtual void MarkAsHot(bool is_hot);
+	//--DSR-- HeatVision_end
 };
 
 #endif //FHierrarhyVisualH
diff --git a/src/Layers/xrRender/FTreeVisual.cpp b/src/Layers/xrRender/FTreeVisual.cpp
index 0489ef7..ae734d7 100644
--- a/src/Layers/xrRender/FTreeVisual.cpp
+++ b/src/Layers/xrRender/FTreeVisual.cpp
@@ -19,6 +19,9 @@ shared_str c_c_bias;
 shared_str c_c_scale;
 shared_str c_c_sun;
 
+shared_str c_c_BendersPos;
+shared_str c_c_BendersSetup;
+
 FTreeVisual::FTreeVisual(void)
 {
 }
@@ -91,6 +94,9 @@ void FTreeVisual::Load(const char* N, IReader* data, u32 dwFlags)
 	c_c_bias = "c_bias";
 	c_c_scale = "c_scale";
 	c_c_sun = "c_sun";
+
+	c_c_BendersPos = "benders_pos";
+	c_c_BendersSetup = "benders_setup";
 }
 
 struct FTreeVisual_setup
@@ -160,6 +166,47 @@ void FTreeVisual::Render(float LOD)
 	                       s * c_bias.rgb.z + desc.ambient.z, s * c_bias.hemi); // bias
 #endif
 	RCache.tree.set_c_sun(s * c_scale.sun, s * c_bias.sun, 0, 0); // sun
+
+#if RENDER==R_R4 || RENDER==R_R3
+
+	if (ps_ssfx_grass_interactive.y > 0)
+	{
+		// Inter grass Settings
+		RCache.set_c(c_c_BendersSetup, ps_ssfx_int_grass_params_1);
+
+		// Grass benders data ( Player + Characters )
+		IGame_Persistent::grass_data& GData = g_pGamePersistent->grass_shader_data;
+		Fvector4 player_pos = { 0, 0, 0, 0 };
+		int BendersQty = _min(16, ps_ssfx_grass_interactive.y + 1);
+
+		// Add Player?
+		if (ps_ssfx_grass_interactive.x > 0)
+		{
+			player_pos.set(Device.vCameraPosition.x, Device.vCameraPosition.y, Device.vCameraPosition.z, -1);
+		}
+
+		Fvector4* c_grass;
+		{
+			void* GrassData;
+			RCache.get_ConstantDirect(c_c_BendersPos, BendersQty * sizeof(Fvector4), &GrassData, 0, 0);
+
+			c_grass = (Fvector4*)GrassData;
+		}
+		VERIFY(c_grass);
+
+		if (c_grass)
+		{
+			c_grass[0].set(player_pos);
+			c_grass[16].set(0.0f, -99.0f, 0.0f, 1.0f);
+
+			for (int Bend = 1; Bend < BendersQty; Bend++)
+			{
+				c_grass[Bend].set(GData.pos[Bend].x, GData.pos[Bend].y, GData.pos[Bend].z, GData.radius_curr[Bend]);
+				c_grass[Bend + 16].set(GData.dir[Bend].x, GData.dir[Bend].y, GData.dir[Bend].z, GData.str[Bend]);
+			}
+		}
+	}
+#endif
 }
 
 #define PCOPY(a)	a = pFrom->a
diff --git a/src/Layers/xrRender/PSLibrary.cpp b/src/Layers/xrRender/PSLibrary.cpp
index e9c102e..0241631 100644
--- a/src/Layers/xrRender/PSLibrary.cpp
+++ b/src/Layers/xrRender/PSLibrary.cpp
@@ -41,7 +41,7 @@ void CPSLibrary::OnDestroy()
 	for (PS::PEDIt e_it = m_PEDs.begin(); e_it != m_PEDs.end(); ++e_it)
 		(*e_it)->DestroyShader();
 
-	for (e_it = m_PEDs.begin(); e_it != m_PEDs.end(); e_it++)
+	for (PS::PEDIt e_it = m_PEDs.begin(); e_it != m_PEDs.end(); e_it++)
 		xr_delete(*e_it);
 	m_PEDs.clear();
 
diff --git a/src/Layers/xrRender/ParticleEffect.cpp b/src/Layers/xrRender/ParticleEffect.cpp
index 872ed30..52f4d32 100644
--- a/src/Layers/xrRender/ParticleEffect.cpp
+++ b/src/Layers/xrRender/ParticleEffect.cpp
@@ -12,9 +12,6 @@
 using namespace PAPI;
 using namespace PS;
 
-const u32 PS::uDT_STEP = 33;
-const float PS::fDT_STEP = float(uDT_STEP) / 1000.f;
-
 static void ApplyTexgen(const Fmatrix& mVP)
 {
 	Fmatrix mTexgen;
@@ -135,6 +132,8 @@ void CParticleEffect::OnFrame(u32 frame_dt)
 		m_MemDT += frame_dt;
 
 		int StepCount = 0;
+		u32 uDT_STEP = m_Def->GetUStep();
+		float fDT_STEP = m_Def->GetFStep();
 		if (m_MemDT >= uDT_STEP)
 		{
 			// allow maximum of three steps (99ms) to avoid slowdown after loading
@@ -507,11 +506,11 @@ void ParticleRenderStream(FVF::LIT* pv, u32 count, PAPI::Particle * particles, C
 						Fvector p;
 						pPE->m_XFORM.transform_tiny(p, m.pos);
 						M.mulA_43(pPE->m_XFORM);
-						FillSprite(pv, M.k, M.i, p, lt, rb, r_x, r_y, m.color, sina, cosa);
+						FillSprite(pv, M.k, M.i, p, lt, rb, r_x, r_y, color_rgba_f(m.colorR, m.colorG, m.colorB, m.colorA), sina, cosa);
 					}
 					else
 					{
-						FillSprite(pv, M.k, M.i, m.pos, lt, rb, r_x, r_y, m.color, sina, cosa);
+						FillSprite(pv, M.k, M.i, m.pos, lt, rb, r_x, r_y, color_rgba_f(m.colorR, m.colorG, m.colorB, m.colorA), sina, cosa);
 					}
 				}
 				else if ((speed >= EPS_S) && pPE->m_Def->m_Flags.is(CPEDef::dfFaceAlign))
@@ -531,11 +530,11 @@ void ParticleRenderStream(FVF::LIT* pv, u32 count, PAPI::Particle * particles, C
 						Fvector p;
 						pPE->m_XFORM.transform_tiny(p, m.pos);
 						M.mulA_43(pPE->m_XFORM);
-						FillSprite(pv, M.j, M.i, p, lt, rb, r_x, r_y, m.color, sina, cosa);
+						FillSprite(pv, M.j, M.i, p, lt, rb, r_x, r_y, color_rgba_f(m.colorR, m.colorG, m.colorB, m.colorA), sina, cosa);
 					}
 					else
 					{
-						FillSprite(pv, M.j, M.i, m.pos, lt, rb, r_x, r_y, m.color, sina, cosa);
+						FillSprite(pv, M.j, M.i, m.pos, lt, rb, r_x, r_y, color_rgba_f(m.colorR, m.colorG, m.colorB, m.colorA), sina, cosa);
 					}
 				}
 				else
@@ -550,11 +549,11 @@ void ParticleRenderStream(FVF::LIT* pv, u32 count, PAPI::Particle * particles, C
 						Fvector p, d;
 						pPE->m_XFORM.transform_tiny(p, m.pos);
 						pPE->m_XFORM.transform_dir(d, dir);
-						FillSprite(pv, p, d, lt, rb, r_x, r_y, m.color, sina, cosa);
+						FillSprite(pv, p, d, lt, rb, r_x, r_y, color_rgba_f(m.colorR, m.colorG, m.colorB, m.colorA), sina, cosa);
 					}
 					else
 					{
-						FillSprite(pv, m.pos, dir, lt, rb, r_x, r_y, m.color, sina, cosa);
+						FillSprite(pv, m.pos, dir, lt, rb, r_x, r_y, color_rgba_f(m.colorR, m.colorG, m.colorB, m.colorA), sina, cosa);
 					}
 				}
 			}
@@ -564,11 +563,11 @@ void ParticleRenderStream(FVF::LIT* pv, u32 count, PAPI::Particle * particles, C
 				{
 					Fvector p;
 					pPE->m_XFORM.transform_tiny(p, m.pos);
-					FillSprite(pv, RDEVICE.vCameraTop, RDEVICE.vCameraRight, p, lt, rb, r_x, r_y, m.color, sina, cosa);
+					FillSprite(pv, RDEVICE.vCameraTop, RDEVICE.vCameraRight, p, lt, rb, r_x, r_y, color_rgba_f(m.colorR, m.colorG, m.colorB, m.colorA), sina, cosa);
 				}
 				else
 				{
-					FillSprite(pv, RDEVICE.vCameraTop, RDEVICE.vCameraRight, m.pos, lt, rb, r_x, r_y, m.color, sina, cosa);
+					FillSprite(pv, RDEVICE.vCameraTop, RDEVICE.vCameraRight, m.pos, lt, rb, r_x, r_y, color_rgba_f(m.colorR, m.colorG, m.colorB, m.colorA), sina, cosa);
 				}
 			}
 		}
diff --git a/src/Layers/xrRender/ParticleEffect.h b/src/Layers/xrRender/ParticleEffect.h
index 26fc1c9..5c69ff6 100644
--- a/src/Layers/xrRender/ParticleEffect.h
+++ b/src/Layers/xrRender/ParticleEffect.h
@@ -98,9 +98,6 @@ namespace PS
 
 	void OnEffectParticleBirth(void* owner, u32 param, PAPI::Particle& m, u32 idx);
 	void OnEffectParticleDead(void* owner, u32 param, PAPI::Particle& m, u32 idx);
-
-	extern const u32 uDT_STEP;
-	extern const float fDT_STEP;
 }
 
 //---------------------------------------------------------------------------
diff --git a/src/Layers/xrRender/ParticleEffectActions.cpp b/src/Layers/xrRender/ParticleEffectActions.cpp
index 17cdb82..27b8837 100644
--- a/src/Layers/xrRender/ParticleEffectActions.cpp
+++ b/src/Layers/xrRender/ParticleEffectActions.cpp
@@ -1202,7 +1202,7 @@ void EPATurbulence::Compile(IWriter& F)
 			for (int j = 0; j < detail; j++)
 				delete[] nval[i][j];
 		}
-		for (i = 0; i < detail; i++)
+		for (int i = 0; i < detail; i++)
 			delete[] nval[i];
 		delete[] nval;
 		nval = 0;
diff --git a/src/Layers/xrRender/ParticleEffectDef.cpp b/src/Layers/xrRender/ParticleEffectDef.cpp
index 81eaad4..eecfb0b 100644
--- a/src/Layers/xrRender/ParticleEffectDef.cpp
+++ b/src/Layers/xrRender/ParticleEffectDef.cpp
@@ -15,12 +15,16 @@
 using namespace PAPI;
 using namespace PS;
 
+extern float ps_particle_update_coeff;
+
 //------------------------------------------------------------------------------
 // class CParticleEffectDef
 //------------------------------------------------------------------------------
 CPEDef::CPEDef()
 {
 	m_Frame.InitDefault();
+	m_uStep = 33;
+	m_fStep = float(m_uStep) / 1000.f;
 	m_MaxParticles = 0;
 	m_CachedShader = 0;
 	m_fTimeLimit = 0.f;
@@ -43,6 +47,16 @@ CPEDef::~CPEDef()
 #endif
 }
 
+u32 CPEDef::GetUStep()
+{
+	return m_uStep * ps_particle_update_coeff;
+}
+
+float CPEDef::GetFStep()
+{
+	return m_fStep * ps_particle_update_coeff;
+}
+
 void CPEDef::CreateShader()
 {
 	if (*m_ShaderName && *m_TextureName)
@@ -283,6 +297,11 @@ BOOL CPEDef::Load(IReader& F)
 BOOL CPEDef::Load2(CInifile& ini)
 {
 	//.	u16 version		= ini.r_u16("_effect", "version");
+	if (ini.line_exist("_effect", "update_step")) 
+	{
+		m_uStep = ini.r_u32("_effect", "update_step");
+		m_fStep = float(m_uStep) / 1000.f;
+	}
 	m_MaxParticles = ini.r_u32("_effect", "max_particles");
 	m_Flags.assign(ini.r_u32("_effect", "flags"));
 
diff --git a/src/Layers/xrRender/ParticleEffectDef.h b/src/Layers/xrRender/ParticleEffectDef.h
index 4ca68bf..1099d65 100644
--- a/src/Layers/xrRender/ParticleEffectDef.h
+++ b/src/Layers/xrRender/ParticleEffectDef.h
@@ -85,7 +85,9 @@ namespace PS
 		SFrame m_Frame;
 		// compiled actions
 		CMemoryWriter m_Actions;
-		// def        
+		// def
+		u32 m_uStep;		// update rate of this effect in ms
+		float m_fStep;		// update rate of this effect in s
 		float m_fTimeLimit; // time limit
 		int m_MaxParticles; // max particle count
 		Fvector m_VelocityScale; // velocity scale
@@ -105,6 +107,9 @@ namespace PS
 		CPEDef();
 		~CPEDef();
 
+		u32 GetUStep();
+		float GetFStep();
+
 		void SetName(LPCSTR name);
 		IC LPCSTR Name() const { return *m_Name; }
 		void CreateShader();
diff --git a/src/Layers/xrRender/ParticleGroup.cpp b/src/Layers/xrRender/ParticleGroup.cpp
index 5349383..1797c51 100644
--- a/src/Layers/xrRender/ParticleGroup.cpp
+++ b/src/Layers/xrRender/ParticleGroup.cpp
@@ -217,7 +217,7 @@ void CParticleGroup::SItem::StartRelatedChild(CParticleEffect* emitter, LPCSTR e
 	M.identity();
 	Fvector vel;
 	vel.sub(m.pos, m.posB);
-	vel.div(fDT_STEP);
+	vel.div(C->m_Def->GetFStep());
 	if (emitter->m_RT_Flags.is(CParticleEffect::flRT_XFORM))
 	{
 		M.set(emitter->m_XFORM);
@@ -251,7 +251,7 @@ void CParticleGroup::SItem::StartFreeChild(CParticleEffect* emitter, LPCSTR nm,
 		M.identity();
 		Fvector vel;
 		vel.sub(m.pos, m.posB);
-		vel.div(fDT_STEP);
+		vel.div(C->m_Def->GetFStep());
 		if (emitter->m_RT_Flags.is(CParticleEffect::flRT_XFORM))
 		{
 			M.set(emitter->m_XFORM);
@@ -389,7 +389,7 @@ void CParticleGroup::SItem::OnFrame(u32 u_dt, const CPGDef::SEffect& def, Fbox&
 						M.translate(m.pos);
 						Fvector vel;
 						vel.sub(m.pos, m.posB);
-						vel.div(fDT_STEP);
+						vel.div(C->m_Def->GetFStep());
 						C->UpdateParent(M, vel,FALSE);
 					}
 				}
diff --git a/src/Layers/xrRender/R_Backend.cpp b/src/Layers/xrRender/R_Backend.cpp
index d3b11ce..ce29326 100644
--- a/src/Layers/xrRender/R_Backend.cpp
+++ b/src/Layers/xrRender/R_Backend.cpp
@@ -1,18 +1,17 @@
 #include "stdafx.h"
 #pragma hdrstop
 
+#if defined(USE_DX10) || defined(USE_DX11)
 #include "../xrRenderDX10/dx10BufferUtils.h"
+#endif	//	USE_DX11
 
 CBackend RCache;
 
 // Create Quad-IB
 #if defined(USE_DX10) || defined(USE_DX11)
 
-// Igor: is used to test bug with rain, particles corruption
 void CBackend::RestoreQuadIBData()
 {
-	// Igor: never seen this corruption for DX10
-	;
 }
 
 void CBackend::CreateQuadIB()
@@ -21,13 +20,10 @@ void CBackend::CreateQuadIB()
 	static const u32 dwIdxCount = dwTriCount * 2 * 3;
 	u16 IndexBuffer[dwIdxCount];
 	u16* Indices = IndexBuffer;
-	//u32		dwUsage			= D3DUSAGE_WRITEONLY;
-//if (HW.Caps.geometry.bSoftware)	dwUsage|=D3DUSAGE_SOFTWAREPROCESSING;
-	//R_CHK(HW.pDevice->CreateIndexBuffer(dwIdxCount*2,dwUsage,D3DFMT_INDEX16,D3DPOOL_MANAGED,&QuadIB,NULL));
 
 	D3D_BUFFER_DESC desc;
 	desc.ByteWidth = dwIdxCount * 2;
-	//desc.Usage = D3D_USAGE_IMMUTABLE;
+
 	desc.Usage = D3D_USAGE_DEFAULT;
 	desc.BindFlags = D3D_BIND_INDEX_BUFFER;
 	desc.CPUAccessFlags = 0;
@@ -36,7 +32,6 @@ void CBackend::CreateQuadIB()
 	D3D_SUBRESOURCE_DATA subData;
 	subData.pSysMem = IndexBuffer;
 
-	//R_CHK(QuadIB->Lock(0,0,(void**)&Indices,0));
 	{
 		int Cnt = 0;
 		int ICnt = 0;
@@ -53,16 +48,13 @@ void CBackend::CreateQuadIB()
 			Cnt += 4;
 		}
 	}
-	//R_CHK(QuadIB->Unlock());
 
-	//R_CHK(HW.pDevice->CreateIndexBuffer(dwIdxCount*2,dwUsage,D3DFMT_INDEX16,D3DPOOL_MANAGED,&QuadIB,NULL));
 	R_CHK(HW.pDevice->CreateBuffer ( &desc, &subData, &QuadIB));
 	HW.stats_manager.increment_stats_ib(QuadIB);
 }
 
-#else	//	USE_DX10
+#else	//	USE_DX11
 
-// Igor: is used to test bug with rain, particles corruption
 void CBackend::RestoreQuadIBData()
 {
 	const u32 dwTriCount = 4 * 1024;
@@ -87,7 +79,6 @@ void CBackend::RestoreQuadIBData()
 	R_CHK(QuadIB->Unlock());
 }
 
-
 void CBackend::CreateQuadIB()
 {
 	const u32 dwTriCount = 4 * 1024;
@@ -97,7 +88,7 @@ void CBackend::CreateQuadIB()
 	if (HW.Caps.geometry.bSoftware) dwUsage |= D3DUSAGE_SOFTWAREPROCESSING;
 	R_CHK(HW.pDevice->CreateIndexBuffer (dwIdxCount*2,dwUsage,D3DFMT_INDEX16,D3DPOOL_DEFAULT,&QuadIB,NULL));
 	HW.stats_manager.increment_stats_ib(QuadIB);
-	//	Msg("CBackend::CreateQuadIB(). Created buffer size = %d ", dwIdxCount*2 );
+
 	R_CHK(QuadIB->Lock(0,0,(void**)&Indices,0));
 	{
 		int Cnt = 0;
@@ -118,21 +109,19 @@ void CBackend::CreateQuadIB()
 	R_CHK(QuadIB->Unlock());
 }
 
-#endif	//	USE_DX10
+#endif	//	USE_DX11
 
 // Device dependance
 void CBackend::OnDeviceCreate()
 {
-#if defined(USE_DX10) || defined(USE_DX11)
-	//CreateConstantBuffers();
-#endif	//	USE_DX10
-
 	CreateQuadIB();
 
 	// streams
 	Vertex.Create();
 	Index.Create();
 
+	InitDebugDraw();
+
 	// invalidate caching
 	Invalidate();
 }
@@ -143,29 +132,9 @@ void CBackend::OnDeviceDestroy()
 	Index.Destroy();
 	Vertex.Destroy();
 
+	DestroyDebugDraw();
+
 	// Quad
 	HW.stats_manager.decrement_stats_ib(QuadIB);
 	_RELEASE(QuadIB);
-
-#if defined(USE_DX10) || defined(USE_DX11)
-	//DestroyConstantBuffers();
-#endif	//	USE_DX10
-}
-
-#if defined(USE_DX10) || defined(USE_DX11)
-/*
-void CBackend::CreateConstantBuffers()
-{
-	const int iVectorElements = 4;
-	const int iVectorNumber = 256;
-	dx10BufferUtils::CreateConstantBuffer(&m_pPixelConstants, iVectorNumber*iVectorElements*sizeof(float));
-	dx10BufferUtils::CreateConstantBuffer(&m_pVertexConstants, iVectorNumber*iVectorElements*sizeof(float));
-}
-
-void CBackend::DestroyConstantBuffers()
-{
-	_RELEASE(m_pVertexConstants);
-	_RELEASE(m_pPixelConstants);
 }
-*/
-#endif	USE_DX10
diff --git a/src/Layers/xrRender/R_Backend.h b/src/Layers/xrRender/R_Backend.h
index 3f9c03b..2a08ed8 100644
--- a/src/Layers/xrRender/R_Backend.h
+++ b/src/Layers/xrRender/R_Backend.h
@@ -167,6 +167,7 @@ private:
 	u32 stencil_pass;
 	u32 stencil_zfail;
 	u32 colorwrite_mask;
+	u32 fill_mode;
 	u32 cull_mode;
 	u32 z_enable;
 	u32 z_func;
@@ -337,6 +338,7 @@ public:
 	IC void set_ColorWriteEnable(
 		u32 _mask = D3DCOLORWRITEENABLE_RED | D3DCOLORWRITEENABLE_GREEN | D3DCOLORWRITEENABLE_BLUE |
 			D3DCOLORWRITEENABLE_ALPHA);
+	IC void set_FillMode(u32 _mode);
 	IC void set_CullMode(u32 _mode);
 	IC u32 get_CullMode() { return cull_mode; }
 	void set_ClipPlanes(u32 _enable, Fplane* _planes = NULL, u32 count = 0);
@@ -446,7 +448,7 @@ public:
 		CHK_DX(HW.pDevice->SetSamplerState(sampler,type,value));
 	}
 #endif	//	USE_DX10
-#ifdef DEBUG
+
 	void dbg_Draw					(D3DPRIMITIVETYPE T, FVF::L* pVerts, int vcnt, u16* pIdx, int pcnt);
 	void dbg_Draw					(D3DPRIMITIVETYPE T, FVF::L* pVerts, int pcnt);
 	IC void dbg_DrawAABB			(Fvector& T, float sx, float sy, float sz, u32 C)						{	Fvector half_dim;	half_dim.set(sx,sy,sz); Fmatrix	TM;	TM.translate(T); dbg_DrawOBB(TM,half_dim,C);	}
@@ -455,10 +457,20 @@ public:
 	void dbg_DrawTRI				(Fmatrix& T, Fvector& p1, Fvector& p2, Fvector& p3, u32 C);
 	void dbg_DrawLINE				(Fmatrix& T, Fvector& p1, Fvector& p2, u32 C);
 	void dbg_DrawEllipse			(Fmatrix& T, u32 C);
-#endif
 
 	CBackend() { Invalidate(); };
 
+private:
+	// Debug Draw
+	void InitDebugDraw();
+	void DestroyDebugDraw();
+
+	// DX9 doesn't need this
+#if defined(USE_DX10) || defined(USE_DX11)
+	ref_geom vs_L;
+	ref_geom vs_TL;
+#endif
+
 #if defined(USE_DX10) || defined(USE_DX11)
 private:
 	//	DirectX 10 internal functionality
diff --git a/src/Layers/xrRender/R_Backend_DBG.cpp b/src/Layers/xrRender/R_Backend_DBG.cpp
index 4e55315..6322a53 100644
--- a/src/Layers/xrRender/R_Backend_DBG.cpp
+++ b/src/Layers/xrRender/R_Backend_DBG.cpp
@@ -1,48 +1,101 @@
 #include "stdafx.h"
 #pragma hdrstop
 
+#if defined(USE_DX10) || defined(USE_DX11)
+extern IC u32 GetIndexCount(D3DPRIMITIVETYPE T, u32 iPrimitiveCount);
+#endif
+
+void CBackend::InitDebugDraw()
+{
+#if defined(USE_DX10) || defined(USE_DX11)
+	vs_L.create(FVF::F_L, RCache.Vertex.Buffer(), RCache.Index.Buffer());
+	vs_TL.create(FVF::F_TL, RCache.Vertex.Buffer(), RCache.Index.Buffer());
+#endif
+}
+
+void CBackend::DestroyDebugDraw()
+{
+#if defined(USE_DX10) || defined(USE_DX11)
+	vs_L.destroy();
+	vs_TL.destroy();
+#endif
+}
+
 void CBackend::dbg_DP(D3DPRIMITIVETYPE pt, ref_geom geom, u32 vBase, u32 pc)
 {
-	RCache.set_Geometry(geom);
-	RCache.Render(pt, vBase, pc);
+	set_Geometry(geom);
+	Render(pt, vBase, pc);
 }
 
 void CBackend::dbg_DIP(D3DPRIMITIVETYPE pt, ref_geom geom, u32 baseV, u32 startV, u32 countV, u32 startI, u32 PC)
 {
-	RCache.set_Geometry(geom);
-	RCache.Render(pt, baseV, startV, countV, startI, PC);
+	set_Geometry(geom);
+	Render(pt, baseV, startV, countV, startI, PC);
 }
 
-#ifdef DEBUG
-
-void CBackend::dbg_Draw			(D3DPRIMITIVETYPE T, FVF::L* pVerts, int vcnt, u16* pIdx, int pcnt)
+void CBackend::dbg_Draw(D3DPRIMITIVETYPE T, FVF::L* pVerts, int vcnt, u16* pIdx, int pcnt)
 {
 #if defined(USE_DX10) || defined(USE_DX11)
-//	TODO: DX10: implement
-//VERIFY(!"CBackend::dbg_Draw not implemented.");
-#else	//	USE_DX10
+	u32 vBase;
+	{
+		FVF::L* pv = (FVF::L*)Vertex.Lock(vcnt, vs_L->vb_stride, vBase);
+		for (size_t i = 0; i < vcnt; i++)
+		{
+			pv[i] = pVerts[i];
+		}
+		Vertex.Unlock(vcnt, vs_L->vb_stride);
+	}
+
+	u32 iBase;
+	{
+		const u32 count = GetIndexCount(T, pcnt);
+		u16* indices = Index.Lock(count, iBase);
+		for (size_t i = 0; i < count; i++)
+			indices[i] = pIdx[i];
+		Index.Unlock(count);
+	}
+	set_Geometry(vs_L);
+	set_RT(HW.pBaseRT);
+	RImplementation.rmNormal();
+	set_Stencil(FALSE);
+	Render(T, vBase, 0, vcnt, iBase, pcnt);
+#else	//	USE_DX11
 	OnFrameEnd					();
 	CHK_DX(HW.pDevice->SetFVF	(FVF::F_L));
 	CHK_DX(HW.pDevice->DrawIndexedPrimitiveUP(T, 0, vcnt, pcnt,
 		pIdx, D3DFMT_INDEX16,
 		pVerts, sizeof(FVF::L)
 		));
-#endif	//	USE_DX10
+#endif	//	USE_DX11
 }
-void CBackend::dbg_Draw			(D3DPRIMITIVETYPE T, FVF::L* pVerts, int pcnt)
+void CBackend::dbg_Draw(D3DPRIMITIVETYPE T, FVF::L* pVerts, int pcnt)
 {
 #if defined(USE_DX10) || defined(USE_DX11)
-//	TODO: DX10: implement
-//VERIFY(!"CBackend::dbg_Draw not implemented.");
-#else	//	USE_DX10
-	OnFrameEnd					();
-	CHK_DX(HW.pDevice->SetFVF	(FVF::F_L));
-	CHK_DX(HW.pDevice->DrawPrimitiveUP(T, pcnt, pVerts, sizeof(FVF::L)	));
-#endif	//	USE_DX10
+	u32 vBase;
+	{
+		const u32 count = GetIndexCount(T, pcnt);
+		FVF::L* pv = (FVF::L*)Vertex.Lock(count, vs_L->vb_stride, vBase);
+		for (size_t i = 0; i < count; i++)
+		{
+			pv[i] = pVerts[i];
+		}
+		Vertex.Unlock(count, vs_L->vb_stride);
+	}
+
+	set_Geometry(vs_L);
+	set_RT(HW.pBaseRT);
+	RImplementation.rmFar();
+	set_Stencil(FALSE);
+	Render(T, vBase, pcnt);
+#else	//	USE_DX11
+	OnFrameEnd();
+	CHK_DX(HW.pDevice->SetFVF(FVF::F_L));
+	CHK_DX(HW.pDevice->DrawPrimitiveUP(T, pcnt, pVerts, sizeof(FVF::L)));
+#endif	//	USE_DX11
 }
 
-#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
-void CBackend::dbg_DrawOBB		(Fmatrix& T, Fvector& half_dim, u32 C)
+#define RGBA_GETALPHA(rgb)((rgb) >> 24)
+void CBackend::dbg_DrawOBB(Fmatrix& T, Fvector& half_dim, u32 C)
 {
 	Fmatrix mL2W_Transform,mScaleTransform;
 
@@ -59,10 +112,14 @@ void CBackend::dbg_DrawOBB		(Fmatrix& T, Fvector& half_dim, u32 C)
 	aabb[6].set( +1, +1, +1, C ); // 6
 	aabb[7].set( +1, -1, +1, C ); // 7
 
-	u16		aabb_id[12*2] = {
+	u16	aabb_id[12*2] = {
 		0,1,  1,2,  2,3,  3,0,  4,5,  5,6,  6,7,  7,4,  1,5,  2,6,  3,7,  0,4
 	};
 	set_xform_world	(mL2W_Transform);
+#if defined(USE_DX10) || defined(USE_DX11)
+		RCache.set_c("tfactor", float(color_get_R(C)) / 255.f, float(color_get_G(C)) / 255.f, \
+			float(color_get_B(C)) / 255.f, float(color_get_A(C)) / 255.f);
+#endif // !USE_DX11
 	dbg_Draw(D3DPT_LINELIST,aabb,8,aabb_id,12);
 }
 void CBackend::dbg_DrawTRI	(Fmatrix& T, Fvector& p1, Fvector& p2, Fvector& p3, u32 C)
@@ -73,6 +130,10 @@ void CBackend::dbg_DrawTRI	(Fmatrix& T, Fvector& p1, Fvector& p2, Fvector& p3, u
 	tri[2].p = p3; tri[2].color = C;
 
 	set_xform_world	(T);
+#if defined(USE_DX10) || defined(USE_DX11)
+	RCache.set_c("tfactor", float(color_get_R(C)) / 255.f, float(color_get_G(C)) / 255.f, \
+		float(color_get_B(C)) / 255.f, float(color_get_A(C)) / 255.f);
+#endif // !USE_DX11
 	dbg_Draw(D3DPT_TRIANGLESTRIP,tri,1);
 }
 void CBackend::dbg_DrawLINE(Fmatrix& T, Fvector& p1, Fvector& p2, u32 C)
@@ -82,11 +143,15 @@ void CBackend::dbg_DrawLINE(Fmatrix& T, Fvector& p1, Fvector& p2, u32 C)
 	line[1].p = p2; line[1].color = C;
 
 	set_xform_world	(T);
+#if defined(USE_DX10) || defined(USE_DX11)
+	RCache.set_c("tfactor", float(color_get_R(C)) / 255.f, float(color_get_G(C)) / 255.f, \
+		float(color_get_B(C)) / 255.f, float(color_get_A(C)) / 255.f);
+#endif // !USE_DX11
 	dbg_Draw(D3DPT_LINELIST,line,1);
 }
 void CBackend::dbg_DrawEllipse(Fmatrix& T, u32 C)
 {
-	float gVertices[] =
+	constexpr float gVertices[] =
 	{
 		0.0000f,0.0000f,1.0000f,  0.0000f,0.3827f,0.9239f,  -0.1464f,0.3536f,0.9239f,
 			-0.2706f,0.2706f,0.9239f,  -0.3536f,0.1464f,0.9239f,  -0.3827f,0.0000f,0.9239f,
@@ -127,7 +192,7 @@ void CBackend::dbg_DrawEllipse(Fmatrix& T, u32 C)
 			0.3536f,-0.1464f,-0.9239f,  0.3827f,0.0000f,-0.9239f,  0.3536f,0.1464f,-0.9239f,
 			0.2706f,0.2706f,-0.9239f,  0.1464f,0.3536f,-0.9239f,  0.0000f,0.0000f,-1.0000f
 	};
-#if !defined(USE_DX10) && !defined(USE_DX11)
+
 	u16 gFaces[224*3] =
 	{
 		0,1,2, 0,2,3, 0,3,4, 0,4,5, 0,5,6, 0,6,7, 0,7,8, 0,8,9, 0,9,10,
@@ -156,26 +221,21 @@ void CBackend::dbg_DrawEllipse(Fmatrix& T, u32 C)
 			96,97,81, 113,98,97, 113,99,98, 113,100,99, 113,101,100, 113,102,101, 113,103,102, 113,104,103, 113,105,104,
 			113,106,105, 113,107,106, 113,108,107, 113,109,108, 113,110,109, 113,111,110, 113,112,111, 113,97,112
 	};
-#endif // #if defined(USE_DX10) || defined(USE_DX11)
 
-	const int vcnt = sizeof(gVertices)/(sizeof(float)*3);
+	constexpr int vcnt = sizeof(gVertices)/(sizeof(float)*3);
 	FVF::L  verts[vcnt];
 	for (int i=0; i<vcnt; i++) {
 		int k=i*3;
 		verts[i].set(gVertices[k],gVertices[k+1],gVertices[k+2],C);
 	}
 
-	set_xform_world				(T);
-
+	set_xform_world(T);
 #if defined(USE_DX10) || defined(USE_DX11)
-//	TODO: DX10: implement
-//VERIFY(!"CBackend::dbg_Draw not implemented.");
-//dbg_Draw(D3DPT_TRIANGLELIST,verts,vcnt,gFaces,224);
-#else	//	USE_DX10
-	HW.pDevice->SetRenderState	(D3DRS_FILLMODE, D3DFILL_WIREFRAME);
-	dbg_Draw(D3DPT_TRIANGLELIST,verts,vcnt,gFaces,224);
-	HW.pDevice->SetRenderState	(D3DRS_FILLMODE, D3DFILL_SOLID);
-#endif	//	USE_DX10
-}
+	RCache.set_c("tfactor", float(color_get_R(C)) / 255.f, float(color_get_G(C)) / 255.f, \
+		float(color_get_B(C)) / 255.f, float(color_get_A(C)) / 255.f);
+#endif // !USE_DX11
 
-#endif
+	RCache.set_FillMode(D3DFILL_WIREFRAME);
+	dbg_Draw(D3DPT_TRIANGLELIST, verts, vcnt, gFaces, 224);
+	RCache.set_FillMode(D3DFILL_SOLID);
+}
\ No newline at end of file
diff --git a/src/Layers/xrRender/R_Backend_Runtime.cpp b/src/Layers/xrRender/R_Backend_Runtime.cpp
index 3025e5c..adca0cf 100644
--- a/src/Layers/xrRender/R_Backend_Runtime.cpp
+++ b/src/Layers/xrRender/R_Backend_Runtime.cpp
@@ -99,6 +99,7 @@ void CBackend::Invalidate()
 	stencil_fail = u32(-1);
 	stencil_pass = u32(-1);
 	stencil_zfail = u32(-1);
+	fill_mode = u32(-1);
 	cull_mode = u32(-1);
 	z_enable = u32(-1);
 	z_func = u32(-1);
diff --git a/src/Layers/xrRender/R_Backend_hemi.cpp b/src/Layers/xrRender/R_Backend_hemi.cpp
index 15ccb1f..795f2f9 100644
--- a/src/Layers/xrRender/R_Backend_hemi.cpp
+++ b/src/Layers/xrRender/R_Backend_hemi.cpp
@@ -13,6 +13,9 @@ void R_hemi::unmap()
 	c_pos_faces = 0;
 	c_neg_faces = 0;
 	c_material = 0;
+	//--DSR-- HeatVision_start
+	c_hotness = 0;
+	//--DSR-- HeatVision_end
 }
 
 void R_hemi::set_pos_faces(float posx, float posy, float posz)
@@ -29,3 +32,10 @@ void R_hemi::set_material(float x, float y, float z, float w)
 {
 	if (c_material) RCache.set_c(c_material, x, y, z, w);
 }
+
+//--DSR-- HeatVision_start
+void R_hemi::set_hotness(float x, float y, float z, float w)
+{
+	if (c_hotness) RCache.set_c(c_hotness, x, y, z, w);
+}
+//--DSR-- HeatVision_end
diff --git a/src/Layers/xrRender/R_Backend_hemi.h b/src/Layers/xrRender/R_Backend_hemi.h
index eaff851..911a71d 100644
--- a/src/Layers/xrRender/R_Backend_hemi.h
+++ b/src/Layers/xrRender/R_Backend_hemi.h
@@ -9,6 +9,10 @@ public:
 	R_constant* c_neg_faces;
 	R_constant* c_material;
 
+	//--DSR-- HeatVision_start
+	R_constant* c_hotness;
+	//--DSR-- HeatVision_end
+
 public:
 	R_hemi();
 	void unmap();
@@ -17,8 +21,17 @@ public:
 	void set_c_neg_faces(R_constant* C) { c_neg_faces = C; }
 	void set_c_material(R_constant* C) { c_material = C; }
 
+	//--DSR-- HeatVision_start
+	void set_c_hotness(R_constant* C) { c_hotness = C; }
+	//--DSR-- HeatVision_end
+
+
 	void set_pos_faces(float posx, float posy, float posz);
 	void set_neg_faces(float negx, float negy, float negz);
 	void set_material(float x, float y, float z, float w);
+
+	//--DSR-- HeatVision_start
+	void set_hotness(float x, float y, float z, float w);
+	//--DSR-- HeatVision_end
 };
 #endif
diff --git a/src/Layers/xrRender/SH_Texture.h b/src/Layers/xrRender/SH_Texture.h
index 62f91a6..cde2b8a 100644
--- a/src/Layers/xrRender/SH_Texture.h
+++ b/src/Layers/xrRender/SH_Texture.h
@@ -97,6 +97,10 @@ public: //	Public class members (must be encapsulated furthur)
 	float m_material;
 	shared_str m_bumpmap;
 
+	//--DSR-- HeatVision_start
+	bool m_is_hot = false;
+	//--DSR-- HeatVision_end
+
 	union
 	{
 		u32 m_play_time; // sync theora time
diff --git a/src/Layers/xrRender/SkeletonAnimated.cpp b/src/Layers/xrRender/SkeletonAnimated.cpp
index a2b6c3f..fa47f86 100644
--- a/src/Layers/xrRender/SkeletonAnimated.cpp
+++ b/src/Layers/xrRender/SkeletonAnimated.cpp
@@ -11,6 +11,7 @@
 #include	"../../xrcore/dump_string.h"
 #endif
 extern int psSkeletonUpdate;
+extern shared_str current_player_hud_sect;
 using namespace animation;
 //////////////////////////////////////////////////////////////////////////
 // BoneInstance methods
@@ -749,7 +750,7 @@ void CKinematicsAnimated::IBlend_Startup()
 #endif
 	}
 	// cycles+fx clear
-	for (i = 0; i < MAX_PARTS; i++)
+	for (u32 i = 0; i < MAX_PARTS; i++)
 		blend_cycles[i].clear();
 	blend_fx.clear();
 	ChannelFactorsStartup();
@@ -781,7 +782,7 @@ void CKinematicsAnimated::Load(const char* N, IReader* data, u32 dwFlags)
 		if (!FS.exist(fn, "$level$", _path))
 		{
 			if (!FS.exist(fn, "$game_meshes$", _path))
-				Debug.fatal(DEBUG_INFO, "Can't find motion file '%s'.", _path);
+				Debug.fatal(DEBUG_INFO, "Can't find motion file '%s'\nsection '%s'\nmodel '%s'", _path, current_player_hud_sect.c_str(), N);
 		}
 
 		// Check compatibility
@@ -798,7 +799,7 @@ void CKinematicsAnimated::Load(const char* N, IReader* data, u32 dwFlags)
 		else
 		{
 			m_Motions.pop_back();
-			Msg("! error in model [%s]. Unable to load motion file '%s'.", N, _path);
+			Msg("! error in model [%s]. Unable to load motion file '%s', section '%s'.", N, _path, current_player_hud_sect.c_str());
 		}
 	};
 
@@ -808,12 +809,26 @@ void CKinematicsAnimated::Load(const char* N, IReader* data, u32 dwFlags)
 		string_path items_nm;
 		data->r_stringZ(items_nm, sizeof(items_nm));
 		u32 set_cnt = _GetItemCount(items_nm);
-		R_ASSERT(set_cnt<MAX_ANIM_SLOT);
+		R_ASSERT2(set_cnt<MAX_ANIM_SLOT, make_string("section '%s'\nmodel '%s'", current_player_hud_sect.c_str(), N).c_str());
 		m_Motions.reserve(set_cnt);
 		string_path nm;
 		for (u32 k = 0; k < set_cnt; ++k)
 		{
 			_GetItem(items_nm, k, nm);
+			if (strstr(nm, "\\*.omf"))
+			{
+				FS_FileSet fset;
+				FS.file_list(fset, "$game_meshes$", FS_ListFiles, nm);
+				FS.file_list(fset, "$level$", FS_ListFiles, nm);
+
+				m_Motions.reserve(fset.size() - 1);
+
+				for (FS_FileSet::iterator it = fset.begin(); it != fset.end(); it++)
+					loadOMF((*it).name.c_str());
+
+				continue;
+			}
+
 			xr_strcat(nm, ".omf");
 			loadOMF(nm);
 		}
@@ -853,7 +868,7 @@ void CKinematicsAnimated::Load(const char* N, IReader* data, u32 dwFlags)
 		m_Motions.back().motions.create(nm, data, bones);
 	}
 
-	R_ASSERT(m_Motions.size());
+	R_ASSERT2(m_Motions.size(), make_string("section '%s'\nmodel '%s'", current_player_hud_sect.c_str(), N).c_str());
 
 	m_Partition = m_Motions[0].motions.partition();
 	m_Partition->load(this, N);
diff --git a/src/Layers/xrRender/SkeletonCustom.cpp b/src/Layers/xrRender/SkeletonCustom.cpp
index b738622..9d2a4c9 100644
--- a/src/Layers/xrRender/SkeletonCustom.cpp
+++ b/src/Layers/xrRender/SkeletonCustom.cpp
@@ -542,6 +542,7 @@ void CKinematics::Visibility_Update()
 			children_invisible.push_back(children[c_it]);
 			swap(children[c_it], children.back());
 			children.pop_back();
+			Update_Visibility = TRUE;
 		}
 	}
 
@@ -556,6 +557,7 @@ void CKinematics::Visibility_Update()
 			children.push_back(children_invisible[_it]);
 			swap(children_invisible[_it], children_invisible.back());
 			children_invisible.pop_back();
+			Update_Visibility = TRUE;
 		}
 	}
 }
@@ -672,7 +674,7 @@ void CKinematics::AddWallmark(const Fmatrix* parent_xform, const Fvector3& start
 	test_sphere.set(cp, size);
 	U16Vec test_bones;
 	test_bones.reserve(LL_BoneCount());
-	for (k = 0; k < LL_BoneCount(); k++)
+	for (u16 k = 0; k < LL_BoneCount(); k++)
 	{
 		CBoneData& BD = LL_GetData(k);
 		if (LL_GetBoneVisible(k) && !BD.shape.flags.is(SBoneShape::sfNoPickable))
diff --git a/src/Layers/xrRender/WallmarksEngine.cpp b/src/Layers/xrRender/WallmarksEngine.cpp
index d0592f8..2c11a1a 100644
--- a/src/Layers/xrRender/WallmarksEngine.cpp
+++ b/src/Layers/xrRender/WallmarksEngine.cpp
@@ -34,7 +34,7 @@ namespace WallmarksEngine
 const float W_DIST_FADE = 15.f;
 const float W_DIST_FADE_SQR = W_DIST_FADE * W_DIST_FADE;
 const float I_DIST_FADE_SQR = 1.f / W_DIST_FADE_SQR;
-const int MAX_TRIS = 1024;
+const int MAX_TRIS = 1024 * 16;
 
 IC bool operator ==(const CWallmarksEngine::wm_slot* slot, const ref_shader& shader) { return slot->shader == shader; }
 
@@ -172,7 +172,7 @@ void CWallmarksEngine::RecurseTri(u32 t, Fmatrix& mView, CWallmarksEngine::stati
 		}
 
 		// recurse
-		for (i = 0; i < 3; i++)
+		for (u32 i = 0; i < 3; i++)
 		{
 			u32 adj = sml_adjacency[3 * t + i];
 			if (0xffffffff == adj) continue;
@@ -203,8 +203,9 @@ void CWallmarksEngine::BuildMatrix(Fmatrix& mView, float invsz, const Fvector& f
 	mView.mulA_43(mScale);
 }
 
+// demonized: add user defined rotation to wallmark
 void CWallmarksEngine::AddWallmark_internal(CDB::TRI* pTri, const Fvector* pVerts, const Fvector& contact_point,
-                                            ref_shader hShader, float sz, float ttl, bool random_rotation)
+                                            ref_shader hShader, float sz, float ttl, float rotation)
 {
 	// query for polygons in bounding box
 	// calculate adjacency
@@ -240,7 +241,7 @@ void CWallmarksEngine::AddWallmark_internal(CDB::TRI* pTri, const Fvector* pVert
 	// build 3D ortho-frustum
 	Fmatrix mView, mRot;
 	BuildMatrix(mView, 1 / sz, contact_point);
-	mRot.rotateZ(random_rotation ? ::Random.randF(deg2rad(-20.f), deg2rad(20.f)) : 0.f);
+	mRot.rotateZ(deg2rad(rotation));
 	mView.mulA_43(mRot);
 	sml_clipper.CreateFromMatrix(mView,FRUSTUM_P_LRTB);
 
@@ -300,8 +301,20 @@ void CWallmarksEngine::AddWallmark_internal(CDB::TRI* pTri, const Fvector* pVert
 	//}
 }
 
+void CWallmarksEngine::AddWallmark_internal(CDB::TRI* pTri, const Fvector* pVerts, const Fvector& contact_point,
+	ref_shader hShader, float sz, float ttl, bool random_rotation)
+{
+	AddWallmark_internal(pTri, pVerts, contact_point, hShader, sz, ttl, random_rotation ? ::Random.randF(-20.f, 20.f) : 0.f);
+}
+
 void CWallmarksEngine::AddStaticWallmark(CDB::TRI* pTri, const Fvector* pVerts, const Fvector& contact_point,
                                          ref_shader hShader, float sz, float ttl, bool ignore_opt, bool random_rotation)
+{
+	AddStaticWallmark(pTri, pVerts, contact_point, hShader, sz, ttl, ignore_opt, random_rotation ? ::Random.randF(-20.f, 20.f) : 0.f);
+}
+
+void CWallmarksEngine::AddStaticWallmark(CDB::TRI* pTri, const Fvector* pVerts, const Fvector& contact_point,
+	ref_shader hShader, float sz, float ttl, bool ignore_opt, float rotation)
 {
 	// optimization cheat: don't allow wallmarks more than 100 m from viewer/actor
 	if (!ignore_opt && contact_point.distance_to_sqr(Device.vCameraPosition) > _sqr(100.f))
@@ -309,7 +322,7 @@ void CWallmarksEngine::AddStaticWallmark(CDB::TRI* pTri, const Fvector* pVerts,
 
 	// Physics may add wallmarks in parallel with rendering
 	lock.Enter();
-	AddWallmark_internal(pTri, pVerts, contact_point, hShader, sz, ttl, random_rotation);
+	AddWallmark_internal(pTri, pVerts, contact_point, hShader, sz, ttl, rotation);
 	lock.Leave();
 }
 
diff --git a/src/Layers/xrRender/WallmarksEngine.h b/src/Layers/xrRender/WallmarksEngine.h
index 9ce1dde..2b30c50 100644
--- a/src/Layers/xrRender/WallmarksEngine.h
+++ b/src/Layers/xrRender/WallmarksEngine.h
@@ -52,8 +52,8 @@ private:
 private:
 	void BuildMatrix(Fmatrix& dest, float invsz, const Fvector& from);
 	void RecurseTri(u32 T, Fmatrix& mView, static_wallmark& W);
-	void AddWallmark_internal(CDB::TRI* pTri, const Fvector* pVerts, const Fvector& contact_point, ref_shader hTexture,
-	                          float sz, float ttl = 0.f, bool random_rotation = true);
+	void AddWallmark_internal(CDB::TRI* pTri, const Fvector* pVerts, const Fvector& contact_point, ref_shader hTexture, float sz, float ttl = 0.f, bool random_rotation = true);
+	void AddWallmark_internal(CDB::TRI* pTri, const Fvector* pVerts, const Fvector& contact_point, ref_shader hTexture, float sz, float ttl, float rotation);
 
 	static_wallmark* static_wm_allocate();
 	void static_wm_render(static_wallmark* W, FVF::LIT* & V);
@@ -64,8 +64,11 @@ public:
 	CWallmarksEngine();
 	~CWallmarksEngine();
 	// edit wallmarks
-	void AddStaticWallmark(CDB::TRI* pTri, const Fvector* pVerts, const Fvector& contact_point, ref_shader hTexture,
-	                       float sz, float ttl = 0.f, bool ignore_opt = false, bool random_rotation = true);
+	void AddStaticWallmark(CDB::TRI* pTri, const Fvector* pVerts, const Fvector& contact_point, ref_shader hTexture, float sz, float ttl = 0.f, bool ignore_opt = false, bool random_rotation = true);
+
+	// demonized: add user defined rotation to wallmark
+	void AddStaticWallmark(CDB::TRI* pTri, const Fvector* pVerts, const Fvector& contact_point, ref_shader hTexture, float sz, float ttl, bool ignore_opt, float rotation);
+
 	void AddSkeletonWallmark(intrusive_ptr<CSkeletonWallmark> wm);
 	void AddSkeletonWallmark(const Fmatrix* xf, CKinematics* obj, ref_shader& sh, const Fvector& start,
 	                         const Fvector& dir, float size, float ttl = 0.f, bool ignore_opt = false);
diff --git a/src/Layers/xrRender/dxApplicationRender.cpp b/src/Layers/xrRender/dxApplicationRender.cpp
index 658ef34..db1d6b5 100644
--- a/src/Layers/xrRender/dxApplicationRender.cpp
+++ b/src/Layers/xrRender/dxApplicationRender.cpp
@@ -52,6 +52,8 @@ void dxApplicationRender::KillHW()
 }
 
 u32 calc_progress_color(u32, u32, int, int);
+extern bool use_reshade;
+extern void render_reshade_effects();
 
 void dxApplicationRender::load_draw_internal(CApplication& owner)
 {
@@ -69,6 +71,9 @@ void dxApplicationRender::load_draw_internal(CApplication& owner)
 	CHK_DX(HW.pDevice->Clear(0,0,D3DCLEAR_TARGET,D3DCOLOR_ARGB(0,0,0,0),1,0));
 #endif	//	USE_DX10
 
+	if (use_reshade)
+		render_reshade_effects();
+
 	if (!sh_progress)
 	{
 		return;
diff --git a/src/Layers/xrRender/dxDebugRender.cpp b/src/Layers/xrRender/dxDebugRender.cpp
index 75731b6..c462270 100644
--- a/src/Layers/xrRender/dxDebugRender.cpp
+++ b/src/Layers/xrRender/dxDebugRender.cpp
@@ -1,83 +1,131 @@
 #include "stdafx.h"
-
-#ifdef DEBUG
-
 #include "dxDebugRender.h"
 #include "dxUIShader.h"
+#include "dxRenderDeviceRender.h"
 
 dxDebugRender DebugRenderImpl;
-dxDebugRender DebugRenderImpl_1;
-dxDebugRender::dxDebugRender()
-{
-	m_line_indices.reserve			(line_vertex_limit);
-	m_line_vertices.reserve			(line_index_limit);
-}
+
+extern float psHUD_FOV;
 
 void dxDebugRender::Render()
 {
-	if (m_line_vertices.empty())
-		return;
-
-	RCache.set_xform_world			(Fidentity);
-	RCache.dbg_Draw					(D3DPT_LINELIST,&*m_line_vertices.begin(),m_line_vertices.size(),&*m_line_indices.begin(),m_line_indices.size()/2);
-	m_line_vertices.resize			(0);
-	m_line_indices.resize			(0);
-}
+	RCache.set_xform_world(Fidentity);
 
-void dxDebugRender::try_render		(u32 const &vertex_count, u32 const &index_count)
-{
-	VERIFY							((m_line_indices.size() % 2) == 0);
+	if (!m_line_vertices_hud.empty())
+	{
+		// Change projection
+		Fmatrix Pold = Device.mProject;
+		Fmatrix FTold = Device.mFullTransform;
+		Fmatrix FVold = Device.mView;
+		Device.mView.build_camera_dir(Device.vCameraPosition, Device.vCameraDirection, Device.vCameraTop);
+		Device.mProject.build_projection(
+			deg2rad(psHUD_FOV * 83.f),
+			Device.fASPECT, R_VIEWPORT_NEAR,
+			g_pGamePersistent->Environment().CurrentEnv->far_plane);
+
+		Device.mFullTransform.mul(Device.mProject, Device.mView);
+		RCache.set_xform_project(Device.mProject);
+
+		// Rendering
+		::Render->rmNear();
+
+		for (auto& m_vert : m_line_vertices_hud)
+		{
+			const u32& color = m_vert.first;
+			std::vector<FVF::L>& vert_vec = m_vert.second;
+			auto& ind_vec = m_line_indices_hud.at(color);
 
-	if ((m_line_vertices.size() + vertex_count) >= line_vertex_limit) {
-		Render						();
-		return;
+#if defined(USE_DX10) || defined(USE_DX11)
+			RCache.set_Shader(dxRenderDeviceRender::Instance().m_WireShader);
+			RCache.set_c("tfactor", float(color_get_R(color)) / 255.f, float(color_get_G(color)) / 255.f, float(color_get_B(color)) / 255.f, float(color_get_A(color)) / 255.f);
+#endif
+			RCache.dbg_Draw(D3DPT_LINELIST, &vert_vec.front(), vert_vec.size(), &ind_vec.front(), ind_vec.size() / 2);
+		}
+
+		m_line_vertices_hud.clear();
+		m_line_indices_hud.clear();
+
+		::Render->rmNormal();
+
+		// Restore projection
+		Device.mProject = Pold;
+		Device.mFullTransform = FTold;
+		Device.mView = FVold;
+		RCache.set_xform_project(Device.mProject);
 	}
 
-	if ((m_line_indices.size() + 2*index_count) >= line_index_limit) {
-		Render						();
+	if (m_line_vertices.empty())
 		return;
+
+	for (auto& m_vert : m_line_vertices)
+	{
+		const u32& color = m_vert.first;
+		std::vector<FVF::L>& vert_vec = m_vert.second;
+		auto& ind_vec = m_line_indices.at(color);
+
+#if defined(USE_DX10) || defined(USE_DX11)
+		RCache.set_Shader(dxRenderDeviceRender::Instance().m_WireShader);
+		RCache.set_c("tfactor", float(color_get_R(color)) / 255.f, float(color_get_G(color)) / 255.f, float(color_get_B(color)) / 255.f, float(color_get_A(color)) / 255.f);
+#endif
+		RCache.dbg_Draw(D3DPT_LINELIST, &vert_vec.front(), vert_vec.size(), &ind_vec.front(), ind_vec.size() / 2);
 	}
+
+	m_line_vertices.clear();
+	m_line_indices.clear();
 }
-void _add_lines		(  xr_vector<FVF::L> &vertices, xr_vector<u16>& indices, Fvector const *pvertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color)
+
+void dxDebugRender::add_lines(Fvector const* vertices, u32 const& vertex_count, u16 const* pairs, u32 const& pair_count, u32 const& color, bool bHud)
 {
-	VERIFY							(vertices.size() < u16(-1));
-	u16								vertices_size = (u16)vertices.size();
-
-	u32								indices_size = indices.size();
-	indices.resize					(indices_size + 2*pair_count);
-	xr_vector<u16>::iterator				I = indices.begin() + indices_size;
-	xr_vector<u16>::iterator				E = indices.end();
-	const u16						*J = pairs;
-	for ( ; I != E; ++I, ++J)
-		*I							= vertices_size + *J;
-
-	vertices.resize					(vertices_size + vertex_count);
-	xr_vector<FVF::L>::iterator		i = vertices.begin() + vertices_size;
-	xr_vector<FVF::L>::iterator		e = vertices.end();
-	Fvector const					*j = pvertices;
-	for ( ; i != e; ++i, ++j) {
-		(*i).color					= color;
-		(*i).p						= *j;
+	size_t all_verts_count{}, all_inds_count{};
+	for (auto& m_vert : m_line_vertices)
+	{
+		const u32& color = m_vert.first;
+		const std::vector<FVF::L>& vert_vec = m_vert.second;
+		all_verts_count += vert_vec.size();
+		all_inds_count += m_line_indices.at(color).size();
 	}
-}
-void dxDebugRender::add_lines		(Fvector const *vertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color)
-{
-	try_render						(vertex_count, pair_count);
-	_add_lines( m_line_vertices, m_line_indices, vertices, vertex_count, pairs, pair_count, color );
 
+	for (auto& m_vert : m_line_vertices_hud)
+	{
+		const u32& color = m_vert.first;
+		const std::vector<FVF::L>& vert_vec = m_vert.second;
+		all_verts_count += vert_vec.size();
+		all_inds_count += m_line_indices_hud.at(color).size();
+	}
+
+	if (((all_verts_count + vertex_count) >= u16(-1)) || ((all_inds_count + 2 * pair_count) >= u16(-1)))
+		Render();
+
+	auto& vert_vec = bHud ? m_line_vertices_hud[color] : m_line_vertices[color];
+	auto& ind_vec = bHud ? m_line_indices_hud[color] : m_line_indices[color];
+
+	const auto vertices_size = vert_vec.size(), indices_size = ind_vec.size();
+
+	ind_vec.resize(indices_size + 2 * pair_count);
+	auto I = ind_vec.begin() + indices_size, E = ind_vec.end();
+	const u16* J = pairs;
+	for (; I != E; ++I, ++J)
+		*I = vertices_size + *J;
+
+	vert_vec.resize(vertices_size + vertex_count);
+	auto i = vert_vec.begin() + vertices_size, e = vert_vec.end();
+	Fvector const* j = vertices;
+	for (; i != e; ++i, ++j) {
+		i->color = color;
+		i->p = *j;
+	}
 }
 
 void dxDebugRender::NextSceneMode()
 {
 //	This mode is not supported in DX10
-#ifndef	USE_DX10
+#if	!(defined(USE_DX10) || defined(USE_DX11))
 	HW.Caps.SceneMode			= (HW.Caps.SceneMode+1)%3;
 #endif	//	USE_DX10
 }
 
 void dxDebugRender::ZEnable(bool bEnable)
 {
-	//CHK_DX(HW.pDevice->SetRenderState(D3DRS_ZENABLE,bEnable));
 	RCache.set_Z(bEnable);
 }
 
@@ -117,7 +165,7 @@ void dxDebugRender::SetDebugShader(dbgShaderHandle shdHandle)
 
 	static const LPCSTR dbgShaderParams[][2] = 
 	{
-		{"hud\\default" , "ui\\ui_pop_up_active_back"} ,// dbgShaderWindow
+		{"hud\\default", "ui\\ui_pop_up_active_back"},
 	};
 
 	if(!m_dbgShaders[shdHandle])
@@ -130,7 +178,6 @@ void dxDebugRender::SetDebugShader(dbgShaderHandle shdHandle)
 void dxDebugRender::DestroyDebugShader(dbgShaderHandle shdHandle)
 {
 	R_ASSERT(shdHandle<dbgShaderCount);
-
 	m_dbgShaders[shdHandle].destroy();
 }
 
@@ -139,46 +186,28 @@ void dxDebugRender::dbg_DrawTRI(Fmatrix& T, Fvector& p1, Fvector& p2, Fvector& p
 	RCache.dbg_DrawTRI(T, p1, p2, p3, C);
 }
 
-
-struct RDebugRender: 
-	public dxDebugRender,
-	public pureRender
+struct RDebugRender: public dxDebugRender, public pureRender
 {
-private:
- xr_vector<u16>		_line_indices;
- xr_vector<FVF::L>	_line_vertices;
-
-//	Vertices		_line_vertices;
-//	Indices			_line_indices;
 public:
 	RDebugRender()
 	{
-		//Device.seqRender.Add		(this);
-		Device.seqRender.Add		(this,REG_PRIORITY_LOW-100);
+		Device.seqRender.Add(this,REG_PRIORITY_LOW-100);
 	}
 
-virtual	~RDebugRender()
+	virtual	~RDebugRender()
 	{
-		Device.seqRender.Remove		(this);
+		Device.seqRender.Remove(this);
 	}
 
-void OnRender()
+	void OnRender()
 	{
-
-		m_line_indices =	_line_indices;
-		m_line_vertices =	 _line_vertices;
-		
 		Render();
+	}
 
-
+	virtual void add_lines(Fvector const *vertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color, bool bHud = false)
+	{
+		__super::add_lines(vertices, vertex_count, pairs, pair_count, color, bHud);
 	}
-virtual void	add_lines			(Fvector const *vertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color)
-{
-	_line_indices.resize(0);
-	_line_vertices.resize(0);	
-	_add_lines( _line_vertices, _line_indices, vertices, vertex_count, pairs, pair_count, color );
-}
 } rdebug_render_impl;
-dxDebugRender *rdebug_render = &rdebug_render_impl; 
 
-#endif	//	DEBUG
+dxDebugRender *rdebug_render = &rdebug_render_impl; 
\ No newline at end of file
diff --git a/src/Layers/xrRender/dxDebugRender.h b/src/Layers/xrRender/dxDebugRender.h
index 9db3d58..ba3cdb5 100644
--- a/src/Layers/xrRender/dxDebugRender.h
+++ b/src/Layers/xrRender/dxDebugRender.h
@@ -1,59 +1,37 @@
-#ifndef	dxDebugRender_included
-#define	dxDebugRender_included
 #pragma once
 
-#ifdef DEBUG
-
 #include "../../Include/xrRender/DebugRender.h"
 
 class dxDebugRender : public IDebugRender
 {
 public:
-					dxDebugRender		();
+	dxDebugRender() = default;
 
-	virtual void	Render				();
-	virtual void	add_lines			(Fvector const *vertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color);
+	virtual void Render();
+	virtual void add_lines(Fvector const *vertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color, bool bHud = false);
 
 	// routed to RCache
-	virtual void	NextSceneMode		();
-	virtual void	ZEnable				(bool bEnable);
-	virtual void	OnFrameEnd			();
-	virtual void	SetShader			(const debug_shader &shader);
-	virtual void	CacheSetXformWorld	(const Fmatrix& M);
-	virtual void	CacheSetCullMode	(CullMode);
-	virtual void	SetAmbient			(u32 colour);
+	virtual void NextSceneMode();
+	virtual void ZEnable(bool bEnable);
+	virtual void OnFrameEnd();
+	virtual void SetShader(const debug_shader &shader);
+	virtual void CacheSetXformWorld(const Fmatrix& M);
+	virtual void CacheSetCullMode(CullMode);
+	virtual void SetAmbient(u32 colour);
 
 	// Shaders
-	virtual void	SetDebugShader		(dbgShaderHandle shdHandle);
-	virtual void	DestroyDebugShader	(dbgShaderHandle shdHandle);
-
-#ifdef DEBUG
-	virtual void	dbg_DrawTRI			(Fmatrix& T, Fvector& p1, Fvector& p2, Fvector& p3, u32 C);
-#endif	//	DEBUG
+	virtual void SetDebugShader	(dbgShaderHandle shdHandle);
+	virtual void DestroyDebugShader(dbgShaderHandle shdHandle);
+	virtual void dbg_DrawTRI(Fmatrix& T, Fvector& p1, Fvector& p2, Fvector& p3, u32 C);
 
 private:
-			void	try_render			(u32 const &vertex_count, u32 const &index_count);
+	xr_unordered_map<u32, std::vector<FVF::L>> m_line_vertices;
+	xr_unordered_map<u32, std::vector<u16>> m_line_indices;
+	xr_unordered_map<u32, std::vector<FVF::L>> m_line_vertices_hud;
+	xr_unordered_map<u32, std::vector<u16>> m_line_indices_hud;
 
-private:
-	enum {
-		line_vertex_limit				= 32767,
-		line_index_limit				= 32767
-	};
-
-private:
-	typedef xr_vector<u16>				Indices;
-	typedef xr_vector<FVF::L>			Vertices;
-
-protected:
-	Vertices		m_line_vertices;
-	Indices			m_line_indices;
-
-private:
-	ref_shader		m_dbgShaders[dbgShaderCount];
+	ref_shader m_dbgShaders[dbgShaderCount];
 };
 
 extern dxDebugRender DebugRenderImpl;
 extern dxDebugRender* rdebug_render;
-#endif // DEBUG
-
-#endif	//	dxDebugRender_included
diff --git a/src/Layers/xrRender/dxRenderDeviceRender.cpp b/src/Layers/xrRender/dxRenderDeviceRender.cpp
index 795c35c..902f053 100644
--- a/src/Layers/xrRender/dxRenderDeviceRender.cpp
+++ b/src/Layers/xrRender/dxRenderDeviceRender.cpp
@@ -124,8 +124,10 @@ void dxRenderDeviceRender::SetupStates()
 	CHK_DX(HW.pDevice->SetRenderState( D3DRS_MULTISAMPLEANTIALIAS, FALSE ));
 	CHK_DX(HW.pDevice->SetRenderState( D3DRS_NORMALIZENORMALS, TRUE ));
 
-	if (psDeviceFlags.test(rsWireframe)) { CHK_DX(HW.pDevice->SetRenderState( D3DRS_FILLMODE, D3DFILL_WIREFRAME )); }
-	else { CHK_DX(HW.pDevice->SetRenderState( D3DRS_FILLMODE, D3DFILL_SOLID )); }
+	if (psDeviceFlags.test(rsWireframe))
+		RCache.set_FillMode(D3DFILL_WIREFRAME);
+	else
+		RCache.set_FillMode(D3DFILL_SOLID);
 
 	// ******************** Fog parameters
 	CHK_DX(HW.pDevice->SetRenderState( D3DRS_FOGCOLOR, 0 ));
diff --git a/src/Layers/xrRender/dxStatGraphRender.cpp b/src/Layers/xrRender/dxStatGraphRender.cpp
index 12d1e33..bef35d4 100644
--- a/src/Layers/xrRender/dxStatGraphRender.cpp
+++ b/src/Layers/xrRender/dxStatGraphRender.cpp
@@ -194,7 +194,7 @@ void dxStatGraphRender::RenderBack(CStatGraph& owner)
 		pv++;
 	};
 
-	for (g_y = 1; g_y <= Num_H_LinesUp; g_y++)
+	for (int g_y = 1; g_y <= Num_H_LinesUp; g_y++)
 	{
 		pv->set(owner.lt.x, int(base_y - g_y * owner.grid_step.y * elem_factor), owner.grid_color);
 		pv++;
diff --git a/src/Layers/xrRender/light.h b/src/Layers/xrRender/light.h
index 8146a37..7b24183 100644
--- a/src/Layers/xrRender/light.h
+++ b/src/Layers/xrRender/light.h
@@ -70,6 +70,7 @@ public:
 		bool		visible;		// visible/invisible
 		bool		pending;		// test is still pending
 		u16			smap_ID;
+		float		distance;
 	}				vis;
 
 	union			_xform	{
diff --git a/src/Layers/xrRender/r__dsgraph_build.cpp b/src/Layers/xrRender/r__dsgraph_build.cpp
index 274542b..40a0ede 100644
--- a/src/Layers/xrRender/r__dsgraph_build.cpp
+++ b/src/Layers/xrRender/r__dsgraph_build.cpp
@@ -592,7 +592,7 @@ IC bool IsValuableToRender(dxRender_Visual* pVisual, bool isStatic, bool sm, Fma
 
 		if (sm && !!psDeviceFlags2.test(rsOptShadowGeom)) // Highest cut off for shadow map
 		{
-			if (sphere_volume < 50000.f && adjusted_distane > 160)
+			if (sphere_volume < 50000.f && adjusted_distane > ps_ssfx_shadow_cascades.z)
 				// don't need geometry behind the farest sun shadow cascade
 				return false;
 
diff --git a/src/Layers/xrRender/r__dsgraph_render.cpp b/src/Layers/xrRender/r__dsgraph_render.cpp
index 9ef142d..4d0ae5c 100644
--- a/src/Layers/xrRender/r__dsgraph_render.cpp
+++ b/src/Layers/xrRender/r__dsgraph_render.cpp
@@ -521,11 +521,6 @@ void R_dsgraph_structure::r_dsgraph_render_hud()
 	mapHUD.traverseLR(sorted_L1);
 	mapHUD.clear();
 
-#if	RENDER==R_R1
-	if (g_hud && g_hud->RenderActiveItemUIQuery())
-		r_dsgraph_render_hud_ui(); // hud ui
-#endif
-
 	rmNormal();
 
 	// Restore projection
@@ -537,8 +532,6 @@ void R_dsgraph_structure::r_dsgraph_render_hud()
 
 void R_dsgraph_structure::r_dsgraph_render_hud_ui()
 {
-	VERIFY(g_hud && g_hud->RenderActiveItemUIQuery());
-
 	// Change projection
 	Fmatrix Pold = Device.mProject;
 	Fmatrix FTold = Device.mFullTransform;
@@ -550,36 +543,6 @@ void R_dsgraph_structure::r_dsgraph_render_hud_ui()
 	Device.mFullTransform.mul(Device.mProject, Device.mView);
 	RCache.set_xform_project(Device.mProject);
 
-#if	RENDER!=R_R1
-	// Targets, use accumulator for temporary storage
-	const ref_rt rt_null;
-	RCache.set_RT(0, 1);
-	RCache.set_RT(0, 2);
-#if	(RENDER==R_R3) || (RENDER==R_R4)
-	if (!RImplementation.o.dx10_msaa)
-	{
-		if (RImplementation.o.albedo_wo)
-			RImplementation.Target->u_setrt(RImplementation.Target->rt_Accumulator,
-			                                rt_null, rt_null, HW.pBaseZB);
-		else RImplementation.Target->u_setrt(RImplementation.Target->rt_Color, rt_null, rt_null, HW.pBaseZB);
-	}
-	else
-	{
-		if (RImplementation.o.albedo_wo)
-			RImplementation.Target->u_setrt(RImplementation.Target->rt_Accumulator,
-			                                rt_null, rt_null,
-			                                RImplementation.Target->rt_MSAADepth->pZRT);
-		else
-			RImplementation.Target->u_setrt(RImplementation.Target->rt_Color, rt_null, rt_null,
-			                                RImplementation.Target->rt_MSAADepth->pZRT);
-	}
-#else // (RENDER==R_R3) || (RENDER==R_R4)
-	if (RImplementation.o.albedo_wo) RImplementation.Target->u_setrt(RImplementation.Target->rt_Accumulator, rt_null,
-	                                                                 rt_null, HW.pBaseZB);
-	else RImplementation.Target->u_setrt(RImplementation.Target->rt_Color, rt_null, rt_null, HW.pBaseZB);
-#endif // (RENDER==R_R3) || (RENDER==R_R4)
-#endif // RENDER!=R_R1
-
 	rmNear();
 	g_hud->RenderActiveItemUI();
 	rmNormal();
diff --git a/src/Layers/xrRender/rendertarget_phase_nightvision.cpp b/src/Layers/xrRender/rendertarget_phase_nightvision.cpp
index 248d1c4..066b762 100644
--- a/src/Layers/xrRender/rendertarget_phase_nightvision.cpp
+++ b/src/Layers/xrRender/rendertarget_phase_nightvision.cpp
@@ -51,3 +51,149 @@ void CRenderTarget::phase_nightvision()
 	HW.pContext->CopyResource(rt_Generic_0->pTexture->surface_get(), dest_rt->pTexture->surface_get());
 #endif
 };
+
+
+//crookr
+void CRenderTarget::phase_fakescope()
+{
+	//Constants
+	u32 Offset = 0;
+	u32 C = color_rgba(0, 0, 0, 255);
+
+	float d_Z = EPS_S;
+	float d_W = 1.0f;
+	float w = float(Device.dwWidth);
+	float h = float(Device.dwHeight);
+
+	Fvector2 p0, p1;
+#if defined(USE_DX10) || defined(USE_DX11)	
+	p0.set(0.0f, 0.0f);
+	p1.set(1.0f, 1.0f);
+#else
+	p0.set(0.5f / w, 0.5f / h);
+	p1.set((w + 0.5f) / w, (h + 0.5f) / h);
+#endif
+
+	//////////////////////////////////////////////////////////////////////////
+	//Set MSAA/NonMSAA rendertarget
+#if defined(USE_DX10) || defined(USE_DX11)
+	ref_rt& dest_rt = RImplementation.o.dx10_msaa ? rt_Generic : rt_Color;
+	u_setrt(dest_rt, nullptr, nullptr, nullptr);
+
+	RCache.set_CullMode(CULL_NONE);
+	RCache.set_Stencil(FALSE);
+
+	//Fill vertex buffer
+	FVF::TL* pv = (FVF::TL*)RCache.Vertex.Lock(4, g_combine->vb_stride, Offset);
+	pv->set(0, float(h), d_Z, d_W, C, p0.x, p1.y); pv++;
+	pv->set(0, 0, d_Z, d_W, C, p0.x, p0.y); pv++;
+	pv->set(float(w), float(h), d_Z, d_W, C, p1.x, p1.y); pv++;
+	pv->set(float(w), 0, d_Z, d_W, C, p1.x, p0.y); pv++;
+	RCache.Vertex.Unlock(4, g_combine->vb_stride);
+
+	//Set pass
+	RCache.set_Element(s_fakescope->E[ps_r2_nightvision]);
+
+	//Set geometry
+	RCache.set_Geometry(g_combine);
+	RCache.Render(D3DPT_TRIANGLELIST, Offset, 0, 4, 0, 2);
+
+	HW.pContext->CopyResource(rt_Generic_0->pTexture->surface_get(), dest_rt->pTexture->surface_get());
+#else
+	//Main pass (we avoid write-read from the same buffer)
+	u_setrt(rt_Generic_PingPong, nullptr, nullptr, nullptr);
+
+	RCache.set_CullMode(CULL_NONE);
+	RCache.set_Stencil(FALSE);
+
+	//Fill vertex buffer
+	FVF::TL* pv = (FVF::TL*)RCache.Vertex.Lock(4, g_combine->vb_stride, Offset);
+	pv->set(0, float(h), d_Z, d_W, C, p0.x, p1.y); pv++;
+	pv->set(0, 0, d_Z, d_W, C, p0.x, p0.y); pv++;
+	pv->set(float(w), float(h), d_Z, d_W, C, p1.x, p1.y); pv++;
+	pv->set(float(w), 0, d_Z, d_W, C, p1.x, p0.y); pv++;
+	RCache.Vertex.Unlock(4, g_combine->vb_stride);
+
+	//Set pass
+	RCache.set_Element(s_fakescope->E[0]);
+
+	//Set geometry
+	RCache.set_Geometry(g_combine);
+	RCache.Render(D3DPT_TRIANGLELIST, Offset, 0, 4, 0, 2);
+
+	//Draw to rt_Generic_0
+	u_setrt(rt_Generic_0, nullptr, nullptr, nullptr);
+
+	RCache.set_CullMode(CULL_NONE);
+	RCache.set_Stencil(FALSE);
+
+	//Fill vertex buffer
+	pv = (FVF::TL*)RCache.Vertex.Lock(4, g_combine->vb_stride, Offset);
+	pv->set(0, float(h), d_Z, d_W, C, p0.x, p1.y); pv++;
+	pv->set(0, 0, d_Z, d_W, C, p0.x, p0.y); pv++;
+	pv->set(float(w), float(h), d_Z, d_W, C, p1.x, p1.y); pv++;
+	pv->set(float(w), 0, d_Z, d_W, C, p1.x, p0.y); pv++;
+	RCache.Vertex.Unlock(4, g_combine->vb_stride);
+
+	//Set pass
+	RCache.set_Element(s_fakescope->E[1]);
+
+	//Set geometry
+	RCache.set_Geometry(g_combine);
+	RCache.Render(D3DPT_TRIANGLELIST, Offset, 0, 4, 0, 2);
+#endif
+};
+
+//--DSR-- HeatVision_start
+void CRenderTarget::phase_heatvision()
+{
+	//Constants
+	u32 Offset = 0;
+	u32 C = color_rgba(0, 0, 0, 255);
+
+	float d_Z = EPS_S;
+	float d_W = 1.0f;
+	float w = float(Device.dwWidth);
+	float h = float(Device.dwHeight);
+
+	Fvector2 p0, p1;
+#if defined(USE_DX10) || defined(USE_DX11)	
+	p0.set(0.0f, 0.0f);
+	p1.set(1.0f, 1.0f);
+#else
+	p0.set(0.5f / w, 0.5f / h);
+	p1.set((w + 0.5f) / w, (h + 0.5f) / h);
+#endif
+
+	//////////////////////////////////////////////////////////////////////////
+	//Set MSAA/NonMSAA rendertarget
+#if defined(USE_DX10) || defined(USE_DX11)
+	ref_rt& dest_rt = RImplementation.o.dx10_msaa ? rt_Generic : rt_Color;
+	u_setrt(dest_rt, nullptr, nullptr, nullptr);
+#else
+	u_setrt(rt_Generic_0, nullptr, nullptr, nullptr);
+#endif		
+
+	RCache.set_CullMode(CULL_NONE);
+	RCache.set_Stencil(FALSE);
+
+	//Fill vertex buffer
+	FVF::TL* pv = (FVF::TL*)RCache.Vertex.Lock(4, g_combine->vb_stride, Offset);
+	pv->set(0, float(h), d_Z, d_W, C, p0.x, p1.y); pv++;
+	pv->set(0, 0, d_Z, d_W, C, p0.x, p0.y); pv++;
+	pv->set(float(w), float(h), d_Z, d_W, C, p1.x, p1.y); pv++;
+	pv->set(float(w), 0, d_Z, d_W, C, p1.x, p0.y); pv++;
+	RCache.Vertex.Unlock(4, g_combine->vb_stride);
+
+	//Set pass
+	RCache.set_Element(s_heatvision->E[ps_r2_heatvision]);
+
+	//Set geometry
+	RCache.set_Geometry(g_combine);
+	RCache.Render(D3DPT_TRIANGLELIST, Offset, 0, 4, 0, 2);
+
+#if defined(USE_DX10) || defined(USE_DX11)
+	HW.pContext->CopyResource(rt_Generic_0->pTexture->surface_get(), dest_rt->pTexture->surface_get());
+#endif
+};
+//--DSR-- HeatVision_start
diff --git a/src/Layers/xrRender/xrRender_console.cpp b/src/Layers/xrRender/xrRender_console.cpp
index 19cf561..c8a1ec7 100644
--- a/src/Layers/xrRender/xrRender_console.cpp
+++ b/src/Layers/xrRender/xrRender_console.cpp
@@ -258,6 +258,18 @@ Fvector ps_r2_drops_control = {.0f, 1.15f, .0f}; // r2-only
 
 int ps_r2_nightvision = 0;
 
+//--DSR-- HeatVision_start
+int ps_r2_heatvision = 0;
+float heat_vision_mode = 0.0f;
+Fvector4 heat_vision_steps = { 0.45f, 0.65f, 0.76f, .0f };
+Fvector4 heat_vision_blurring = { 15.f, 4.f, 60.f, .0f };
+Fvector4 heat_vision_args_1 = { .0f, .0f, .0f, .0f };
+Fvector4 heat_vision_args_2 = { .0f, .0f, .0f, .0f };
+//--DSR-- HeatVision_end
+//crookr
+int scope_fake_enabled = 1;
+//string32 scope_fake_texture = "wpn\\wpn_crosshair_pso1";
+
 float ps_r2_ss_sunshafts_length = 1.f;
 float ps_r2_ss_sunshafts_radius = 1.f;
 
@@ -290,8 +302,21 @@ Fvector4 ps_dev_param_6 = { .0f, .0f, .0f, .0f };
 Fvector4 ps_dev_param_7 = { .0f, .0f, .0f, .0f };
 Fvector4 ps_dev_param_8 = { .0f, .0f, .0f, .0f };
 
+float ps_particle_update_coeff = 1.f;
+
 /////////////////////////////////
 
+// Screen Space Shaders Stuff
+Fvector3 ps_ssfx_shadow_cascades = { 20, 40, 160 };
+Fvector4 ps_ssfx_grass_shadows = { .0f, .35f, 30.0f, .0f };
+
+Fvector4 ps_ssfx_grass_interactive = { .0f, .0f, 2000.0f, 1.0f };
+Fvector4 ps_ssfx_int_grass_params_1 = { 1.0f, 1.0f, 1.0f, 25.0f };
+Fvector4 ps_ssfx_int_grass_params_2 = { 1.0f, 5.0f, 1.0f, 1.0f };
+
+Fvector4 ps_ssfx_wpn_dof_1 = { .0f, .0f, .0f, .0f };
+float ps_ssfx_wpn_dof_2 = 1.0f;
+
 //	x - min (0), y - focus (1.4), z - max (100)
 Fvector3 ps_r2_dof = { -1.25f, 0.f, 600.f };
 float ps_r2_dof_sky = 30; //	distance to sky
@@ -347,6 +372,33 @@ int opt_dynamic = 2;
 #include "../xrRenderDX10/StateManager/dx10SamplerStateCache.h"
 #endif	//	USE_DX10
 
+class CCC_ssfx_cascades : public CCC_Vector3
+{
+public:
+	void apply()
+	{
+#if defined(USE_DX10) || defined(USE_DX11)
+		RImplementation.init_cacades();
+#endif
+	}
+
+	CCC_ssfx_cascades(LPCSTR N, Fvector3* V, const Fvector3 _min, const Fvector3 _max) : CCC_Vector3(N, V, _min, _max)
+	{
+	};
+
+	virtual void Execute(LPCSTR args)
+	{
+		CCC_Vector3::Execute(args);
+		apply();
+	}
+
+	virtual void Status(TStatus& S)
+	{
+		CCC_Vector3::Status(S);
+		apply();
+	}
+};
+
 //-----------------------------------------------------------------------
 //AVO: detail draw radius
 #ifdef DETAIL_RADIUS
@@ -1046,6 +1098,10 @@ void xrRender_initconsole()
 	CMD4(CCC_Vector4, "r__bloom_weight", &ps_pp_bloom_weight, twb_min, twb_max);
 	CMD4(CCC_Vector4, "r__bloom_thresh", &ps_pp_bloom_thresh, twb_min, twb_max);
 	CMD4(CCC_Integer, "r__nightvision", &ps_r2_nightvision, 0, 3); //For beef's nightvision shader or other stuff
+
+	CMD4(CCC_Integer, "r__fakescope", &scope_fake_enabled, 0, 1); //crookr for fake scope
+
+	CMD4(CCC_Integer, "r__heatvision", &ps_r2_heatvision, 0, 1); //--DSR-- HeatVision
 	CMD3(CCC_Mask, "r2_terrain_z_prepass", &ps_r2_ls_flags, R2FLAG_TERRAIN_PREPASS); //Terrain Z Prepass @Zagolski
 	
 	//////////other
@@ -1070,6 +1126,27 @@ void xrRender_initconsole()
 	CMD4(CCC_Vector4, "shader_param_6", &ps_dev_param_6, tw2_min, tw2_max);
 	CMD4(CCC_Vector4, "shader_param_7", &ps_dev_param_7, tw2_min, tw2_max);
 	CMD4(CCC_Vector4, "shader_param_8", &ps_dev_param_8, tw2_min, tw2_max);
+	
+	// Screen Space Shaders
+	CMD4(CCC_Vector4, "ssfx_grass_shadows", &ps_ssfx_grass_shadows, Fvector4().set(0, 0, 0, 0), Fvector4().set(3, 1, 100, 100));
+	CMD4(CCC_ssfx_cascades, "ssfx_shadow_cascades", &ps_ssfx_shadow_cascades, Fvector3().set(1.0f, 1.0f, 1.0f), Fvector3().set(300, 300, 300));
+	
+	CMD4(CCC_Vector4, "ssfx_grass_interactive", &ps_ssfx_grass_interactive, Fvector4().set(0, 0, 0, 0), Fvector4().set(1, 15, 5000, 1));
+	CMD4(CCC_Vector4, "ssfx_int_grass_params_1", &ps_ssfx_int_grass_params_1, Fvector4().set(0, 0, 0, 0), Fvector4().set(5, 5, 5, 60));
+	CMD4(CCC_Vector4, "ssfx_int_grass_params_2", &ps_ssfx_int_grass_params_2, Fvector4().set(0, 0, 0, 0), Fvector4().set(5, 20, 1, 5));
+	
+	CMD4(CCC_Vector4, "ssfx_wpn_dof_1", &ps_ssfx_wpn_dof_1, tw2_min, tw2_max);
+	CMD4(CCC_Float, "ssfx_wpn_dof_2", &ps_ssfx_wpn_dof_2, 0, 1);
+
+	//--DSR-- HeatVision_start
+	CMD2(CCC_Float,   "heat_vision_mode",		&heat_vision_mode);
+	CMD4(CCC_Vector4, "heat_vision_steps",		&heat_vision_steps, tw2_min, tw2_max);
+	CMD4(CCC_Vector4, "heat_vision_blurring",	&heat_vision_blurring, tw2_min, tw2_max);
+	CMD4(CCC_Vector4, "heat_vision_args_1",		&heat_vision_args_1, tw2_min, tw2_max);
+	CMD4(CCC_Vector4, "heat_vision_args_2",		&heat_vision_args_2, tw2_min, tw2_max);
+	//--DSR-- HeatVision_end
+
+	CMD4(CCC_Float, "particle_update_mod", &ps_particle_update_coeff, 0.04f, 10.f);
 
 	// Geometry optimization
 	CMD4(CCC_Integer, "r__optimize_static_geom", &opt_static, 0, 4);
diff --git a/src/Layers/xrRender/xrRender_console.h b/src/Layers/xrRender/xrRender_console.h
index 7ee8c11..21be1bf 100644
--- a/src/Layers/xrRender/xrRender_console.h
+++ b/src/Layers/xrRender/xrRender_console.h
@@ -3,6 +3,12 @@
 #pragma once
 
 // Common
+extern ECORE_API Fvector4 ps_ssfx_grass_shadows;
+extern ECORE_API Fvector3 ps_ssfx_shadow_cascades;
+extern ECORE_API Fvector4 ps_ssfx_grass_interactive;
+extern ECORE_API Fvector4 ps_ssfx_int_grass_params_1;
+extern ECORE_API Fvector4 ps_ssfx_int_grass_params_2;
+
 extern ECORE_API u32 ps_r_sun_shafts; //=	0;
 extern ECORE_API xr_token qsun_shafts_token[];
 
@@ -140,6 +146,8 @@ extern ECORE_API int ps_r2_qsync;
 extern ECORE_API Fvector4 ps_r2_mask_control; // r2-only
 extern ECORE_API Fvector ps_r2_drops_control; // r2-only
 extern ECORE_API int ps_r2_nightvision;
+extern ECORE_API int scope_fake_enabled; //crookr
+extern ECORE_API int ps_r2_heatvision; //--DSR-- HeatVision
 extern ECORE_API float ps_r2_ss_sunshafts_length;
 extern ECORE_API float ps_r2_ss_sunshafts_radius;
 extern u32 ps_sunshafts_mode;
diff --git a/src/Layers/xrRenderDX10/DXCommonTypes.h b/src/Layers/xrRenderDX10/DXCommonTypes.h
index 668e605..c7f3b5f 100644
--- a/src/Layers/xrRenderDX10/DXCommonTypes.h
+++ b/src/Layers/xrRenderDX10/DXCommonTypes.h
@@ -14,6 +14,7 @@ typedef D3D11_BLEND_OP D3D_BLEND_OP;
 typedef D3D11_TEXTURE_ADDRESS_MODE D3D_TEXTURE_ADDRESS_MODE;
 typedef D3D11_COMPARISON_FUNC D3D_COMPARISON_FUNC;
 typedef D3D11_STENCIL_OP D3D_STENCIL_OP;
+typedef D3D11_FILL_MODE D3D_FILL_MODE;
 typedef D3D11_CULL_MODE D3D_CULL_MODE;
 typedef D3D11_FILTER D3D_FILTER;
 
@@ -267,6 +268,7 @@ typedef	D3D10_BLEND_OP					D3D_BLEND_OP;
 typedef	D3D10_TEXTURE_ADDRESS_MODE		D3D_TEXTURE_ADDRESS_MODE;
 typedef D3D10_COMPARISON_FUNC			D3D_COMPARISON_FUNC;
 typedef D3D10_STENCIL_OP				D3D_STENCIL_OP;
+typedef D3D10_FILL_MODE					D3D_FILL_MODE;
 typedef D3D10_CULL_MODE					D3D_CULL_MODE;
 typedef	D3D10_FILTER					D3D_FILTER;
 
diff --git a/src/Layers/xrRenderDX10/StateManager/dx10SamplerStateCache.cpp b/src/Layers/xrRenderDX10/StateManager/dx10SamplerStateCache.cpp
index e9a7fa0..e935692 100644
--- a/src/Layers/xrRenderDX10/StateManager/dx10SamplerStateCache.cpp
+++ b/src/Layers/xrRenderDX10/StateManager/dx10SamplerStateCache.cpp
@@ -54,7 +54,8 @@ void dx10SamplerStateCache::CreateState(StateDecs desc, IDeviceState** ppIState)
 dx10SamplerStateCache::SHandle dx10SamplerStateCache::FindState(const StateDecs& desc, u32 StateCRC)
 {
 	u32 res = 0xffffffff;
-	for (u32 i = 0; i < m_StateArray.size(); ++i)
+	u32 i = 0;
+	for (; i < m_StateArray.size(); ++i)
 	{
 		if (m_StateArray[i].m_crc == StateCRC)
 		{
diff --git a/src/Layers/xrRenderDX10/StateManager/dx10StateManager.cpp b/src/Layers/xrRenderDX10/StateManager/dx10StateManager.cpp
index 26597dc..d73adde 100644
--- a/src/Layers/xrRenderDX10/StateManager/dx10StateManager.cpp
+++ b/src/Layers/xrRenderDX10/StateManager/dx10StateManager.cpp
@@ -368,6 +368,18 @@ void dx10StateManager::SetSampleMask(u32 SampleMask)
 	}
 }
 
+void dx10StateManager::SetFillMode(u32 Mode)
+{
+	ValidateRDesc();
+
+	D3D_FILL_MODE CMode = dx10StateUtils::ConvertFillMode((D3DFILLMODE)Mode);
+	if (m_RDesc.FillMode != CMode)
+	{
+		m_bRSChanged = true;
+		m_RDesc.FillMode = CMode;
+	}
+}
+
 void dx10StateManager::SetCullMode(u32 Mode)
 {
 	ValidateRDesc();
diff --git a/src/Layers/xrRenderDX10/StateManager/dx10StateManager.h b/src/Layers/xrRenderDX10/StateManager/dx10StateManager.h
index 920b16f..eb1d10a 100644
--- a/src/Layers/xrRenderDX10/StateManager/dx10StateManager.h
+++ b/src/Layers/xrRenderDX10/StateManager/dx10StateManager.h
@@ -35,6 +35,7 @@ public:
 	void SetDepthFunc(u32 Func);
 	void SetDepthEnable(u32 Enable);
 	void SetColorWriteEnable(u32 WriteMask);
+	void SetFillMode(u32 Mode);
 	void SetCullMode(u32 Mode);
 	void SetMultisample(u32 Enable);
 	void SetSampleMask(u32 Mask);
diff --git a/src/Layers/xrRenderDX10/dx10DetailManager_VS.cpp b/src/Layers/xrRenderDX10/dx10DetailManager_VS.cpp
index bb08aa2..e4e26ea 100644
--- a/src/Layers/xrRenderDX10/dx10DetailManager_VS.cpp
+++ b/src/Layers/xrRenderDX10/dx10DetailManager_VS.cpp
@@ -110,6 +110,18 @@ void CDetailManager::hw_Render_dump(const Fvector4& consts, const Fvector4& wave
 	static shared_str strArray("array");
 	static shared_str strXForm("xform");
 
+	static shared_str strPos("benders_pos");
+	static shared_str strGrassSetup("benders_setup");
+
+	// Grass benders data
+	IGame_Persistent::grass_data& GData = g_pGamePersistent->grass_shader_data;
+	Fvector4 player_pos = { 0, 0, 0, 0 };
+	int BendersQty = _min(16, ps_ssfx_grass_interactive.y + 1);
+
+	// Add Player?
+	if (ps_ssfx_grass_interactive.x > 0)
+		player_pos.set(Device.vCameraPosition.x, Device.vCameraPosition.y, Device.vCameraPosition.z, -1);
+
 	Device.Statistic->RenderDUMP_DT_Count = 0;
 
 	// Matrices and offsets
@@ -146,6 +158,31 @@ void CDetailManager::hw_Render_dump(const Fvector4& consts, const Fvector4& wave
 				RCache.set_c(strDir2D, wind);
 				RCache.set_c(strXForm, Device.mFullTransform);
 
+				if (ps_ssfx_grass_interactive.y > 0)
+				{
+					RCache.set_c(strGrassSetup, ps_ssfx_int_grass_params_1);
+
+					Fvector4* c_grass;
+					{
+						void* GrassData;
+						RCache.get_ConstantDirect(strPos, BendersQty * sizeof(Fvector4), &GrassData, 0, 0);
+						c_grass = (Fvector4*)GrassData;
+					}
+					VERIFY(c_grass);
+
+					if (c_grass)
+					{
+						c_grass[0].set(player_pos);
+						c_grass[16].set(0.0f, -99.0f, 0.0f, 1.0f);
+
+						for (int Bend = 1; Bend < BendersQty; Bend++)
+						{
+							c_grass[Bend].set(GData.pos[Bend].x, GData.pos[Bend].y, GData.pos[Bend].z, GData.radius_curr[Bend]);
+							c_grass[Bend + 16].set(GData.dir[Bend].x, GData.dir[Bend].y, GData.dir[Bend].z, GData.str[Bend]);
+						}
+					}
+				}
+
 				//ref_constant constArray = RCache.get_c(strArray);
 				//VERIFY(constArray);
 
@@ -176,8 +213,20 @@ void CDetailManager::hw_Render_dump(const Fvector4& consts, const Fvector4& wave
 						SlotItem& Instance = **_iI;
 						u32 base = dwBatch * 4;
 
-						// Build matrix ( 3x4 matrix, last row - color )
 						float scale = Instance.scale_calculated;
+
+						// Sort of fade using the scale
+						// fade_distance == -1 use light_position to define "fade", anything else uses fade_distance
+						if (fade_distance <= -1)
+							scale *= 1.0f - Instance.position.distance_to_xz_sqr(light_position) * 0.005f;
+						else if (Instance.distance > fade_distance)
+							scale *= 1.0f - abs(Instance.distance - fade_distance) * 0.005f;
+
+						if (scale <= 0)
+							break;
+
+						// Build matrix ( 3x4 matrix, last row - color )
+						//float scale = Instance.scale_calculated;
 						Fmatrix& M = Instance.mRotY;
 						c_storage[base + 0].set(M._11 * scale, M._21 * scale, M._31 * scale, M._41);
 						c_storage[base + 1].set(M._12 * scale, M._22 * scale, M._32 * scale, M._42);
@@ -233,13 +282,16 @@ void CDetailManager::hw_Render_dump(const Fvector4& consts, const Fvector4& wave
 			}
 			// Clean up
 			// KD: we must not clear vis on r2 since we want details shadows
-			if (!psDeviceFlags2.test(rsGrassShadow) || ((ps_r2_ls_flags.test(R2FLAG_SUN_DETAILS) && (RImplementation.PHASE_SMAP ==
+			if (ps_ssfx_grass_shadows.x <= 0)
+			{
+				if (!psDeviceFlags2.test(rsGrassShadow) || ((ps_r2_ls_flags.test(R2FLAG_SUN_DETAILS) && (RImplementation.PHASE_SMAP ==
 					RImplementation.phase)) // phase smap with shadows
-				|| (ps_r2_ls_flags.test(R2FLAG_SUN_DETAILS) && (RImplementation.PHASE_NORMAL == RImplementation.phase)
-					&& (!RImplementation.is_sun())) // phase normal with shadows without sun
-				|| (!ps_r2_ls_flags.test(R2FLAG_SUN_DETAILS) && (RImplementation.PHASE_NORMAL == RImplementation.phase))
-			)) // phase normal without shadows
-				vis.clear_not_free();
+					|| (ps_r2_ls_flags.test(R2FLAG_SUN_DETAILS) && (RImplementation.PHASE_NORMAL == RImplementation.phase)
+						&& (!RImplementation.is_sun())) // phase normal with shadows without sun
+					|| (!ps_r2_ls_flags.test(R2FLAG_SUN_DETAILS) && (RImplementation.PHASE_NORMAL == RImplementation.phase))
+					)) // phase normal without shadows
+					vis.clear_not_free();
+			}
 		}
 		vOffset += hw_BatchSize * Object.number_vertices;
 		iOffset += hw_BatchSize * Object.number_indices;
diff --git a/src/Layers/xrRenderDX10/dx10R_Backend_Runtime.h b/src/Layers/xrRenderDX10/dx10R_Backend_Runtime.h
index f5799d9..ed5e433 100644
--- a/src/Layers/xrRenderDX10/dx10R_Backend_Runtime.h
+++ b/src/Layers/xrRenderDX10/dx10R_Backend_Runtime.h
@@ -442,6 +442,11 @@ IC void CBackend::set_ColorWriteEnable(u32 _mask)
 	//}
 }
 
+ICF void CBackend::set_FillMode(u32 _mode)
+{
+	StateManager.SetFillMode(_mode);
+}
+
 ICF void CBackend::set_CullMode(u32 _mode)
 {
 	StateManager.SetCullMode(_mode);
diff --git a/src/Layers/xrRenderDX10/dx10ResourceManager_Scripting.cpp b/src/Layers/xrRenderDX10/dx10ResourceManager_Scripting.cpp
index 70d8640..e748ddf 100644
--- a/src/Layers/xrRenderDX10/dx10ResourceManager_Scripting.cpp
+++ b/src/Layers/xrRenderDX10/dx10ResourceManager_Scripting.cpp
@@ -193,6 +193,12 @@ public:
 		return *this;
 	}
 
+	adopt_compiler& _dx10CullMode(u32 Ref)
+	{
+		C->r_CullMode((D3DCULL)Ref);
+		return *this;
+	}
+
 	adopt_compiler& _dx10ATOC(bool Enable)
 	{
 		C->RS.SetRS(XRDX10RS_ALPHATOCOVERAGE, Enable);
@@ -389,6 +395,7 @@ void CResourceManager::LS_Load()
 		.def("dx10texture", &adopt_compiler::_dx10texture, return_reference_to(_1))
 		.def("dx10stencil", &adopt_compiler::_dx10Stencil, return_reference_to(_1))
 		.def("dx10stencil_ref", &adopt_compiler::_dx10StencilRef, return_reference_to(_1))
+		.def("dx10cullmode", &adopt_compiler::_dx10CullMode, return_reference_to(_1))
 		.def("dx10atoc", &adopt_compiler::_dx10ATOC, return_reference_to(_1))
 		.def("dx10zfunc", &adopt_compiler::_dx10ZFunc, return_reference_to(_1))
 
diff --git a/src/Layers/xrRenderDX10/dx10StateUtils.cpp b/src/Layers/xrRenderDX10/dx10StateUtils.cpp
index 9ba4685..69a9a12 100644
--- a/src/Layers/xrRenderDX10/dx10StateUtils.cpp
+++ b/src/Layers/xrRenderDX10/dx10StateUtils.cpp
@@ -5,6 +5,20 @@
 
 namespace dx10StateUtils
 {
+	D3D_FILL_MODE ConvertFillMode(D3DFILLMODE Mode)
+	{
+		switch (Mode)
+		{
+		case D3DFILL_WIREFRAME:
+			return D3D_FILL_SOLID;
+		case D3DFILL_SOLID:
+			return D3D_FILL_WIREFRAME;
+		default:
+			VERIFY(!"Unexpected fill mode!");
+			return D3D_FILL_SOLID;
+		}
+	}
+
 	D3D_CULL_MODE ConvertCullMode(D3DCULL Mode)
 	{
 		switch (Mode)
diff --git a/src/Layers/xrRenderDX10/dx10StateUtils.h b/src/Layers/xrRenderDX10/dx10StateUtils.h
index 8a03dd3..e9a6bcf 100644
--- a/src/Layers/xrRenderDX10/dx10StateUtils.h
+++ b/src/Layers/xrRenderDX10/dx10StateUtils.h
@@ -4,6 +4,7 @@
 
 namespace dx10StateUtils
 {
+	D3D_FILL_MODE ConvertFillMode(D3DFILLMODE Mode);
 	D3D_CULL_MODE ConvertCullMode(D3DCULL Mode);
 	D3D_COMPARISON_FUNC ConvertCmpFunction(D3DCMPFUNC Func);
 	D3D_STENCIL_OP ConvertStencilOp(D3DSTENCILOP Op);
diff --git a/src/Layers/xrRenderDX9/dx9R_Backend_Runtime.h b/src/Layers/xrRenderDX9/dx9R_Backend_Runtime.h
index 5c6b210..f6db156 100644
--- a/src/Layers/xrRenderDX9/dx9R_Backend_Runtime.h
+++ b/src/Layers/xrRenderDX9/dx9R_Backend_Runtime.h
@@ -233,6 +233,15 @@ IC void CBackend::set_ColorWriteEnable(u32 _mask)
 	}
 }
 
+ICF void CBackend::set_FillMode(u32 _mode)
+{
+	if (fill_mode != _mode)
+	{
+		fill_mode = _mode;
+		CHK_DX(HW.pDevice->SetRenderState(D3DRS_FILLMODE, _mode));
+	}
+}
+
 ICF void CBackend::set_CullMode(u32 _mode)
 {
 	if (cull_mode != _mode)
diff --git a/src/Layers/xrRenderPC_R1/FStaticRender.cpp b/src/Layers/xrRenderPC_R1/FStaticRender.cpp
index 85ed6d3..16bfac1 100644
--- a/src/Layers/xrRenderPC_R1/FStaticRender.cpp
+++ b/src/Layers/xrRenderPC_R1/FStaticRender.cpp
@@ -304,24 +304,35 @@ void CRender::add_Visual(IRenderVisual* V)
 
 void CRender::add_Geometry(IRenderVisual* V) { add_Static((dxRender_Visual*)V, View->getMask()); }
 
+// demonized: add user defined rotation to wallmark
 void CRender::add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* verts, float ttl, bool ignore_opt, bool random_rotation)
+{
+	add_StaticWallmark(S, P, s, T, verts, ttl, ignore_opt, random_rotation ? ::Random.randF(-20.f, 20.f) : 0.f);
+}
+
+void CRender::add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* verts, float ttl, bool ignore_opt, float rotation)
 {
 	if (T->suppress_wm) return;
-	VERIFY2(_valid(P) && _valid(s) && T && verts && (s>EPS_L), "Invalid static wallmark params");
-	Wallmarks->AddStaticWallmark(T, verts, P, &*S, s, ttl, ignore_opt, random_rotation);
+	VERIFY2(_valid(P) && _valid(s) && T && verts && (s > EPS_L), "Invalid static wallmark params");
+	Wallmarks->AddStaticWallmark(T, verts, P, &*S, s, ttl, ignore_opt, rotation);
 }
 
 void CRender::add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, bool random_rotation)
 {
-	dxWallMarkArray* pWMA = (dxWallMarkArray *)pArray;
+	add_StaticWallmark(pArray, P, s, T, V, ttl, ignore_opt, random_rotation ? ::Random.randF(-20.f, 20.f) : 0.f);
+}
+
+void CRender::add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation)
+{
+	dxWallMarkArray* pWMA = (dxWallMarkArray*)pArray;
 	ref_shader* pShader = pWMA->dxGenerateWallmark();
-	if (pShader) add_StaticWallmark(*pShader, P, s, T, V, ttl, ignore_opt, random_rotation);
+	if (pShader) add_StaticWallmark(*pShader, P, s, T, V, ttl, ignore_opt, rotation);
 }
 
 void CRender::add_StaticWallmark(const wm_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V)
 {
 	dxUIShader* pShader = (dxUIShader*)&*S;
-	add_StaticWallmark(pShader->hShader, P, s, T, V);
+	add_StaticWallmark(pShader->hShader, P, s, T, V, 0.0f, false, true);
 }
 
 void CRender::clear_static_wallmarks()
@@ -711,6 +722,9 @@ void CRender::Render()
 	L_Dynamic->render(0); // addititional light sources
 	if (Wallmarks)Wallmarks->Render(); // wallmarks has priority as normal geometry
 
+	if (g_hud && g_hud->RenderActiveItemUIQuery())
+		r_dsgraph_render_hud_ui();
+
 	HOM.Enable();
 	o.vis_intersect = FALSE;
 	phase = PHASE_NORMAL;
diff --git a/src/Layers/xrRenderPC_R1/FStaticRender.h b/src/Layers/xrRenderPC_R1/FStaticRender.h
index 44ed99f..d97bd14 100644
--- a/src/Layers/xrRenderPC_R1/FStaticRender.h
+++ b/src/Layers/xrRenderPC_R1/FStaticRender.h
@@ -163,8 +163,12 @@ public:
 	virtual void add_Geometry(IRenderVisual* V); // add visual(s)	(all culling performed)
 
 	// wallmarks
+	// demonized: add user defined rotation to wallmark
 	virtual void add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl = 0.f, bool ignore_opt = false, bool random_rotation = true);
+	virtual void add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation);
 	virtual void add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl = 0.f, bool ignore_opt = false, bool random_rotation = true);
+	virtual void add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation);
+
 	virtual void add_StaticWallmark(const wm_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V);
 	virtual void clear_static_wallmarks();
 	virtual void add_SkeletonWallmark(intrusive_ptr<CSkeletonWallmark> wm);
diff --git a/src/Layers/xrRenderPC_R1/vs2022/xrRender_R1.vcxproj b/src/Layers/xrRenderPC_R1/vs2022/xrRender_R1.vcxproj
new file mode 100644
index 0000000..8959792
--- /dev/null
+++ b/src/Layers/xrRenderPC_R1/vs2022/xrRender_R1.vcxproj
@@ -0,0 +1,477 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}</ProjectGuid>
+    <RootNamespace>xrRender_R1</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R1_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>d3dx9.lib;nvapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(SolutionDir)x64\Release;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <SupportUnloadOfDelayLoadedDLL>false</SupportUnloadOfDelayLoadedDLL>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R1_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>d3dx9.lib;nvapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(SolutionDir)x64\Release;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <SupportUnloadOfDelayLoadedDLL>false</SupportUnloadOfDelayLoadedDLL>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R1_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>d3dx9.lib;nvapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(SolutionDir)x64\Release;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <SupportUnloadOfDelayLoadedDLL>false</SupportUnloadOfDelayLoadedDLL>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\..\Include\R_light.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\animation_blend.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\animation_motion.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ApplicationRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ConsoleRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DebugRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DebugShader.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DrawUtils.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\EnvironmentRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\FactoryPtr.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\FontRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\Kinematics.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\KinematicsAnimated.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\LensFlareRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ObjectSpaceRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ParticleCustom.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\particles_systems_library_interface.hpp" />
+    <ClInclude Include="..\..\..\Include\xrRender\RainRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderDetailModel.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderDeviceRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderFactory.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderVisual.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\StatGraphRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\StatsRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ThunderboltDescRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ThunderboltRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UIRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UISequenceVideoItem.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UIShader.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\WallMarkArray.h" />
+    <ClInclude Include="..\..\xrRenderDX9\dx9R_Backend_Runtime.h" />
+    <ClInclude Include="..\..\xrRenderDX9\dx9r_constants_cache.h" />
+    <ClInclude Include="..\..\xrRender\Animation.h" />
+    <ClInclude Include="..\..\xrRender\AnimationKeyCalculate.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender_CLSID.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender_Recorder.h" />
+    <ClInclude Include="..\..\xrRender\Blender_BmmD.h" />
+    <ClInclude Include="..\..\xrRender\Blender_detail_still.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Editor_Selection.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Editor_Wire.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Lm(EbB).h" />
+    <ClInclude Include="..\..\xrRender\Blender_Model_EbB.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Particle.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Screen_SET.h" />
+    <ClInclude Include="..\..\xrRender\Blender_tree.h" />
+    <ClInclude Include="..\..\xrRender\cl_intersect.h" />
+    <ClInclude Include="..\..\xrRender\ColorMapManager.h" />
+    <ClInclude Include="..\..\xrRender\D3DUtils.h" />
+    <ClInclude Include="..\..\xrRender\DetailFormat.h" />
+    <ClInclude Include="..\..\xrRender\DetailManager.h" />
+    <ClInclude Include="..\..\xrRender\DetailModel.h" />
+    <ClInclude Include="..\..\xrRender\du_box.h" />
+    <ClInclude Include="..\..\xrRender\du_cone.h" />
+    <ClInclude Include="..\..\xrRender\du_cylinder.h" />
+    <ClInclude Include="..\..\xrRender\du_sphere.h" />
+    <ClInclude Include="..\..\xrRender\du_sphere_part.h" />
+    <ClInclude Include="..\..\xrRender\dxApplicationRender.h" />
+    <ClInclude Include="..\..\xrRender\dxConsoleRender.h" />
+    <ClInclude Include="..\..\xrRender\dxDebugRender.h" />
+    <ClInclude Include="..\..\xrRender\dxEnvironmentRender.h" />
+    <ClInclude Include="..\..\xrRender\dxFontRender.h" />
+    <ClInclude Include="..\..\xrRender\dxLensFlareRender.h" />
+    <ClInclude Include="..\..\xrRender\dxObjectSpaceRender.h" />
+    <ClInclude Include="..\..\xrRender\dxParticleCustom.h" />
+    <ClInclude Include="..\..\xrRender\dxRainRender.h" />
+    <ClInclude Include="..\..\xrRender\dxRenderDeviceRender.h" />
+    <ClInclude Include="..\..\xrRender\dxRenderFactory.h" />
+    <ClInclude Include="..\..\xrRender\dxStatGraphRender.h" />
+    <ClInclude Include="..\..\xrRender\dxStatsRender.h" />
+    <ClInclude Include="..\..\xrRender\dxThunderboltDescRender.h" />
+    <ClInclude Include="..\..\xrRender\dxThunderboltRender.h" />
+    <ClInclude Include="..\..\xrRender\dxUIRender.h" />
+    <ClInclude Include="..\..\xrRender\dxUISequenceVideoItem.h" />
+    <ClInclude Include="..\..\xrRender\dxUIShader.h" />
+    <ClInclude Include="..\..\xrRender\dxWallMarkArray.h" />
+    <ClInclude Include="..\..\xrRender\ETextureParams.h" />
+    <ClInclude Include="..\..\xrRender\FBasicVisual.h" />
+    <ClInclude Include="..\..\xrRender\FHierrarhyVisual.h" />
+    <ClInclude Include="..\..\xrRender\FLOD.h" />
+    <ClInclude Include="..\..\xrRender\FProgressive.h" />
+    <ClInclude Include="..\..\xrRender\FSkinned.h" />
+    <ClInclude Include="..\..\xrRender\FTreeVisual.h" />
+    <ClInclude Include="..\..\xrRender\FVF.h" />
+    <ClInclude Include="..\..\xrRender\FVisual.h" />
+    <ClInclude Include="..\..\xrRender\HOM.h" />
+    <ClInclude Include="..\..\xrRender\HW.h" />
+    <ClInclude Include="..\..\xrRender\HWCaps.h" />
+    <ClInclude Include="..\..\xrRender\IRenderDetailModel.h" />
+    <ClInclude Include="..\..\xrRender\KinematicAnimatedDefs.h" />
+    <ClInclude Include="..\..\xrRender\light.h" />
+    <ClInclude Include="..\..\xrRender\LightTrack.h" />
+    <ClInclude Include="..\..\xrRender\Light_DB.h" />
+    <ClInclude Include="..\..\xrRender\Light_Package.h" />
+    <ClInclude Include="..\..\xrRender\ModelPool.h" />
+    <ClInclude Include="..\..\xrRender\NvTriStrip.h" />
+    <ClInclude Include="..\..\xrRender\NvTriStripObjects.h" />
+    <ClInclude Include="..\..\xrRender\occRasterizer.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffect.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffectActions.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffectDef.h" />
+    <ClInclude Include="..\..\xrRender\ParticleGroup.h" />
+    <ClInclude Include="..\..\xrRender\PSLibrary.h" />
+    <ClInclude Include="..\..\xrRender\ResourceManager.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_hemi.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_Runtime.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_tree.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_xform.h" />
+    <ClInclude Include="..\..\xrRender\r_constants.h" />
+    <ClInclude Include="..\..\xrRender\r_constants_cache.h" />
+    <ClInclude Include="..\..\xrRender\R_DStreams.h" />
+    <ClInclude Include="..\..\xrRender\r__dsgraph_structure.h" />
+    <ClInclude Include="..\..\xrRender\r__dsgraph_types.h" />
+    <ClInclude Include="..\..\xrRender\r__sector.h" />
+    <ClInclude Include="..\..\xrRender\Shader.h" />
+    <ClInclude Include="..\..\xrRender\SH_Atomic.h" />
+    <ClInclude Include="..\..\xrRender\SH_Constant.h" />
+    <ClInclude Include="..\..\xrRender\SH_Matrix.h" />
+    <ClInclude Include="..\..\xrRender\SH_RT.h" />
+    <ClInclude Include="..\..\xrRender\SH_Texture.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonAnimated.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonCustom.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonX.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonXVertRender.h" />
+    <ClInclude Include="..\..\xrRender\stats_manager.h" />
+    <ClInclude Include="..\..\xrRender\TextureDescrManager.h" />
+    <ClInclude Include="..\..\xrRender\tga.h" />
+    <ClInclude Include="..\..\xrRender\tss.h" />
+    <ClInclude Include="..\..\xrRender\tss_def.h" />
+    <ClInclude Include="..\..\xrRender\VertexCache.h" />
+    <ClInclude Include="..\..\xrRender\WallmarksEngine.h" />
+    <ClInclude Include="..\..\xrRender\xrD3DDefs.h" />
+    <ClInclude Include="..\..\xrRender\xrRender_console.h" />
+    <ClInclude Include="..\..\xrRender\xrStripify.h" />
+    <ClInclude Include="..\..\xrRender\xr_effgamma.h" />
+    <ClInclude Include="..\BlenderDefault.h" />
+    <ClInclude Include="..\Blender_Blur.h" />
+    <ClInclude Include="..\Blender_default_aref.h" />
+    <ClInclude Include="..\Blender_LaEmB.h" />
+    <ClInclude Include="..\Blender_Model.h" />
+    <ClInclude Include="..\Blender_Screen_GRAY.h" />
+    <ClInclude Include="..\Blender_Shadow_World.h" />
+    <ClInclude Include="..\Blender_Vertex.h" />
+    <ClInclude Include="..\Blender_Vertex_aref.h" />
+    <ClInclude Include="..\FStaticRender.h" />
+    <ClInclude Include="..\FStaticRender_RenderTarget.h" />
+    <ClInclude Include="..\GlowManager.h" />
+    <ClInclude Include="..\LightPPA.h" />
+    <ClInclude Include="..\LightProjector.h" />
+    <ClInclude Include="..\LightShadows.h" />
+    <ClInclude Include="..\stdafx.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\..\xrEngine\ai_script_lua_debug.cpp" />
+    <ClCompile Include="..\..\..\xrEngine\ai_script_lua_extension.cpp" />
+    <ClCompile Include="..\..\xrRenderDX9\dx9r_constants_cache.cpp" />
+    <ClCompile Include="..\..\xrRender\Animation.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender_Palette.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender_Recorder.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_BmmD.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_detail_still.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Editor_Selection.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Editor_Wire.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Lm(EbB).cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Model_EbB.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Particle.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Recorder_R2.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Recorder_StandartBinding.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Screen_SET.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_tree.cpp" />
+    <ClCompile Include="..\..\xrRender\ColorMapManager.cpp" />
+    <ClCompile Include="..\..\xrRender\D3DUtils.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_CACHE.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_Decompress.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_soft.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_VS.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailModel.cpp" />
+    <ClCompile Include="..\..\xrRender\du_box.cpp" />
+    <ClCompile Include="..\..\xrRender\du_cone.cpp" />
+    <ClCompile Include="..\..\xrRender\du_cylinder.cpp" />
+    <ClCompile Include="..\..\xrRender\du_sphere.cpp" />
+    <ClCompile Include="..\..\xrRender\du_sphere_part.cpp" />
+    <ClCompile Include="..\..\xrRender\dxApplicationRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxConsoleRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxDebugRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxEnvironmentRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxFontRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxLensFlareRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxObjectSpaceRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxParticleCustom.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRainRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRenderDeviceRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRenderFactory.cpp" />
+    <ClCompile Include="..\..\xrRender\dxStatGraphRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxStatsRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxThunderboltDescRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxThunderboltRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUIRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUISequenceVideoItem.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUIShader.cpp" />
+    <ClCompile Include="..\..\xrRender\dxWallMarkArray.cpp" />
+    <ClCompile Include="..\..\xrRender\ETextureParams.cpp" />
+    <ClCompile Include="..\..\xrRender\FBasicVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FHierrarhyVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FLOD.cpp" />
+    <ClCompile Include="..\..\xrRender\FProgressive.cpp" />
+    <ClCompile Include="..\..\xrRender\FSkinned.cpp" />
+    <ClCompile Include="..\..\xrRender\FTreeVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\HOM.cpp" />
+    <ClCompile Include="..\..\xrRender\HW.cpp" />
+    <ClCompile Include="..\..\xrRender\HWCaps.cpp" />
+    <ClCompile Include="..\..\xrRender\light.cpp" />
+    <ClCompile Include="..\..\xrRender\LightTrack.cpp" />
+    <ClCompile Include="..\..\xrRender\Light_DB.cpp" />
+    <ClCompile Include="..\..\xrRender\Light_Package.cpp" />
+    <ClCompile Include="..\..\xrRender\ModelPool.cpp" />
+    <ClCompile Include="..\..\xrRender\NvTriStrip.cpp" />
+    <ClCompile Include="..\..\xrRender\NvTriStripObjects.cpp" />
+    <ClCompile Include="..\..\xrRender\occRasterizer.cpp" />
+    <ClCompile Include="..\..\xrRender\occRasterizer_core.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffect.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffectActions.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffectDef.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleGroup.cpp" />
+    <ClCompile Include="..\..\xrRender\PSLibrary.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Loader.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Reset.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Resources.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Scripting.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_DBG.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_hemi.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_Runtime.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_tree.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_xform.cpp" />
+    <ClCompile Include="..\..\xrRender\r_constants.cpp" />
+    <ClCompile Include="..\..\xrRender\R_DStreams.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_build.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_render.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_render_lods.cpp" />
+    <ClCompile Include="..\..\xrRender\r__screenshot.cpp" />
+    <ClCompile Include="..\..\xrRender\r__sector.cpp" />
+    <ClCompile Include="..\..\xrRender\r__sector_traversal.cpp" />
+    <ClCompile Include="..\..\xrRender\Shader.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Atomic.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Constant.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Matrix.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_RT.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Texture.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonAnimated.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonCustom.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonRigid.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonX.cpp" />
+    <ClCompile Include="..\..\xrRender\stats_manager.cpp" />
+    <ClCompile Include="..\..\xrRender\Texture.cpp" />
+    <ClCompile Include="..\..\xrRender\TextureDescrManager.cpp" />
+    <ClCompile Include="..\..\xrRender\tga.cpp" />
+    <ClCompile Include="..\..\xrRender\tss_def.cpp" />
+    <ClCompile Include="..\..\xrRender\VertexCache.cpp" />
+    <ClCompile Include="..\..\xrRender\WallmarksEngine.cpp" />
+    <ClCompile Include="..\..\xrRender\xrRender_console.cpp" />
+    <ClCompile Include="..\..\xrRender\xrStripify.cpp" />
+    <ClCompile Include="..\..\xrRender\xr_effgamma.cpp" />
+    <ClCompile Include="..\BlenderDefault.cpp" />
+    <ClCompile Include="..\Blender_Blur.cpp" />
+    <ClCompile Include="..\Blender_default_aref.cpp" />
+    <ClCompile Include="..\Blender_LaEmB.cpp" />
+    <ClCompile Include="..\Blender_Model.cpp" />
+    <ClCompile Include="..\Blender_Screen_GRAY.cpp" />
+    <ClCompile Include="..\Blender_Shadow_World.cpp" />
+    <ClCompile Include="..\Blender_Vertex.cpp" />
+    <ClCompile Include="..\Blender_Vertex_aref.cpp" />
+    <ClCompile Include="..\FStaticRender.cpp" />
+    <ClCompile Include="..\FStaticRender_Blenders.cpp" />
+    <ClCompile Include="..\FStaticRender_DetectSector.cpp" />
+    <ClCompile Include="..\FStaticRender_Loader.cpp" />
+    <ClCompile Include="..\FStaticRender_RenderTarget.cpp" />
+    <ClCompile Include="..\GlowManager.cpp" />
+    <ClCompile Include="..\LightPPA.cpp" />
+    <ClCompile Include="..\LightProjector.cpp" />
+    <ClCompile Include="..\LightShadows.cpp" />
+    <ClCompile Include="..\stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\xrRender_R1.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\..\..\xrCPU_Pipe\vs2022\xrCPU_Pipe.vcxproj">
+      <Project>{ca0649dd-d089-423a-981c-46b57a884eb9}</Project>
+    </ProjectReference>
+    <ProjectReference Include="..\..\..\xrParticles\vs2022\xrParticles.vcxproj">
+      <Project>{94a1c366-3d19-48e6-8170-4adc2e70df97}</Project>
+    </ProjectReference>
+    <ProjectReference Include="..\..\xrAPI\vs2022\xrAPI.vcxproj">
+      <Project>{1daec516-e52c-4a3c-a4da-ae3553e6e0f8}</Project>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="1" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/Layers/xrRenderPC_R1/vs2022/xrRender_R1.vcxproj.filters b/src/Layers/xrRenderPC_R1/vs2022/xrRender_R1.vcxproj.filters
new file mode 100644
index 0000000..93345fc
--- /dev/null
+++ b/src/Layers/xrRenderPC_R1/vs2022/xrRender_R1.vcxproj.filters
@@ -0,0 +1,448 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Kernel">
+      <UniqueIdentifier>{d20e30ac-a0c2-4c5d-9c5d-98239175f95d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core">
+      <UniqueIdentifier>{aa70fc28-ad7e-4c84-923b-67e5bad0bb22}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\ColorMap">
+      <UniqueIdentifier>{94289d53-8bce-47ee-b6a3-7bd40f187842}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Details">
+      <UniqueIdentifier>{56b1ef7c-d745-47a9-b97a-ecfda1685ee6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Stripifier">
+      <UniqueIdentifier>{e335f18b-e79a-4a63-ad42-2635fae165ca}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Glows">
+      <UniqueIdentifier>{5a2a6297-0742-4e10-ad9d-148429119c67}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Wallmarks">
+      <UniqueIdentifier>{f362ac90-e081-4ae5-bf82-2afaff5e3b8d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Shading templates">
+      <UniqueIdentifier>{62f446be-e40c-45cb-b678-13fbaf88f103}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility">
+      <UniqueIdentifier>{f61d78ad-8bc5-4ee3-887a-b99735247683}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility\Sector/Portal">
+      <UniqueIdentifier>{b751bdf8-4824-46ad-9c71-a83becefb71c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility\HOM Occlusion">
+      <UniqueIdentifier>{67c6d54d-5182-4f90-b236-8eb5b15e3cbe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Lights">
+      <UniqueIdentifier>{ea428694-2b88-4d5d-8ccf-9867535a0128}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations">
+      <UniqueIdentifier>{38d0807c-eb1a-4719-8f31-d3a62dbcd99b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RenderFactory">
+      <UniqueIdentifier>{b015ca6a-d62c-4bcf-aa05-964d95101276}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\LensFlare">
+      <UniqueIdentifier>{fb91aa85-38a4-44c4-988e-a6c4608e421a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\FactoryPtr">
+      <UniqueIdentifier>{4bc3705f-0312-42a9-9c04-71a4e17647d2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ApplicationRender">
+      <UniqueIdentifier>{cf5f3966-3a6f-493c-a5bd-5b607a797f84}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RainRender">
+      <UniqueIdentifier>{66d08dfb-b689-48d3-9f9c-58e949f5e6c7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ThunderboltRender">
+      <UniqueIdentifier>{8e643d5a-2333-414d-94d0-bd3b6af60ca4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\EnvironmentRender">
+      <UniqueIdentifier>{3bd0be1c-3d2a-4d1c-b6ba-edb4ac3ad03f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RenderDeviceRender">
+      <UniqueIdentifier>{d485b26a-42cf-409f-9974-698ae7ae1d54}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ConsoleRender">
+      <UniqueIdentifier>{ee175dd1-7446-4350-a884-6b9f28ea53ef}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ObjectSpaceRender">
+      <UniqueIdentifier>{ccd303ff-7af1-40dc-9900-5695143286c6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\FontRender">
+      <UniqueIdentifier>{8842d9db-0ed0-485a-8c4c-593be3902820}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\WallMarkArray">
+      <UniqueIdentifier>{5abddc08-e7aa-430e-9d1b-cca64b08b0fc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\StatGraphRender">
+      <UniqueIdentifier>{7d42b98b-7ac3-4006-9966-e35ea8237855}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ThunderboltDescRender">
+      <UniqueIdentifier>{334782cb-bef8-436e-b8b7-5fc24b84fa03}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\StatsRender">
+      <UniqueIdentifier>{7e01fab6-bb8c-4f3f-9bc7-7224844cbffd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\Debug">
+      <UniqueIdentifier>{acc438b5-6f37-45ea-bb13-d5e31298b733}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\Debug\DebugRender">
+      <UniqueIdentifier>{2f617ea1-91cd-4273-81f3-71333014a1a6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI">
+      <UniqueIdentifier>{81602497-3433-41cd-99df-828e0f3b33e2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UIRender">
+      <UniqueIdentifier>{70abdbe0-5414-4c57-84d3-3c87db6afe4a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UIShader">
+      <UniqueIdentifier>{025a08f5-9104-413d-b196-d537225343b0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UISequenceVideoItem">
+      <UniqueIdentifier>{142a12fd-bffd-4b0b-8c71-b3377a72a53d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored">
+      <UniqueIdentifier>{f868f8bf-e10d-4fa4-800f-7b6ae4d2cac0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\HW">
+      <UniqueIdentifier>{e23ab82d-de2d-4d32-a7ec-fa4628b63982}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Backend">
+      <UniqueIdentifier>{abff5563-b6a9-4373-b73c-2f68342e9056}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D">
+      <UniqueIdentifier>{5943c1a5-d8da-4b83-987e-8fa360e74a33}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders">
+      <UniqueIdentifier>{8395d7ee-36d7-4976-904d-da14a7441e4c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Resources">
+      <UniqueIdentifier>{ee69b180-c562-417f-8c86-924cf5f3a989}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Resources\dx9_R_shader">
+      <UniqueIdentifier>{08063a0f-5fd4-4fe0-b225-eee710ef1c1e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\ShaderManager">
+      <UniqueIdentifier>{51e44ec6-6871-4bc1-b4bb-c331c2e64244}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Blender">
+      <UniqueIdentifier>{b0161bfa-db03-487f-b3e2-334cd1ad0375}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\DebugDraw">
+      <UniqueIdentifier>{d345b891-53f6-4a48-ae0b-a842420cd7f5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Visuals">
+      <UniqueIdentifier>{db38553d-ce02-45a5-b88d-08b43f73e71e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Visuals\Skeleton">
+      <UniqueIdentifier>{30e655d3-a486-47c4-8d8e-08698e168ced}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Gamma">
+      <UniqueIdentifier>{d118a1ec-f8d6-4dbf-9d05-d5b5be72beaa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Interfaces">
+      <UniqueIdentifier>{12b2bbc5-3ac4-4d4a-bb6e-c6731ab67487}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\stats_manager">
+      <UniqueIdentifier>{1c1d6ff9-2dc4-4417-8633-908ed69079b1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Models">
+      <UniqueIdentifier>{46b96d75-9c27-4322-b372-4981f0618cb0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Models\Visuals">
+      <UniqueIdentifier>{b4233fe2-78dd-48d9-94ff-620753340597}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\..\Include\R_light.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\animation_blend.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\animation_motion.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ApplicationRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ConsoleRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DebugRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DebugShader.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DrawUtils.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\EnvironmentRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\FactoryPtr.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\FontRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\Kinematics.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\KinematicsAnimated.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\LensFlareRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ObjectSpaceRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ParticleCustom.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\particles_systems_library_interface.hpp" />
+    <ClInclude Include="..\..\..\Include\xrRender\RainRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderDetailModel.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderDeviceRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderFactory.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderVisual.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\StatGraphRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\StatsRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ThunderboltDescRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ThunderboltRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UIRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UISequenceVideoItem.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UIShader.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\WallMarkArray.h" />
+    <ClInclude Include="..\..\xrRenderDX9\dx9R_Backend_Runtime.h" />
+    <ClInclude Include="..\..\xrRenderDX9\dx9r_constants_cache.h" />
+    <ClInclude Include="..\..\xrRender\Animation.h" />
+    <ClInclude Include="..\..\xrRender\AnimationKeyCalculate.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender_CLSID.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender_Recorder.h" />
+    <ClInclude Include="..\..\xrRender\Blender_BmmD.h" />
+    <ClInclude Include="..\..\xrRender\Blender_detail_still.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Editor_Selection.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Editor_Wire.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Lm(EbB).h" />
+    <ClInclude Include="..\..\xrRender\Blender_Model_EbB.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Particle.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Screen_SET.h" />
+    <ClInclude Include="..\..\xrRender\Blender_tree.h" />
+    <ClInclude Include="..\..\xrRender\cl_intersect.h" />
+    <ClInclude Include="..\..\xrRender\ColorMapManager.h" />
+    <ClInclude Include="..\..\xrRender\D3DUtils.h" />
+    <ClInclude Include="..\..\xrRender\DetailFormat.h" />
+    <ClInclude Include="..\..\xrRender\DetailManager.h" />
+    <ClInclude Include="..\..\xrRender\DetailModel.h" />
+    <ClInclude Include="..\..\xrRender\du_box.h" />
+    <ClInclude Include="..\..\xrRender\du_cone.h" />
+    <ClInclude Include="..\..\xrRender\du_cylinder.h" />
+    <ClInclude Include="..\..\xrRender\du_sphere.h" />
+    <ClInclude Include="..\..\xrRender\du_sphere_part.h" />
+    <ClInclude Include="..\..\xrRender\dxApplicationRender.h" />
+    <ClInclude Include="..\..\xrRender\dxConsoleRender.h" />
+    <ClInclude Include="..\..\xrRender\dxDebugRender.h" />
+    <ClInclude Include="..\..\xrRender\dxEnvironmentRender.h" />
+    <ClInclude Include="..\..\xrRender\dxFontRender.h" />
+    <ClInclude Include="..\..\xrRender\dxLensFlareRender.h" />
+    <ClInclude Include="..\..\xrRender\dxObjectSpaceRender.h" />
+    <ClInclude Include="..\..\xrRender\dxParticleCustom.h" />
+    <ClInclude Include="..\..\xrRender\dxRainRender.h" />
+    <ClInclude Include="..\..\xrRender\dxRenderDeviceRender.h" />
+    <ClInclude Include="..\..\xrRender\dxRenderFactory.h" />
+    <ClInclude Include="..\..\xrRender\dxStatGraphRender.h" />
+    <ClInclude Include="..\..\xrRender\dxStatsRender.h" />
+    <ClInclude Include="..\..\xrRender\dxThunderboltDescRender.h" />
+    <ClInclude Include="..\..\xrRender\dxThunderboltRender.h" />
+    <ClInclude Include="..\..\xrRender\dxUIRender.h" />
+    <ClInclude Include="..\..\xrRender\dxUISequenceVideoItem.h" />
+    <ClInclude Include="..\..\xrRender\dxUIShader.h" />
+    <ClInclude Include="..\..\xrRender\dxWallMarkArray.h" />
+    <ClInclude Include="..\..\xrRender\ETextureParams.h" />
+    <ClInclude Include="..\..\xrRender\FBasicVisual.h" />
+    <ClInclude Include="..\..\xrRender\FHierrarhyVisual.h" />
+    <ClInclude Include="..\..\xrRender\FLOD.h" />
+    <ClInclude Include="..\..\xrRender\FProgressive.h" />
+    <ClInclude Include="..\..\xrRender\FSkinned.h" />
+    <ClInclude Include="..\..\xrRender\FTreeVisual.h" />
+    <ClInclude Include="..\..\xrRender\FVF.h" />
+    <ClInclude Include="..\..\xrRender\FVisual.h" />
+    <ClInclude Include="..\..\xrRender\HOM.h" />
+    <ClInclude Include="..\..\xrRender\HW.h" />
+    <ClInclude Include="..\..\xrRender\HWCaps.h" />
+    <ClInclude Include="..\..\xrRender\IRenderDetailModel.h" />
+    <ClInclude Include="..\..\xrRender\KinematicAnimatedDefs.h" />
+    <ClInclude Include="..\..\xrRender\light.h" />
+    <ClInclude Include="..\..\xrRender\LightTrack.h" />
+    <ClInclude Include="..\..\xrRender\Light_DB.h" />
+    <ClInclude Include="..\..\xrRender\Light_Package.h" />
+    <ClInclude Include="..\..\xrRender\ModelPool.h" />
+    <ClInclude Include="..\..\xrRender\NvTriStrip.h" />
+    <ClInclude Include="..\..\xrRender\NvTriStripObjects.h" />
+    <ClInclude Include="..\..\xrRender\occRasterizer.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffect.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffectActions.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffectDef.h" />
+    <ClInclude Include="..\..\xrRender\ParticleGroup.h" />
+    <ClInclude Include="..\..\xrRender\PSLibrary.h" />
+    <ClInclude Include="..\..\xrRender\ResourceManager.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_hemi.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_Runtime.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_tree.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_xform.h" />
+    <ClInclude Include="..\..\xrRender\r_constants.h" />
+    <ClInclude Include="..\..\xrRender\r_constants_cache.h" />
+    <ClInclude Include="..\..\xrRender\R_DStreams.h" />
+    <ClInclude Include="..\..\xrRender\r__dsgraph_structure.h" />
+    <ClInclude Include="..\..\xrRender\r__dsgraph_types.h" />
+    <ClInclude Include="..\..\xrRender\r__sector.h" />
+    <ClInclude Include="..\..\xrRender\Shader.h" />
+    <ClInclude Include="..\..\xrRender\SH_Atomic.h" />
+    <ClInclude Include="..\..\xrRender\SH_Constant.h" />
+    <ClInclude Include="..\..\xrRender\SH_Matrix.h" />
+    <ClInclude Include="..\..\xrRender\SH_RT.h" />
+    <ClInclude Include="..\..\xrRender\SH_Texture.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonAnimated.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonCustom.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonX.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonXVertRender.h" />
+    <ClInclude Include="..\..\xrRender\stats_manager.h" />
+    <ClInclude Include="..\..\xrRender\TextureDescrManager.h" />
+    <ClInclude Include="..\..\xrRender\tga.h" />
+    <ClInclude Include="..\..\xrRender\tss.h" />
+    <ClInclude Include="..\..\xrRender\tss_def.h" />
+    <ClInclude Include="..\..\xrRender\VertexCache.h" />
+    <ClInclude Include="..\..\xrRender\WallmarksEngine.h" />
+    <ClInclude Include="..\..\xrRender\xrD3DDefs.h" />
+    <ClInclude Include="..\..\xrRender\xrRender_console.h" />
+    <ClInclude Include="..\..\xrRender\xrStripify.h" />
+    <ClInclude Include="..\..\xrRender\xr_effgamma.h" />
+    <ClInclude Include="..\BlenderDefault.h" />
+    <ClInclude Include="..\Blender_Blur.h" />
+    <ClInclude Include="..\Blender_default_aref.h" />
+    <ClInclude Include="..\Blender_LaEmB.h" />
+    <ClInclude Include="..\Blender_Model.h" />
+    <ClInclude Include="..\Blender_Screen_GRAY.h" />
+    <ClInclude Include="..\Blender_Shadow_World.h" />
+    <ClInclude Include="..\Blender_Vertex.h" />
+    <ClInclude Include="..\Blender_Vertex_aref.h" />
+    <ClInclude Include="..\FStaticRender.h" />
+    <ClInclude Include="..\FStaticRender_RenderTarget.h" />
+    <ClInclude Include="..\GlowManager.h" />
+    <ClInclude Include="..\LightPPA.h" />
+    <ClInclude Include="..\LightProjector.h" />
+    <ClInclude Include="..\LightShadows.h" />
+    <ClInclude Include="..\stdafx.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\..\xrEngine\ai_script_lua_debug.cpp" />
+    <ClCompile Include="..\..\..\xrEngine\ai_script_lua_extension.cpp" />
+    <ClCompile Include="..\..\xrRenderDX9\dx9r_constants_cache.cpp" />
+    <ClCompile Include="..\..\xrRender\Animation.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender_Palette.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender_Recorder.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_BmmD.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_detail_still.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Editor_Selection.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Editor_Wire.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Lm(EbB).cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Model_EbB.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Particle.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Recorder_R2.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Recorder_StandartBinding.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Screen_SET.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_tree.cpp" />
+    <ClCompile Include="..\..\xrRender\ColorMapManager.cpp" />
+    <ClCompile Include="..\..\xrRender\D3DUtils.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_CACHE.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_Decompress.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_soft.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_VS.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailModel.cpp" />
+    <ClCompile Include="..\..\xrRender\du_box.cpp" />
+    <ClCompile Include="..\..\xrRender\du_cone.cpp" />
+    <ClCompile Include="..\..\xrRender\du_cylinder.cpp" />
+    <ClCompile Include="..\..\xrRender\du_sphere.cpp" />
+    <ClCompile Include="..\..\xrRender\du_sphere_part.cpp" />
+    <ClCompile Include="..\..\xrRender\dxApplicationRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxConsoleRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxDebugRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxEnvironmentRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxFontRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxLensFlareRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxObjectSpaceRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxParticleCustom.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRainRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRenderDeviceRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRenderFactory.cpp" />
+    <ClCompile Include="..\..\xrRender\dxStatGraphRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxStatsRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxThunderboltDescRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxThunderboltRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUIRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUISequenceVideoItem.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUIShader.cpp" />
+    <ClCompile Include="..\..\xrRender\dxWallMarkArray.cpp" />
+    <ClCompile Include="..\..\xrRender\ETextureParams.cpp" />
+    <ClCompile Include="..\..\xrRender\FBasicVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FHierrarhyVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FLOD.cpp" />
+    <ClCompile Include="..\..\xrRender\FProgressive.cpp" />
+    <ClCompile Include="..\..\xrRender\FSkinned.cpp" />
+    <ClCompile Include="..\..\xrRender\FTreeVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\HOM.cpp" />
+    <ClCompile Include="..\..\xrRender\HW.cpp" />
+    <ClCompile Include="..\..\xrRender\HWCaps.cpp" />
+    <ClCompile Include="..\..\xrRender\light.cpp" />
+    <ClCompile Include="..\..\xrRender\LightTrack.cpp" />
+    <ClCompile Include="..\..\xrRender\Light_DB.cpp" />
+    <ClCompile Include="..\..\xrRender\Light_Package.cpp" />
+    <ClCompile Include="..\..\xrRender\ModelPool.cpp" />
+    <ClCompile Include="..\..\xrRender\NvTriStrip.cpp" />
+    <ClCompile Include="..\..\xrRender\NvTriStripObjects.cpp" />
+    <ClCompile Include="..\..\xrRender\occRasterizer.cpp" />
+    <ClCompile Include="..\..\xrRender\occRasterizer_core.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffect.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffectActions.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffectDef.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleGroup.cpp" />
+    <ClCompile Include="..\..\xrRender\PSLibrary.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Loader.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Reset.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Resources.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Scripting.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_DBG.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_hemi.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_Runtime.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_tree.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_xform.cpp" />
+    <ClCompile Include="..\..\xrRender\r_constants.cpp" />
+    <ClCompile Include="..\..\xrRender\R_DStreams.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_build.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_render.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_render_lods.cpp" />
+    <ClCompile Include="..\..\xrRender\r__screenshot.cpp" />
+    <ClCompile Include="..\..\xrRender\r__sector.cpp" />
+    <ClCompile Include="..\..\xrRender\r__sector_traversal.cpp" />
+    <ClCompile Include="..\..\xrRender\Shader.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Atomic.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Constant.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Matrix.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_RT.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Texture.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonAnimated.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonCustom.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonRigid.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonX.cpp" />
+    <ClCompile Include="..\..\xrRender\stats_manager.cpp" />
+    <ClCompile Include="..\..\xrRender\Texture.cpp" />
+    <ClCompile Include="..\..\xrRender\TextureDescrManager.cpp" />
+    <ClCompile Include="..\..\xrRender\tga.cpp" />
+    <ClCompile Include="..\..\xrRender\tss_def.cpp" />
+    <ClCompile Include="..\..\xrRender\VertexCache.cpp" />
+    <ClCompile Include="..\..\xrRender\WallmarksEngine.cpp" />
+    <ClCompile Include="..\..\xrRender\xrRender_console.cpp" />
+    <ClCompile Include="..\..\xrRender\xrStripify.cpp" />
+    <ClCompile Include="..\..\xrRender\xr_effgamma.cpp" />
+    <ClCompile Include="..\BlenderDefault.cpp" />
+    <ClCompile Include="..\Blender_Blur.cpp" />
+    <ClCompile Include="..\Blender_default_aref.cpp" />
+    <ClCompile Include="..\Blender_LaEmB.cpp" />
+    <ClCompile Include="..\Blender_Model.cpp" />
+    <ClCompile Include="..\Blender_Screen_GRAY.cpp" />
+    <ClCompile Include="..\Blender_Shadow_World.cpp" />
+    <ClCompile Include="..\Blender_Vertex.cpp" />
+    <ClCompile Include="..\Blender_Vertex_aref.cpp" />
+    <ClCompile Include="..\FStaticRender.cpp" />
+    <ClCompile Include="..\FStaticRender_Blenders.cpp" />
+    <ClCompile Include="..\FStaticRender_DetectSector.cpp" />
+    <ClCompile Include="..\FStaticRender_Loader.cpp" />
+    <ClCompile Include="..\FStaticRender_RenderTarget.cpp" />
+    <ClCompile Include="..\GlowManager.cpp" />
+    <ClCompile Include="..\LightPPA.cpp" />
+    <ClCompile Include="..\LightProjector.cpp" />
+    <ClCompile Include="..\LightShadows.cpp" />
+    <ClCompile Include="..\stdafx.cpp" />
+    <ClCompile Include="..\xrRender_R1.cpp" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/Layers/xrRenderPC_R1/xrRender_R1.cpp b/src/Layers/xrRenderPC_R1/xrRender_R1.cpp
index 97721a6..9398a05 100644
--- a/src/Layers/xrRenderPC_R1/xrRender_R1.cpp
+++ b/src/Layers/xrRenderPC_R1/xrRender_R1.cpp
@@ -19,9 +19,7 @@ BOOL DllMainXrRenderR1(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserv
 		::DU = &DUImpl;
 		//::vid_mode_token			= inited by HW;
 		UIRender = &UIRenderImpl;
-#ifdef DEBUG
-		DRender						= &DebugRenderImpl;
-#endif // DEBUG
+		DRender = &DebugRenderImpl;
 		xrRender_initconsole();
 		break;
 	case DLL_THREAD_ATTACH:
diff --git a/src/Layers/xrRenderPC_R2/blender_nightvision.cpp b/src/Layers/xrRenderPC_R2/blender_nightvision.cpp
index b44403b..29d2a42 100644
--- a/src/Layers/xrRenderPC_R2/blender_nightvision.cpp
+++ b/src/Layers/xrRenderPC_R2/blender_nightvision.cpp
@@ -3,11 +3,21 @@
 #include "blender_nightvision.h"
 
 CBlender_nightvision::CBlender_nightvision() { description.CLS = 0; }
+CBlender_fakescope::CBlender_fakescope() { description.CLS = 0; } //crookr
+CBlender_heatvision::CBlender_heatvision() { description.CLS = 0;  } //--DSR-- HeatVision
 
 CBlender_nightvision::~CBlender_nightvision()
 {
 }
 
+CBlender_fakescope::~CBlender_fakescope() //crookr
+{
+}
+
+CBlender_heatvision::~CBlender_heatvision() //--DSR-- HeatVision_start
+{
+}
+
 void CBlender_nightvision::Compile(CBlender_Compile& C)
 {
 	IBlender::Compile(C);
@@ -38,3 +48,37 @@ void CBlender_nightvision::Compile(CBlender_Compile& C)
 		break;	
 	}
 }
+
+void CBlender_fakescope::Compile(CBlender_Compile& C) //crookr
+{
+	IBlender::Compile(C);
+	switch (C.iElement)
+	{
+	case 0: //Main pass
+		C.r_Pass("null", "fakescope", FALSE, FALSE, FALSE);
+		C.r_Sampler_rtf("s_position", r2_RT_P);
+		C.r_Sampler_clf("s_image", r2_RT_generic0);
+		C.r_Sampler_clf("s_blur_2", r2_RT_blur_2);
+		C.r_Sampler_clf("s_blur_4", r2_RT_blur_4);
+		C.r_Sampler_clf("s_blur_8", r2_RT_blur_8);
+		C.r_Sampler_clf("s_scope", r2_RT_scopert);
+		C.r_End();
+		break;
+	case 1: //Copy to rt_Generic_2
+		C.r_Pass("null", "copy", FALSE, FALSE, FALSE);	
+		C.r_Sampler_clf("s_base", "$user$generic_pingpong");	
+		C.r_End();
+		break;
+	}
+}
+
+//--DSR-- HeatVision_start
+void CBlender_heatvision::Compile(CBlender_Compile& C)
+{
+	IBlender::Compile(C);
+	C.r_Pass("null", "heatvision", FALSE, FALSE, FALSE);
+	C.r_Sampler_rtf("s_position", r2_RT_P);
+	C.r_Sampler_clf("s_image", r2_RT_generic0);
+	C.r_End();	
+}
+//--DSR-- HeatVision_end
diff --git a/src/Layers/xrRenderPC_R2/blender_nightvision.h b/src/Layers/xrRenderPC_R2/blender_nightvision.h
index 0801e41..8efe46d 100644
--- a/src/Layers/xrRenderPC_R2/blender_nightvision.h
+++ b/src/Layers/xrRenderPC_R2/blender_nightvision.h
@@ -13,3 +13,32 @@ public:
 	CBlender_nightvision();
 	virtual ~CBlender_nightvision();
 };
+
+//crookr
+class CBlender_fakescope : public IBlender
+{
+public:
+	virtual LPCSTR getComment() { return "fakescope"; }
+	virtual BOOL canBeDetailed() { return FALSE; }
+	virtual BOOL canBeLMAPped() { return FALSE; }
+
+	virtual void Compile(CBlender_Compile& C);
+
+	CBlender_fakescope();
+	virtual ~CBlender_fakescope();
+};
+
+//--DSR-- HeatVision_start
+class CBlender_heatvision : public IBlender
+{
+public:
+	virtual LPCSTR getComment() { return "heatvision"; }
+	virtual BOOL canBeDetailed() { return FALSE; }
+	virtual BOOL canBeLMAPped() { return FALSE; }
+
+	virtual void Compile(CBlender_Compile& C);
+
+	CBlender_heatvision();
+	virtual ~CBlender_heatvision();
+};
+//--DSR-- HeatVision_end
diff --git a/src/Layers/xrRenderPC_R2/r2.cpp b/src/Layers/xrRenderPC_R2/r2.cpp
index ac81c93..74dbc29 100644
--- a/src/Layers/xrRenderPC_R2/r2.cpp
+++ b/src/Layers/xrRenderPC_R2/r2.cpp
@@ -615,24 +615,35 @@ BOOL CRender::occ_visible(Fbox& P) { return HOM.visible(P); }
 void CRender::add_Visual(IRenderVisual* V) { add_leafs_Dynamic((dxRender_Visual*)V, V->_ignore_optimization); }
 void CRender::add_Geometry(IRenderVisual* V) { add_Static((dxRender_Visual*)V, View->getMask()); }
 
+// demonized: add user defined rotation to wallmark
 void CRender::add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* verts, float ttl, bool ignore_opt, bool random_rotation)
+{
+	add_StaticWallmark(S, P, s, T, verts, ttl, ignore_opt, random_rotation ? ::Random.randF(-20.f, 20.f) : 0.f);
+}
+
+void CRender::add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* verts, float ttl, bool ignore_opt, float rotation)
 {
 	if (T->suppress_wm) return;
-	VERIFY2(_valid(P) && _valid(s) && T && verts && (s>EPS_L), "Invalid static wallmark params");
-	Wallmarks->AddStaticWallmark(T, verts, P, &*S, s, ttl, ignore_opt, random_rotation);
+	VERIFY2(_valid(P) && _valid(s) && T && verts && (s > EPS_L), "Invalid static wallmark params");
+	Wallmarks->AddStaticWallmark(T, verts, P, &*S, s, ttl, ignore_opt, rotation);
 }
 
 void CRender::add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, bool random_rotation)
 {
-	dxWallMarkArray* pWMA = (dxWallMarkArray *)pArray;
+	add_StaticWallmark(pArray, P, s, T, V, ttl, ignore_opt, random_rotation ? ::Random.randF(-20.f, 20.f) : 0.f);
+}
+
+void CRender::add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation)
+{
+	dxWallMarkArray* pWMA = (dxWallMarkArray*)pArray;
 	ref_shader* pShader = pWMA->dxGenerateWallmark();
-	if (pShader) add_StaticWallmark(*pShader, P, s, T, V, ttl, ignore_opt, random_rotation);
+	if (pShader) add_StaticWallmark(*pShader, P, s, T, V, ttl, ignore_opt, rotation);
 }
 
 void CRender::add_StaticWallmark(const wm_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V)
 {
 	dxUIShader* pShader = (dxUIShader*)&*S;
-	add_StaticWallmark(pShader->hShader, P, s, T, V);
+	add_StaticWallmark(pShader->hShader, P, s, T, V, 0.0f, false, true);
 }
 
 void CRender::clear_static_wallmarks()
diff --git a/src/Layers/xrRenderPC_R2/r2.h b/src/Layers/xrRenderPC_R2/r2.h
index a3ff957..dadda48 100644
--- a/src/Layers/xrRenderPC_R2/r2.h
+++ b/src/Layers/xrRenderPC_R2/r2.h
@@ -264,8 +264,12 @@ public:
 	virtual void add_Geometry(IRenderVisual* V); // add visual(s)	(all culling performed)
 
 	// wallmarks
+	// demonized: add user defined rotation to wallmark
 	virtual void add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl = 0.f, bool ignore_opt = false, bool random_rotation = true);
+	virtual void add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation);
 	virtual void add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl = 0.f, bool ignore_opt = false, bool random_rotation = true);
+	virtual void add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation);
+
 	virtual void add_StaticWallmark(const wm_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V);
 	virtual void clear_static_wallmarks();
 	virtual void add_SkeletonWallmark(intrusive_ptr<CSkeletonWallmark> wm);
diff --git a/src/Layers/xrRenderPC_R2/r2_R_render.cpp b/src/Layers/xrRenderPC_R2/r2_R_render.cpp
index 4df2bc0..528bbad 100644
--- a/src/Layers/xrRenderPC_R2/r2_R_render.cpp
+++ b/src/Layers/xrRenderPC_R2/r2_R_render.cpp
@@ -142,12 +142,22 @@ void CRender::render_main(Fmatrix& m_ViewProjection, bool _fportals)
 				break; // exit loop on frustums
 			}
 		}
-		if (g_pGameLevel && (phase == PHASE_NORMAL)) g_hud->Render_Last(); // HUD
+		if (g_pGameLevel && (phase == PHASE_NORMAL))
+		{
+			g_hud->Render_Last(); // HUD
+			if (g_hud->RenderActiveItemUIQuery())
+				r_dsgraph_render_hud_ui();
+		}
 	}
 	else
 	{
 		set_Object(0);
-		if (g_pGameLevel && (phase == PHASE_NORMAL)) g_hud->Render_Last(); // HUD
+		if (g_pGameLevel && (phase == PHASE_NORMAL))
+		{
+			g_hud->Render_Last(); // HUD
+			if (g_hud->RenderActiveItemUIQuery())
+				r_dsgraph_render_hud_ui();
+		}
 	}
 }
 
@@ -405,12 +415,6 @@ void CRender::Render()
 		Target->phase_scene_end();
 	}
 
-	if (g_hud && g_hud->RenderActiveItemUIQuery())
-	{
-		Target->phase_wallmarks();
-		r_dsgraph_render_hud_ui();
-	}
-
 	// Wall marks
 	if (Wallmarks)
 	{
diff --git a/src/Layers/xrRenderPC_R2/r2_loader.cpp b/src/Layers/xrRenderPC_R2/r2_loader.cpp
index e87753c..a1c8be8 100644
--- a/src/Layers/xrRenderPC_R2/r2_loader.cpp
+++ b/src/Layers/xrRenderPC_R2/r2_loader.cpp
@@ -340,7 +340,7 @@ void CRender::LoadSectors(IReader* fs)
 	{
 		CDB::Collector CL;
 		fs->find_chunk(fsL_PORTALS);
-		for (i = 0; i < count; i++)
+		for (u32 i = 0; i < count; i++)
 		{
 			b_portal P;
 			fs->r(&P, sizeof(P));
diff --git a/src/Layers/xrRenderPC_R2/r2_rendertarget.cpp b/src/Layers/xrRenderPC_R2/r2_rendertarget.cpp
index f55c506..39615de 100644
--- a/src/Layers/xrRenderPC_R2/r2_rendertarget.cpp
+++ b/src/Layers/xrRenderPC_R2/r2_rendertarget.cpp
@@ -247,6 +247,8 @@ CRenderTarget::CRenderTarget()
 	b_gasmask_drops = xr_new<CBlender_gasmask_drops>();
 	b_gasmask_dudv = xr_new<CBlender_gasmask_dudv>();
 	b_nightvision = xr_new<CBlender_nightvision>();
+	b_fakescope = xr_new<CBlender_fakescope>(); //crookr
+	b_heatvision = xr_new<CBlender_heatvision>(); //--DSR-- HeatVision
 	b_lut = xr_new<CBlender_lut>();
 	b_smaa = xr_new<CBlender_smaa>();
 
@@ -288,6 +290,11 @@ CRenderTarget::CRenderTarget()
 		rt_secondVP.create(r2_RT_secondVP, w, h, D3DFMT_A8R8G8B8); //--#SM+#-- +SecondVP+
 		rt_ui_pda.create(r2_RT_ui, w, h, D3DFMT_A8R8G8B8);
 
+		rt_fakescope.create(r2_RT_scopert, w, h, D3DFMT_A8R8G8B8, 1); //crookr fakescope
+		
+		//--DSR-- HeatVision_start
+		rt_Heat.create(r2_RT_heat, w, h, D3DFMT_A8R8G8B8, 1);
+		//--DSR-- HeatVision_end
 
 		// RT Blur
 		rt_blur_h_2.create(r2_RT_blur_h_2, u32(w/2), u32(h/2), D3DFMT_A8R8G8B8);
@@ -312,6 +319,8 @@ CRenderTarget::CRenderTarget()
 		//	temp: for higher quality blends
 		if (RImplementation.o.advancedpp)
 			rt_Generic_2.create(r2_RT_generic2, w, h, D3DFMT_A16B16G16R16F);
+
+		rt_Generic_PingPong.create("$user$generic_pingpong", w, h, D3DFMT_A8R8G8B8);
 	}
 
 	s_sunshafts.create(b_sunshafts, "r2\\sunshafts");
@@ -323,6 +332,8 @@ CRenderTarget::CRenderTarget()
 	s_gasmask_drops.create(b_gasmask_drops, "r2\\gasmask_drops");
 	s_gasmask_dudv.create(b_gasmask_dudv, "r2\\gasmask_dudv");
 	s_nightvision.create(b_nightvision, "r2\\nightvision");
+	s_fakescope.create(b_fakescope, "r2\\fakescope"); //crookr
+	s_heatvision.create(b_heatvision, "r2\\heatvision"); //--DSR-- HeatVision
 	s_lut.create(b_lut, "r2\\lut");	
 	// OCCLUSION
 	s_occq.create(b_occq, "r2\\occq");
@@ -758,6 +769,8 @@ CRenderTarget::~CRenderTarget()
 	xr_delete(b_gasmask_drops);
 	xr_delete(b_gasmask_dudv);
 	xr_delete(b_nightvision);
+	xr_delete(b_fakescope); //crookr
+	xr_delete(b_heatvision); //--DSR-- HeatVision
 	xr_delete(b_lut);	
 	xr_delete(b_smaa);
 
diff --git a/src/Layers/xrRenderPC_R2/r2_rendertarget.h b/src/Layers/xrRenderPC_R2/r2_rendertarget.h
index 727029d..a4a3b86 100644
--- a/src/Layers/xrRenderPC_R2/r2_rendertarget.h
+++ b/src/Layers/xrRenderPC_R2/r2_rendertarget.h
@@ -39,6 +39,8 @@ public:
 	IBlender* b_gasmask_drops;
 	IBlender* b_gasmask_dudv;
 	IBlender* b_nightvision;
+	IBlender* b_fakescope; //crookr
+	IBlender* b_heatvision; //--DSR-- HeatVision
 	IBlender* b_lut;
 	
 	IBlender* b_smaa;	
@@ -68,7 +70,11 @@ public:
 	ref_rt rt_secondVP;		// 32bit		(r,g,b,a) --//#SM+#-- +SecondVP+
 	ref_rt rt_ui_pda;
 
+	ref_rt rt_fakescope; //crookr
+	ref_rt rt_Generic_PingPong;
+
 	ref_rt rt_dof;
+	ref_rt rt_Heat; //--DSR-- HeatVision
 	
 	ref_rt rt_blur_h_2;
 	ref_rt rt_blur_2;
@@ -122,6 +128,8 @@ private:
 	ref_shader s_gasmask_drops;
 	ref_shader s_gasmask_dudv;
 	ref_shader s_nightvision;
+	ref_shader s_fakescope; //crookr
+	ref_shader s_heatvision; //--DSR-- HeatVision
 
 	ref_shader s_blur;	
 	ref_shader s_dof;
@@ -260,6 +268,8 @@ public:
 	void phase_gasmask_drops();
 	void phase_gasmask_dudv();
 	void phase_nightvision();
+	void phase_fakescope(); //crookr
+	void phase_heatvision(); //--DSR-- HeatVision
 	void phase_lut();	
 	void phase_smaa();
 		
diff --git a/src/Layers/xrRenderPC_R2/r2_rendertarget_phase_bloom.cpp b/src/Layers/xrRenderPC_R2/r2_rendertarget_phase_bloom.cpp
index 3000703..aa3fc6f 100644
--- a/src/Layers/xrRenderPC_R2/r2_rendertarget_phase_bloom.cpp
+++ b/src/Layers/xrRenderPC_R2/r2_rendertarget_phase_bloom.cpp
@@ -42,8 +42,8 @@ void CalcGauss_k7(
 	// calculate
 	float mag = 0;
 	for (int i = -7; i <= 0; i++) W[-i] = expf(-float(i * i) / (2 * r * r)); // weight
-	for (i = 0; i < 8; i++) mag += i ? 2 * W[i] : W[i]; // symmetrical weight
-	for (i = 0; i < 8; i++) W[i] = s_out * W[i] / mag;
+	for (int i = 0; i < 8; i++) mag += i ? 2 * W[i] : W[i]; // symmetrical weight
+	for (int i = 0; i < 8; i++) W[i] = s_out * W[i] / mag;
 
 	// W[0]=0, W[7]=-7
 	w0.set(W[1], W[2], W[3], W[4]); // -1, -2, -3, -4
diff --git a/src/Layers/xrRenderPC_R2/r2_rendertarget_phase_combine.cpp b/src/Layers/xrRenderPC_R2/r2_rendertarget_phase_combine.cpp
index bbec49c..443c2c0 100644
--- a/src/Layers/xrRenderPC_R2/r2_rendertarget_phase_combine.cpp
+++ b/src/Layers/xrRenderPC_R2/r2_rendertarget_phase_combine.cpp
@@ -276,6 +276,11 @@ void CRenderTarget::phase_combine()
 	if(ps_r2_nightvision > 0)
 		phase_nightvision();
 	
+	if (scope_fake_enabled)
+	{
+		phase_fakescope(); //crookr
+	}
+
     //SMAA
 	if (ps_smaa_quality)
 	{
diff --git a/src/Layers/xrRenderPC_R2/r2_types.h b/src/Layers/xrRenderPC_R2/r2_types.h
index 7033e17..3d3c50d 100644
--- a/src/Layers/xrRenderPC_R2/r2_types.h
+++ b/src/Layers/xrRenderPC_R2/r2_types.h
@@ -62,6 +62,9 @@
 #define		r2_RT_dof			"$user$dof"
 #define		r2_RT_ui			"$user$ui"
 
+#define		r2_RT_scopert		"$user$scopeRT" //crookr
+#define		r2_RT_heat			"$user$heat" //--DSR-- HeatVision
+
 #define		r2_RT_smaa_edgetex "$user$smaa_edgetex"
 #define		r2_RT_smaa_blendtex "$user$smaa_blendtex"
 
diff --git a/src/Layers/xrRenderPC_R2/vs2022/xrRender_R2.vcxproj b/src/Layers/xrRenderPC_R2/vs2022/xrRender_R2.vcxproj
new file mode 100644
index 0000000..c0e601c
--- /dev/null
+++ b/src/Layers/xrRenderPC_R2/vs2022/xrRender_R2.vcxproj
@@ -0,0 +1,541 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{963BA4E5-499A-454D-B002-1D5ECE0527A6}</ProjectGuid>
+    <RootNamespace>xrRender_R2</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R2_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>nvapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)x64\Release;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R2_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>nvapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)x64\Release;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R2_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>nvapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)x64\Release;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\..\Include\xrRender\animation_blend.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\animation_motion.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ApplicationRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ConsoleRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DebugRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DebugShader.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DrawUtils.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\EnvironmentRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\FactoryPtr.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\FontRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\Kinematics.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\KinematicsAnimated.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\LensFlareRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ObjectSpaceRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ParticleCustom.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\particles_systems_library_interface.hpp" />
+    <ClInclude Include="..\..\..\Include\xrRender\RainRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderDetailModel.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderDeviceRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderFactory.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderVisual.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\StatGraphRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\StatsRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ThunderboltDescRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ThunderboltRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UIRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UISequenceVideoItem.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UIShader.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\WallMarkArray.h" />
+    <ClInclude Include="..\..\xrRenderDX9\dx9R_Backend_Runtime.h" />
+    <ClInclude Include="..\..\xrRenderDX9\dx9r_constants_cache.h" />
+    <ClInclude Include="..\..\xrRender\Animation.h" />
+    <ClInclude Include="..\..\xrRender\AnimationKeyCalculate.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender_CLSID.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender_Recorder.h" />
+    <ClInclude Include="..\..\xrRender\Blender_BmmD.h" />
+    <ClInclude Include="..\..\xrRender\Blender_detail_still.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Editor_Selection.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Editor_Wire.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Lm(EbB).h" />
+    <ClInclude Include="..\..\xrRender\Blender_Model_EbB.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Particle.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Screen_SET.h" />
+    <ClInclude Include="..\..\xrRender\Blender_tree.h" />
+    <ClInclude Include="..\..\xrRender\ColorMapManager.h" />
+    <ClInclude Include="..\..\xrRender\D3DUtils.h" />
+    <ClInclude Include="..\..\xrRender\DetailManager.h" />
+    <ClInclude Include="..\..\xrRender\DetailModel.h" />
+    <ClInclude Include="..\..\xrRender\du_box.h" />
+    <ClInclude Include="..\..\xrRender\du_cone.h" />
+    <ClInclude Include="..\..\xrRender\du_cylinder.h" />
+    <ClInclude Include="..\..\xrRender\du_sphere.h" />
+    <ClInclude Include="..\..\xrRender\du_sphere_part.h" />
+    <ClInclude Include="..\..\xrRender\dxApplicationRender.h" />
+    <ClInclude Include="..\..\xrRender\dxConsoleRender.h" />
+    <ClInclude Include="..\..\xrRender\dxDebugRender.h" />
+    <ClInclude Include="..\..\xrRender\dxEnvironmentRender.h" />
+    <ClInclude Include="..\..\xrRender\dxFontRender.h" />
+    <ClInclude Include="..\..\xrRender\dxLensFlareRender.h" />
+    <ClInclude Include="..\..\xrRender\dxObjectSpaceRender.h" />
+    <ClInclude Include="..\..\xrRender\dxParticleCustom.h" />
+    <ClInclude Include="..\..\xrRender\dxRainRender.h" />
+    <ClInclude Include="..\..\xrRender\dxRenderDeviceRender.h" />
+    <ClInclude Include="..\..\xrRender\dxRenderFactory.h" />
+    <ClInclude Include="..\..\xrRender\dxStatGraphRender.h" />
+    <ClInclude Include="..\..\xrRender\dxStatsRender.h" />
+    <ClInclude Include="..\..\xrRender\dxThunderboltDescRender.h" />
+    <ClInclude Include="..\..\xrRender\dxThunderboltRender.h" />
+    <ClInclude Include="..\..\xrRender\dxUIRender.h" />
+    <ClInclude Include="..\..\xrRender\dxUISequenceVideoItem.h" />
+    <ClInclude Include="..\..\xrRender\dxUIShader.h" />
+    <ClInclude Include="..\..\xrRender\dxWallMarkArray.h" />
+    <ClInclude Include="..\..\xrRender\ETextureParams.h" />
+    <ClInclude Include="..\..\xrRender\FBasicVisual.h" />
+    <ClInclude Include="..\..\xrRender\FHierrarhyVisual.h" />
+    <ClInclude Include="..\..\xrRender\FLOD.h" />
+    <ClInclude Include="..\..\xrRender\FProgressive.h" />
+    <ClInclude Include="..\..\xrRender\FSkinned.h" />
+    <ClInclude Include="..\..\xrRender\FTreeVisual.h" />
+    <ClInclude Include="..\..\xrRender\FVF.h" />
+    <ClInclude Include="..\..\xrRender\FVisual.h" />
+    <ClInclude Include="..\..\xrRender\HOM.h" />
+    <ClInclude Include="..\..\xrRender\HW.h" />
+    <ClInclude Include="..\..\xrRender\HWCaps.h" />
+    <ClInclude Include="..\..\xrRender\IRenderDetailModel.h" />
+    <ClInclude Include="..\..\xrRender\KinematicAnimatedDefs.h" />
+    <ClInclude Include="..\..\xrRender\LightTrack.h" />
+    <ClInclude Include="..\..\xrRender\Light_DB.h" />
+    <ClInclude Include="..\..\xrRender\Light_Package.h" />
+    <ClInclude Include="..\..\xrRender\ModelPool.h" />
+    <ClInclude Include="..\..\xrRender\NvTriStrip.h" />
+    <ClInclude Include="..\..\xrRender\NvTriStripObjects.h" />
+    <ClInclude Include="..\..\xrRender\occRasterizer.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffect.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffectActions.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffectDef.h" />
+    <ClInclude Include="..\..\xrRender\ParticleGroup.h" />
+    <ClInclude Include="..\..\xrRender\PSLibrary.h" />
+    <ClInclude Include="..\..\xrRender\ResourceManager.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_hemi.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_Runtime.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_tree.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_xform.h" />
+    <ClInclude Include="..\..\xrRender\r_constants.h" />
+    <ClInclude Include="..\..\xrRender\r_constants_cache.h" />
+    <ClInclude Include="..\..\xrRender\R_DStreams.h" />
+    <ClInclude Include="..\..\xrRender\r_sun_cascades.h" />
+    <ClInclude Include="..\..\xrRender\r__dsgraph_structure.h" />
+    <ClInclude Include="..\..\xrRender\r__dsgraph_types.h" />
+    <ClInclude Include="..\..\xrRender\r__occlusion.h" />
+    <ClInclude Include="..\..\xrRender\r__pixel_calculator.h" />
+    <ClInclude Include="..\..\xrRender\r__sector.h" />
+    <ClInclude Include="..\..\xrRender\Shader.h" />
+    <ClInclude Include="..\..\xrRender\SH_Atomic.h" />
+    <ClInclude Include="..\..\xrRender\SH_Constant.h" />
+    <ClInclude Include="..\..\xrRender\SH_Matrix.h" />
+    <ClInclude Include="..\..\xrRender\SH_RT.h" />
+    <ClInclude Include="..\..\xrRender\SH_Texture.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonAnimated.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonCustom.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonX.h" />
+    <ClInclude Include="..\..\xrRender\stats_manager.h" />
+    <ClInclude Include="..\..\xrRender\TextureDescrManager.h" />
+    <ClInclude Include="..\..\xrRender\tga.h" />
+    <ClInclude Include="..\..\xrRender\tss.h" />
+    <ClInclude Include="..\..\xrRender\tss_def.h" />
+    <ClInclude Include="..\..\xrRender\uber_deffer.h" />
+    <ClInclude Include="..\..\xrRender\VertexCache.h" />
+    <ClInclude Include="..\..\xrRender\WallmarksEngine.h" />
+    <ClInclude Include="..\..\xrRender\xrD3DDefs.h" />
+    <ClInclude Include="..\..\xrRender\xrRender_console.h" />
+    <ClInclude Include="..\..\xrRender\xrStripify.h" />
+    <ClInclude Include="..\..\xrRender\xr_effgamma.h" />
+    <ClInclude Include="..\blender_bloom_build.h" />
+    <ClInclude Include="..\blender_blur.h" />
+    <ClInclude Include="..\blender_combine.h" />
+    <ClInclude Include="..\blender_deffer_aref.h" />
+    <ClInclude Include="..\blender_deffer_flat.h" />
+    <ClInclude Include="..\blender_deffer_model.h" />
+    <ClInclude Include="..\blender_dof.h" />
+    <ClInclude Include="..\blender_lut.h" />
+    <ClInclude Include="..\blender_nightvision.h" />
+    <ClInclude Include="..\blender_gasmask_drops.h" />
+    <ClInclude Include="..\blender_gasmask_dudv.h" />
+    <ClInclude Include="..\blender_light_direct.h" />
+    <ClInclude Include="..\blender_light_direct_cascade.h" />
+    <ClInclude Include="..\blender_light_mask.h" />
+    <ClInclude Include="..\blender_light_occq.h" />
+    <ClInclude Include="..\blender_light_point.h" />
+    <ClInclude Include="..\blender_light_reflected.h" />
+    <ClInclude Include="..\blender_light_spot.h" />
+    <ClInclude Include="..\blender_luminance.h" />
+    <ClInclude Include="..\blender_pp_bloom.h" />
+    <ClInclude Include="..\blender_smaa.h" />
+    <ClInclude Include="..\blender_ssao.h" />
+    <ClInclude Include="..\blender_ss_sunshafts.h" />
+    <ClInclude Include="..\..\..\xrEngine\cl_intersect.h" />
+    <ClInclude Include="..\..\xrRender\DetailFormat.h" />
+    <ClInclude Include="..\..\xrRender\light.h" />
+    <ClInclude Include="..\light_gi.h" />
+    <ClInclude Include="..\Light_Render_Direct.h" />
+    <ClInclude Include="..\light_smapvis.h" />
+    <ClInclude Include="..\r2.h" />
+    <ClInclude Include="..\r2_rendertarget.h" />
+    <ClInclude Include="..\r2_rendertarget_wallmarks.h" />
+    <ClInclude Include="..\r2_types.h" />
+    <ClInclude Include="..\SMAP_Allocator.h" />
+    <ClInclude Include="..\stdafx.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\..\xrEngine\ai_script_lua_debug.cpp" />
+    <ClCompile Include="..\..\..\xrEngine\ai_script_lua_extension.cpp" />
+    <ClCompile Include="..\..\xrRenderDX9\dx9r_constants_cache.cpp" />
+    <ClCompile Include="..\..\xrRender\Animation.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender_Palette.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender_Recorder.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_BmmD.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_detail_still.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Editor_Selection.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Editor_Wire.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Lm(EbB).cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Model_EbB.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Particle.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Recorder_R2.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Recorder_StandartBinding.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Screen_SET.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_tree.cpp" />
+    <ClCompile Include="..\..\xrRender\ColorMapManager.cpp" />
+    <ClCompile Include="..\..\xrRender\D3DUtils.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_CACHE.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_Decompress.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_soft.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_VS.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailModel.cpp" />
+    <ClCompile Include="..\..\xrRender\du_box.cpp" />
+    <ClCompile Include="..\..\xrRender\du_cone.cpp" />
+    <ClCompile Include="..\..\xrRender\du_cylinder.cpp" />
+    <ClCompile Include="..\..\xrRender\du_sphere.cpp" />
+    <ClCompile Include="..\..\xrRender\du_sphere_part.cpp" />
+    <ClCompile Include="..\..\xrRender\dxApplicationRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxConsoleRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxDebugRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxEnvironmentRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxFontRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxLensFlareRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxObjectSpaceRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxParticleCustom.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRainRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRenderDeviceRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRenderFactory.cpp" />
+    <ClCompile Include="..\..\xrRender\dxStatGraphRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxStatsRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxThunderboltDescRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxThunderboltRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUIRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUISequenceVideoItem.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUIShader.cpp" />
+    <ClCompile Include="..\..\xrRender\dxWallMarkArray.cpp" />
+    <ClCompile Include="..\..\xrRender\ETextureParams.cpp" />
+    <ClCompile Include="..\..\xrRender\FBasicVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FHierrarhyVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FLOD.cpp" />
+    <ClCompile Include="..\..\xrRender\FProgressive.cpp" />
+    <ClCompile Include="..\..\xrRender\FSkinned.cpp" />
+    <ClCompile Include="..\..\xrRender\FTreeVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\HOM.cpp" />
+    <ClCompile Include="..\..\xrRender\HW.cpp" />
+    <ClCompile Include="..\..\xrRender\HWCaps.cpp" />
+    <ClCompile Include="..\..\xrRender\light.cpp" />
+    <ClCompile Include="..\..\xrRender\LightTrack.cpp" />
+    <ClCompile Include="..\..\xrRender\Light_DB.cpp" />
+    <ClCompile Include="..\..\xrRender\Light_Package.cpp" />
+    <ClCompile Include="..\..\xrRender\ModelPool.cpp" />
+    <ClCompile Include="..\..\xrRender\NvTriStrip.cpp" />
+    <ClCompile Include="..\..\xrRender\NvTriStripObjects.cpp" />
+    <ClCompile Include="..\..\xrRender\occRasterizer.cpp" />
+    <ClCompile Include="..\..\xrRender\occRasterizer_core.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffect.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffectActions.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffectDef.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleGroup.cpp" />
+    <ClCompile Include="..\..\xrRender\PSLibrary.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_blur.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_dof.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_lut.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_nightvision.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_gasmask_drops.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_gasmask_dudv.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_pp_bloom.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_smaa.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_sunshafts.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Loader.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Reset.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Resources.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Scripting.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_DBG.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_hemi.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_Runtime.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_tree.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_xform.cpp" />
+    <ClCompile Include="..\..\xrRender\r_constants.cpp" />
+    <ClCompile Include="..\..\xrRender\R_DStreams.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_build.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_render.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_render_lods.cpp" />
+    <ClCompile Include="..\..\xrRender\r__occlusion.cpp" />
+    <ClCompile Include="..\..\xrRender\r__pixel_calculator.cpp" />
+    <ClCompile Include="..\..\xrRender\r__screenshot.cpp" />
+    <ClCompile Include="..\..\xrRender\r__sector.cpp" />
+    <ClCompile Include="..\..\xrRender\r__sector_traversal.cpp" />
+    <ClCompile Include="..\..\xrRender\Shader.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Atomic.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Constant.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Matrix.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_RT.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Texture.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonAnimated.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonCustom.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonRigid.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonX.cpp" />
+    <ClCompile Include="..\..\xrRender\stats_manager.cpp" />
+    <ClCompile Include="..\..\xrRender\Texture.cpp" />
+    <ClCompile Include="..\..\xrRender\TextureDescrManager.cpp" />
+    <ClCompile Include="..\..\xrRender\tga.cpp" />
+    <ClCompile Include="..\..\xrRender\tss_def.cpp" />
+    <ClCompile Include="..\..\xrRender\uber_deffer.cpp" />
+    <ClCompile Include="..\..\xrRender\VertexCache.cpp" />
+    <ClCompile Include="..\..\xrRender\WallmarksEngine.cpp" />
+    <ClCompile Include="..\..\xrRender\xrRender_console.cpp" />
+    <ClCompile Include="..\..\xrRender\xrStripify.cpp" />
+    <ClCompile Include="..\..\xrRender\xr_effgamma.cpp" />
+    <ClCompile Include="..\blender_bloom_build.cpp" />
+    <ClCompile Include="..\blender_blur.cpp" />
+    <ClCompile Include="..\blender_combine.cpp" />
+    <ClCompile Include="..\blender_deffer_aref.cpp" />
+    <ClCompile Include="..\blender_deffer_flat.cpp" />
+    <ClCompile Include="..\blender_deffer_model.cpp" />
+    <ClCompile Include="..\blender_dof.cpp" />
+    <ClCompile Include="..\blender_lut.cpp" />
+    <ClCompile Include="..\blender_nightvision.cpp" />
+    <ClCompile Include="..\blender_gasmask_drops.cpp" />
+    <ClCompile Include="..\blender_gasmask_dudv.cpp" />
+    <ClCompile Include="..\blender_light_direct.cpp" />
+    <ClCompile Include="..\blender_light_direct_cascade.cpp" />
+    <ClCompile Include="..\blender_light_mask.cpp" />
+    <ClCompile Include="..\blender_light_occq.cpp" />
+    <ClCompile Include="..\blender_light_point.cpp" />
+    <ClCompile Include="..\blender_light_reflected.cpp" />
+    <ClCompile Include="..\blender_light_spot.cpp" />
+    <ClCompile Include="..\blender_luminance.cpp" />
+    <ClCompile Include="..\blender_pp_bloom.cpp" />
+    <ClCompile Include="..\blender_smaa.cpp" />
+    <ClCompile Include="..\blender_ssao.cpp" />
+    <ClCompile Include="..\blender_ss_sunshafts.cpp" />
+    <ClCompile Include="..\light_GI.cpp" />
+    <ClCompile Include="..\Light_Render_Direct.cpp" />
+    <ClCompile Include="..\Light_Render_Direct_ComputeXFS.cpp" />
+    <ClCompile Include="..\light_smapvis.cpp" />
+    <ClCompile Include="..\light_vis.cpp" />
+    <ClCompile Include="..\r2.cpp" />
+    <ClCompile Include="..\r2_blenders.cpp" />
+    <ClCompile Include="..\r2_loader.cpp" />
+    <ClCompile Include="..\r2_rendertarget.cpp" />
+    <ClCompile Include="..\r2_rendertarget_accum_direct.cpp" />
+    <ClCompile Include="..\r2_rendertarget_accum_omnipart_geom.cpp" />
+    <ClCompile Include="..\r2_rendertarget_accum_point.cpp" />
+    <ClCompile Include="..\r2_rendertarget_accum_point_geom.cpp" />
+    <ClCompile Include="..\r2_rendertarget_accum_reflected.cpp" />
+    <ClCompile Include="..\r2_rendertarget_accum_spot.cpp" />
+    <ClCompile Include="..\r2_rendertarget_accum_spot_geom.cpp" />
+    <ClCompile Include="..\r2_rendertarget_draw_volume.cpp" />
+    <ClCompile Include="..\r2_rendertarget_enable_scissor.cpp" />
+    <ClCompile Include="..\r2_rendertarget_phase_accumulator.cpp" />
+    <ClCompile Include="..\r2_rendertarget_phase_bloom.cpp" />
+    <ClCompile Include="..\r2_rendertarget_phase_combine.cpp" />
+    <ClCompile Include="..\r2_rendertarget_phase_luminance.cpp" />
+    <ClCompile Include="..\r2_rendertarget_phase_occq.cpp" />
+    <ClCompile Include="..\r2_rendertarget_phase_PP.cpp" />
+    <ClCompile Include="..\r2_rendertarget_phase_scene.cpp" />
+    <ClCompile Include="..\r2_rendertarget_phase_smap_D.cpp" />
+    <ClCompile Include="..\r2_rendertarget_phase_smap_S.cpp" />
+    <ClCompile Include="..\r2_rendertarget_phase_ssao.cpp" />
+    <ClCompile Include="..\r2_R_calculate.cpp" />
+    <ClCompile Include="..\r2_R_lights.cpp" />
+    <ClCompile Include="..\r2_R_render.cpp" />
+    <ClCompile Include="..\r2_R_sun.cpp" />
+    <ClCompile Include="..\r2_sector_detect.cpp" />
+    <ClCompile Include="..\r2_test_hw.cpp" />
+    <ClCompile Include="..\stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\xrRender_R2.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)xrCPU_Pipe\vs2022\xrCPU_Pipe.vcxproj">
+      <Project>{ca0649dd-d089-423a-981c-46b57a884eb9}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrParticles\vs2022\xrParticles.vcxproj">
+      <Project>{94a1c366-3d19-48e6-8170-4adc2e70df97}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)Layers\xrAPI\vs2022\xrAPI.vcxproj">
+      <Project>{1daec516-e52c-4a3c-a4da-ae3553e6e0f8}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/Layers/xrRenderPC_R2/vs2022/xrRender_R2.vcxproj.filters b/src/Layers/xrRenderPC_R2/vs2022/xrRender_R2.vcxproj.filters
new file mode 100644
index 0000000..e36b5de
--- /dev/null
+++ b/src/Layers/xrRenderPC_R2/vs2022/xrRender_R2.vcxproj.filters
@@ -0,0 +1,1233 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Kernel">
+      <UniqueIdentifier>{a51ed64d-8e56-4d71-abea-3060f5d9e3c0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core">
+      <UniqueIdentifier>{439c31f6-3e16-44fb-b8ed-199cfbb71813}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Details">
+      <UniqueIdentifier>{344e2441-a9a8-4117-9694-95ebe5bf0b16}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Stripifier">
+      <UniqueIdentifier>{038140d7-515b-482b-af73-75646e6a4de0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Lights">
+      <UniqueIdentifier>{4793b3f9-2f36-4910-93a8-113fb6608ff0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Glows">
+      <UniqueIdentifier>{e0ae9ee9-4bce-4242-b2d6-723f2fe5203c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Wallmarks">
+      <UniqueIdentifier>{aafe15ce-aad2-4bbd-8fa0-132006e0ef6c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Shading templates">
+      <UniqueIdentifier>{62a00cc7-2db9-438d-b84b-3016c647523b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Shading templates\R1">
+      <UniqueIdentifier>{00ec9ceb-c0ef-45d6-b1d3-88294881a041}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Models">
+      <UniqueIdentifier>{265a0cd4-f150-4bc9-81df-a45405059083}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Models\Visuals">
+      <UniqueIdentifier>{dde972fa-cd29-40f9-a862-417c9e61d037}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility">
+      <UniqueIdentifier>{d3fa8b42-3bab-4a7b-9590-db689ad8ed6e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility\Sector/Portal">
+      <UniqueIdentifier>{a8bdb93d-2d1c-4b8e-af27-829b011a134f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility\HOM Occlusion">
+      <UniqueIdentifier>{b19e237d-5eec-40a4-9962-3ac1ea52f9c0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core_Target">
+      <UniqueIdentifier>{29a85803-3f7b-4083-ae5d-f5e0fe981b79}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core_Target\ColorMap">
+      <UniqueIdentifier>{f330c03c-e9fc-4160-85ff-28560f405afe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored">
+      <UniqueIdentifier>{587e902d-66f6-49a4-a5d2-a497a1197372}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\HW">
+      <UniqueIdentifier>{b8f21539-a903-414f-b0b2-03fa30d30ef2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Backend">
+      <UniqueIdentifier>{bcbbf091-ffb7-4cdf-938e-fc7c0ecdeb0d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D">
+      <UniqueIdentifier>{efa0c1d4-7a2b-4031-80c2-30b1c2ed02f8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders">
+      <UniqueIdentifier>{fb60f0a9-bc3d-4a9f-b1ce-d65046bb2d2f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Resources">
+      <UniqueIdentifier>{e8655ea5-2e95-459e-ae9f-1ff51f999bc1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Resources\dx9_R_shader">
+      <UniqueIdentifier>{e3674591-33c3-4df5-baa0-7f4bdc31cae1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\ShaderManager">
+      <UniqueIdentifier>{f2429e16-2b32-4ed2-8828-39ae85a7974d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Blender">
+      <UniqueIdentifier>{b07ea356-5d83-4c65-a67b-1290c493cb68}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\DebugDraw">
+      <UniqueIdentifier>{1cda8ad5-51e4-42ef-8634-6d140e2e44cd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Visuals">
+      <UniqueIdentifier>{6ba4970f-ee23-4d83-9dea-837fe4f43392}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Visuals\Skeleton">
+      <UniqueIdentifier>{03e91b32-39d7-4f8e-981d-5b3ce07b74be}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Gamma">
+      <UniqueIdentifier>{432f159c-f346-4ed5-a927-4c88d68e179c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Interfaces">
+      <UniqueIdentifier>{0c303bb7-4065-4aa3-9b55-aff83970241b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\stats_manager">
+      <UniqueIdentifier>{39da3398-290f-4e63-a57e-f621bc23b0b0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations">
+      <UniqueIdentifier>{afcb6596-3146-4aff-bd85-c1b8ed4e3f1a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RenderFactory">
+      <UniqueIdentifier>{666e1d0a-9bd0-44fa-a402-cce51c34bfc2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\LensFlare">
+      <UniqueIdentifier>{ff32e41c-def1-48da-8ed3-bbec449f48fa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\FactoryPtr">
+      <UniqueIdentifier>{1c48aca4-e371-4968-83ef-8f28085aa575}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ApplicationRender">
+      <UniqueIdentifier>{71910a76-f8fd-486c-94cc-581e567ef15f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RainRender">
+      <UniqueIdentifier>{528b5203-f36f-4523-8265-056946861d77}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ThunderboltRender">
+      <UniqueIdentifier>{5b90fbc6-f737-4db5-af8b-aba7c1a592e4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\EnvironmentRender">
+      <UniqueIdentifier>{ccd599e3-f117-4ddd-af5a-dc6d299fb889}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RenderDeviceRender">
+      <UniqueIdentifier>{0c1c35a4-f4cd-4890-9856-0366479e2bcf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ConsoleRender">
+      <UniqueIdentifier>{331a9ab4-feca-4f1d-8d94-1c1ca1d5639f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ObjectSpaceRender">
+      <UniqueIdentifier>{b90449f5-b1cc-4f28-ab0a-296a6dc364bb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\FontRender">
+      <UniqueIdentifier>{7758a04e-f21a-4151-9ef3-faa8c678ee68}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\WallMarkArray">
+      <UniqueIdentifier>{316d97f2-7ec1-4450-97d6-4c7183304694}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\StatGraphRender">
+      <UniqueIdentifier>{216e5078-cd0b-46d5-9dc0-1679fdf89816}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ThunderboltDescRender">
+      <UniqueIdentifier>{22595237-844c-4760-8674-9e23f6e7899d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\StatsRender">
+      <UniqueIdentifier>{1e333518-6243-49fb-91d8-64d033c9365c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\Debug">
+      <UniqueIdentifier>{45cad128-d7a5-4099-bcbb-2d79b3553af7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\Debug\DebugRender">
+      <UniqueIdentifier>{14df8674-1067-4998-a470-187a5f3ac2a1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI">
+      <UniqueIdentifier>{5054e2bc-1256-4afe-a525-19244eb688fd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UIRender">
+      <UniqueIdentifier>{0ac82fb7-e1cb-48cd-aed2-da8da1f3f01c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UIShader">
+      <UniqueIdentifier>{ee0c57b5-63d3-44e2-8eb5-9ba0d7d9891c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UISequenceVideoItem">
+      <UniqueIdentifier>{7b446f08-e762-4e42-9b67-0dd22dbfc8b4}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="stdafx.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xrD3DDefs.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xrRender_console.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\PSLibrary.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="r2.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="r2_types.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__dsgraph_structure.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__dsgraph_types.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__occlusion.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__pixel_calculator.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r_sun_cascades.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\DetailManager.h">
+      <Filter>Details</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\DetailModel.h">
+      <Filter>Details</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\NvTriStrip.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\NvTriStripObjects.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\VertexCache.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xrStripify.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Light_DB.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="light_gi.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Light_Package.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="Light_Render_Direct.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="light_smapvis.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\LightTrack.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="SMAP_Allocator.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\WallmarksEngine.h">
+      <Filter>Wallmarks</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_bloom_build.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_BmmD.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_combine.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_deffer_aref.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_deffer_flat.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_deffer_model.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Editor_Selection.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Editor_Wire.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_direct.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_direct_cascade.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_mask.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_occq.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_point.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_reflected.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_spot.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_luminance.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Particle.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_ssao.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\uber_deffer.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_detail_still.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Lm(EbB).h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Model_EbB.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Screen_SET.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_tree.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ModelPool.h">
+      <Filter>Models</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FLOD.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FProgressive.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FSkinned.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FTreeVisual.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FVisual.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleEffect.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleEffectDef.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleGroup.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__sector.h">
+      <Filter>Visibility\Sector/Portal</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\HOM.h">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\occRasterizer.h">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClInclude>
+    <ClInclude Include="r2_rendertarget.h">
+      <Filter>Core_Target</Filter>
+    </ClInclude>
+    <ClInclude Include="r2_rendertarget_wallmarks.h">
+      <Filter>Core_Target</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ColorMapManager.h">
+      <Filter>Core_Target\ColorMap</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\HW.h">
+      <Filter>Refactored\HW</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\HWCaps.h">
+      <Filter>Refactored\HW</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX9\dx9R_Backend_Runtime.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FVF.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_hemi.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_Runtime.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_tree.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_xform.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_DStreams.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r_constants.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Atomic.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Constant.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Matrix.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_RT.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Texture.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Shader.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX9\dx9r_constants_cache.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources\dx9_R_shader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r_constants_cache.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources\dx9_R_shader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ETextureParams.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ResourceManager.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\TextureDescrManager.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\blenders\Blender.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\blenders\Blender_CLSID.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\blenders\Blender_Recorder.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\tss.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\tss_def.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\D3DUtils.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\DrawUtils.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_box.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_cone.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_cylinder.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_sphere.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_sphere_part.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxParticleCustom.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FBasicVisual.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FHierrarhyVisual.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ParticleCustom.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderVisual.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Animation.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\animation_blend.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\animation_motion.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\AnimationKeyCalculate.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\KinematicAnimatedDefs.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\Kinematics.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\KinematicsAnimated.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SkeletonAnimated.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SkeletonCustom.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SkeletonX.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xr_effgamma.h">
+      <Filter>Refactored\Execution &amp; 3D\Gamma</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\IRenderDetailModel.h">
+      <Filter>Refactored\Interfaces</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderDetailModel.h">
+      <Filter>Refactored\Interfaces</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\stats_manager.h">
+      <Filter>Refactored\stats_manager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxRenderFactory.h">
+      <Filter>Interfase implementations\RenderFactory</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderFactory.h">
+      <Filter>Interfase implementations\RenderFactory</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxLensFlareRender.h">
+      <Filter>Interfase implementations\LensFlare</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\LensFlareRender.h">
+      <Filter>Interfase implementations\LensFlare</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\FactoryPtr.h">
+      <Filter>Interfase implementations\FactoryPtr</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ApplicationRender.h">
+      <Filter>Interfase implementations\ApplicationRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxApplicationRender.h">
+      <Filter>Interfase implementations\ApplicationRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxRainRender.h">
+      <Filter>Interfase implementations\RainRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RainRender.h">
+      <Filter>Interfase implementations\RainRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxThunderboltRender.h">
+      <Filter>Interfase implementations\ThunderboltRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ThunderboltRender.h">
+      <Filter>Interfase implementations\ThunderboltRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxEnvironmentRender.h">
+      <Filter>Interfase implementations\EnvironmentRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\EnvironmentRender.h">
+      <Filter>Interfase implementations\EnvironmentRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxRenderDeviceRender.h">
+      <Filter>Interfase implementations\RenderDeviceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderDeviceRender.h">
+      <Filter>Interfase implementations\RenderDeviceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ConsoleRender.h">
+      <Filter>Interfase implementations\ConsoleRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxConsoleRender.h">
+      <Filter>Interfase implementations\ConsoleRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxObjectSpaceRender.h">
+      <Filter>Interfase implementations\ObjectSpaceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ObjectSpaceRender.h">
+      <Filter>Interfase implementations\ObjectSpaceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxFontRender.h">
+      <Filter>Interfase implementations\FontRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\FontRender.h">
+      <Filter>Interfase implementations\FontRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxWallMarkArray.h">
+      <Filter>Interfase implementations\WallMarkArray</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\WallMarkArray.h">
+      <Filter>Interfase implementations\WallMarkArray</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxStatGraphRender.h">
+      <Filter>Interfase implementations\StatGraphRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\StatGraphRender.h">
+      <Filter>Interfase implementations\StatGraphRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxThunderboltDescRender.h">
+      <Filter>Interfase implementations\ThunderboltDescRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ThunderboltDescRender.h">
+      <Filter>Interfase implementations\ThunderboltDescRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxStatsRender.h">
+      <Filter>Interfase implementations\StatsRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\StatsRender.h">
+      <Filter>Interfase implementations\StatsRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\DebugShader.h">
+      <Filter>Interfase implementations\Debug</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\DebugRender.h">
+      <Filter>Interfase implementations\Debug\DebugRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxDebugRender.h">
+      <Filter>Interfase implementations\Debug\DebugRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxUIRender.h">
+      <Filter>Interfase implementations\UI\UIRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\UIRender.h">
+      <Filter>Interfase implementations\UI\UIRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxUIShader.h">
+      <Filter>Interfase implementations\UI\UIShader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\UIShader.h">
+      <Filter>Interfase implementations\UI\UIShader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxUISequenceVideoItem.h">
+      <Filter>Interfase implementations\UI\UISequenceVideoItem</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\UISequenceVideoItem.h">
+      <Filter>Interfase implementations\UI\UISequenceVideoItem</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleEffectActions.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_nightvision.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_gasmask_dudv.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_gasmask_drops.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_ss_sunshafts.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\tga.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\particles_systems_library_interface.hpp">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\xrEngine\cl_intersect.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\DetailFormat.h">
+      <Filter>Details</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\light.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_dof.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_blur.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_pp_bloom.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_lut.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_smaa.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="stdafx.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\xrRender_console.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="xrRender_R2.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\PSLibrary.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_blenders.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_loader.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_R_calculate.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_R_lights.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_R_render.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_R_sun.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_sector_detect.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_test_hw.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__dsgraph_build.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__dsgraph_render.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__dsgraph_render_lods.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__occlusion.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__pixel_calculator.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__screenshot.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Texture.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\tga.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_CACHE.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_Decompress.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_soft.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_VS.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailModel.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\NvTriStrip.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\NvTriStripObjects.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\VertexCache.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\xrStripify.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\light.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Light_DB.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="light_GI.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Light_Package.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="Light_Render_Direct.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="Light_Render_Direct_ComputeXFS.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="light_smapvis.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="light_vis.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\LightTrack.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\WallmarksEngine.cpp">
+      <Filter>Wallmarks</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_bloom_build.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_BmmD.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_combine.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_deffer_aref.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_deffer_flat.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_deffer_model.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Editor_Selection.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Editor_Wire.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_direct.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_direct_cascade.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_mask.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_occq.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_point.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_reflected.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_spot.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_luminance.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Particle.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_ssao.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\uber_deffer.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_detail_still.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Lm(EbB).cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Model_EbB.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Screen_SET.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_tree.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ModelPool.cpp">
+      <Filter>Models</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FLOD.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FProgressive.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FSkinned.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FTreeVisual.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FVisual.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleEffect.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleEffectDef.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleGroup.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__sector.cpp">
+      <Filter>Visibility\Sector/Portal</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__sector_traversal.cpp">
+      <Filter>Visibility\Sector/Portal</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\HOM.cpp">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\occRasterizer.cpp">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\occRasterizer_core.cpp">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_accum_direct.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_accum_omnipart_geom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_accum_point.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_accum_point_geom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_accum_reflected.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_accum_spot.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_accum_spot_geom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_draw_volume.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_enable_scissor.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_phase_accumulator.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_phase_bloom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_phase_combine.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_phase_luminance.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_phase_occq.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_phase_PP.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_phase_scene.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_phase_smap_D.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_phase_smap_S.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_rendertarget_phase_ssao.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ColorMapManager.cpp">
+      <Filter>Core_Target\ColorMap</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\HW.cpp">
+      <Filter>Refactored\HW</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\HWCaps.cpp">
+      <Filter>Refactored\HW</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_DBG.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_hemi.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_Runtime.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_tree.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_xform.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_DStreams.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r_constants.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SH_Atomic.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SH_Constant.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SH_Matrix.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SH_RT.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SH_Texture.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Shader.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX9\dx9r_constants_cache.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources\dx9_R_shader</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\xrEngine\ai_script_lua_debug.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\xrEngine\ai_script_lua_extension.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ETextureParams.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ResourceManager.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ResourceManager_Loader.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ResourceManager_Reset.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ResourceManager_Resources.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ResourceManager_Scripting.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\TextureDescrManager.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\blenders\Blender.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\blenders\Blender_Palette.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\blenders\Blender_Recorder.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Recorder_R2.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Recorder_StandartBinding.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\tss_def.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\D3DUtils.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_box.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_cone.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_cylinder.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_sphere.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_sphere_part.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxParticleCustom.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FBasicVisual.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FHierrarhyVisual.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Animation.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonAnimated.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonCustom.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonRigid.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonX.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\xr_effgamma.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Gamma</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\stats_manager.cpp">
+      <Filter>Refactored\stats_manager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxRenderFactory.cpp">
+      <Filter>Interfase implementations\RenderFactory</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxLensFlareRender.cpp">
+      <Filter>Interfase implementations\LensFlare</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxApplicationRender.cpp">
+      <Filter>Interfase implementations\ApplicationRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxRainRender.cpp">
+      <Filter>Interfase implementations\RainRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxThunderboltRender.cpp">
+      <Filter>Interfase implementations\ThunderboltRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxEnvironmentRender.cpp">
+      <Filter>Interfase implementations\EnvironmentRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxRenderDeviceRender.cpp">
+      <Filter>Interfase implementations\RenderDeviceRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxConsoleRender.cpp">
+      <Filter>Interfase implementations\ConsoleRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxObjectSpaceRender.cpp">
+      <Filter>Interfase implementations\ObjectSpaceRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxFontRender.cpp">
+      <Filter>Interfase implementations\FontRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxWallMarkArray.cpp">
+      <Filter>Interfase implementations\WallMarkArray</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxStatGraphRender.cpp">
+      <Filter>Interfase implementations\StatGraphRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxThunderboltDescRender.cpp">
+      <Filter>Interfase implementations\ThunderboltDescRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxStatsRender.cpp">
+      <Filter>Interfase implementations\StatsRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxDebugRender.cpp">
+      <Filter>Interfase implementations\Debug\DebugRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxUIRender.cpp">
+      <Filter>Interfase implementations\UI\UIRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxUIShader.cpp">
+      <Filter>Interfase implementations\UI\UIShader</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxUISequenceVideoItem.cpp">
+      <Filter>Interfase implementations\UI\UISequenceVideoItem</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleEffectActions.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_nightvision.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_gasmask_dudv.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_gasmask_drops.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_ss_sunshafts.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_gasmask_drops.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_gasmask_dudv.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_nightvision.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_sunshafts.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_dof.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_dof.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_blur.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_blur.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_pp_bloom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_pp_bloom.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_lut.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_lut.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_smaa.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_smaa.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/Layers/xrRenderPC_R2/xrRender_R2.cpp b/src/Layers/xrRenderPC_R2/xrRender_R2.cpp
index 4e69099..0794147 100644
--- a/src/Layers/xrRenderPC_R2/xrRender_R2.cpp
+++ b/src/Layers/xrRenderPC_R2/xrRender_R2.cpp
@@ -18,9 +18,7 @@ BOOL DllMainXrRenderR2(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserv
 		::DU = &DUImpl;
 		//::vid_mode_token			= inited by HW;
 		UIRender = &UIRenderImpl;
-#ifdef DEBUG
-		DRender						= &DebugRenderImpl;
-#endif // DEBUG
+		DRender	= &DebugRenderImpl;
 		xrRender_initconsole();
 		break ;
 	case DLL_THREAD_ATTACH:
diff --git a/src/Layers/xrRenderPC_R3/blender_nightvision.cpp b/src/Layers/xrRenderPC_R3/blender_nightvision.cpp
index 1a5d5c6..6cecd9f 100644
--- a/src/Layers/xrRenderPC_R3/blender_nightvision.cpp
+++ b/src/Layers/xrRenderPC_R3/blender_nightvision.cpp
@@ -3,11 +3,22 @@
 #include "blender_nightvision.h"
 
 CBlender_nightvision::CBlender_nightvision() { description.CLS = 0; }
+CBlender_fakescope::CBlender_fakescope() { description.CLS = 0; } //crookr
+CBlender_heatvision::CBlender_heatvision() { description.CLS = 0; } //--DSR-- HeatVision
+
 
 CBlender_nightvision::~CBlender_nightvision()
 {
 }
 
+CBlender_fakescope::~CBlender_fakescope() //crookr
+{
+}
+
+CBlender_heatvision::~CBlender_heatvision() //--DSR-- HeatVision
+{
+}
+
 void CBlender_nightvision::Compile(CBlender_Compile& C)
 {
 	IBlender::Compile(C);
@@ -66,3 +77,44 @@ void CBlender_nightvision::Compile(CBlender_Compile& C)
 		break;		
 	}
 }
+
+void CBlender_fakescope::Compile(CBlender_Compile& C) //crookr
+{
+	IBlender::Compile(C);
+
+	C.r_Pass("stub_screen_space", "fakescope", FALSE, FALSE, FALSE);
+	C.r_dx10Texture("s_position", r2_RT_P);
+	C.r_dx10Texture("s_image", r2_RT_generic0);
+	C.r_dx10Texture("s_bloom_new", r2_RT_pp_bloom);
+	C.r_dx10Texture("s_blur_2", r2_RT_blur_2);
+	C.r_dx10Texture("s_blur_4", r2_RT_blur_4);
+	C.r_dx10Texture("s_blur_8", r2_RT_blur_8);
+
+	C.r_dx10Sampler("smp_base");
+	C.r_dx10Sampler("smp_nofilter");
+	C.r_dx10Sampler("smp_rtlinear");
+	C.r_End();
+
+}
+
+//--DSR-- HeatVision_start
+void CBlender_heatvision::Compile(CBlender_Compile& C)
+{
+	IBlender::Compile(C);
+	
+	C.r_Pass("stub_screen_space", "heatvision", FALSE, FALSE, FALSE);
+	C.r_dx10Texture("s_position", r2_RT_P);
+	C.r_dx10Texture("s_image", r2_RT_generic0);
+	C.r_dx10Texture("s_bloom_new", r2_RT_pp_bloom);
+	C.r_dx10Texture("s_blur_2", r2_RT_blur_2);
+	C.r_dx10Texture("s_blur_4", r2_RT_blur_4);
+	C.r_dx10Texture("s_blur_8", r2_RT_blur_8);
+
+	C.r_dx10Texture("s_heat", r2_RT_heat);
+
+	C.r_dx10Sampler("smp_base");
+	C.r_dx10Sampler("smp_nofilter");
+	C.r_dx10Sampler("smp_rtlinear");
+	C.r_End();
+}
+//--DSR-- HeatVision_end
diff --git a/src/Layers/xrRenderPC_R3/blender_nightvision.h b/src/Layers/xrRenderPC_R3/blender_nightvision.h
index 0801e41..8efe46d 100644
--- a/src/Layers/xrRenderPC_R3/blender_nightvision.h
+++ b/src/Layers/xrRenderPC_R3/blender_nightvision.h
@@ -13,3 +13,32 @@ public:
 	CBlender_nightvision();
 	virtual ~CBlender_nightvision();
 };
+
+//crookr
+class CBlender_fakescope : public IBlender
+{
+public:
+	virtual LPCSTR getComment() { return "fakescope"; }
+	virtual BOOL canBeDetailed() { return FALSE; }
+	virtual BOOL canBeLMAPped() { return FALSE; }
+
+	virtual void Compile(CBlender_Compile& C);
+
+	CBlender_fakescope();
+	virtual ~CBlender_fakescope();
+};
+
+//--DSR-- HeatVision_start
+class CBlender_heatvision : public IBlender
+{
+public:
+	virtual LPCSTR getComment() { return "heatvision"; }
+	virtual BOOL canBeDetailed() { return FALSE; }
+	virtual BOOL canBeLMAPped() { return FALSE; }
+
+	virtual void Compile(CBlender_Compile& C);
+
+	CBlender_heatvision();
+	virtual ~CBlender_heatvision();
+};
+//--DSR-- HeatVision_end
diff --git a/src/Layers/xrRenderPC_R3/r2_types.h b/src/Layers/xrRenderPC_R3/r2_types.h
index 6597231..0414f9c 100644
--- a/src/Layers/xrRenderPC_R3/r2_types.h
+++ b/src/Layers/xrRenderPC_R3/r2_types.h
@@ -70,6 +70,9 @@
 #define		r2_RT_dof			"$user$dof"
 #define		r2_RT_ui			"$user$ui"
 
+#define		r2_RT_scopert		"$user$scopeRT" //crookr
+#define		r2_RT_heat			"$user$heat" //--DSR-- HeatVision
+
 #define		r2_RT_smaa_edgetex "$user$smaa_edgetex"
 #define		r2_RT_smaa_blendtex "$user$smaa_blendtex"
 
diff --git a/src/Layers/xrRenderPC_R3/r3.cpp b/src/Layers/xrRenderPC_R3/r3.cpp
index 1824690..708bdf4 100644
--- a/src/Layers/xrRenderPC_R3/r3.cpp
+++ b/src/Layers/xrRenderPC_R3/r3.cpp
@@ -757,24 +757,35 @@ BOOL CRender::occ_visible(Fbox& P) { return HOM.visible(P); }
 void CRender::add_Visual(IRenderVisual* V) { add_leafs_Dynamic((dxRender_Visual*)V, V->_ignore_optimization); }
 void CRender::add_Geometry(IRenderVisual* V) { add_Static((dxRender_Visual*)V, View->getMask()); }
 
+// demonized: add user defined rotation to wallmark
 void CRender::add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* verts, float ttl, bool ignore_opt, bool random_rotation)
+{
+	add_StaticWallmark(S, P, s, T, verts, ttl, ignore_opt, random_rotation ? ::Random.randF(-20.f, 20.f) : 0.f);
+}
+
+void CRender::add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* verts, float ttl, bool ignore_opt, float rotation)
 {
 	if (T->suppress_wm) return;
-	VERIFY2(_valid(P) && _valid(s) && T && verts && (s>EPS_L), "Invalid static wallmark params");
-	Wallmarks->AddStaticWallmark(T, verts, P, &*S, s, ttl, ignore_opt, random_rotation);
+	VERIFY2(_valid(P) && _valid(s) && T && verts && (s > EPS_L), "Invalid static wallmark params");
+	Wallmarks->AddStaticWallmark(T, verts, P, &*S, s, ttl, ignore_opt, rotation);
 }
 
 void CRender::add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, bool random_rotation)
 {
-	dxWallMarkArray* pWMA = (dxWallMarkArray *)pArray;
+	add_StaticWallmark(pArray, P, s, T, V, ttl, ignore_opt, random_rotation ? ::Random.randF(-20.f, 20.f) : 0.f);
+}
+
+void CRender::add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation)
+{
+	dxWallMarkArray* pWMA = (dxWallMarkArray*)pArray;
 	ref_shader* pShader = pWMA->dxGenerateWallmark();
-	if (pShader) add_StaticWallmark(*pShader, P, s, T, V, ttl, ignore_opt, random_rotation);
+	if (pShader) add_StaticWallmark(*pShader, P, s, T, V, ttl, ignore_opt, rotation);
 }
 
 void CRender::add_StaticWallmark(const wm_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V)
 {
 	dxUIShader* pShader = (dxUIShader*)&*S;
-	add_StaticWallmark(pShader->hShader, P, s, T, V);
+	add_StaticWallmark(pShader->hShader, P, s, T, V, 0.0f, false, true);
 }
 
 void CRender::clear_static_wallmarks()
diff --git a/src/Layers/xrRenderPC_R3/r3.h b/src/Layers/xrRenderPC_R3/r3.h
index 3f8201b..9a27417 100644
--- a/src/Layers/xrRenderPC_R3/r3.h
+++ b/src/Layers/xrRenderPC_R3/r3.h
@@ -232,6 +232,11 @@ public:
 		o_hemi = 0.75f * LT.get_hemi();
 		//o_hemi						= 0.5f*LT.get_hemi			()	;
 		o_sun = 0.75f * LT.get_sun();
+
+		//--DSR-- Heatvision start
+		RCache.hemi.set_hotness(O->GetHotness(), O->GetTransparency(), 0.f, 0.f);
+		//--DSR-- Heatvision end
+
 		CopyMemory(o_hemi_cube, LT.get_hemi_cube(), CROS_impl::NUM_FACES*sizeof(float));
 	}
 
@@ -247,6 +252,9 @@ public:
 #ifdef	DEBUG
         if (ps_r2_ls_flags.test(R2FLAG_GLOBALMATERIAL))	mtl=ps_r2_gmaterial;
 #endif
+		if (!(T && T->m_is_hot))
+			RCache.hemi.set_hotness(0.f, 0.f, 0.f, 0.f);
+
 		RCache.hemi.set_material(o_hemi, o_sun, 0, (mtl < 5 ? (mtl + .5f) / 4.f : mtl));
 		RCache.hemi.set_pos_faces(o_hemi_cube[CROS_impl::CUBE_FACE_POS_X],
 		                          o_hemi_cube[CROS_impl::CUBE_FACE_POS_Y],
@@ -299,8 +307,12 @@ public:
 	virtual void add_Geometry(IRenderVisual* V); // add visual(s)	(all culling performed)
 
 	// wallmarks
+	// demonized: add user defined rotation to wallmark
 	virtual void add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl = 0.f, bool ignore_opt = false, bool random_rotation = true);
+	virtual void add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation);
 	virtual void add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl = 0.f, bool ignore_opt = false, bool random_rotation = true);
+	virtual void add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation);
+
 	virtual void add_StaticWallmark(const wm_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V);
 	virtual void clear_static_wallmarks();
 	virtual void add_SkeletonWallmark(intrusive_ptr<CSkeletonWallmark> wm);
diff --git a/src/Layers/xrRenderPC_R3/r3_R_render.cpp b/src/Layers/xrRenderPC_R3/r3_R_render.cpp
index 2421e35..39c0de8 100644
--- a/src/Layers/xrRenderPC_R3/r3_R_render.cpp
+++ b/src/Layers/xrRenderPC_R3/r3_R_render.cpp
@@ -145,12 +145,22 @@ void CRender::render_main(Fmatrix& m_ViewProjection, bool _fportals)
 				break; // exit loop on frustums
 			}
 		}
-		if (g_pGameLevel && (phase == PHASE_NORMAL)) g_hud->Render_Last(); // HUD
+		if (g_pGameLevel && (phase == PHASE_NORMAL))
+		{
+			g_hud->Render_Last(); // HUD
+			if (g_hud->RenderActiveItemUIQuery())
+				r_dsgraph_render_hud_ui();
+		}
 	}
 	else
 	{
 		set_Object(0);
-		if (g_pGameLevel && (phase == PHASE_NORMAL)) g_hud->Render_Last(); // HUD
+		if (g_pGameLevel && (phase == PHASE_NORMAL))
+		{
+			g_hud->Render_Last(); // HUD
+			if (g_hud->RenderActiveItemUIQuery())
+				r_dsgraph_render_hud_ui();
+		}
 	}
 }
 
@@ -435,12 +445,6 @@ void CRender::Render()
 		Target->phase_scene_end();
 	}
 
-	if (g_hud && g_hud->RenderActiveItemUIQuery())
-	{
-		Target->phase_wallmarks();
-		r_dsgraph_render_hud_ui();
-	}
-
 	// Wall marks
 	if (Wallmarks)
 	{
diff --git a/src/Layers/xrRenderPC_R3/r3_loader.cpp b/src/Layers/xrRenderPC_R3/r3_loader.cpp
index 3b74b19..159fa56 100644
--- a/src/Layers/xrRenderPC_R3/r3_loader.cpp
+++ b/src/Layers/xrRenderPC_R3/r3_loader.cpp
@@ -358,7 +358,7 @@ void CRender::LoadSectors(IReader* fs)
 	{
 		CDB::Collector CL;
 		fs->find_chunk(fsL_PORTALS);
-		for (i = 0; i < count; i++)
+		for (u32 i = 0; i < count; i++)
 		{
 			b_portal P;
 			fs->r(&P, sizeof(P));
diff --git a/src/Layers/xrRenderPC_R3/r3_rendertarget.cpp b/src/Layers/xrRenderPC_R3/r3_rendertarget.cpp
index 9c5ecf2..3e56849 100644
--- a/src/Layers/xrRenderPC_R3/r3_rendertarget.cpp
+++ b/src/Layers/xrRenderPC_R3/r3_rendertarget.cpp
@@ -351,6 +351,8 @@ CRenderTarget::CRenderTarget()
 	b_gasmask_drops = xr_new<CBlender_gasmask_drops>();
 	b_gasmask_dudv = xr_new<CBlender_gasmask_dudv>();
 	b_nightvision = xr_new<CBlender_nightvision>();
+	b_fakescope = xr_new<CBlender_fakescope>(); //crookr
+	b_heatvision = xr_new<CBlender_heatvision>(); //--DSR-- HeatVision
 	b_lut = xr_new<CBlender_lut>();
 	b_smaa = xr_new<CBlender_smaa>();
 
@@ -430,6 +432,12 @@ CRenderTarget::CRenderTarget()
 		rt_Generic_1.create(r2_RT_generic1, w, h, D3DFMT_A8R8G8B8, 1);
 		rt_Generic.create(r2_RT_generic, w, h, D3DFMT_A8R8G8B8, 1);
 
+		rt_fakescope.create(r2_RT_scopert, w, h, D3DFMT_A8R8G8B8, 1); //crookr fakescope
+
+		//--DSR-- HeatVision_start
+		rt_Heat.create(r2_RT_heat, w, h, D3DFMT_A8R8G8B8, SampleCount);
+		//--DSR-- HeatVision_end
+
         if (RImplementation.o.dx10_msaa)
             rt_Generic_temp.create("$user$generic_temp", w, h, D3DFMT_A8R8G8B8, SampleCount);
         else
@@ -477,6 +485,8 @@ CRenderTarget::CRenderTarget()
 	s_gasmask_drops.create(b_gasmask_drops, "r2\\gasmask_drops");
 	s_gasmask_dudv.create(b_gasmask_dudv, "r2\\gasmask_dudv");
 	s_nightvision.create(b_nightvision, "r2\\nightvision");
+	s_fakescope.create(b_fakescope, "r2\\fakescope"); //crookr
+	s_heatvision.create(b_heatvision, "r2\\heatvision"); //--DSR-- HeatVision
 	s_lut.create(b_lut, "r2\\lut");	
 	// OCCLUSION
 	s_occq.create(b_occq, "r2\\occq");
@@ -966,7 +976,8 @@ CRenderTarget::CRenderTarget()
 			//	R_CHK						(t_noise_surf[it]->UnlockRect(0));
 			//}
 
-			for (int it = 0; it < TEX_jitter_count - 1; it++)
+			int it = 0;
+			for (; it < TEX_jitter_count - 1; it++)
 			{
 				string_path name;
 				xr_sprintf(name, "%s%d",r2_jitter, it);
@@ -1143,6 +1154,8 @@ CRenderTarget::~CRenderTarget()
 	xr_delete(b_gasmask_drops);
 	xr_delete(b_gasmask_dudv);
 	xr_delete(b_nightvision);
+	xr_delete(b_fakescope); //crookr
+	xr_delete(b_heatvision); //--DSR-- HeatVision
 	xr_delete(b_lut);	
 	xr_delete(b_smaa);
 
diff --git a/src/Layers/xrRenderPC_R3/r3_rendertarget.h b/src/Layers/xrRenderPC_R3/r3_rendertarget.h
index 6d332ba..b3cbb66 100644
--- a/src/Layers/xrRenderPC_R3/r3_rendertarget.h
+++ b/src/Layers/xrRenderPC_R3/r3_rendertarget.h
@@ -58,6 +58,8 @@ public:
 	IBlender* b_gasmask_drops;
 	IBlender* b_gasmask_dudv;
 	IBlender* b_nightvision;
+	IBlender* b_fakescope; //crookr
+	IBlender* b_heatvision; //--DSR-- HeatVision
 	IBlender* b_lut;
 	
 	IBlender* b_smaa;	
@@ -93,6 +95,11 @@ public:
 	ref_rt rt_secondVP;		// 32bit		(r,g,b,a) --//#SM+#-- +SecondVP+
 	ref_rt rt_ui_pda;
 
+
+	ref_rt rt_fakescope; //crookr
+	
+	ref_rt rt_Heat; //--DSR-- HeatVision
+
 	ref_rt rt_dof;
 
 	ref_rt rt_blur_h_2;
@@ -171,6 +178,8 @@ private:
 	ref_shader s_gasmask_drops;
 	ref_shader s_gasmask_dudv;
 	ref_shader s_nightvision;
+	ref_shader s_fakescope; //crookr
+	ref_shader s_heatvision; //--DSR-- HeatVision
 	ref_shader s_lut;	
 
     ref_shader s_smaa;
@@ -298,6 +307,8 @@ public:
 	void phase_gasmask_drops();
 	void phase_gasmask_dudv();
 	void phase_nightvision();
+	void phase_fakescope(); //crookr
+	void phase_heatvision(); //--DSR-- HeatVision
 	void phase_lut();	
 	void phase_smaa();	
 
diff --git a/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_bloom.cpp b/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_bloom.cpp
index 0e3462b..ead9202 100644
--- a/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_bloom.cpp
+++ b/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_bloom.cpp
@@ -42,8 +42,8 @@ void CalcGauss_k7(
 	// calculate
 	float mag = 0;
 	for (int i = -7; i <= 0; i++) W[-i] = expf(-float(i * i) / (2 * r * r)); // weight
-	for (i = 0; i < 8; i++) mag += i ? 2 * W[i] : W[i]; // symmetrical weight
-	for (i = 0; i < 8; i++) W[i] = s_out * W[i] / mag;
+	for (int i = 0; i < 8; i++) mag += i ? 2 * W[i] : W[i]; // symmetrical weight
+	for (int i = 0; i < 8; i++) W[i] = s_out * W[i] / mag;
 
 	// W[0]=0, W[7]=-7
 	w0.set(W[1], W[2], W[3], W[4]); // -1, -2, -3, -4
diff --git a/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_combine.cpp b/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_combine.cpp
index fe27772..face4ea 100644
--- a/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_combine.cpp
+++ b/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_combine.cpp
@@ -291,10 +291,14 @@ void CRenderTarget::phase_combine()
 	// Forward rendering
 	{
 		PIX_EVENT(Forward_rendering);
+
+		//--DSR-- HeatVision_start
 		if (!RImplementation.o.dx10_msaa)
-			u_setrt(rt_Generic_0, 0, 0, HW.pBaseZB); // LDR RT
+			u_setrt(rt_Generic_0, rt_Heat, 0, HW.pBaseZB); // LDR RT
 		else
-			u_setrt(rt_Generic_0_r, 0, 0, RImplementation.Target->rt_MSAADepth->pZRT); // LDR RT
+			u_setrt(rt_Generic_0_r, rt_Heat, 0, RImplementation.Target->rt_MSAADepth->pZRT); // LDR RT
+		//--DSR-- HeatVision_end
+
 		RCache.set_CullMode(CULL_CCW);
 		RCache.set_Stencil(FALSE);
 		RCache.set_ColorWriteEnable();
@@ -396,6 +400,16 @@ void CRenderTarget::phase_combine()
 	
 	if(ps_r2_nightvision > 0)
 		phase_nightvision();
+
+	//--DSR-- HeatVision_start
+	if (ps_r2_heatvision > 0)
+		phase_heatvision();
+	//--DSR-- HeatVision_end
+
+	if (scope_fake_enabled)
+	{
+		phase_fakescope(); //crookr
+	}
 	
     //SMAA
 	if (ps_smaa_quality)
diff --git a/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_scene.cpp b/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_scene.cpp
index a6dfbf8..86d27d8 100644
--- a/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_scene.cpp
+++ b/src/Layers/xrRenderPC_R3/r3_rendertarget_phase_scene.cpp
@@ -14,6 +14,10 @@ void CRenderTarget::phase_scene_prepare()
 		FLOAT ColorRGBA[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 		HW.pDevice->ClearRenderTargetView(rt_Position->pRT, ColorRGBA);
 
+		//--DSR-- HeatVision_start
+		HW.pDevice->ClearRenderTargetView(rt_Heat->pRT, ColorRGBA);
+		//--DSR-- HeatVision_end
+
 		if (!RImplementation.o.dx10_msaa)
 			HW.pDevice->ClearDepthStencilView(HW.pBaseZB, D3D10_CLEAR_DEPTH | D3D10_CLEAR_STENCIL, 1.0f, 0);
 		else
@@ -39,8 +43,10 @@ void CRenderTarget::phase_scene_begin()
 
 	// Targets, use accumulator for temporary storage
 	{
-		if (RImplementation.o.albedo_wo) u_setrt(rt_Position, rt_Accumulator, pZB);
-		else u_setrt(rt_Position, rt_Color, pZB);
+		//--DSR-- HeatVision_start
+		if (RImplementation.o.albedo_wo) u_setrt(rt_Position, rt_Accumulator, rt_Heat, pZB);
+		else u_setrt(rt_Position, rt_Color, rt_Heat, pZB);
+		//--DSR-- HeatVision_end
 	}
 
 
diff --git a/src/Layers/xrRenderPC_R3/vs2022/xrRender_R3.vcxproj b/src/Layers/xrRenderPC_R3/vs2022/xrRender_R3.vcxproj
new file mode 100644
index 0000000..51b9c39
--- /dev/null
+++ b/src/Layers/xrRenderPC_R3/vs2022/xrRender_R3.vcxproj
@@ -0,0 +1,598 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{3F383D3C-FCD8-4170-990B-EB4833F09248}</ProjectGuid>
+    <RootNamespace>xrRender_R3</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_DX10;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R3_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <AdditionalOptions>-Zm110 %(AdditionalOptions)</AdditionalOptions>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DisableSpecificWarnings>4005;4099</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>dxguid.lib;d3dcompiler.lib;d3d10.lib;d3dx10.lib;dxgi.lib;nvapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)x64\Release;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;USE_DX10;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R3_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <AdditionalOptions>-Zm110 %(AdditionalOptions)</AdditionalOptions>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DisableSpecificWarnings>4005;4099</DisableSpecificWarnings>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>dxguid.lib;d3dcompiler.lib;d3d10.lib;d3dx10.lib;dxgi.lib;nvapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)x64\Release;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_DX10;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R3_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <AdditionalOptions>-Zm110 %(AdditionalOptions)</AdditionalOptions>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DisableSpecificWarnings>4005;4099</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>dxguid.lib;d3dcompiler.lib;d3d10.lib;d3dx10.lib;dxgi.lib;nvapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)x64\Release;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\..\Include\xrRender\ApplicationRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ConsoleRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DebugRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DebugShader.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DrawUtils.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\EnvironmentRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\FactoryPtr.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\FontRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\Kinematics.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\KinematicsAnimated.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\LensFlareRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ObjectSpaceRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ParticleCustom.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\particles_systems_library_interface.hpp" />
+    <ClInclude Include="..\..\..\Include\xrRender\RainRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderDetailModel.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderDeviceRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderFactory.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderVisual.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\StatGraphRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\StatsRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ThunderboltDescRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ThunderboltRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UIRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UISequenceVideoItem.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UIShader.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\WallMarkArray.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidBlenders.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidData.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidEmitters.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidGrid.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidManager.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidObstacles.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidRenderer.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidVolume.h" />
+    <ClInclude Include="..\..\xrRenderDX10\DX10 Rain\dx10RainBlender.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10BufferUtils.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10ConstantBuffer.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10ConstantBuffer_impl.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10R_Backend_Runtime.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10r_constants_cache.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10StateUtils.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10TextureUtils.h" />
+    <ClInclude Include="..\..\xrRenderDX10\MSAA\dx10MSAABlender.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10SamplerStateCache.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10ShaderResourceStateCache.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10State.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10StateCache.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10StateCacheImpl.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10StateManager.h" />
+    <ClInclude Include="..\..\xrRender\Animation.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender_CLSID.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender_Recorder.h" />
+    <ClInclude Include="..\..\xrRender\Blender_BmmD.h" />
+    <ClInclude Include="..\..\xrRender\Blender_detail_still.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Editor_Selection.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Editor_Wire.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Lm(EbB).h" />
+    <ClInclude Include="..\..\xrRender\Blender_Model_EbB.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Particle.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Screen_SET.h" />
+    <ClInclude Include="..\..\xrRender\Blender_tree.h" />
+    <ClInclude Include="..\..\xrRender\ColorMapManager.h" />
+    <ClInclude Include="..\..\xrRender\D3DUtils.h" />
+    <ClInclude Include="..\..\xrRender\Debug\dxPixEventWrapper.h" />
+    <ClInclude Include="..\..\xrRender\DetailManager.h" />
+    <ClInclude Include="..\..\xrRender\DetailModel.h" />
+    <ClInclude Include="..\..\xrRender\du_box.h" />
+    <ClInclude Include="..\..\xrRender\du_cone.h" />
+    <ClInclude Include="..\..\xrRender\du_cylinder.h" />
+    <ClInclude Include="..\..\xrRender\du_sphere.h" />
+    <ClInclude Include="..\..\xrRender\du_sphere_part.h" />
+    <ClInclude Include="..\..\xrRender\dxApplicationRender.h" />
+    <ClInclude Include="..\..\xrRender\dxConsoleRender.h" />
+    <ClInclude Include="..\..\xrRender\dxDebugRender.h" />
+    <ClInclude Include="..\..\xrRender\dxEnvironmentRender.h" />
+    <ClInclude Include="..\..\xrRender\dxFontRender.h" />
+    <ClInclude Include="..\..\xrRender\dxLensFlareRender.h" />
+    <ClInclude Include="..\..\xrRender\dxObjectSpaceRender.h" />
+    <ClInclude Include="..\..\xrRender\dxParticleCustom.h" />
+    <ClInclude Include="..\..\xrRender\dxRainRender.h" />
+    <ClInclude Include="..\..\xrRender\dxRenderDeviceRender.h" />
+    <ClInclude Include="..\..\xrRender\dxRenderFactory.h" />
+    <ClInclude Include="..\..\xrRender\dxStatGraphRender.h" />
+    <ClInclude Include="..\..\xrRender\dxStatsRender.h" />
+    <ClInclude Include="..\..\xrRender\dxThunderboltDescRender.h" />
+    <ClInclude Include="..\..\xrRender\dxThunderboltRender.h" />
+    <ClInclude Include="..\..\xrRender\dxUIRender.h" />
+    <ClInclude Include="..\..\xrRender\dxUISequenceVideoItem.h" />
+    <ClInclude Include="..\..\xrRender\dxUIShader.h" />
+    <ClInclude Include="..\..\xrRender\dxWallMarkArray.h" />
+    <ClInclude Include="..\..\xrRender\ETextureParams.h" />
+    <ClInclude Include="..\..\xrRender\FBasicVisual.h" />
+    <ClInclude Include="..\..\xrRender\FHierrarhyVisual.h" />
+    <ClInclude Include="..\..\xrRender\FLOD.h" />
+    <ClInclude Include="..\..\xrRender\FProgressive.h" />
+    <ClInclude Include="..\..\xrRender\FSkinned.h" />
+    <ClInclude Include="..\..\xrRender\FTreeVisual.h" />
+    <ClInclude Include="..\..\xrRender\FVF.h" />
+    <ClInclude Include="..\..\xrRender\FVisual.h" />
+    <ClInclude Include="..\..\xrRender\HOM.h" />
+    <ClInclude Include="..\..\xrRender\HW.h" />
+    <ClInclude Include="..\..\xrRender\HWCaps.h" />
+    <ClInclude Include="..\..\xrRender\IRenderDetailModel.h" />
+    <ClInclude Include="..\..\xrRender\LightTrack.h" />
+    <ClInclude Include="..\..\xrRender\Light_DB.h" />
+    <ClInclude Include="..\..\xrRender\Light_Package.h" />
+    <ClInclude Include="..\..\xrRender\ModelPool.h" />
+    <ClInclude Include="..\..\xrRender\NvTriStrip.h" />
+    <ClInclude Include="..\..\xrRender\NvTriStripObjects.h" />
+    <ClInclude Include="..\..\xrRender\occRasterizer.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffect.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffectActions.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffectDef.h" />
+    <ClInclude Include="..\..\xrRender\ParticleGroup.h" />
+    <ClInclude Include="..\..\xrRender\PSLibrary.h" />
+    <ClInclude Include="..\..\xrRender\QueryHelper.h" />
+    <ClInclude Include="..\..\xrRender\ResourceManager.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_hemi.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_Runtime.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_tree.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_xform.h" />
+    <ClInclude Include="..\..\xrRender\r_constants.h" />
+    <ClInclude Include="..\..\xrRender\r_constants_cache.h" />
+    <ClInclude Include="..\..\xrRender\R_DStreams.h" />
+    <ClInclude Include="..\..\xrRender\r_sun_cascades.h" />
+    <ClInclude Include="..\..\xrRender\r__dsgraph_structure.h" />
+    <ClInclude Include="..\..\xrRender\r__dsgraph_types.h" />
+    <ClInclude Include="..\..\xrRender\r__occlusion.h" />
+    <ClInclude Include="..\..\xrRender\r__pixel_calculator.h" />
+    <ClInclude Include="..\..\xrRender\r__sector.h" />
+    <ClInclude Include="..\..\xrRender\Shader.h" />
+    <ClInclude Include="..\..\xrRender\SH_Atomic.h" />
+    <ClInclude Include="..\..\xrRender\SH_Constant.h" />
+    <ClInclude Include="..\..\xrRender\SH_Matrix.h" />
+    <ClInclude Include="..\..\xrRender\SH_RT.h" />
+    <ClInclude Include="..\..\xrRender\SH_Texture.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonAnimated.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonCustom.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonX.h" />
+    <ClInclude Include="..\..\xrRender\stats_manager.h" />
+    <ClInclude Include="..\..\xrRender\TextureDescrManager.h" />
+    <ClInclude Include="..\..\xrRender\tga.h" />
+    <ClInclude Include="..\..\xrRender\tss.h" />
+    <ClInclude Include="..\..\xrRender\tss_def.h" />
+    <ClInclude Include="..\..\xrRender\uber_deffer.h" />
+    <ClInclude Include="..\..\xrRender\Utils\dxHashHelper.h" />
+    <ClInclude Include="..\..\xrRender\VertexCache.h" />
+    <ClInclude Include="..\..\xrRender\WallmarksEngine.h" />
+    <ClInclude Include="..\..\xrRender\xrD3DDefs.h" />
+    <ClInclude Include="..\..\xrRender\xrRender_console.h" />
+    <ClInclude Include="..\..\xrRender\xrStripify.h" />
+    <ClInclude Include="..\..\xrRender\xr_effgamma.h" />
+    <ClInclude Include="..\blender_bloom_build.h" />
+    <ClInclude Include="..\blender_blur.h" />
+    <ClInclude Include="..\blender_combine.h" />
+    <ClInclude Include="..\blender_deffer_aref.h" />
+    <ClInclude Include="..\blender_deffer_flat.h" />
+    <ClInclude Include="..\blender_deffer_model.h" />
+    <ClInclude Include="..\blender_dof.h" />
+    <ClInclude Include="..\blender_lut.h" />
+    <ClInclude Include="..\blender_nightvision.h" />
+    <ClInclude Include="..\blender_gasmask_drops.h" />
+    <ClInclude Include="..\blender_gasmask_dudv.h" />
+    <ClInclude Include="..\blender_light_direct.h" />
+    <ClInclude Include="..\blender_light_mask.h" />
+    <ClInclude Include="..\blender_light_occq.h" />
+    <ClInclude Include="..\blender_light_point.h" />
+    <ClInclude Include="..\blender_light_reflected.h" />
+    <ClInclude Include="..\blender_light_spot.h" />
+    <ClInclude Include="..\blender_luminance.h" />
+    <ClInclude Include="..\blender_pp_bloom.h" />
+    <ClInclude Include="..\blender_smaa.h" />
+    <ClInclude Include="..\blender_ssao.h" />
+    <ClInclude Include="..\blender_ss_sunshafts.h" />
+    <ClInclude Include="..\..\..\xrEngine\cl_intersect.h" />
+    <ClInclude Include="..\..\xrRender\DetailFormat.h" />
+    <ClInclude Include="..\dx10MinMaxSMBlender.h" />
+    <ClInclude Include="..\..\xrRender\light.h" />
+    <ClInclude Include="..\light_gi.h" />
+    <ClInclude Include="..\Light_Render_Direct.h" />
+    <ClInclude Include="..\light_smapvis.h" />
+    <ClInclude Include="..\r2_types.h" />
+    <ClInclude Include="..\r3.h" />
+    <ClInclude Include="..\r3_rendertarget.h" />
+    <ClInclude Include="..\r3_rendertarget_wallmarks.h" />
+    <ClInclude Include="..\r3_R_sun_support.h" />
+    <ClInclude Include="..\SMAP_Allocator.h" />
+    <ClInclude Include="..\stdafx.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\..\xrEngine\ai_script_lua_debug.cpp" />
+    <ClCompile Include="..\..\..\xrEngine\ai_script_lua_extension.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidBlenders.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidData.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidEmitters.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidGrid.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidManager.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidObstacles.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidRenderer.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidVolume.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\Blender_Recorder_R3.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\DX10 Rain\dx10RainBlender.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10BufferUtils.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10ConstantBuffer.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10DetailManager_VS.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10HW.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10ResourceManager_Resources.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10ResourceManager_Scripting.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10r_constants.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10r_constants_cache.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10SH_RT.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10SH_Texture.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10StateUtils.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10Texture.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10TextureUtils.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\MSAA\dx10MSAABlender.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\StateManager\dx10SamplerStateCache.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\StateManager\dx10ShaderResourceStateCache.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\StateManager\dx10State.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\StateManager\dx10StateCache.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\StateManager\dx10StateManager.cpp" />
+    <ClCompile Include="..\..\xrRender\Animation.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender_Palette.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender_Recorder.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_BmmD.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_detail_still.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Editor_Selection.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Editor_Wire.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Lm(EbB).cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Model_EbB.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Particle.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Recorder_R2.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Recorder_StandartBinding.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Screen_SET.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_tree.cpp" />
+    <ClCompile Include="..\..\xrRender\ColorMapManager.cpp" />
+    <ClCompile Include="..\..\xrRender\D3DUtils.cpp" />
+    <ClCompile Include="..\..\xrRender\Debug\dxPixEventWrapper.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_CACHE.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_Decompress.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_soft.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_VS.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailModel.cpp" />
+    <ClCompile Include="..\..\xrRender\du_box.cpp" />
+    <ClCompile Include="..\..\xrRender\du_cone.cpp" />
+    <ClCompile Include="..\..\xrRender\du_cylinder.cpp" />
+    <ClCompile Include="..\..\xrRender\du_sphere.cpp" />
+    <ClCompile Include="..\..\xrRender\du_sphere_part.cpp" />
+    <ClCompile Include="..\..\xrRender\dxApplicationRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxConsoleRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxDebugRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxEnvironmentRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxFontRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxLensFlareRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxObjectSpaceRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxParticleCustom.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRainRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRenderDeviceRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRenderFactory.cpp" />
+    <ClCompile Include="..\..\xrRender\dxStatGraphRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxStatsRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxThunderboltDescRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxThunderboltRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUIRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUISequenceVideoItem.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUIShader.cpp" />
+    <ClCompile Include="..\..\xrRender\dxWallMarkArray.cpp" />
+    <ClCompile Include="..\..\xrRender\ETextureParams.cpp" />
+    <ClCompile Include="..\..\xrRender\FBasicVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FHierrarhyVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FLOD.cpp" />
+    <ClCompile Include="..\..\xrRender\FProgressive.cpp" />
+    <ClCompile Include="..\..\xrRender\FSkinned.cpp" />
+    <ClCompile Include="..\..\xrRender\FTreeVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\HOM.cpp" />
+    <ClCompile Include="..\..\xrRender\HWCaps.cpp" />
+    <ClCompile Include="..\..\xrRender\light.cpp" />
+    <ClCompile Include="..\..\xrRender\LightTrack.cpp" />
+    <ClCompile Include="..\..\xrRender\Light_DB.cpp" />
+    <ClCompile Include="..\..\xrRender\Light_Package.cpp" />
+    <ClCompile Include="..\..\xrRender\ModelPool.cpp" />
+    <ClCompile Include="..\..\xrRender\NvTriStrip.cpp" />
+    <ClCompile Include="..\..\xrRender\NvTriStripObjects.cpp" />
+    <ClCompile Include="..\..\xrRender\occRasterizer.cpp" />
+    <ClCompile Include="..\..\xrRender\occRasterizer_core.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffect.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffectActions.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffectDef.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleGroup.cpp" />
+    <ClCompile Include="..\..\xrRender\PSLibrary.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_blur.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_dof.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_lut.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_nightvision.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_gasmask_drops.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_gasmask_dudv.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_pp_bloom.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_smaa.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_sunshafts.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Loader.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Reset.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_DBG.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_hemi.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_Runtime.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_tree.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_xform.cpp" />
+    <ClCompile Include="..\..\xrRender\r_constants.cpp" />
+    <ClCompile Include="..\..\xrRender\R_DStreams.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_build.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_render.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_render_lods.cpp" />
+    <ClCompile Include="..\..\xrRender\r__occlusion.cpp" />
+    <ClCompile Include="..\..\xrRender\r__pixel_calculator.cpp" />
+    <ClCompile Include="..\..\xrRender\r__screenshot.cpp" />
+    <ClCompile Include="..\..\xrRender\r__sector.cpp" />
+    <ClCompile Include="..\..\xrRender\r__sector_traversal.cpp" />
+    <ClCompile Include="..\..\xrRender\Shader.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Atomic.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Constant.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Matrix.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonAnimated.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonCustom.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonRigid.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonX.cpp" />
+    <ClCompile Include="..\..\xrRender\stats_manager.cpp" />
+    <ClCompile Include="..\..\xrRender\TextureDescrManager.cpp" />
+    <ClCompile Include="..\..\xrRender\tga.cpp" />
+    <ClCompile Include="..\..\xrRender\tss_def.cpp" />
+    <ClCompile Include="..\..\xrRender\uber_deffer.cpp" />
+    <ClCompile Include="..\..\xrRender\Utils\dxHashHelper.cpp" />
+    <ClCompile Include="..\..\xrRender\VertexCache.cpp" />
+    <ClCompile Include="..\..\xrRender\WallmarksEngine.cpp" />
+    <ClCompile Include="..\..\xrRender\xrRender_console.cpp" />
+    <ClCompile Include="..\..\xrRender\xrStripify.cpp" />
+    <ClCompile Include="..\..\xrRender\xr_effgamma.cpp" />
+    <ClCompile Include="..\blender_bloom_build.cpp" />
+    <ClCompile Include="..\blender_blur.cpp" />
+    <ClCompile Include="..\blender_combine.cpp" />
+    <ClCompile Include="..\blender_deffer_aref.cpp" />
+    <ClCompile Include="..\blender_deffer_flat.cpp" />
+    <ClCompile Include="..\blender_deffer_model.cpp" />
+    <ClCompile Include="..\blender_dof.cpp" />
+    <ClCompile Include="..\blender_lut.cpp" />
+    <ClCompile Include="..\blender_nightvision.cpp" />
+    <ClCompile Include="..\blender_gasmask_drops.cpp" />
+    <ClCompile Include="..\blender_gasmask_dudv.cpp" />
+    <ClCompile Include="..\blender_light_direct.cpp" />
+    <ClCompile Include="..\blender_light_mask.cpp" />
+    <ClCompile Include="..\blender_light_occq.cpp" />
+    <ClCompile Include="..\blender_light_point.cpp" />
+    <ClCompile Include="..\blender_light_reflected.cpp" />
+    <ClCompile Include="..\blender_light_spot.cpp" />
+    <ClCompile Include="..\blender_luminance.cpp" />
+    <ClCompile Include="..\blender_pp_bloom.cpp" />
+    <ClCompile Include="..\blender_smaa.cpp" />
+    <ClCompile Include="..\blender_ssao.cpp" />
+    <ClCompile Include="..\blender_ss_sunshafts.cpp" />
+    <ClCompile Include="..\dx10MinMaxSMBlender.cpp" />
+    <ClCompile Include="..\light_GI.cpp" />
+    <ClCompile Include="..\Light_Render_Direct.cpp" />
+    <ClCompile Include="..\Light_Render_Direct_ComputeXFS.cpp" />
+    <ClCompile Include="..\light_smapvis.cpp" />
+    <ClCompile Include="..\light_vis.cpp" />
+    <ClCompile Include="..\r2_blenders.cpp" />
+    <ClCompile Include="..\r2_R_calculate.cpp" />
+    <ClCompile Include="..\r2_R_lights.cpp" />
+    <ClCompile Include="..\r2_R_sun.cpp" />
+    <ClCompile Include="..\r2_sector_detect.cpp" />
+    <ClCompile Include="..\r2_test_hw.cpp" />
+    <ClCompile Include="..\r3.cpp" />
+    <ClCompile Include="..\r3_loader.cpp" />
+    <ClCompile Include="..\r3_rendertarget.cpp" />
+    <ClCompile Include="..\r3_rendertarget_accum_direct.cpp" />
+    <ClCompile Include="..\r3_rendertarget_accum_omnipart_geom.cpp" />
+    <ClCompile Include="..\r3_rendertarget_accum_point.cpp" />
+    <ClCompile Include="..\r3_rendertarget_accum_point_geom.cpp" />
+    <ClCompile Include="..\r3_rendertarget_accum_reflected.cpp" />
+    <ClCompile Include="..\r3_rendertarget_accum_spot.cpp" />
+    <ClCompile Include="..\r3_rendertarget_accum_spot_geom.cpp" />
+    <ClCompile Include="..\r3_rendertarget_create_minmaxSM.cpp" />
+    <ClCompile Include="..\r3_rendertarget_draw_rain.cpp" />
+    <ClCompile Include="..\r3_rendertarget_draw_volume.cpp" />
+    <ClCompile Include="..\r3_rendertarget_enable_scissor.cpp" />
+    <ClCompile Include="..\r3_rendertarget_mark_msaa_edges.cpp" />
+    <ClCompile Include="..\r3_rendertarget_phase_accumulator.cpp" />
+    <ClCompile Include="..\r3_rendertarget_phase_bloom.cpp" />
+    <ClCompile Include="..\r3_rendertarget_phase_combine.cpp" />
+    <ClCompile Include="..\r3_rendertarget_phase_luminance.cpp" />
+    <ClCompile Include="..\r3_rendertarget_phase_occq.cpp" />
+    <ClCompile Include="..\r3_rendertarget_phase_PP.cpp" />
+    <ClCompile Include="..\r3_rendertarget_phase_rain.cpp" />
+    <ClCompile Include="..\r3_rendertarget_phase_scene.cpp" />
+    <ClCompile Include="..\r3_rendertarget_phase_smap_D.cpp" />
+    <ClCompile Include="..\r3_rendertarget_phase_smap_S.cpp" />
+    <ClCompile Include="..\r3_rendertarget_phase_ssao.cpp" />
+    <ClCompile Include="..\r3_R_rain.cpp" />
+    <ClCompile Include="..\r3_R_render.cpp" />
+    <ClCompile Include="..\r3_R_sun_support.cpp" />
+    <ClCompile Include="..\stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\xrRender_R3.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)xrCPU_Pipe\vs2022\xrCPU_Pipe.vcxproj">
+      <Project>{ca0649dd-d089-423a-981c-46b57a884eb9}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrParticles\vs2022\xrParticles.vcxproj">
+      <Project>{94a1c366-3d19-48e6-8170-4adc2e70df97}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)Layers\xrAPI\vs2022\xrAPI.vcxproj">
+      <Project>{1daec516-e52c-4a3c-a4da-ae3553e6e0f8}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/Layers/xrRenderPC_R3/vs2022/xrRender_R3.vcxproj.filters b/src/Layers/xrRenderPC_R3/vs2022/xrRender_R3.vcxproj.filters
new file mode 100644
index 0000000..40456a4
--- /dev/null
+++ b/src/Layers/xrRenderPC_R3/vs2022/xrRender_R3.vcxproj.filters
@@ -0,0 +1,1410 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Kernel">
+      <UniqueIdentifier>{0b059d6a-3dac-4362-a437-4566edef1c77}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core">
+      <UniqueIdentifier>{086dd8b9-bf0e-47d8-89f9-e55303a6df34}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Details">
+      <UniqueIdentifier>{9584eb10-504f-4cb6-b09d-8273e2779f37}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Stripifier">
+      <UniqueIdentifier>{93d41268-914a-4407-95d8-300c00f20c77}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Lights">
+      <UniqueIdentifier>{c7e79c6e-213a-4cbb-aa5e-4a7f68c6479d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Glows">
+      <UniqueIdentifier>{e086bd78-be45-492d-b58c-3c085137439c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Wallmarks">
+      <UniqueIdentifier>{2421ec41-d6d9-4cc0-a176-d3798fbd5d41}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Shading templates">
+      <UniqueIdentifier>{968d964e-4267-444a-8007-a730d6d3e516}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Shading templates\R1">
+      <UniqueIdentifier>{ba3c1005-336a-4654-b972-d2a3e1f792ca}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Shading templates\3dFluid">
+      <UniqueIdentifier>{e2f79344-0191-450b-a303-42dd4ffe38af}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Shading templates\DX10 Rain">
+      <UniqueIdentifier>{0236adfb-6650-414a-a3db-5bda1dae3739}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Models">
+      <UniqueIdentifier>{b1f0098d-4678-41d3-90f7-c4ed0badb40d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Models\Visuals">
+      <UniqueIdentifier>{48ef7144-0312-45b3-b39d-786b96197dc9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility">
+      <UniqueIdentifier>{6b165dc3-3a30-4631-a918-d48b6339483b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility\Sector/Portal">
+      <UniqueIdentifier>{e9f03838-9afc-4c54-a8b3-71352799261e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility\HOM Occlusion">
+      <UniqueIdentifier>{ab7057c1-3fcb-4088-8ea3-12ee4fc220ba}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core_Target">
+      <UniqueIdentifier>{e03dc4b2-5425-408c-bbda-90078a9f14a9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core_Target\ColorMap">
+      <UniqueIdentifier>{6f93b1c6-d2fc-49db-8147-21316e55bce9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored">
+      <UniqueIdentifier>{80049a40-cae8-4bb6-a46e-b734524c1fbc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\HW">
+      <UniqueIdentifier>{00bb4cc2-c2f5-4d26-82ba-ee93a9ee0c44}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Backend">
+      <UniqueIdentifier>{28ef3078-c0a5-4ea1-82c8-63f520372654}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D">
+      <UniqueIdentifier>{4221679b-dc40-4291-b820-37fb3e311f90}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders">
+      <UniqueIdentifier>{4ce61b3d-6c93-4424-920a-64d025ec21e6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Resources">
+      <UniqueIdentifier>{330ae118-0b2b-467d-8082-0484aad5c40f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Resources\dx10_R_shader">
+      <UniqueIdentifier>{65a65640-a81d-4f7e-8560-0753f99968d7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\ShaderManager">
+      <UniqueIdentifier>{b0afcac2-98cc-433b-9805-327699aeb0c4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Blender">
+      <UniqueIdentifier>{fce2f3ac-7b4f-4e21-ab6f-8698cec8ec6b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\DebugDraw">
+      <UniqueIdentifier>{b3ece0d3-5c36-43b8-8077-f239a2e98032}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Visuals">
+      <UniqueIdentifier>{622f17e3-71b4-4d5b-a9f1-32ccff1c06b4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Visuals\Skeleton">
+      <UniqueIdentifier>{c9c17241-1636-4f7d-94ab-ce965a9e4eda}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Gamma">
+      <UniqueIdentifier>{53d5a8ea-40d4-48d4-986e-b041dfa7d4c4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Interfaces">
+      <UniqueIdentifier>{ae88e706-dd9b-440d-87e6-c667f7aaba4d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\stats_manager">
+      <UniqueIdentifier>{304e0801-5791-4264-9778-7a7c250f5f25}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations">
+      <UniqueIdentifier>{7991b527-1b7d-4561-9a94-770c703dd576}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RenderFactory">
+      <UniqueIdentifier>{9af9b0a5-d9cf-475a-99b2-58b8d64c6fa5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\LensFlare">
+      <UniqueIdentifier>{81d24a5d-0ce7-4355-be16-29ffc96962f9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\FactoryPtr">
+      <UniqueIdentifier>{605a02cf-f225-491f-aa13-2c58b67d8ee7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ApplicationRender">
+      <UniqueIdentifier>{90b62e38-8e71-486e-b933-f6a7a5d6a033}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RainRender">
+      <UniqueIdentifier>{2b8091fb-c54e-4cb6-aa83-cdd0068d8ef3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ThunderboltRender">
+      <UniqueIdentifier>{7b24ecc2-feb7-4073-ae34-500fddd5447f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\EnvironmentRender">
+      <UniqueIdentifier>{f1500a5c-32bd-4d7a-9ceb-16ca2b319fc0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RenderDeviceRender">
+      <UniqueIdentifier>{3c9da1db-8b49-47f5-8bdd-dc83ea6fb412}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ConsoleRender">
+      <UniqueIdentifier>{54d58225-d0c1-47ee-941f-11ffb96119a1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ObjectSpaceRender">
+      <UniqueIdentifier>{afb8f254-0f41-4084-a4ee-215b486d9f10}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\FontRender">
+      <UniqueIdentifier>{85d5461d-9f90-4476-accd-d795546ff168}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\WallMarkArray">
+      <UniqueIdentifier>{165529d5-ea5f-495e-bb1d-7eb98f6a3493}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\StatGraphRender">
+      <UniqueIdentifier>{4c2562a8-b176-4591-8ced-e999b92d55b4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ThunderboltDescRender">
+      <UniqueIdentifier>{89c6e368-8f64-4916-a880-b1d61e6e0fec}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\StatsRender">
+      <UniqueIdentifier>{ba443be2-cf20-4fc5-b94a-4de351348a04}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\Debug">
+      <UniqueIdentifier>{e82b0202-da93-4e60-aafe-242c5f8ca164}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\Debug\DebugRender">
+      <UniqueIdentifier>{faaaaf6c-3115-42a3-a4e2-bbb831e44efc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI">
+      <UniqueIdentifier>{7d4dd7d3-bbfe-4b88-8085-66295c3ffdf1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UIRender">
+      <UniqueIdentifier>{14f33055-78e5-4c11-9218-9057d8b6b77f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UIShader">
+      <UniqueIdentifier>{435051ec-aab3-47b1-a3ad-2a60d75a1c70}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UISequenceVideoItem">
+      <UniqueIdentifier>{ad453430-4ebb-4f89-8cc9-944b7fd43262}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\MSAARender">
+      <UniqueIdentifier>{c6f6848f-c092-4edc-9798-b63a6748c371}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="dx9 to dx10 Utils">
+      <UniqueIdentifier>{e93ba529-f3d6-4956-a874-240dca4ff628}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="StateManager">
+      <UniqueIdentifier>{15abaf55-68b6-4b68-854d-8f37c79c5d23}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Utils">
+      <UniqueIdentifier>{17f832ea-e323-457f-92f0-b31e9138f4fe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="3DFluid">
+      <UniqueIdentifier>{b550d7b3-c672-4fe1-9f0e-1cbfc17cb4b8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Debug">
+      <UniqueIdentifier>{3382f8e1-4f96-444a-a5b8-f6230eb36502}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="stdafx.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xrD3DDefs.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xrRender_console.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\PSLibrary.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\QueryHelper.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="r2_types.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="r3.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="r3_R_sun_support.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__dsgraph_structure.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__dsgraph_types.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__occlusion.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__pixel_calculator.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r_sun_cascades.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\DetailManager.h">
+      <Filter>Details</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\DetailModel.h">
+      <Filter>Details</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\NvTriStrip.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\NvTriStripObjects.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\VertexCache.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xrStripify.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Light_DB.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="light_gi.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Light_Package.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="Light_Render_Direct.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="light_smapvis.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\LightTrack.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="SMAP_Allocator.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\WallmarksEngine.h">
+      <Filter>Wallmarks</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_bloom_build.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_BmmD.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_combine.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_deffer_aref.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_deffer_flat.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_deffer_model.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Editor_Selection.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Editor_Wire.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_direct.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_mask.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_occq.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_point.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_reflected.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_spot.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_luminance.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Particle.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_ssao.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="dx10MinMaxSMBlender.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\uber_deffer.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_detail_still.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Lm(EbB).h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Model_EbB.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Screen_SET.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_tree.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidBlenders.h">
+      <Filter>Shading templates\3dFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\DX10 Rain\dx10RainBlender.h">
+      <Filter>Shading templates\DX10 Rain</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ModelPool.h">
+      <Filter>Models</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidVolume.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FLOD.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FProgressive.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FSkinned.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FTreeVisual.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FVisual.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleEffect.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleEffectDef.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleGroup.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__sector.h">
+      <Filter>Visibility\Sector/Portal</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\HOM.h">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\occRasterizer.h">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClInclude>
+    <ClInclude Include="r3_rendertarget.h">
+      <Filter>Core_Target</Filter>
+    </ClInclude>
+    <ClInclude Include="r3_rendertarget_wallmarks.h">
+      <Filter>Core_Target</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ColorMapManager.h">
+      <Filter>Core_Target\ColorMap</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\HW.h">
+      <Filter>Refactored\HW</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\HWCaps.h">
+      <Filter>Refactored\HW</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10R_Backend_Runtime.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FVF.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_hemi.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_Runtime.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_tree.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_xform.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_DStreams.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10ConstantBuffer.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10ConstantBuffer_impl.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r_constants.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Atomic.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Constant.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Matrix.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_RT.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Texture.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Shader.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10r_constants_cache.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources\dx10_R_shader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r_constants_cache.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources\dx10_R_shader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ETextureParams.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ResourceManager.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\TextureDescrManager.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\blenders\Blender.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\blenders\Blender_CLSID.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\blenders\Blender_Recorder.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\tss.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\tss_def.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\D3DUtils.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\DrawUtils.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_box.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_cone.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_cylinder.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_sphere.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_sphere_part.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxParticleCustom.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FBasicVisual.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FHierrarhyVisual.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ParticleCustom.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderVisual.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Animation.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\Kinematics.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\KinematicsAnimated.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SkeletonAnimated.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SkeletonCustom.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SkeletonX.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xr_effgamma.h">
+      <Filter>Refactored\Execution &amp; 3D\Gamma</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\IRenderDetailModel.h">
+      <Filter>Refactored\Interfaces</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderDetailModel.h">
+      <Filter>Refactored\Interfaces</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\stats_manager.h">
+      <Filter>Refactored\stats_manager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxRenderFactory.h">
+      <Filter>Interfase implementations\RenderFactory</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderFactory.h">
+      <Filter>Interfase implementations\RenderFactory</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxLensFlareRender.h">
+      <Filter>Interfase implementations\LensFlare</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\LensFlareRender.h">
+      <Filter>Interfase implementations\LensFlare</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\FactoryPtr.h">
+      <Filter>Interfase implementations\FactoryPtr</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ApplicationRender.h">
+      <Filter>Interfase implementations\ApplicationRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxApplicationRender.h">
+      <Filter>Interfase implementations\ApplicationRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxRainRender.h">
+      <Filter>Interfase implementations\RainRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RainRender.h">
+      <Filter>Interfase implementations\RainRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxThunderboltRender.h">
+      <Filter>Interfase implementations\ThunderboltRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ThunderboltRender.h">
+      <Filter>Interfase implementations\ThunderboltRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxEnvironmentRender.h">
+      <Filter>Interfase implementations\EnvironmentRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\EnvironmentRender.h">
+      <Filter>Interfase implementations\EnvironmentRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxRenderDeviceRender.h">
+      <Filter>Interfase implementations\RenderDeviceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderDeviceRender.h">
+      <Filter>Interfase implementations\RenderDeviceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ConsoleRender.h">
+      <Filter>Interfase implementations\ConsoleRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxConsoleRender.h">
+      <Filter>Interfase implementations\ConsoleRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxObjectSpaceRender.h">
+      <Filter>Interfase implementations\ObjectSpaceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ObjectSpaceRender.h">
+      <Filter>Interfase implementations\ObjectSpaceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxFontRender.h">
+      <Filter>Interfase implementations\FontRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\FontRender.h">
+      <Filter>Interfase implementations\FontRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxWallMarkArray.h">
+      <Filter>Interfase implementations\WallMarkArray</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\WallMarkArray.h">
+      <Filter>Interfase implementations\WallMarkArray</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxStatGraphRender.h">
+      <Filter>Interfase implementations\StatGraphRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\StatGraphRender.h">
+      <Filter>Interfase implementations\StatGraphRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxThunderboltDescRender.h">
+      <Filter>Interfase implementations\ThunderboltDescRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ThunderboltDescRender.h">
+      <Filter>Interfase implementations\ThunderboltDescRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxStatsRender.h">
+      <Filter>Interfase implementations\StatsRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\StatsRender.h">
+      <Filter>Interfase implementations\StatsRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\DebugShader.h">
+      <Filter>Interfase implementations\Debug</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\DebugRender.h">
+      <Filter>Interfase implementations\Debug\DebugRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxDebugRender.h">
+      <Filter>Interfase implementations\Debug\DebugRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxUIRender.h">
+      <Filter>Interfase implementations\UI\UIRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\UIRender.h">
+      <Filter>Interfase implementations\UI\UIRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxUIShader.h">
+      <Filter>Interfase implementations\UI\UIShader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\UIShader.h">
+      <Filter>Interfase implementations\UI\UIShader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxUISequenceVideoItem.h">
+      <Filter>Interfase implementations\UI\UISequenceVideoItem</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\UISequenceVideoItem.h">
+      <Filter>Interfase implementations\UI\UISequenceVideoItem</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\MSAA\dx10MSAABlender.h">
+      <Filter>Interfase implementations\MSAARender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10BufferUtils.h">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10StateUtils.h">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10TextureUtils.h">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10SamplerStateCache.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10ShaderResourceStateCache.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10State.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10StateCache.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10StateCacheImpl.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10StateManager.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Utils\dxHashHelper.h">
+      <Filter>Utils</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidData.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidEmitters.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidGrid.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidManager.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidObstacles.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidRenderer.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Debug\dxPixEventWrapper.h">
+      <Filter>Debug</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleEffectActions.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_nightvision.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_gasmask_dudv.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_gasmask_drops.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_ss_sunshafts.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\tga.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\particles_systems_library_interface.hpp">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\light.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\DetailFormat.h">
+      <Filter>Details</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\xrEngine\cl_intersect.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_dof.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_blur.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_pp_bloom.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_lut.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_smaa.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="stdafx.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\xrRender_console.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="xrRender_R3.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10Texture.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\PSLibrary.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_blenders.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_R_calculate.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_R_lights.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_R_sun.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_sector_detect.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_test_hw.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r3.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_loader.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_R_rain.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_R_render.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_R_sun_support.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__dsgraph_build.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__dsgraph_render.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__dsgraph_render_lods.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__occlusion.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__pixel_calculator.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__screenshot.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\tga.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_CACHE.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_Decompress.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_soft.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_VS.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailModel.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10DetailManager_VS.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\NvTriStrip.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\NvTriStripObjects.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\VertexCache.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\xrStripify.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\light.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Light_DB.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="light_GI.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Light_Package.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="Light_Render_Direct.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="Light_Render_Direct_ComputeXFS.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="light_smapvis.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="light_vis.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\LightTrack.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\WallmarksEngine.cpp">
+      <Filter>Wallmarks</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_bloom_build.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_BmmD.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_combine.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_deffer_aref.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_deffer_flat.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_deffer_model.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Editor_Selection.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Editor_Wire.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_direct.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_mask.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_occq.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_point.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_reflected.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_spot.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_luminance.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Particle.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_ssao.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="dx10MinMaxSMBlender.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\uber_deffer.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_detail_still.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Lm(EbB).cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Model_EbB.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Screen_SET.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_tree.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidBlenders.cpp">
+      <Filter>Shading templates\3dFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\DX10 Rain\dx10RainBlender.cpp">
+      <Filter>Shading templates\DX10 Rain</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ModelPool.cpp">
+      <Filter>Models</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidVolume.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FLOD.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FProgressive.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FSkinned.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FTreeVisual.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FVisual.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleEffect.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleEffectDef.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleGroup.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__sector.cpp">
+      <Filter>Visibility\Sector/Portal</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__sector_traversal.cpp">
+      <Filter>Visibility\Sector/Portal</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\HOM.cpp">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\occRasterizer.cpp">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\occRasterizer_core.cpp">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_accum_direct.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_accum_omnipart_geom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_accum_point.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_accum_point_geom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_accum_reflected.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_accum_spot.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_accum_spot_geom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_create_minmaxSM.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_draw_rain.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_draw_volume.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_enable_scissor.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_mark_msaa_edges.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_phase_accumulator.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_phase_bloom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_phase_combine.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_phase_luminance.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_phase_occq.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_phase_PP.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_phase_rain.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_phase_scene.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_phase_smap_D.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_phase_smap_S.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r3_rendertarget_phase_ssao.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ColorMapManager.cpp">
+      <Filter>Core_Target\ColorMap</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10HW.cpp">
+      <Filter>Refactored\HW</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\HWCaps.cpp">
+      <Filter>Refactored\HW</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_DBG.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_hemi.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_Runtime.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_tree.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_xform.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_DStreams.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10ConstantBuffer.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10r_constants.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10SH_RT.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10SH_Texture.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r_constants.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SH_Atomic.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SH_Constant.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SH_Matrix.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Shader.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10r_constants_cache.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources\dx10_R_shader</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\xrEngine\ai_script_lua_debug.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\xrEngine\ai_script_lua_extension.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10ResourceManager_Resources.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10ResourceManager_Scripting.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ETextureParams.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ResourceManager.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ResourceManager_Loader.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ResourceManager_Reset.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\TextureDescrManager.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\blenders\Blender.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\blenders\Blender_Palette.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\blenders\Blender_Recorder.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Recorder_R2.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\Blender_Recorder_R3.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Recorder_StandartBinding.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\tss_def.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\D3DUtils.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_box.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_cone.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_cylinder.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_sphere.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_sphere_part.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxParticleCustom.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FBasicVisual.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FHierrarhyVisual.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Animation.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonAnimated.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonCustom.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonRigid.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonX.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\xr_effgamma.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Gamma</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\stats_manager.cpp">
+      <Filter>Refactored\stats_manager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxRenderFactory.cpp">
+      <Filter>Interfase implementations\RenderFactory</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxLensFlareRender.cpp">
+      <Filter>Interfase implementations\LensFlare</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxApplicationRender.cpp">
+      <Filter>Interfase implementations\ApplicationRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxRainRender.cpp">
+      <Filter>Interfase implementations\RainRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxThunderboltRender.cpp">
+      <Filter>Interfase implementations\ThunderboltRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxEnvironmentRender.cpp">
+      <Filter>Interfase implementations\EnvironmentRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxRenderDeviceRender.cpp">
+      <Filter>Interfase implementations\RenderDeviceRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxConsoleRender.cpp">
+      <Filter>Interfase implementations\ConsoleRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxObjectSpaceRender.cpp">
+      <Filter>Interfase implementations\ObjectSpaceRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxFontRender.cpp">
+      <Filter>Interfase implementations\FontRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxWallMarkArray.cpp">
+      <Filter>Interfase implementations\WallMarkArray</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxStatGraphRender.cpp">
+      <Filter>Interfase implementations\StatGraphRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxThunderboltDescRender.cpp">
+      <Filter>Interfase implementations\ThunderboltDescRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxStatsRender.cpp">
+      <Filter>Interfase implementations\StatsRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxDebugRender.cpp">
+      <Filter>Interfase implementations\Debug\DebugRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxUIRender.cpp">
+      <Filter>Interfase implementations\UI\UIRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxUIShader.cpp">
+      <Filter>Interfase implementations\UI\UIShader</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxUISequenceVideoItem.cpp">
+      <Filter>Interfase implementations\UI\UISequenceVideoItem</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\MSAA\dx10MSAABlender.cpp">
+      <Filter>Interfase implementations\MSAARender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10BufferUtils.cpp">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10StateUtils.cpp">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10TextureUtils.cpp">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\StateManager\dx10SamplerStateCache.cpp">
+      <Filter>StateManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\StateManager\dx10ShaderResourceStateCache.cpp">
+      <Filter>StateManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\StateManager\dx10State.cpp">
+      <Filter>StateManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\StateManager\dx10StateCache.cpp">
+      <Filter>StateManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\StateManager\dx10StateManager.cpp">
+      <Filter>StateManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Utils\dxHashHelper.cpp">
+      <Filter>Utils</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidData.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidEmitters.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidGrid.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidManager.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidObstacles.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidRenderer.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Debug\dxPixEventWrapper.cpp">
+      <Filter>Debug</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleEffectActions.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_nightvision.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_gasmask_dudv.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_gasmask_drops.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_ss_sunshafts.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_gasmask_drops.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_gasmask_dudv.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_nightvision.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_sunshafts.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_dof.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_dof.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_blur.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_blur.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_pp_bloom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_pp_bloom.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_lut.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_lut.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_smaa.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_smaa.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/Layers/xrRenderPC_R3/xrRender_R3.cpp b/src/Layers/xrRenderPC_R3/xrRender_R3.cpp
index a128b31..77748bf 100644
--- a/src/Layers/xrRenderPC_R3/xrRender_R3.cpp
+++ b/src/Layers/xrRenderPC_R3/xrRender_R3.cpp
@@ -20,9 +20,7 @@ BOOL DllMainXrRenderR3(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserv
 		::DU = &DUImpl;
 		//::vid_mode_token			= inited by HW;
 		UIRender = &UIRenderImpl;
-#ifdef DEBUG
-		DRender						= &DebugRenderImpl;
-#endif	//	DEBUG
+		DRender	= &DebugRenderImpl;
 		xrRender_initconsole();
 		break ;
 	case DLL_THREAD_ATTACH:
diff --git a/src/Layers/xrRenderPC_R4/blender_nightvision.cpp b/src/Layers/xrRenderPC_R4/blender_nightvision.cpp
index 1a5d5c6..a88a9a5 100644
--- a/src/Layers/xrRenderPC_R4/blender_nightvision.cpp
+++ b/src/Layers/xrRenderPC_R4/blender_nightvision.cpp
@@ -3,11 +3,23 @@
 #include "blender_nightvision.h"
 
 CBlender_nightvision::CBlender_nightvision() { description.CLS = 0; }
+CBlender_fakescope::CBlender_fakescope() { description.CLS = 0; } //crookr
+CBlender_heatvision::CBlender_heatvision() { description.CLS = 0;  } //--DSR-- Heatvision
 
 CBlender_nightvision::~CBlender_nightvision()
 {
 }
 
+CBlender_fakescope::~CBlender_fakescope() //crookr
+{
+}
+
+//--DSR-- HeatVision_start
+CBlender_heatvision::~CBlender_heatvision()
+{
+}
+//--DSR-- HeatVision_end
+
 void CBlender_nightvision::Compile(CBlender_Compile& C)
 {
 	IBlender::Compile(C);
@@ -30,6 +42,9 @@ void CBlender_nightvision::Compile(CBlender_Compile& C)
 		C.r_dx10Texture("s_blur_2", r2_RT_blur_2);
 		C.r_dx10Texture("s_blur_4", r2_RT_blur_4);
 		C.r_dx10Texture("s_blur_8", r2_RT_blur_8);		
+
+		C.r_dx10Texture("s_heat", r2_RT_heat); //--DSR-- HeatVision
+
 			
 		C.r_dx10Sampler("smp_base");
 		C.r_dx10Sampler("smp_nofilter");
@@ -45,6 +60,8 @@ void CBlender_nightvision::Compile(CBlender_Compile& C)
 		C.r_dx10Texture("s_blur_4", r2_RT_blur_4);
 		C.r_dx10Texture("s_blur_8", r2_RT_blur_8);		
 		
+		C.r_dx10Texture("s_heat", r2_RT_heat); //--DSR-- HeatVision
+
 		C.r_dx10Sampler("smp_base");
 		C.r_dx10Sampler("smp_nofilter");
 		C.r_dx10Sampler("smp_rtlinear");
@@ -59,6 +76,8 @@ void CBlender_nightvision::Compile(CBlender_Compile& C)
 		C.r_dx10Texture("s_blur_4", r2_RT_blur_4);
 		C.r_dx10Texture("s_blur_8", r2_RT_blur_8);		
 		
+		C.r_dx10Texture("s_heat", r2_RT_heat); //--DSR-- HeatVision
+
 		C.r_dx10Sampler("smp_base");
 		C.r_dx10Sampler("smp_nofilter");
 		C.r_dx10Sampler("smp_rtlinear");
@@ -66,3 +85,63 @@ void CBlender_nightvision::Compile(CBlender_Compile& C)
 		break;		
 	}
 }
+
+void CBlender_fakescope::Compile(CBlender_Compile& C) //crookr
+{
+	IBlender::Compile(C);
+
+	C.r_Pass("stub_screen_space", "fakescope", FALSE, FALSE, FALSE);
+	C.r_dx10Texture("s_position", r2_RT_P);
+	C.r_dx10Texture("s_image", r2_RT_generic0);
+	C.r_dx10Texture("s_bloom_new", r2_RT_pp_bloom);
+	C.r_dx10Texture("s_blur_2", r2_RT_blur_2);
+	C.r_dx10Texture("s_blur_4", r2_RT_blur_4);
+	C.r_dx10Texture("s_blur_8", r2_RT_blur_8);
+	//C.r_dx10Texture("s_scope", "wpn\\wpn_crosshair_pso1");
+	//C.r_dx10Texture("s_scope", scope_fake_texture);
+	C.r_dx10Texture("s_scope", r2_RT_scopert);
+
+
+	C.r_dx10Sampler("smp_base");
+	C.r_dx10Sampler("smp_nofilter");
+	C.r_dx10Sampler("smp_rtlinear");
+	C.r_End();
+
+}
+
+//--DSR-- HeatVision_start
+void CBlender_heatvision::Compile(CBlender_Compile& C) 
+{
+	IBlender::Compile(C);
+
+	switch (C.iElement)
+	{
+	case 0: //Dummy shader - because IDK what gonna happen when r2_nightvision will be 0
+		C.r_Pass("stub_screen_space", "copy_nomsaa", FALSE, FALSE, FALSE);
+		C.r_dx10Texture("s_generic", r2_RT_generic0);
+
+		C.r_dx10Sampler("smp_base");
+		C.r_dx10Sampler("smp_nofilter");
+		C.r_dx10Sampler("smp_rtlinear");
+		C.r_End();
+		break;
+	case 1:
+		C.r_Pass("stub_screen_space", "heatvision", FALSE, FALSE, FALSE);
+		C.r_dx10Texture("s_position", r2_RT_P);
+		C.r_dx10Texture("s_image", r2_RT_generic0);
+		C.r_dx10Texture("s_bloom_new", r2_RT_pp_bloom);
+		C.r_dx10Texture("s_blur_2", r2_RT_blur_2);
+		C.r_dx10Texture("s_blur_4", r2_RT_blur_4);
+		C.r_dx10Texture("s_blur_8", r2_RT_blur_8);
+
+		C.r_dx10Texture("s_heat", r2_RT_heat); //--DSR-- HeatVision
+
+
+		C.r_dx10Sampler("smp_base");
+		C.r_dx10Sampler("smp_nofilter");
+		C.r_dx10Sampler("smp_rtlinear");
+		C.r_End();
+		break;
+	}
+}
+//--DSR-- HeatVision_end
diff --git a/src/Layers/xrRenderPC_R4/blender_nightvision.h b/src/Layers/xrRenderPC_R4/blender_nightvision.h
index 0801e41..8efe46d 100644
--- a/src/Layers/xrRenderPC_R4/blender_nightvision.h
+++ b/src/Layers/xrRenderPC_R4/blender_nightvision.h
@@ -13,3 +13,32 @@ public:
 	CBlender_nightvision();
 	virtual ~CBlender_nightvision();
 };
+
+//crookr
+class CBlender_fakescope : public IBlender
+{
+public:
+	virtual LPCSTR getComment() { return "fakescope"; }
+	virtual BOOL canBeDetailed() { return FALSE; }
+	virtual BOOL canBeLMAPped() { return FALSE; }
+
+	virtual void Compile(CBlender_Compile& C);
+
+	CBlender_fakescope();
+	virtual ~CBlender_fakescope();
+};
+
+//--DSR-- HeatVision_start
+class CBlender_heatvision : public IBlender
+{
+public:
+	virtual LPCSTR getComment() { return "heatvision"; }
+	virtual BOOL canBeDetailed() { return FALSE; }
+	virtual BOOL canBeLMAPped() { return FALSE; }
+
+	virtual void Compile(CBlender_Compile& C);
+
+	CBlender_heatvision();
+	virtual ~CBlender_heatvision();
+};
+//--DSR-- HeatVision_end
diff --git a/src/Layers/xrRenderPC_R4/light_vis.cpp b/src/Layers/xrRenderPC_R4/light_vis.cpp
index f4334ea..ca2ca94 100644
--- a/src/Layers/xrRenderPC_R4/light_vis.cpp
+++ b/src/Layers/xrRenderPC_R4/light_vis.cpp
@@ -36,7 +36,9 @@ void light::vis_prepare()
 	if (ps_r2_ls_flags.test(R2FLAG_EXP_DONT_TEST_UNSHADOWED) && !flags.bShadow) skiptest = true;
 	if (ps_r2_ls_flags.test(R2FLAG_EXP_DONT_TEST_SHADOWED) && flags.bShadow) skiptest = true;
 
-	if (skiptest || Device.vCameraPosition.distance_to(spatial.sphere.P) <= (spatial.sphere.R * 1.01f + safe_area))
+	vis.distance = Device.vCameraPosition.distance_to(spatial.sphere.P);
+
+	if (skiptest || vis.distance <= (spatial.sphere.R * 1.01f + safe_area))
 	{
 		// small error
 		vis.visible = true;
diff --git a/src/Layers/xrRenderPC_R4/r2_R_lights.cpp b/src/Layers/xrRenderPC_R4/r2_R_lights.cpp
index a66b3e0..378121f 100644
--- a/src/Layers/xrRenderPC_R4/r2_R_lights.cpp
+++ b/src/Layers/xrRenderPC_R4/r2_R_lights.cpp
@@ -7,6 +7,24 @@ IC bool pred_area(light* _1, light* _2)
 	return a0 > a1; // reverse -> descending
 }
 
+bool check_grass_shadow(light* L, CFrustum VB)
+{
+	// Grass shadows are allowed?
+	if (ps_ssfx_grass_shadows.x < 3 || !psDeviceFlags2.test(rsGrassShadow))
+		return false;
+
+	// Inside the range?
+	if (L->vis.distance > ps_ssfx_grass_shadows.z)
+		return false;
+
+	// Is in view? L->vis.visible?
+	u32 mask = 0xff;
+	if (!VB.testSphere(L->position, L->range * 0.6f, mask))
+		return false;
+
+	return true;
+}
+
 void CRender::render_lights(light_Package& LP)
 {
 	//////////////////////////////////////////////////////////////////////////
@@ -117,6 +135,15 @@ void CRender::render_lights(light_Package& LP)
 				RCache.set_xform_view(L->X.S.view);
 				RCache.set_xform_project(L->X.S.project);
 				r_dsgraph_render_graph(0);
+				if (Details)
+				{
+					if (check_grass_shadow(L, ViewBase))
+					{
+						Details->fade_distance = -1; // Use light position to calc "fade"
+						Details->light_position.set(L->position);
+						Details->Render();
+					}
+				}
 				L->X.S.transluent = FALSE;
 				if (bSpecial)
 				{
diff --git a/src/Layers/xrRenderPC_R4/r2_R_sun.cpp b/src/Layers/xrRenderPC_R4/r2_R_sun.cpp
index 7d6c6e9..2b0671c 100644
--- a/src/Layers/xrRenderPC_R4/r2_R_sun.cpp
+++ b/src/Layers/xrRenderPC_R4/r2_R_sun.cpp
@@ -1093,13 +1093,13 @@ void CRender::init_cacades()
 	float fBias = -0.0000025f;
 	//	float size = MAP_SIZE_START;
 	m_sun_cascades[0].reset_chain = true;
-	m_sun_cascades[0].size = 20; 
+	m_sun_cascades[0].size = ps_ssfx_shadow_cascades.x; //20
 	m_sun_cascades[0].bias = m_sun_cascades[0].size * fBias;
 
-	m_sun_cascades[1].size = 40;
+	m_sun_cascades[1].size = ps_ssfx_shadow_cascades.y; //40
 	m_sun_cascades[1].bias = m_sun_cascades[1].size * fBias;
 
-	m_sun_cascades[2].size = 160;
+	m_sun_cascades[2].size = ps_ssfx_shadow_cascades.z; //160
 	m_sun_cascades[2].bias = m_sun_cascades[2].size * fBias;
 
 	// 	for( u32 i = 0; i < cascade_count; ++i )
@@ -1384,8 +1384,11 @@ void CRender::render_sun_cascade(u32 cascade_ind)
 			RCache.set_xform_view(Fidentity);
 			RCache.set_xform_project(fuckingsun->X.D.combine);
 			r_dsgraph_render_graph(0);
-			if (ps_r2_ls_flags.test(R2FLAG_SUN_DETAILS))
+			if (psDeviceFlags2.test(rsGrassShadow) && cascade_ind <= ps_ssfx_grass_shadows.x)
+			{
+				Details->fade_distance = dm_fade * dm_fade * ps_ssfx_grass_shadows.y;
 				Details->Render();
+			}
 			fuckingsun->X.D.transluent = FALSE;
 			if (bSpecial)
 			{
diff --git a/src/Layers/xrRenderPC_R4/r2_types.h b/src/Layers/xrRenderPC_R4/r2_types.h
index 18a11d4..723d606 100644
--- a/src/Layers/xrRenderPC_R4/r2_types.h
+++ b/src/Layers/xrRenderPC_R4/r2_types.h
@@ -69,6 +69,9 @@
 #define		r2_RT_dof			"$user$dof"
 #define		r2_RT_ui			"$user$ui"
 
+#define		r2_RT_scopert		"$user$scopeRT" //crookr
+#define		r2_RT_heat			"$user$heat" //--DSR-- HeatVision
+
 #define		r2_RT_smaa_edgetex "$user$smaa_edgetex"
 #define		r2_RT_smaa_blendtex "$user$smaa_blendtex"
 
diff --git a/src/Layers/xrRenderPC_R4/r4.cpp b/src/Layers/xrRenderPC_R4/r4.cpp
index 77fb925..9ef4c87 100644
--- a/src/Layers/xrRenderPC_R4/r4.cpp
+++ b/src/Layers/xrRenderPC_R4/r4.cpp
@@ -614,6 +614,9 @@ void CRender::OnFrame()
 		Device.seqParallel.insert(Device.seqParallel.begin(),
 			fastdelegate::FastDelegate0<>(&HOM, &CHOM::MT_RENDER));
 	}
+
+	if (Details)
+		g_pGamePersistent->GrassBendersUpdateAnimations();
 }
 
 // Particles
@@ -777,24 +780,35 @@ BOOL CRender::occ_visible(Fbox& P) { return HOM.visible(P); }
 void CRender::add_Visual(IRenderVisual* V) { add_leafs_Dynamic((dxRender_Visual*)V, V->_ignore_optimization); }
 void CRender::add_Geometry(IRenderVisual* V) { add_Static((dxRender_Visual*)V, View->getMask()); }
 
+// demonized: add user defined rotation to wallmark
 void CRender::add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* verts, float ttl, bool ignore_opt, bool random_rotation)
+{
+	add_StaticWallmark(S, P, s, T, verts, ttl, ignore_opt, random_rotation ? ::Random.randF(-20.f, 20.f) : 0.f);
+}
+
+void CRender::add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* verts, float ttl, bool ignore_opt, float rotation)
 {
 	if (T->suppress_wm) return;
-	VERIFY2(_valid(P) && _valid(s) && T && verts && (s>EPS_L), "Invalid static wallmark params");
-	Wallmarks->AddStaticWallmark(T, verts, P, &*S, s, ttl, ignore_opt, random_rotation);
+	VERIFY2(_valid(P) && _valid(s) && T && verts && (s > EPS_L), "Invalid static wallmark params");
+	Wallmarks->AddStaticWallmark(T, verts, P, &*S, s, ttl, ignore_opt, rotation);
 }
 
 void CRender::add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, bool random_rotation)
 {
-	dxWallMarkArray* pWMA = (dxWallMarkArray *)pArray;
+	add_StaticWallmark(pArray, P, s, T, V, ttl, ignore_opt, random_rotation ? ::Random.randF(-20.f, 20.f) : 0.f);
+}
+
+void CRender::add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation)
+{
+	dxWallMarkArray* pWMA = (dxWallMarkArray*)pArray;
 	ref_shader* pShader = pWMA->dxGenerateWallmark();
-	if (pShader) add_StaticWallmark(*pShader, P, s, T, V, ttl, ignore_opt, random_rotation);
+	if (pShader) add_StaticWallmark(*pShader, P, s, T, V, ttl, ignore_opt, rotation);
 }
 
 void CRender::add_StaticWallmark(const wm_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V)
 {
 	dxUIShader* pShader = (dxUIShader*)&*S;
-	add_StaticWallmark(pShader->hShader, P, s, T, V);
+	add_StaticWallmark(pShader->hShader, P, s, T, V, 0.0f, false, true);
 }
 
 void CRender::clear_static_wallmarks()
@@ -1223,6 +1237,8 @@ HRESULT CRender::shader_compile(
 	char c_ssao [32];
 	char c_sun_quality [32];
 	char c_smaa_quality [32];
+	
+	char c_inter_grass[32];
 
 	char sh_name[MAX_PATH] = "";
 
@@ -1680,6 +1696,27 @@ HRESULT CRender::shader_compile(
 	}
 	sh_name[len] = '0' + char(o.dx10_minmax_sm != 0);
 	++len;
+	
+	if (ps_ssfx_grass_interactive.y > 0)
+	{
+		xr_sprintf(c_inter_grass, "%d", u8(ps_ssfx_grass_interactive.y));
+		defines[def_it].Name = "SSFX_INT_GRASS";
+		defines[def_it].Definition = c_inter_grass;
+		def_it++;
+		xr_strcat(sh_name, c_inter_grass);
+		len += xr_strlen(c_inter_grass);
+	}
+	else
+	{
+		sh_name[len] = '0';
+		++len;
+	}
+
+	defines[def_it].Name = "SSFX_MODEXE";
+	defines[def_it].Definition = "1";
+	def_it++;
+	sh_name[len] = '1';
+	++len;
 
 	//Be carefull!!!!! this should be at the end to correctly generate
 	//compiled shader name;
diff --git a/src/Layers/xrRenderPC_R4/r4.h b/src/Layers/xrRenderPC_R4/r4.h
index 9ae8b61..7568e78 100644
--- a/src/Layers/xrRenderPC_R4/r4.h
+++ b/src/Layers/xrRenderPC_R4/r4.h
@@ -233,6 +233,9 @@ public:
 		o_hemi = 0.75f * LT.get_hemi();
 		//o_hemi						= 0.5f*LT.get_hemi			()	;
 		o_sun = 0.75f * LT.get_sun();
+		//--DSR-- HeatVision_start
+		RCache.hemi.set_hotness(O->GetHotness(), O->GetTransparency(), 0.f, 0.f);
+		//--DSR-- HeatVision_end
 		CopyMemory(o_hemi_cube, LT.get_hemi_cube(), CROS_impl::NUM_FACES*sizeof(float));
 	}
 
@@ -248,6 +251,9 @@ public:
 #ifdef	DEBUG
         if (ps_r2_ls_flags.test(R2FLAG_GLOBALMATERIAL))	mtl=ps_r2_gmaterial;
 #endif
+		if (!(T && T->m_is_hot))
+			RCache.hemi.set_hotness(0.f, 0.f, 0.f, 0.f);
+
 		RCache.hemi.set_material(o_hemi, o_sun, 0, (mtl < 5 ? (mtl + .5f) / 4.f : mtl));
 		RCache.hemi.set_pos_faces(o_hemi_cube[CROS_impl::CUBE_FACE_POS_X],
 		                          o_hemi_cube[CROS_impl::CUBE_FACE_POS_Y],
@@ -300,8 +306,12 @@ public:
 	virtual void add_Geometry(IRenderVisual* V); // add visual(s)	(all culling performed)
 
 	// wallmarks
+	// demonized: add user defined rotation to wallmark
 	virtual void add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl = 0.f, bool ignore_opt = false, bool random_rotation = true);
+	virtual void add_StaticWallmark(ref_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation);
 	virtual void add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl = 0.f, bool ignore_opt = false, bool random_rotation = true);
+	virtual void add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation);
+
 	virtual void add_StaticWallmark(const wm_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V);
 	virtual void clear_static_wallmarks();
 	virtual void add_SkeletonWallmark(intrusive_ptr<CSkeletonWallmark> wm);
diff --git a/src/Layers/xrRenderPC_R4/r4_R_render.cpp b/src/Layers/xrRenderPC_R4/r4_R_render.cpp
index 46e1c03..f520c80 100644
--- a/src/Layers/xrRenderPC_R4/r4_R_render.cpp
+++ b/src/Layers/xrRenderPC_R4/r4_R_render.cpp
@@ -145,12 +145,22 @@ void CRender::render_main(Fmatrix& m_ViewProjection, bool _fportals)
 				break; // exit loop on frustums
 			}
 		}
-		if (g_pGameLevel && (phase == PHASE_NORMAL)) g_hud->Render_Last(); // HUD
+		if (g_pGameLevel && (phase == PHASE_NORMAL))
+		{
+			g_hud->Render_Last(); // HUD
+			if (g_hud->RenderActiveItemUIQuery())
+				r_dsgraph_render_hud_ui();
+		}
 	}
 	else
 	{
 		set_Object(0);
-		if (g_pGameLevel && (phase == PHASE_NORMAL)) g_hud->Render_Last(); // HUD
+		if (g_pGameLevel && (phase == PHASE_NORMAL))
+		{
+			g_hud->Render_Last(); // HUD
+			if (g_hud->RenderActiveItemUIQuery())
+				r_dsgraph_render_hud_ui();
+		}
 	}
 }
 
@@ -435,12 +445,6 @@ void CRender::Render()
 		Target->phase_scene_end();
 	}
 
-	if (g_hud && g_hud->RenderActiveItemUIQuery())
-	{
-		Target->phase_wallmarks();
-		r_dsgraph_render_hud_ui();
-	}
-
 	// Wall marks
 	if (Wallmarks)
 	{
@@ -538,6 +542,9 @@ void CRender::Render()
 		Target->phase_combine();
 	}
 
+	if (Details)
+		Details->details_clear();
+
 	VERIFY(0==mapDistort.size());
 }
 
@@ -585,4 +592,4 @@ void CRender::RenderToTarget(RRT target)
 	HW.m_pSwapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&pBuffer);
 	HW.pContext->CopyResource((*RT)->pSurface, pBuffer);
 	pBuffer->Release();
-}
\ No newline at end of file
+}
diff --git a/src/Layers/xrRenderPC_R4/r4_loader.cpp b/src/Layers/xrRenderPC_R4/r4_loader.cpp
index 9d22692..9b63e16 100644
--- a/src/Layers/xrRenderPC_R4/r4_loader.cpp
+++ b/src/Layers/xrRenderPC_R4/r4_loader.cpp
@@ -339,7 +339,7 @@ void CRender::LoadSectors(IReader* fs)
 	{
 		CDB::Collector CL;
 		fs->find_chunk(fsL_PORTALS);
-		for (i = 0; i < count; i++)
+		for (u32 i = 0; i < count; i++)
 		{
 			b_portal P;
 			fs->r(&P, sizeof(P));
diff --git a/src/Layers/xrRenderPC_R4/r4_rendertarget.cpp b/src/Layers/xrRenderPC_R4/r4_rendertarget.cpp
index 4280e5f..f7781bb 100644
--- a/src/Layers/xrRenderPC_R4/r4_rendertarget.cpp
+++ b/src/Layers/xrRenderPC_R4/r4_rendertarget.cpp
@@ -350,6 +350,8 @@ CRenderTarget::CRenderTarget()
 	b_gasmask_drops = xr_new<CBlender_gasmask_drops>();
 	b_gasmask_dudv = xr_new<CBlender_gasmask_dudv>();
 	b_nightvision = xr_new<CBlender_nightvision>();
+	b_fakescope = xr_new<CBlender_fakescope>(); //crookr
+	b_heatvision = xr_new<CBlender_heatvision>(); //--DSR-- HeatVision
 	b_lut = xr_new<CBlender_lut>();
 	b_smaa = xr_new<CBlender_smaa>();
 
@@ -434,6 +436,13 @@ CRenderTarget::CRenderTarget()
 		rt_Generic_1.create(r2_RT_generic1, w, h, D3DFMT_A8R8G8B8, 1);
 		rt_Generic.create(r2_RT_generic, w, h, D3DFMT_A8R8G8B8, 1);
 
+
+		rt_fakescope.create(r2_RT_scopert, w, h, D3DFMT_A8R8G8B8, 1); //crookr fakescope
+
+		//--DSR-- HeatVision_start
+		rt_Heat.create(r2_RT_heat, w, h, D3DFMT_A8R8G8B8, SampleCount);
+		//--DSR-- HeatVision_end
+
         if (RImplementation.o.dx10_msaa)
             rt_Generic_temp.create("$user$generic_temp", w, h, D3DFMT_A8R8G8B8, SampleCount);
         else
@@ -479,6 +488,10 @@ CRenderTarget::CRenderTarget()
 	s_gasmask_drops.create(b_gasmask_drops, "r2\\gasmask_drops");
 	s_gasmask_dudv.create(b_gasmask_dudv, "r2\\gasmask_dudv");
 	s_nightvision.create(b_nightvision, "r2\\nightvision");
+
+	s_fakescope.create(b_fakescope, "r2\\fakescope"); //crookr
+
+	s_heatvision.create(b_heatvision, "r2\\heatvision"); //--DSR-- HeatVision
 	s_lut.create(b_lut, "r2\\lut");	
 	// OCCLUSION
 	s_occq.create(b_occq, "r2\\occq");
@@ -1007,7 +1020,7 @@ CRenderTarget::CRenderTarget()
 			descHBAO.CPUAccessFlags = 0;
 			descHBAO.MiscFlags = 0;
 
-			it = TEX_jitter_count - 1;
+			int it = TEX_jitter_count - 1;
 			subData[it].pSysMem = tempDataHBAO;
 			subData[it].SysMemPitch = descHBAO.Width * sampleSize * sizeof(float);
 
@@ -1156,6 +1169,8 @@ CRenderTarget::~CRenderTarget()
 	xr_delete(b_gasmask_drops);
 	xr_delete(b_gasmask_dudv);
 	xr_delete(b_nightvision);
+	xr_delete(b_fakescope); //crookr
+	xr_delete(b_heatvision); //--DSR-- HeatVision
 	xr_delete(b_lut);	
 	xr_delete(b_smaa);
 
diff --git a/src/Layers/xrRenderPC_R4/r4_rendertarget.h b/src/Layers/xrRenderPC_R4/r4_rendertarget.h
index 37da92e..846ab97 100644
--- a/src/Layers/xrRenderPC_R4/r4_rendertarget.h
+++ b/src/Layers/xrRenderPC_R4/r4_rendertarget.h
@@ -58,6 +58,8 @@ public:
 	IBlender* b_gasmask_drops;
 	IBlender* b_gasmask_dudv;
 	IBlender* b_nightvision;
+	IBlender* b_fakescope; //crookr
+	IBlender* b_heatvision; //--DSR-- HeatVision
 	IBlender* b_lut;
 	IBlender* b_smaa;
 	// compute shader for hdao
@@ -83,6 +85,10 @@ public:
 	ref_rt rt_Position; // 64bit,	fat	(x,y,z,?)				(eye-space)
 	ref_rt rt_Color; // 64/32bit,fat	(r,g,b,specular-gloss)	(or decompressed MET-8-8-8-8)
 
+	//--DSR-- HeatVision_start
+	ref_rt rt_Heat;
+	//--DSR-- HeatVision_end
+
 	// 
 	ref_rt rt_Accumulator; // 64bit		(r,g,b,specular)
 	ref_rt rt_Accumulator_temp; // only for HW which doesn't feature fp16 blend
@@ -95,6 +101,9 @@ public:
 	
 	ref_rt rt_secondVP;	// 32bit		(r,g,b,a) --//#SM+#-- +SecondVP+
 
+
+	ref_rt rt_fakescope;	// crookr fakescope
+
 	ref_rt rt_dof;
 	ref_rt rt_ui_pda;
 	
@@ -174,7 +183,9 @@ private:
 	ref_shader s_pp_bloom;	
 	ref_shader s_gasmask_drops;
 	ref_shader s_gasmask_dudv;
-	ref_shader s_nightvision;	
+	ref_shader s_nightvision;
+	ref_shader s_fakescope; //crookr
+	ref_shader s_heatvision; //--DSR-- HeatVision
 	ref_shader s_smaa;
 
 	ref_shader s_lut;
@@ -300,6 +311,8 @@ public:
 	void phase_gasmask_drops();
 	void phase_gasmask_dudv();
 	void phase_nightvision();
+	void phase_fakescope(); //crookr
+	void phase_heatvision(); //--DSR-- HeatVision
 	void phase_lut();		
 	void phase_smaa();
 	void phase_scene_prepare();
diff --git a/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_bloom.cpp b/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_bloom.cpp
index dcc140d..09aebe6 100644
--- a/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_bloom.cpp
+++ b/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_bloom.cpp
@@ -42,8 +42,8 @@ void CalcGauss_k7(
 	// calculate
 	float mag = 0;
 	for (int i = -7; i <= 0; i++) W[-i] = expf(-float(i * i) / (2 * r * r)); // weight
-	for (i = 0; i < 8; i++) mag += i ? 2 * W[i] : W[i]; // symmetrical weight
-	for (i = 0; i < 8; i++) W[i] = s_out * W[i] / mag;
+	for (int i = 0; i < 8; i++) mag += i ? 2 * W[i] : W[i]; // symmetrical weight
+	for (int i = 0; i < 8; i++) W[i] = s_out * W[i] / mag;
 
 	// W[0]=0, W[7]=-7
 	w0.set(W[1], W[2], W[3], W[4]); // -1, -2, -3, -4
diff --git a/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_combine.cpp b/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_combine.cpp
index 875ae48..9a58b03 100644
--- a/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_combine.cpp
+++ b/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_combine.cpp
@@ -290,10 +290,14 @@ void CRenderTarget::phase_combine()
 	// Forward rendering
 	{
 		PIX_EVENT(Forward_rendering);
+
+		//--DSR-- HeatVision_start
 		if (!RImplementation.o.dx10_msaa)
-			u_setrt(rt_Generic_0, 0, 0, HW.pBaseZB); // LDR RT
+			u_setrt(rt_Generic_0, rt_Heat, 0, HW.pBaseZB); // LDR RT
 		else
-			u_setrt(rt_Generic_0_r, 0, 0, RImplementation.Target->rt_MSAADepth->pZRT); // LDR RT
+			u_setrt(rt_Generic_0_r, rt_Heat, 0, RImplementation.Target->rt_MSAADepth->pZRT); // LDR RT
+		//--DSR-- HeatVision_end
+
 		RCache.set_CullMode(CULL_CCW);
 		RCache.set_Stencil(FALSE);
 		RCache.set_ColorWriteEnable();
@@ -396,6 +400,16 @@ void CRenderTarget::phase_combine()
 	if(ps_r2_nightvision > 0)
 		phase_nightvision();
 	
+	//--DSR-- HeatVision_start
+	if (ps_r2_heatvision > 0)
+		phase_heatvision();
+	//--DSR-- HeatVision_end
+
+	if (scope_fake_enabled)
+	{
+		phase_fakescope(); //crookr
+	}
+
     //SMAA
 	if (ps_smaa_quality)
 	{
diff --git a/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_scene.cpp b/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_scene.cpp
index 0b59b29..071894b 100644
--- a/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_scene.cpp
+++ b/src/Layers/xrRenderPC_R4/r4_rendertarget_phase_scene.cpp
@@ -14,6 +14,10 @@ void CRenderTarget::phase_scene_prepare()
 		FLOAT ColorRGBA[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 		HW.pContext->ClearRenderTargetView(rt_Position->pRT, ColorRGBA);
 
+		//--DSR-- HeatVision_start
+		HW.pContext->ClearRenderTargetView(rt_Heat->pRT, ColorRGBA);
+		//--DSR-- HeatVision_end
+
 		if (!RImplementation.o.dx10_msaa)
 			HW.pContext->ClearDepthStencilView(HW.pBaseZB, D3D_CLEAR_DEPTH | D3D_CLEAR_STENCIL, 1.0f, 0);
 		else
@@ -39,8 +43,10 @@ void CRenderTarget::phase_scene_begin()
 
 	// Targets, use accumulator for temporary storage
 	{
-		if (RImplementation.o.albedo_wo) u_setrt(rt_Position, rt_Accumulator, pZB);
-		else u_setrt(rt_Position, rt_Color, pZB);
+		//--DSR-- HeatVision_start
+		if (RImplementation.o.albedo_wo) u_setrt(rt_Position, rt_Accumulator, rt_Heat, pZB);
+		else u_setrt(rt_Position, rt_Color, rt_Heat, pZB);
+		//--DSR-- HeatVision_end
 	}
 
 
diff --git a/src/Layers/xrRenderPC_R4/vs2022/xrRender_R4.vcxproj b/src/Layers/xrRenderPC_R4/vs2022/xrRender_R4.vcxproj
new file mode 100644
index 0000000..96891a3
--- /dev/null
+++ b/src/Layers/xrRenderPC_R4/vs2022/xrRender_R4.vcxproj
@@ -0,0 +1,609 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}</ProjectGuid>
+    <RootNamespace>xrRender_R4</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_DX11;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R4_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <AdditionalOptions>-Zm113 %(AdditionalOptions)</AdditionalOptions>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DisableSpecificWarnings>4005;4099</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>dxguid.lib;d3dx11.lib;D3DCompiler.lib;d3d11.lib;dxgi.lib;nvapi.lib;dxerr.lib;d3d10.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)x64\Release;$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;USE_DX11;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R4_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <AdditionalOptions>-Zm113 %(AdditionalOptions)</AdditionalOptions>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DisableSpecificWarnings>4005;4099</DisableSpecificWarnings>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>dxguid.lib;d3dx11.lib;D3DCompiler.lib;d3d11.lib;dxgi.lib;nvapi.lib;dxerr.lib;d3d10.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)x64\Release;$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)nvapi;$(DXSDK_DIR)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_DX11;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRRENDER_R4_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <AdditionalOptions>-Zm113 %(AdditionalOptions)</AdditionalOptions>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DisableSpecificWarnings>4005;4099</DisableSpecificWarnings>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>dxguid.lib;d3dx11.lib;D3DCompiler.lib;d3d11.lib;dxgi.lib;nvapi.lib;dxerr.lib;d3d10.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries\x64;$(xrLibDir);$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)x64\Release;$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <IgnoreSpecificDefaultLibraries>LIBCMT</IgnoreSpecificDefaultLibraries>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\..\Include\xrRender\ApplicationRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ConsoleRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DebugRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DebugShader.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\DrawUtils.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\EnvironmentRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\FactoryPtr.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\FontRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\Kinematics.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\KinematicsAnimated.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\LensFlareRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ObjectSpaceRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ParticleCustom.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\particles_systems_library_interface.hpp" />
+    <ClInclude Include="..\..\..\Include\xrRender\RainRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderDetailModel.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderDeviceRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderFactory.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\RenderVisual.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\StatGraphRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\StatsRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ThunderboltDescRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\ThunderboltRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UIRender.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UISequenceVideoItem.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\UIShader.h" />
+    <ClInclude Include="..\..\..\Include\xrRender\WallMarkArray.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidBlenders.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidData.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidEmitters.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidGrid.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidManager.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidObstacles.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidRenderer.h" />
+    <ClInclude Include="..\..\xrRenderDX10\3DFluid\dx103DFluidVolume.h" />
+    <ClInclude Include="..\..\xrRenderDX10\DX10 Rain\dx10RainBlender.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10BufferUtils.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10ConstantBuffer.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10ConstantBuffer_impl.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10R_Backend_Runtime.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10r_constants_cache.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10StateUtils.h" />
+    <ClInclude Include="..\..\xrRenderDX10\dx10TextureUtils.h" />
+    <ClInclude Include="..\..\xrRenderDX10\DXCommonTypes.h" />
+    <ClInclude Include="..\..\xrRenderDX10\MSAA\dx10MSAABlender.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10SamplerStateCache.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10ShaderResourceStateCache.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10State.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10StateCache.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10StateCacheImpl.h" />
+    <ClInclude Include="..\..\xrRenderDX10\StateManager\dx10StateManager.h" />
+    <ClInclude Include="..\..\xrRender\Animation.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender_CLSID.h" />
+    <ClInclude Include="..\..\xrRender\blenders\Blender_Recorder.h" />
+    <ClInclude Include="..\..\xrRender\Blender_BmmD.h" />
+    <ClInclude Include="..\..\xrRender\Blender_detail_still.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Editor_Selection.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Editor_Wire.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Lm(EbB).h" />
+    <ClInclude Include="..\..\xrRender\Blender_Model_EbB.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Particle.h" />
+    <ClInclude Include="..\..\xrRender\Blender_Screen_SET.h" />
+    <ClInclude Include="..\..\xrRender\Blender_tree.h" />
+    <ClInclude Include="..\..\xrRender\ColorMapManager.h" />
+    <ClInclude Include="..\..\xrRender\D3DUtils.h" />
+    <ClInclude Include="..\..\xrRender\Debug\dxPixEventWrapper.h" />
+    <ClInclude Include="..\..\xrRender\DetailManager.h" />
+    <ClInclude Include="..\..\xrRender\DetailModel.h" />
+    <ClInclude Include="..\..\xrRender\du_box.h" />
+    <ClInclude Include="..\..\xrRender\du_cone.h" />
+    <ClInclude Include="..\..\xrRender\du_cylinder.h" />
+    <ClInclude Include="..\..\xrRender\du_sphere.h" />
+    <ClInclude Include="..\..\xrRender\du_sphere_part.h" />
+    <ClInclude Include="..\..\xrRender\dxApplicationRender.h" />
+    <ClInclude Include="..\..\xrRender\dxConsoleRender.h" />
+    <ClInclude Include="..\..\xrRender\dxDebugRender.h" />
+    <ClInclude Include="..\..\xrRender\dxEnvironmentRender.h" />
+    <ClInclude Include="..\..\xrRender\dxFontRender.h" />
+    <ClInclude Include="..\..\xrRender\dxLensFlareRender.h" />
+    <ClInclude Include="..\..\xrRender\dxObjectSpaceRender.h" />
+    <ClInclude Include="..\..\xrRender\dxParticleCustom.h" />
+    <ClInclude Include="..\..\xrRender\dxRainRender.h" />
+    <ClInclude Include="..\..\xrRender\dxRenderDeviceRender.h" />
+    <ClInclude Include="..\..\xrRender\dxRenderFactory.h" />
+    <ClInclude Include="..\..\xrRender\dxStatGraphRender.h" />
+    <ClInclude Include="..\..\xrRender\dxStatsRender.h" />
+    <ClInclude Include="..\..\xrRender\dxThunderboltDescRender.h" />
+    <ClInclude Include="..\..\xrRender\dxThunderboltRender.h" />
+    <ClInclude Include="..\..\xrRender\dxUIRender.h" />
+    <ClInclude Include="..\..\xrRender\dxUISequenceVideoItem.h" />
+    <ClInclude Include="..\..\xrRender\dxUIShader.h" />
+    <ClInclude Include="..\..\xrRender\dxWallMarkArray.h" />
+    <ClInclude Include="..\..\xrRender\ETextureParams.h" />
+    <ClInclude Include="..\..\xrRender\FBasicVisual.h" />
+    <ClInclude Include="..\..\xrRender\FHierrarhyVisual.h" />
+    <ClInclude Include="..\..\xrRender\FLOD.h" />
+    <ClInclude Include="..\..\xrRender\FProgressive.h" />
+    <ClInclude Include="..\..\xrRender\FSkinned.h" />
+    <ClInclude Include="..\..\xrRender\FTreeVisual.h" />
+    <ClInclude Include="..\..\xrRender\FVF.h" />
+    <ClInclude Include="..\..\xrRender\FVisual.h" />
+    <ClInclude Include="..\..\xrRender\HOM.h" />
+    <ClInclude Include="..\..\xrRender\HW.h" />
+    <ClInclude Include="..\..\xrRender\HWCaps.h" />
+    <ClInclude Include="..\..\xrRender\IRenderDetailModel.h" />
+    <ClInclude Include="..\..\xrRender\LightTrack.h" />
+    <ClInclude Include="..\..\xrRender\Light_DB.h" />
+    <ClInclude Include="..\..\xrRender\Light_Package.h" />
+    <ClInclude Include="..\..\xrRender\ModelPool.h" />
+    <ClInclude Include="..\..\xrRender\NvTriStrip.h" />
+    <ClInclude Include="..\..\xrRender\NvTriStripObjects.h" />
+    <ClInclude Include="..\..\xrRender\occRasterizer.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffect.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffectActions.h" />
+    <ClInclude Include="..\..\xrRender\ParticleEffectDef.h" />
+    <ClInclude Include="..\..\xrRender\ParticleGroup.h" />
+    <ClInclude Include="..\..\xrRender\PSLibrary.h" />
+    <ClInclude Include="..\..\xrRender\QueryHelper.h" />
+    <ClInclude Include="..\..\xrRender\ResourceManager.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_hemi.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_Runtime.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_tree.h" />
+    <ClInclude Include="..\..\xrRender\R_Backend_xform.h" />
+    <ClInclude Include="..\..\xrRender\r_constants.h" />
+    <ClInclude Include="..\..\xrRender\r_constants_cache.h" />
+    <ClInclude Include="..\..\xrRender\R_DStreams.h" />
+    <ClInclude Include="..\..\xrRender\r_sun_cascades.h" />
+    <ClInclude Include="..\..\xrRender\r__dsgraph_structure.h" />
+    <ClInclude Include="..\..\xrRender\r__dsgraph_types.h" />
+    <ClInclude Include="..\..\xrRender\r__occlusion.h" />
+    <ClInclude Include="..\..\xrRender\r__pixel_calculator.h" />
+    <ClInclude Include="..\..\xrRender\r__sector.h" />
+    <ClInclude Include="..\..\xrRender\Shader.h" />
+    <ClInclude Include="..\..\xrRender\ShaderResourceTraits.h" />
+    <ClInclude Include="..\..\xrRender\SH_Atomic.h" />
+    <ClInclude Include="..\..\xrRender\SH_Constant.h" />
+    <ClInclude Include="..\..\xrRender\SH_Matrix.h" />
+    <ClInclude Include="..\..\xrRender\SH_RT.h" />
+    <ClInclude Include="..\..\xrRender\SH_Texture.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonAnimated.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonCustom.h" />
+    <ClInclude Include="..\..\xrRender\SkeletonX.h" />
+    <ClInclude Include="..\..\xrRender\stats_manager.h" />
+    <ClInclude Include="..\..\xrRender\TextureDescrManager.h" />
+    <ClInclude Include="..\..\xrRender\tga.h" />
+    <ClInclude Include="..\..\xrRender\tss.h" />
+    <ClInclude Include="..\..\xrRender\tss_def.h" />
+    <ClInclude Include="..\..\xrRender\uber_deffer.h" />
+    <ClInclude Include="..\..\xrRender\Utils\dxHashHelper.h" />
+    <ClInclude Include="..\..\xrRender\VertexCache.h" />
+    <ClInclude Include="..\..\xrRender\WallmarksEngine.h" />
+    <ClInclude Include="..\..\xrRender\xrD3DDefs.h" />
+    <ClInclude Include="..\..\xrRender\xrRender_console.h" />
+    <ClInclude Include="..\..\xrRender\xrStripify.h" />
+    <ClInclude Include="..\..\xrRender\xr_effgamma.h" />
+    <ClInclude Include="..\blender_bloom_build.h" />
+    <ClInclude Include="..\blender_blur.h" />
+    <ClInclude Include="..\blender_combine.h" />
+    <ClInclude Include="..\blender_deffer_aref.h" />
+    <ClInclude Include="..\blender_deffer_flat.h" />
+    <ClInclude Include="..\blender_deffer_model.h" />
+    <ClInclude Include="..\blender_dof.h" />
+    <ClInclude Include="..\blender_lut.h" />
+    <ClInclude Include="..\blender_nightvision.h" />
+    <ClInclude Include="..\blender_gasmask_drops.h" />
+    <ClInclude Include="..\blender_gasmask_dudv.h" />
+    <ClInclude Include="..\blender_light_direct.h" />
+    <ClInclude Include="..\blender_light_mask.h" />
+    <ClInclude Include="..\blender_light_occq.h" />
+    <ClInclude Include="..\blender_light_point.h" />
+    <ClInclude Include="..\blender_light_reflected.h" />
+    <ClInclude Include="..\blender_light_spot.h" />
+    <ClInclude Include="..\blender_luminance.h" />
+    <ClInclude Include="..\blender_pp_bloom.h" />
+    <ClInclude Include="..\blender_smaa.h" />
+    <ClInclude Include="..\blender_ssao.h" />
+    <ClInclude Include="..\blender_ss_sunshafts.h" />
+    <ClInclude Include="..\..\..\xrEngine\cl_intersect.h" />
+    <ClInclude Include="..\ComputeShader.h" />
+    <ClInclude Include="..\CSCompiler.h" />
+    <ClInclude Include="..\..\xrRender\DetailFormat.h" />
+    <ClInclude Include="..\dx11HDAOCSBlender.h" />
+    <ClInclude Include="..\dx11MinMaxSMBlender.h" />
+    <ClInclude Include="..\..\xrRender\light.h" />
+    <ClInclude Include="..\light_gi.h" />
+    <ClInclude Include="..\Light_Render_Direct.h" />
+    <ClInclude Include="..\light_smapvis.h" />
+    <ClInclude Include="..\r2_types.h" />
+    <ClInclude Include="..\r4.h" />
+    <ClInclude Include="..\r4_rendertarget.h" />
+    <ClInclude Include="..\r4_rendertarget_wallmarks.h" />
+    <ClInclude Include="..\r4_R_sun_support.h" />
+    <ClInclude Include="..\R_Backend_LOD.h" />
+    <ClInclude Include="..\SMAP_Allocator.h" />
+    <ClInclude Include="..\stdafx.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\..\xrEngine\ai_script_lua_debug.cpp" />
+    <ClCompile Include="..\..\..\xrEngine\ai_script_lua_extension.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidBlenders.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidData.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidEmitters.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidGrid.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidManager.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidObstacles.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidRenderer.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\3DFluid\dx103DFluidVolume.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\Blender_Recorder_R3.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\DX10 Rain\dx10RainBlender.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10BufferUtils.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10ConstantBuffer.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10DetailManager_VS.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10HW.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10ResourceManager_Resources.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10ResourceManager_Scripting.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10r_constants.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10r_constants_cache.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10SH_RT.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10SH_Texture.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10StateUtils.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10Texture.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\dx10TextureUtils.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\MSAA\dx10MSAABlender.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\StateManager\dx10SamplerStateCache.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\StateManager\dx10ShaderResourceStateCache.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\StateManager\dx10State.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\StateManager\dx10StateCache.cpp" />
+    <ClCompile Include="..\..\xrRenderDX10\StateManager\dx10StateManager.cpp" />
+    <ClCompile Include="..\..\xrRender\Animation.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender_Palette.cpp" />
+    <ClCompile Include="..\..\xrRender\blenders\Blender_Recorder.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_BmmD.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_detail_still.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Editor_Selection.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Editor_Wire.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Lm(EbB).cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Model_EbB.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Particle.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Recorder_R2.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Recorder_StandartBinding.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_Screen_SET.cpp" />
+    <ClCompile Include="..\..\xrRender\Blender_tree.cpp" />
+    <ClCompile Include="..\..\xrRender\ColorMapManager.cpp" />
+    <ClCompile Include="..\..\xrRender\D3DUtils.cpp" />
+    <ClCompile Include="..\..\xrRender\Debug\dxPixEventWrapper.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_CACHE.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_Decompress.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_soft.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailManager_VS.cpp" />
+    <ClCompile Include="..\..\xrRender\DetailModel.cpp" />
+    <ClCompile Include="..\..\xrRender\du_box.cpp" />
+    <ClCompile Include="..\..\xrRender\du_cone.cpp" />
+    <ClCompile Include="..\..\xrRender\du_cylinder.cpp" />
+    <ClCompile Include="..\..\xrRender\du_sphere.cpp" />
+    <ClCompile Include="..\..\xrRender\du_sphere_part.cpp" />
+    <ClCompile Include="..\..\xrRender\dxApplicationRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxConsoleRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxDebugRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxEnvironmentRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxFontRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxLensFlareRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxObjectSpaceRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxParticleCustom.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRainRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRenderDeviceRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxRenderFactory.cpp" />
+    <ClCompile Include="..\..\xrRender\dxStatGraphRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxStatsRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxThunderboltDescRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxThunderboltRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUIRender.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUISequenceVideoItem.cpp" />
+    <ClCompile Include="..\..\xrRender\dxUIShader.cpp" />
+    <ClCompile Include="..\..\xrRender\dxWallMarkArray.cpp" />
+    <ClCompile Include="..\..\xrRender\ETextureParams.cpp" />
+    <ClCompile Include="..\..\xrRender\FBasicVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FHierrarhyVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FLOD.cpp" />
+    <ClCompile Include="..\..\xrRender\FProgressive.cpp" />
+    <ClCompile Include="..\..\xrRender\FSkinned.cpp" />
+    <ClCompile Include="..\..\xrRender\FTreeVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\FVisual.cpp" />
+    <ClCompile Include="..\..\xrRender\HOM.cpp" />
+    <ClCompile Include="..\..\xrRender\HWCaps.cpp" />
+    <ClCompile Include="..\..\xrRender\light.cpp" />
+    <ClCompile Include="..\..\xrRender\LightTrack.cpp" />
+    <ClCompile Include="..\..\xrRender\Light_DB.cpp" />
+    <ClCompile Include="..\..\xrRender\Light_Package.cpp" />
+    <ClCompile Include="..\..\xrRender\ModelPool.cpp" />
+    <ClCompile Include="..\..\xrRender\NvTriStrip.cpp" />
+    <ClCompile Include="..\..\xrRender\NvTriStripObjects.cpp" />
+    <ClCompile Include="..\..\xrRender\occRasterizer.cpp" />
+    <ClCompile Include="..\..\xrRender\occRasterizer_core.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffect.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffectActions.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleEffectDef.cpp" />
+    <ClCompile Include="..\..\xrRender\ParticleGroup.cpp" />
+    <ClCompile Include="..\..\xrRender\PSLibrary.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_blur.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_dof.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_lut.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_nightvision.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_gasmask_drops.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_gasmask_dudv.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_pp_bloom.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_smaa.cpp" />
+    <ClCompile Include="..\..\xrRender\rendertarget_phase_sunshafts.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Loader.cpp" />
+    <ClCompile Include="..\..\xrRender\ResourceManager_Reset.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_DBG.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_hemi.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_Runtime.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_tree.cpp" />
+    <ClCompile Include="..\..\xrRender\R_Backend_xform.cpp" />
+    <ClCompile Include="..\..\xrRender\r_constants.cpp" />
+    <ClCompile Include="..\..\xrRender\R_DStreams.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_build.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_render.cpp" />
+    <ClCompile Include="..\..\xrRender\r__dsgraph_render_lods.cpp" />
+    <ClCompile Include="..\..\xrRender\r__occlusion.cpp" />
+    <ClCompile Include="..\..\xrRender\r__pixel_calculator.cpp" />
+    <ClCompile Include="..\..\xrRender\r__screenshot.cpp" />
+    <ClCompile Include="..\..\xrRender\r__sector.cpp" />
+    <ClCompile Include="..\..\xrRender\r__sector_traversal.cpp" />
+    <ClCompile Include="..\..\xrRender\Shader.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Atomic.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Constant.cpp" />
+    <ClCompile Include="..\..\xrRender\SH_Matrix.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonAnimated.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonCustom.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonRigid.cpp" />
+    <ClCompile Include="..\..\xrRender\SkeletonX.cpp" />
+    <ClCompile Include="..\..\xrRender\stats_manager.cpp" />
+    <ClCompile Include="..\..\xrRender\TextureDescrManager.cpp" />
+    <ClCompile Include="..\..\xrRender\tga.cpp" />
+    <ClCompile Include="..\..\xrRender\tss_def.cpp" />
+    <ClCompile Include="..\..\xrRender\uber_deffer.cpp" />
+    <ClCompile Include="..\..\xrRender\Utils\dxHashHelper.cpp" />
+    <ClCompile Include="..\..\xrRender\VertexCache.cpp" />
+    <ClCompile Include="..\..\xrRender\WallmarksEngine.cpp" />
+    <ClCompile Include="..\..\xrRender\xrRender_console.cpp" />
+    <ClCompile Include="..\..\xrRender\xrStripify.cpp" />
+    <ClCompile Include="..\..\xrRender\xr_effgamma.cpp" />
+    <ClCompile Include="..\blender_bloom_build.cpp" />
+    <ClCompile Include="..\blender_blur.cpp" />
+    <ClCompile Include="..\blender_combine.cpp" />
+    <ClCompile Include="..\blender_deffer_aref.cpp" />
+    <ClCompile Include="..\blender_deffer_flat.cpp" />
+    <ClCompile Include="..\blender_deffer_model.cpp" />
+    <ClCompile Include="..\blender_dof.cpp" />
+    <ClCompile Include="..\blender_lut.cpp" />
+    <ClCompile Include="..\blender_nightvision.cpp" />
+    <ClCompile Include="..\blender_gasmask_drops.cpp" />
+    <ClCompile Include="..\blender_gasmask_dudv.cpp" />
+    <ClCompile Include="..\blender_light_direct.cpp" />
+    <ClCompile Include="..\blender_light_mask.cpp" />
+    <ClCompile Include="..\blender_light_occq.cpp" />
+    <ClCompile Include="..\blender_light_point.cpp" />
+    <ClCompile Include="..\blender_light_reflected.cpp" />
+    <ClCompile Include="..\blender_light_spot.cpp" />
+    <ClCompile Include="..\blender_luminance.cpp" />
+    <ClCompile Include="..\blender_pp_bloom.cpp" />
+    <ClCompile Include="..\blender_smaa.cpp" />
+    <ClCompile Include="..\blender_ssao.cpp" />
+    <ClCompile Include="..\blender_ss_sunshafts.cpp" />
+    <ClCompile Include="..\ComputeShader.cpp" />
+    <ClCompile Include="..\CSCompiler.cpp" />
+    <ClCompile Include="..\dx11HDAOCSBlender.cpp" />
+    <ClCompile Include="..\dx11MinMaxSMBlender.cpp" />
+    <ClCompile Include="..\light_GI.cpp" />
+    <ClCompile Include="..\Light_Render_Direct.cpp" />
+    <ClCompile Include="..\Light_Render_Direct_ComputeXFS.cpp" />
+    <ClCompile Include="..\light_smapvis.cpp" />
+    <ClCompile Include="..\light_vis.cpp" />
+    <ClCompile Include="..\r2_blenders.cpp" />
+    <ClCompile Include="..\r2_R_calculate.cpp" />
+    <ClCompile Include="..\r2_R_lights.cpp" />
+    <ClCompile Include="..\r2_R_sun.cpp" />
+    <ClCompile Include="..\r2_sector_detect.cpp" />
+    <ClCompile Include="..\r2_test_hw.cpp" />
+    <ClCompile Include="..\r4.cpp" />
+    <ClCompile Include="..\r4_loader.cpp" />
+    <ClCompile Include="..\r4_rendertarget.cpp" />
+    <ClCompile Include="..\r4_rendertarget_accum_direct.cpp" />
+    <ClCompile Include="..\r4_rendertarget_accum_omnipart_geom.cpp" />
+    <ClCompile Include="..\r4_rendertarget_accum_point.cpp" />
+    <ClCompile Include="..\r4_rendertarget_accum_point_geom.cpp" />
+    <ClCompile Include="..\r4_rendertarget_accum_reflected.cpp" />
+    <ClCompile Include="..\r4_rendertarget_accum_spot.cpp" />
+    <ClCompile Include="..\r4_rendertarget_accum_spot_geom.cpp" />
+    <ClCompile Include="..\r4_rendertarget_create_minmaxSM.cpp" />
+    <ClCompile Include="..\r4_rendertarget_draw_rain.cpp" />
+    <ClCompile Include="..\r4_rendertarget_draw_volume.cpp" />
+    <ClCompile Include="..\r4_rendertarget_enable_scissor.cpp" />
+    <ClCompile Include="..\r4_rendertarget_mark_msaa_edges.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_accumulator.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_bloom.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_combine.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_hdao.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_luminance.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_occq.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_PP.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_rain.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_scene.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_smap_D.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_smap_S.cpp" />
+    <ClCompile Include="..\r4_rendertarget_phase_ssao.cpp" />
+    <ClCompile Include="..\r4_R_rain.cpp" />
+    <ClCompile Include="..\r4_R_render.cpp" />
+    <ClCompile Include="..\r4_R_sun_support.cpp" />
+    <ClCompile Include="..\R_Backend_LOD.cpp" />
+    <ClCompile Include="..\stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\xrRender_R4.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)3rd party\crypto\vs2022\crypto.vcxproj">
+      <Project>{fa169092-ea3e-40c1-8e5a-a2b575700fe8}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCore\vs2022\xrCore.vcxproj">
+      <Project>{a0f7d1fb-59a7-4717-a7e4-96f37e91998e}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCPU_Pipe\vs2022\xrCPU_Pipe.vcxproj">
+      <Project>{ca0649dd-d089-423a-981c-46b57a884eb9}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/Layers/xrRenderPC_R4/vs2022/xrRender_R4.vcxproj.filters b/src/Layers/xrRenderPC_R4/vs2022/xrRender_R4.vcxproj.filters
new file mode 100644
index 0000000..e15446a
--- /dev/null
+++ b/src/Layers/xrRenderPC_R4/vs2022/xrRender_R4.vcxproj.filters
@@ -0,0 +1,1443 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Kernel">
+      <UniqueIdentifier>{7c3adbe0-c7f0-4969-bc3e-c99c57a78afc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core">
+      <UniqueIdentifier>{b5c7493c-f593-4f0c-92d0-c3b43f0180f1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Details">
+      <UniqueIdentifier>{9e40de76-5a76-4dde-9047-d8821e9cee70}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Stripifier">
+      <UniqueIdentifier>{1cf19204-564b-4eea-8913-e132cb337f03}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Lights">
+      <UniqueIdentifier>{22a1bf29-0f99-4164-93f9-44af3ded79fa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Glows">
+      <UniqueIdentifier>{85794e45-b0b9-41a3-b335-596bf915af7f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Wallmarks">
+      <UniqueIdentifier>{7006af31-3b04-4684-b349-8ddf6673fbbb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Shading templates">
+      <UniqueIdentifier>{70478f65-3143-440e-85dc-0662874dbdd5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Shading templates\R1">
+      <UniqueIdentifier>{dd668ff6-9dda-40cf-bcff-b49fd6b651fb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Shading templates\3dFluid">
+      <UniqueIdentifier>{1b2f37ed-dfec-4b27-a41f-ed0d2ffcc586}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Shading templates\DX10 Rain">
+      <UniqueIdentifier>{14eec6cf-befe-413b-a932-0a1073df76b7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Models">
+      <UniqueIdentifier>{333afd1d-3f02-430f-a00f-a7475b65b2b6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Models\Visuals">
+      <UniqueIdentifier>{87c361b2-96ed-4f5a-a1db-d606394d997f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility">
+      <UniqueIdentifier>{d16e522a-ddd0-4284-a9b4-c7eb51a4c90e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility\Sector/Portal">
+      <UniqueIdentifier>{0de4e218-82ed-4e57-86ac-0aad637ab89c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Visibility\HOM Occlusion">
+      <UniqueIdentifier>{63969245-6550-412d-9da3-f01864dcab43}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core_Target">
+      <UniqueIdentifier>{8015e3b9-7ce8-4b3a-abbf-bc1d020f4ef3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core_Target\ColorMap">
+      <UniqueIdentifier>{a10aea7e-2b84-4b66-bcc9-0992a8d3c9b1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored">
+      <UniqueIdentifier>{537961f6-bc05-4854-82ff-a43ddd4d01d5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\HW">
+      <UniqueIdentifier>{b737efc3-c5ce-4ece-af62-66f615969431}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Backend">
+      <UniqueIdentifier>{95c65fb6-d96a-4c0c-98ec-71939cc5f308}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D">
+      <UniqueIdentifier>{fdef771e-894f-4552-8a27-b7a1b3cdfd11}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders">
+      <UniqueIdentifier>{40e92819-03f5-479f-8541-fc13c41e4a72}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Resources">
+      <UniqueIdentifier>{d1696d81-2d5c-416b-9e06-ecadf76f897b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Resources\dx10_R_shader">
+      <UniqueIdentifier>{5037bbed-8608-488d-9ed8-9f8d9c5ab29d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\ShaderManager">
+      <UniqueIdentifier>{d4d7feda-aeb2-48ea-abbe-55c2422f6272}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Shaders\Blender">
+      <UniqueIdentifier>{8a0c81f9-b5ca-4013-ab5a-279b3c931a47}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\DebugDraw">
+      <UniqueIdentifier>{bead1f64-011e-4bda-b370-46d957089db1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Visuals">
+      <UniqueIdentifier>{54efa38f-7dff-4468-be02-2acb51aa3964}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Visuals\Skeleton">
+      <UniqueIdentifier>{4d307143-97a8-41d1-9e2b-6c0d7b9c00b8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Execution &amp; 3D\Gamma">
+      <UniqueIdentifier>{f9157a2a-b905-4072-a5e3-e01dbf33c7f6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\Interfaces">
+      <UniqueIdentifier>{2d5c9e16-1975-40bf-944f-88e40988cf3a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Refactored\stats_manager">
+      <UniqueIdentifier>{9b974940-311d-4fe5-94ad-8f4e1d2af3e6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations">
+      <UniqueIdentifier>{1163d451-d0fc-4b15-bcf0-60af66bb54b9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RenderFactory">
+      <UniqueIdentifier>{0aa53879-777d-41ec-a388-3b8eec9cec31}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\LensFlare">
+      <UniqueIdentifier>{c376846f-4d84-4775-87f6-145528221076}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\FactoryPtr">
+      <UniqueIdentifier>{4e70cb04-1d51-4143-b435-d3007bf3df43}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ApplicationRender">
+      <UniqueIdentifier>{5aba3939-e3e3-435e-90a7-287bdbdc2b4c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RainRender">
+      <UniqueIdentifier>{18d0a956-5ae0-42f2-bcf0-28f73809e404}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ThunderboltRender">
+      <UniqueIdentifier>{3cadbef7-101e-4c48-87e5-de82aeab0bfc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\EnvironmentRender">
+      <UniqueIdentifier>{66f1ed3d-a5a4-4696-8ea3-a117238e3a19}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\RenderDeviceRender">
+      <UniqueIdentifier>{c1d29847-ec51-4b80-a0a0-a842cc845878}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ConsoleRender">
+      <UniqueIdentifier>{4c06d1c4-6915-48d6-8f85-beb5bc79b268}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ObjectSpaceRender">
+      <UniqueIdentifier>{c4866e0e-02e0-4e20-9848-5fe9e56fd70e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\FontRender">
+      <UniqueIdentifier>{c97525f6-6721-4598-a9b7-72ccccf7c003}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\WallMarkArray">
+      <UniqueIdentifier>{41c57757-9f6e-4d25-bb0e-829054bea11b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\StatGraphRender">
+      <UniqueIdentifier>{d9ca7f3d-3eb0-482d-8c67-b62ce6cad23d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\ThunderboltDescRender">
+      <UniqueIdentifier>{9c69c7b1-4704-4e22-80a4-d2d0c38499f7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\StatsRender">
+      <UniqueIdentifier>{4f45bd86-fce6-4266-b545-03ff9a7e6be1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\Debug">
+      <UniqueIdentifier>{d078ed97-038b-475e-ac53-531218973aaa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\Debug\DebugRender">
+      <UniqueIdentifier>{e9124dd3-68cc-419b-b6b3-b9597069c34d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI">
+      <UniqueIdentifier>{91e610ca-597f-47e8-95c0-57ca37c31fb8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UIRender">
+      <UniqueIdentifier>{d905aa7e-4424-4f7c-bf4d-3ff008865a0e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UIShader">
+      <UniqueIdentifier>{7b6f009a-7bb4-47ed-b5a6-d000e372a88c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\UI\UISequenceVideoItem">
+      <UniqueIdentifier>{8e609091-9c4e-4b0f-991b-6ea121fadf76}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfase implementations\MSAARender">
+      <UniqueIdentifier>{763f97a9-f305-4cc2-995d-a1adad48351c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="dx9 to dx10 Utils">
+      <UniqueIdentifier>{4c505c0d-891a-4fa4-a5e0-920bd864322e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="StateManager">
+      <UniqueIdentifier>{3c73a5ec-4580-4204-9c3b-94bc6d8dcc53}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Utils">
+      <UniqueIdentifier>{f535a92e-7512-4130-864e-2d0e6360a0c0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="3DFluid">
+      <UniqueIdentifier>{dbf14a7f-83de-4240-b3b6-0965c460a1c6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Debug">
+      <UniqueIdentifier>{8d6caf5d-f49d-40f7-b1ae-f1fd5c4f0d58}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\xrRenderDX10\DXCommonTypes.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="stdafx.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xrD3DDefs.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xrRender_console.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\PSLibrary.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\QueryHelper.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="r2_types.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="r4.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="r4_R_sun_support.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__dsgraph_structure.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__dsgraph_types.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__occlusion.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__pixel_calculator.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r_sun_cascades.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\DetailManager.h">
+      <Filter>Details</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\DetailModel.h">
+      <Filter>Details</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\NvTriStrip.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\NvTriStripObjects.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\VertexCache.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xrStripify.h">
+      <Filter>Stripifier</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Light_DB.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="light_gi.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Light_Package.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="Light_Render_Direct.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="light_smapvis.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\LightTrack.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="SMAP_Allocator.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\WallmarksEngine.h">
+      <Filter>Wallmarks</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_bloom_build.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_BmmD.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_combine.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_deffer_aref.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_deffer_flat.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_deffer_model.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Editor_Selection.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Editor_Wire.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_direct.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_mask.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_occq.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_point.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_reflected.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_light_spot.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_luminance.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Particle.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_ssao.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="dx11HDAOCSBlender.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="dx11MinMaxSMBlender.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\uber_deffer.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_detail_still.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Lm(EbB).h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Model_EbB.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_Screen_SET.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Blender_tree.h">
+      <Filter>Shading templates\R1</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidBlenders.h">
+      <Filter>Shading templates\3dFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\DX10 Rain\dx10RainBlender.h">
+      <Filter>Shading templates\DX10 Rain</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ModelPool.h">
+      <Filter>Models</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidVolume.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FLOD.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FProgressive.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FSkinned.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FTreeVisual.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FVisual.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleEffect.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleEffectDef.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleGroup.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r__sector.h">
+      <Filter>Visibility\Sector/Portal</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\HOM.h">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\occRasterizer.h">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClInclude>
+    <ClInclude Include="r4_rendertarget.h">
+      <Filter>Core_Target</Filter>
+    </ClInclude>
+    <ClInclude Include="r4_rendertarget_wallmarks.h">
+      <Filter>Core_Target</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ColorMapManager.h">
+      <Filter>Core_Target\ColorMap</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\HW.h">
+      <Filter>Refactored\HW</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\HWCaps.h">
+      <Filter>Refactored\HW</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10R_Backend_Runtime.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FVF.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_hemi.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="R_Backend_LOD.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_Runtime.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_tree.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_Backend_xform.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\R_DStreams.h">
+      <Filter>Refactored\Backend</Filter>
+    </ClInclude>
+    <ClInclude Include="ComputeShader.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="CSCompiler.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10ConstantBuffer.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10ConstantBuffer_impl.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r_constants.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Atomic.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Constant.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Matrix.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_RT.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SH_Texture.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Shader.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10r_constants_cache.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources\dx10_R_shader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\r_constants_cache.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources\dx10_R_shader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ETextureParams.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ResourceManager.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ShaderResourceTraits.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\TextureDescrManager.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\blenders\Blender.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\blenders\Blender_CLSID.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\blenders\Blender_Recorder.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\tss.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\tss_def.h">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\D3DUtils.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\DrawUtils.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_box.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_cone.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_cylinder.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_sphere.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\du_sphere_part.h">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxParticleCustom.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FBasicVisual.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\FHierrarhyVisual.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ParticleCustom.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderVisual.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Animation.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\Kinematics.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\KinematicsAnimated.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SkeletonAnimated.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SkeletonCustom.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\SkeletonX.h">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\xr_effgamma.h">
+      <Filter>Refactored\Execution &amp; 3D\Gamma</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\IRenderDetailModel.h">
+      <Filter>Refactored\Interfaces</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderDetailModel.h">
+      <Filter>Refactored\Interfaces</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\stats_manager.h">
+      <Filter>Refactored\stats_manager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxRenderFactory.h">
+      <Filter>Interfase implementations\RenderFactory</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderFactory.h">
+      <Filter>Interfase implementations\RenderFactory</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxLensFlareRender.h">
+      <Filter>Interfase implementations\LensFlare</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\LensFlareRender.h">
+      <Filter>Interfase implementations\LensFlare</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\FactoryPtr.h">
+      <Filter>Interfase implementations\FactoryPtr</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ApplicationRender.h">
+      <Filter>Interfase implementations\ApplicationRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxApplicationRender.h">
+      <Filter>Interfase implementations\ApplicationRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxRainRender.h">
+      <Filter>Interfase implementations\RainRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RainRender.h">
+      <Filter>Interfase implementations\RainRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxThunderboltRender.h">
+      <Filter>Interfase implementations\ThunderboltRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ThunderboltRender.h">
+      <Filter>Interfase implementations\ThunderboltRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxEnvironmentRender.h">
+      <Filter>Interfase implementations\EnvironmentRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\EnvironmentRender.h">
+      <Filter>Interfase implementations\EnvironmentRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxRenderDeviceRender.h">
+      <Filter>Interfase implementations\RenderDeviceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\RenderDeviceRender.h">
+      <Filter>Interfase implementations\RenderDeviceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ConsoleRender.h">
+      <Filter>Interfase implementations\ConsoleRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxConsoleRender.h">
+      <Filter>Interfase implementations\ConsoleRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxObjectSpaceRender.h">
+      <Filter>Interfase implementations\ObjectSpaceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ObjectSpaceRender.h">
+      <Filter>Interfase implementations\ObjectSpaceRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxFontRender.h">
+      <Filter>Interfase implementations\FontRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\FontRender.h">
+      <Filter>Interfase implementations\FontRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxWallMarkArray.h">
+      <Filter>Interfase implementations\WallMarkArray</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\WallMarkArray.h">
+      <Filter>Interfase implementations\WallMarkArray</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxStatGraphRender.h">
+      <Filter>Interfase implementations\StatGraphRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\StatGraphRender.h">
+      <Filter>Interfase implementations\StatGraphRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxThunderboltDescRender.h">
+      <Filter>Interfase implementations\ThunderboltDescRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\ThunderboltDescRender.h">
+      <Filter>Interfase implementations\ThunderboltDescRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxStatsRender.h">
+      <Filter>Interfase implementations\StatsRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\StatsRender.h">
+      <Filter>Interfase implementations\StatsRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\DebugShader.h">
+      <Filter>Interfase implementations\Debug</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\DebugRender.h">
+      <Filter>Interfase implementations\Debug\DebugRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxDebugRender.h">
+      <Filter>Interfase implementations\Debug\DebugRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxUIRender.h">
+      <Filter>Interfase implementations\UI\UIRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\UIRender.h">
+      <Filter>Interfase implementations\UI\UIRender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxUIShader.h">
+      <Filter>Interfase implementations\UI\UIShader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\UIShader.h">
+      <Filter>Interfase implementations\UI\UIShader</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\dxUISequenceVideoItem.h">
+      <Filter>Interfase implementations\UI\UISequenceVideoItem</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\UISequenceVideoItem.h">
+      <Filter>Interfase implementations\UI\UISequenceVideoItem</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\MSAA\dx10MSAABlender.h">
+      <Filter>Interfase implementations\MSAARender</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10BufferUtils.h">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10StateUtils.h">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\dx10TextureUtils.h">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10SamplerStateCache.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10ShaderResourceStateCache.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10State.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10StateCache.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10StateCacheImpl.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\StateManager\dx10StateManager.h">
+      <Filter>StateManager</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Utils\dxHashHelper.h">
+      <Filter>Utils</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidData.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidEmitters.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidGrid.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidManager.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidObstacles.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRenderDX10\3DFluid\dx103DFluidRenderer.h">
+      <Filter>3DFluid</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\Debug\dxPixEventWrapper.h">
+      <Filter>Debug</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\ParticleEffectActions.h">
+      <Filter>Models\Visuals</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_nightvision.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_gasmask_dudv.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_gasmask_drops.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_ss_sunshafts.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\tga.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\Include\xrRender\particles_systems_library_interface.hpp">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\light.h">
+      <Filter>Lights</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrRender\DetailFormat.h">
+      <Filter>Details</Filter>
+    </ClInclude>
+    <ClInclude Include="..\..\xrEngine\cl_intersect.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_dof.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_blur.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_pp_bloom.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_lut.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+    <ClInclude Include="blender_smaa.h">
+      <Filter>Shading templates</Filter>
+    </ClInclude>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="stdafx.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\xrRender_console.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="xrRender_R4.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10Texture.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\PSLibrary.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_blenders.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_R_calculate.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_R_lights.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_R_sun.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_sector_detect.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r2_test_hw.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r4.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_loader.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_R_rain.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_R_render.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_R_sun_support.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__dsgraph_build.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__dsgraph_render.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__dsgraph_render_lods.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__occlusion.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__pixel_calculator.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__screenshot.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\tga.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_CACHE.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_Decompress.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_soft.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailManager_VS.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\DetailModel.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10DetailManager_VS.cpp">
+      <Filter>Details</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\NvTriStrip.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\NvTriStripObjects.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\VertexCache.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\xrStripify.cpp">
+      <Filter>Stripifier</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\light.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Light_DB.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="light_GI.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Light_Package.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="Light_Render_Direct.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="Light_Render_Direct_ComputeXFS.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="light_smapvis.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="light_vis.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\LightTrack.cpp">
+      <Filter>Lights</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\WallmarksEngine.cpp">
+      <Filter>Wallmarks</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_bloom_build.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_BmmD.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_combine.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_deffer_aref.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_deffer_flat.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_deffer_model.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Editor_Selection.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Editor_Wire.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_direct.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_mask.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_occq.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_point.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_reflected.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_light_spot.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_luminance.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Particle.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_ssao.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="dx11HDAOCSBlender.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="dx11MinMaxSMBlender.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\uber_deffer.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_detail_still.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Lm(EbB).cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Model_EbB.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Screen_SET.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_tree.cpp">
+      <Filter>Shading templates\R1</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidBlenders.cpp">
+      <Filter>Shading templates\3dFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\DX10 Rain\dx10RainBlender.cpp">
+      <Filter>Shading templates\DX10 Rain</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ModelPool.cpp">
+      <Filter>Models</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidVolume.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FLOD.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FProgressive.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FSkinned.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FTreeVisual.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FVisual.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleEffect.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleEffectDef.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleGroup.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__sector.cpp">
+      <Filter>Visibility\Sector/Portal</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r__sector_traversal.cpp">
+      <Filter>Visibility\Sector/Portal</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\HOM.cpp">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\occRasterizer.cpp">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\occRasterizer_core.cpp">
+      <Filter>Visibility\HOM Occlusion</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_accum_direct.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_accum_omnipart_geom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_accum_point.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_accum_point_geom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_accum_reflected.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_accum_spot.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_accum_spot_geom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_create_minmaxSM.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_draw_rain.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_draw_volume.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_enable_scissor.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_mark_msaa_edges.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_accumulator.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_bloom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_combine.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_hdao.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_luminance.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_occq.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_PP.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_rain.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_scene.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_smap_D.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_smap_S.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="r4_rendertarget_phase_ssao.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ColorMapManager.cpp">
+      <Filter>Core_Target\ColorMap</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10HW.cpp">
+      <Filter>Refactored\HW</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\HWCaps.cpp">
+      <Filter>Refactored\HW</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_DBG.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_hemi.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="R_Backend_LOD.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_Runtime.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_tree.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_Backend_xform.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\R_DStreams.cpp">
+      <Filter>Refactored\Backend</Filter>
+    </ClCompile>
+    <ClCompile Include="ComputeShader.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="CSCompiler.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10ConstantBuffer.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10r_constants.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10SH_RT.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10SH_Texture.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\r_constants.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SH_Atomic.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SH_Constant.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SH_Matrix.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Shader.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10r_constants_cache.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Resources\dx10_R_shader</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\xrEngine\ai_script_lua_debug.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\..\xrEngine\ai_script_lua_extension.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10ResourceManager_Resources.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10ResourceManager_Scripting.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ETextureParams.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ResourceManager.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ResourceManager_Loader.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ResourceManager_Reset.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\TextureDescrManager.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\ShaderManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\blenders\Blender.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\blenders\Blender_Palette.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\blenders\Blender_Recorder.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Recorder_R2.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\Blender_Recorder_R3.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Blender_Recorder_StandartBinding.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\tss_def.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Shaders\Blender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\D3DUtils.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_box.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_cone.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_cylinder.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_sphere.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\du_sphere_part.cpp">
+      <Filter>Refactored\Execution &amp; 3D\DebugDraw</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxParticleCustom.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FBasicVisual.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\FHierrarhyVisual.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Animation.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonAnimated.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonCustom.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonRigid.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\SkeletonX.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Visuals\Skeleton</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\xr_effgamma.cpp">
+      <Filter>Refactored\Execution &amp; 3D\Gamma</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\stats_manager.cpp">
+      <Filter>Refactored\stats_manager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxRenderFactory.cpp">
+      <Filter>Interfase implementations\RenderFactory</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxLensFlareRender.cpp">
+      <Filter>Interfase implementations\LensFlare</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxApplicationRender.cpp">
+      <Filter>Interfase implementations\ApplicationRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxRainRender.cpp">
+      <Filter>Interfase implementations\RainRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxThunderboltRender.cpp">
+      <Filter>Interfase implementations\ThunderboltRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxEnvironmentRender.cpp">
+      <Filter>Interfase implementations\EnvironmentRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxRenderDeviceRender.cpp">
+      <Filter>Interfase implementations\RenderDeviceRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxConsoleRender.cpp">
+      <Filter>Interfase implementations\ConsoleRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxObjectSpaceRender.cpp">
+      <Filter>Interfase implementations\ObjectSpaceRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxFontRender.cpp">
+      <Filter>Interfase implementations\FontRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxWallMarkArray.cpp">
+      <Filter>Interfase implementations\WallMarkArray</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxStatGraphRender.cpp">
+      <Filter>Interfase implementations\StatGraphRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxThunderboltDescRender.cpp">
+      <Filter>Interfase implementations\ThunderboltDescRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxStatsRender.cpp">
+      <Filter>Interfase implementations\StatsRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxDebugRender.cpp">
+      <Filter>Interfase implementations\Debug\DebugRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxUIRender.cpp">
+      <Filter>Interfase implementations\UI\UIRender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxUIShader.cpp">
+      <Filter>Interfase implementations\UI\UIShader</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\dxUISequenceVideoItem.cpp">
+      <Filter>Interfase implementations\UI\UISequenceVideoItem</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\MSAA\dx10MSAABlender.cpp">
+      <Filter>Interfase implementations\MSAARender</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10BufferUtils.cpp">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10StateUtils.cpp">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\dx10TextureUtils.cpp">
+      <Filter>dx9 to dx10 Utils</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\StateManager\dx10SamplerStateCache.cpp">
+      <Filter>StateManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\StateManager\dx10ShaderResourceStateCache.cpp">
+      <Filter>StateManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\StateManager\dx10State.cpp">
+      <Filter>StateManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\StateManager\dx10StateCache.cpp">
+      <Filter>StateManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\StateManager\dx10StateManager.cpp">
+      <Filter>StateManager</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Utils\dxHashHelper.cpp">
+      <Filter>Utils</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidData.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidEmitters.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidGrid.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidManager.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidObstacles.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRenderDX10\3DFluid\dx103DFluidRenderer.cpp">
+      <Filter>3DFluid</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\Debug\dxPixEventWrapper.cpp">
+      <Filter>Debug</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\ParticleEffectActions.cpp">
+      <Filter>Models\Visuals</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_nightvision.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_gasmask_dudv.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_gasmask_drops.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_ss_sunshafts.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_gasmask_drops.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_gasmask_dudv.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_nightvision.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_sunshafts.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_dof.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_dof.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_blur.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_blur.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_pp_bloom.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_pp_bloom.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_lut.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_lut.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrRender\rendertarget_phase_smaa.cpp">
+      <Filter>Core_Target</Filter>
+    </ClCompile>
+    <ClCompile Include="blender_smaa.cpp">
+      <Filter>Shading templates</Filter>
+    </ClCompile>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/Layers/xrRenderPC_R4/xrRender_R4.cpp b/src/Layers/xrRenderPC_R4/xrRender_R4.cpp
index c06e604..ea0b384 100644
--- a/src/Layers/xrRenderPC_R4/xrRender_R4.cpp
+++ b/src/Layers/xrRenderPC_R4/xrRender_R4.cpp
@@ -20,9 +20,7 @@ BOOL DllMainXrRenderR4(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserv
 		::DU = &DUImpl;
 		//::vid_mode_token			= inited by HW;
 		UIRender = &UIRenderImpl;
-#ifdef DEBUG
-		DRender						= &DebugRenderImpl;
-#endif	//	DEBUG
+		DRender	= &DebugRenderImpl;
 		xrRender_initconsole();
 		break ;
 	case DLL_THREAD_ATTACH:
diff --git a/src/ReShadeCompat/ReShadeCompat.vcxproj b/src/ReShadeCompat/ReShadeCompat.vcxproj
new file mode 100644
index 0000000..9714e0b
--- /dev/null
+++ b/src/ReShadeCompat/ReShadeCompat.vcxproj
@@ -0,0 +1,219 @@
+<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Verified|x64">
+      <Configuration>Verified</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <Keyword>Win32Proj</Keyword>
+    <ProjectGuid>{9646dbf8-1a5e-41f0-9328-f65910706666}</ProjectGuid>
+    <RootNamespace>ReShadeCompat</RootNamespace>
+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Verified|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Verified|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Verified|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS);$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>PURE_ALLOC;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCORE_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <StringPooling>true</StringPooling>
+      <ExceptionHandling>false</ExceptionHandling>
+      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
+      <BufferSecurityCheck>false</BufferSecurityCheck>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <FloatingPointModel>Precise</FloatingPointModel>
+      <RuntimeTypeInfo>true</RuntimeTypeInfo>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <WarningLevel>Level4</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <LanguageStandard>stdcpp17</LanguageStandard>
+      <AdditionalOptions>/std:c++latest %(AdditionalOptions)</AdditionalOptions>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <Optimization>MaxSpeed</Optimization>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)BugTrap\Bin;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+    <Lib>
+      <LinkTimeCodeGeneration>true</LinkTimeCodeGeneration>
+    </Lib>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Verified|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>.;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS);$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;PURE_ALLOC;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCORE_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
+      <BufferSecurityCheck>true</BufferSecurityCheck>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <FloatingPointModel>Precise</FloatingPointModel>
+      <RuntimeTypeInfo>true</RuntimeTypeInfo>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <WarningLevel>Level4</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <RemoveUnreferencedCodeData>false</RemoveUnreferencedCodeData>
+      <StringPooling>false</StringPooling>
+      <LanguageStandard>stdcpp17</LanguageStandard>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)BugTrap\Bin;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <Optimization>MaxSpeed</Optimization>
+      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>.;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS);$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>PURE_ALLOC;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCORE_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <StringPooling>true</StringPooling>
+      <ExceptionHandling>false</ExceptionHandling>
+      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
+      <BufferSecurityCheck>false</BufferSecurityCheck>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <FloatingPointModel>Precise</FloatingPointModel>
+      <RuntimeTypeInfo>true</RuntimeTypeInfo>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <WarningLevel>Level4</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <LanguageStandard>stdcpp17</LanguageStandard>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)BugTrap\Bin;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+    <Lib>
+      <LinkTimeCodeGeneration>true</LinkTimeCodeGeneration>
+    </Lib>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="addon.cpp" />
+    <ClCompile Include="stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Verified|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="stdafx.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/src/ReShadeCompat/ReShadeCompat.vcxproj.filters b/src/ReShadeCompat/ReShadeCompat.vcxproj.filters
new file mode 100644
index 0000000..f42c345
--- /dev/null
+++ b/src/ReShadeCompat/ReShadeCompat.vcxproj.filters
@@ -0,0 +1,21 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="addon">
+      <UniqueIdentifier>{6e7f856d-d037-414e-a56d-e4c7ff527237}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="addon.cpp">
+      <Filter>addon</Filter>
+    </ClCompile>
+    <ClCompile Include="stdafx.cpp">
+      <Filter>addon</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="stdafx.h">
+      <Filter>addon</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/ReShadeCompat/addon.cpp b/src/ReShadeCompat/addon.cpp
new file mode 100644
index 0000000..404928c
--- /dev/null
+++ b/src/ReShadeCompat/addon.cpp
@@ -0,0 +1,42 @@
+#include "stdafx.h"
+EXTERN_C IMAGE_DOS_HEADER __ImageBase;
+#pragma warning(disable: 4047)
+HINSTANCE hInstance = (HINSTANCE)&__ImageBase;
+#pragma warning(default: 4047)
+
+//Credits for idea SSE ReShade Helper https://www.nexusmods.com/skyrimspecialedition/mods/78961
+
+static reshade::api::effect_runtime* m_runtime = nullptr;
+static reshade::api::command_list* m_cmdlist = nullptr;
+static reshade::api::resource_view m_rtv;
+static reshade::api::resource_view m_rtv_srgb;
+
+static void on_reshade_begin_effects(reshade::api::effect_runtime* runtime, reshade::api::command_list* cmd_list, reshade::api::resource_view rtv, reshade::api::resource_view rtv_srgb)
+{
+	m_runtime = runtime;
+	m_cmdlist = cmd_list;
+	m_rtv = rtv;
+	m_rtv_srgb = rtv_srgb;
+}
+
+void render_reshade_effects()
+{
+	if (m_runtime)
+		m_runtime->render_effects(m_cmdlist, m_rtv, m_rtv_srgb);
+}
+
+bool init_reshade()
+{
+	if (!reshade::register_addon(hInstance))
+		return false;
+
+	reshade::register_event<reshade::addon_event::reshade_begin_effects>(on_reshade_begin_effects);
+
+	return true;
+}
+
+void unregister_reshade()
+{
+	reshade::unregister_event<reshade::addon_event::reshade_begin_effects>(on_reshade_begin_effects);
+	reshade::unregister_addon(hInstance);
+}
\ No newline at end of file
diff --git a/src/ReShadeCompat/stdafx.cpp b/src/ReShadeCompat/stdafx.cpp
new file mode 100644
index 0000000..1577c4e
--- /dev/null
+++ b/src/ReShadeCompat/stdafx.cpp
@@ -0,0 +1 @@
+#include "stdafx.h"
\ No newline at end of file
diff --git a/src/ReShadeCompat/stdafx.h b/src/ReShadeCompat/stdafx.h
new file mode 100644
index 0000000..2786f04
--- /dev/null
+++ b/src/ReShadeCompat/stdafx.h
@@ -0,0 +1,5 @@
+#pragma once
+#define IMGUI_DISABLE_INCLUDE_IMCONFIG_H
+#define ImTextureID ImU64
+#include <imgui/imgui.h>
+#include <reshade/reshade.hpp>
\ No newline at end of file
diff --git a/src/build_config_defines.h b/src/build_config_defines.h
index 3f15b2c..8158b52 100644
--- a/src/build_config_defines.h
+++ b/src/build_config_defines.h
@@ -6,7 +6,7 @@
 #define INVENTORY_UPGRADE_CALLBACKS						// calls lua function inventory_upgrades.effect_upgrade_item
 #define ACTOR_BEFORE_DEATH_CALLBACK						// For extending the life of the actor to fake death or do other tasks that need to happen before actor is dead
 #define INPUT_CALLBACKS									// (eKeyPress, eKeyRelease, eKeyHold)
-//#define MOUSE_INPUT_CALLBACKS							// (eMouseMove, eMouseWheel)
+#define MOUSE_INPUT_CALLBACKS							// (eMouseMove, eMouseWheel)
 #define ENGINE_LUA_ALIFE_STORAGE_MANAGER_CALLBACKS		// calls lua functions from engine in a script named alife_storage_manager.script  (alife_storage_manager.CALifeStorageManager_save) and (alife_storage_manager.CALifeStorageManager_load)
 #define ENGINE_LUA_ALIFE_UPDAGE_MANAGER_CALLBACKS		// calls lua function named on_before_change_level and on_after_new_game in _G.script when enabled
 //-CALLBACKS
diff --git a/src/engine-vs2022.sln b/src/engine-vs2022.sln
new file mode 100644
index 0000000..0e0819e
--- /dev/null
+++ b/src/engine-vs2022.sln
@@ -0,0 +1,812 @@
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 17
+VisualStudioVersion = 17.4.33205.214
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrEngine", "xrEngine\vs2022\xrEngine.vcxproj", "{2578C6D8-660D-48AE-9322-7422F8664F06}"
+	ProjectSection(ProjectDependencies) = postProject
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD} = {3A214E06-B95E-4D61-A291-1F8DF2EC10FD}
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6} = {0BDF3377-F84E-4B42-A605-B45AAA244CB6}
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC} = {CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}
+		{893887A1-3ABF-40A0-B931-CD0867010785} = {893887A1-3ABF-40A0-B931-CD0867010785}
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5} = {632AEEB6-DC06-4E15-9551-B2B09A4B73C5}
+	EndProjectSection
+EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "3rd party", "3rd party", "{2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "ode", "3rd party\ode\contrib\msvc7\ode_default\vs2022\default.vcxproj", "{1BF75FEB-87DD-486C-880B-227987D191C2}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "OpenAL32", "3rd party\openal\OpenAL-Windows\Router\vs2022\Router.vcxproj", "{566551F4-4EF1-4CB4-A131-F982E7606907}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrCDB", "xrCDB\vs2022\xrCDB.vcxproj", "{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrCore", "xrCore\vs2022\xrCore.vcxproj", "{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}"
+	ProjectSection(ProjectDependencies) = postProject
+		{772FE450-F4F3-4687-A2A7-5624825089D7} = {772FE450-F4F3-4687-A2A7-5624825089D7}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrCPU_Pipe", "xrCPU_Pipe\vs2022\xrCPU_Pipe.vcxproj", "{CA0649DD-D089-423A-981C-46B57A884EB9}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrGame", "xrGame\vs2022\xrGame.vcxproj", "{200652A6-043E-4634-8837-87983B3BD5E0}"
+	ProjectSection(ProjectDependencies) = postProject
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8} = {938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4} = {880CD250-BA77-4DAF-A8D4-552F12DD3AE4}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrNetServer", "xrNetServer\vs2022\xrNetServer.vcxproj", "{435BAC9A-B225-457D-AB40-C9BD0CC8838C}"
+	ProjectSection(ProjectDependencies) = postProject
+		{772FE450-F4F3-4687-A2A7-5624825089D7} = {772FE450-F4F3-4687-A2A7-5624825089D7}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrParticles", "xrParticles\vs2022\xrParticles.vcxproj", "{94A1C366-3D19-48E6-8170-4ADC2E70DF97}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrRender_R1", "Layers\xrRenderPC_R1\vs2022\xrRender_R1.vcxproj", "{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrRender_R2", "Layers\xrRenderPC_R2\vs2022\xrRender_R2.vcxproj", "{963BA4E5-499A-454D-B002-1D5ECE0527A6}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrSound", "xrSound\vs2022\xrSound.vcxproj", "{CCCA7859-EB86-493E-9B53-C4235F45B3C5}"
+	ProjectSection(ProjectDependencies) = postProject
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD} = {3A214E06-B95E-4D61-A291-1F8DF2EC10FD}
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC} = {CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}
+		{893887A1-3ABF-40A0-B931-CD0867010785} = {893887A1-3ABF-40A0-B931-CD0867010785}
+		{566551F4-4EF1-4CB4-A131-F982E7606907} = {566551F4-4EF1-4CB4-A131-F982E7606907}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrXMLParser", "xrXMLParser\vs2022\xrXMLParser.vcxproj", "{94A1C366-3D19-48E6-8170-4ADC2E70DF98}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrAPI", "Layers\xrAPI\vs2022\xrAPI.vcxproj", "{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrRender_R3", "Layers\xrRenderPC_R3\vs2022\xrRender_R3.vcxproj", "{3F383D3C-FCD8-4170-990B-EB4833F09248}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "luabind.beta7-devel.rc4", "3rd party\luabind\vs2022\luabind.beta7-devel.rc4.vcxproj", "{CC52E0B3-CC35-4934-9302-035B748F3F2C}"
+	ProjectSection(ProjectDependencies) = postProject
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5} = {632AEEB6-DC06-4E15-9551-B2B09A4B73C5}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrPhysics", "xrPhysics\vs2022\xrPhysics.vcxproj", "{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "crypto", "3rd party\crypto\vs2022\crypto.vcxproj", "{FA169092-EA3E-40C1-8E5A-A2B575700FE8}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "xrRender_R4", "Layers\xrRenderPC_R4\vs2022\xrRender_R4.vcxproj", "{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "CxImage", "3rd party\cximage\vs2022\cximage.vcxproj", "{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "lua_extensions", "3rd party\lua-extensions\vs2022\lua_extensions.vcxproj", "{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}"
+	ProjectSection(ProjectDependencies) = postProject
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5} = {632AEEB6-DC06-4E15-9551-B2B09A4B73C5}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libjpeg", "..\sdk\include\jpeg\vs2022\libjpeg.vcxproj", "{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libogg_static", "..\sdk\include\ogg\vs2022\libogg_static.vcxproj", "{893887A1-3ABF-40A0-B931-CD0867010785}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libtheora_static", "..\sdk\include\theora\vs2022\libtheora_static.vcxproj", "{0BDF3377-F84E-4B42-A605-B45AAA244CB6}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libvorbis_static", "..\sdk\include\vorbis\vs2022\libvorbis_static.vcxproj", "{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libvorbisfile_static", "..\sdk\include\vorbis\vs2022\libvorbisfile_static.vcxproj", "{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "LuaJIT-2", "3rd party\luajit-2\src\luajit.vcxproj", "{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}"
+	ProjectSection(ProjectDependencies) = postProject
+		{3F383D3C-FCD8-4170-990B-EB4833F09248} = {3F383D3C-FCD8-4170-990B-EB4833F09248}
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2} = {57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6} = {963BA4E5-499A-454D-B002-1D5ECE0527A6}
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8} = {AC9B12ED-A2D7-4337-A981-5BD8430E96D8}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "DXERR", "3rd party\DXERR\vs2022\DXERR.vcxproj", "{772FE450-F4F3-4687-A2A7-5624825089D7}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "NVTT", "3rd party\NVTT\vs2022\NVTT.vcxproj", "{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "ReShadeCompat", "ReShadeCompat\ReShadeCompat.vcxproj", "{9646DBF8-1A5E-41F0-9328-F65910706666}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		DX10|x64 = DX10|x64
+		DX10-AVX|x64 = DX10-AVX|x64
+		DX11|x64 = DX11|x64
+		DX11-AVX|x64 = DX11-AVX|x64
+		DX8|x64 = DX8|x64
+		DX8-AVX|x64 = DX8-AVX|x64
+		DX9|x64 = DX9|x64
+		DX9-AVX|x64 = DX9-AVX|x64
+		Release|x64 = Release|x64
+		Release-AVX|x64 = Release-AVX|x64
+		VerifiedDX11|x64 = VerifiedDX11|x64
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX10|x64.ActiveCfg = ReleaseR3|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX10|x64.Build.0 = ReleaseR3|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX10|x64.Deploy.0 = ReleaseR3|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX10-AVX|x64.ActiveCfg = ReleaseR3-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX10-AVX|x64.Build.0 = ReleaseR3-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX10-AVX|x64.Deploy.0 = ReleaseR3-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX11|x64.ActiveCfg = ReleaseR4|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX11|x64.Build.0 = ReleaseR4|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX11|x64.Deploy.0 = ReleaseR4|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX11-AVX|x64.ActiveCfg = ReleaseR4-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX11-AVX|x64.Build.0 = ReleaseR4-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX11-AVX|x64.Deploy.0 = ReleaseR4-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX8|x64.ActiveCfg = ReleaseR1|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX8|x64.Build.0 = ReleaseR1|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX8|x64.Deploy.0 = ReleaseR1|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX8-AVX|x64.ActiveCfg = ReleaseR1-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX8-AVX|x64.Build.0 = ReleaseR1-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX8-AVX|x64.Deploy.0 = ReleaseR1-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX9|x64.ActiveCfg = ReleaseR2|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX9|x64.Build.0 = ReleaseR2|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX9|x64.Deploy.0 = ReleaseR2|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX9-AVX|x64.ActiveCfg = ReleaseR2-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX9-AVX|x64.Build.0 = ReleaseR2-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.DX9-AVX|x64.Deploy.0 = ReleaseR2-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.Release|x64.ActiveCfg = ReleaseR2-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.Release|x64.Build.0 = ReleaseR2-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.Release-AVX|x64.ActiveCfg = ReleaseR2-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.Release-AVX|x64.Build.0 = ReleaseR2-AVX|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{2578C6D8-660D-48AE-9322-7422F8664F06}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX10|x64.ActiveCfg = Release|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX10|x64.Build.0 = Release|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX11|x64.ActiveCfg = Release|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX11|x64.Build.0 = Release|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX8|x64.ActiveCfg = Release|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX8|x64.Build.0 = Release|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX9|x64.ActiveCfg = Release|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX9|x64.Build.0 = Release|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.Release|x64.ActiveCfg = Release|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.Release|x64.Build.0 = Release|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{1BF75FEB-87DD-486C-880B-227987D191C2}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX10|x64.ActiveCfg = Release|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX10|x64.Build.0 = Release|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX11|x64.ActiveCfg = Release|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX11|x64.Build.0 = Release|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX8|x64.ActiveCfg = Release|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX8|x64.Build.0 = Release|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX9|x64.ActiveCfg = Release|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX9|x64.Build.0 = Release|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.Release|x64.ActiveCfg = Release|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.Release|x64.Build.0 = Release|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{566551F4-4EF1-4CB4-A131-F982E7606907}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX10|x64.ActiveCfg = Release|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX10|x64.Build.0 = Release|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX11|x64.ActiveCfg = Release|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX11|x64.Build.0 = Release|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX8|x64.ActiveCfg = Release|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX8|x64.Build.0 = Release|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX9|x64.ActiveCfg = Release|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX9|x64.Build.0 = Release|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.Release|x64.ActiveCfg = Release|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.Release|x64.Build.0 = Release|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX10|x64.ActiveCfg = Release|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX10|x64.Build.0 = Release|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX11|x64.ActiveCfg = Release|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX11|x64.Build.0 = Release|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX8|x64.ActiveCfg = Release|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX8|x64.Build.0 = Release|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX9|x64.ActiveCfg = Release|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX9|x64.Build.0 = Release|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.Release|x64.ActiveCfg = Release|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.Release|x64.Build.0 = Release|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX10|x64.ActiveCfg = Release|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX10|x64.Build.0 = Release|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX11|x64.ActiveCfg = Release|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX11|x64.Build.0 = Release|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX8|x64.ActiveCfg = Release|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX8|x64.Build.0 = Release|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX9|x64.ActiveCfg = Release|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX9|x64.Build.0 = Release|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.Release|x64.ActiveCfg = Release|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.Release|x64.Build.0 = Release|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{CA0649DD-D089-423A-981C-46B57A884EB9}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX10|x64.ActiveCfg = Release|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX10|x64.Build.0 = Release|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX11|x64.ActiveCfg = Release|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX11|x64.Build.0 = Release|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX8|x64.ActiveCfg = Release|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX8|x64.Build.0 = Release|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX9|x64.ActiveCfg = Release|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX9|x64.Build.0 = Release|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.Release|x64.ActiveCfg = Release|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.Release|x64.Build.0 = Release|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{200652A6-043E-4634-8837-87983B3BD5E0}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX10|x64.ActiveCfg = Release|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX10|x64.Build.0 = Release|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX11|x64.ActiveCfg = Release|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX11|x64.Build.0 = Release|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX8|x64.ActiveCfg = Release|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX8|x64.Build.0 = Release|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX9|x64.ActiveCfg = Release|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX9|x64.Build.0 = Release|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.Release|x64.ActiveCfg = Release|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.Release|x64.Build.0 = Release|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{435BAC9A-B225-457D-AB40-C9BD0CC8838C}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX10|x64.ActiveCfg = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX10|x64.Build.0 = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX11|x64.ActiveCfg = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX11|x64.Build.0 = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX8|x64.ActiveCfg = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX8|x64.Build.0 = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX9|x64.ActiveCfg = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX9|x64.Build.0 = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.Release|x64.ActiveCfg = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.Release|x64.Build.0 = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF97}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX10|x64.ActiveCfg = Release|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX10|x64.Build.0 = Release|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX11|x64.ActiveCfg = Release|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX11|x64.Build.0 = Release|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX8|x64.ActiveCfg = Release|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX8|x64.Build.0 = Release|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX9|x64.ActiveCfg = Release|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX9|x64.Build.0 = Release|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.Release|x64.ActiveCfg = Release|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.Release|x64.Build.0 = Release|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{57A498C9-A741-4DDF-8EFC-BFB9EB6B00E2}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX10|x64.ActiveCfg = Release|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX10|x64.Build.0 = Release|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX11|x64.ActiveCfg = Release|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX11|x64.Build.0 = Release|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX8|x64.ActiveCfg = Release|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX8|x64.Build.0 = Release|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX9|x64.ActiveCfg = Release|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX9|x64.Build.0 = Release|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.Release|x64.ActiveCfg = Release|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.Release|x64.Build.0 = Release|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{963BA4E5-499A-454D-B002-1D5ECE0527A6}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX10|x64.ActiveCfg = Release|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX10|x64.Build.0 = Release|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX11|x64.ActiveCfg = Release|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX11|x64.Build.0 = Release|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX8|x64.ActiveCfg = Release|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX8|x64.Build.0 = Release|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX9|x64.ActiveCfg = Release|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX9|x64.Build.0 = Release|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.Release|x64.ActiveCfg = Release|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.Release|x64.Build.0 = Release|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{CCCA7859-EB86-493E-9B53-C4235F45B3C5}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX10|x64.ActiveCfg = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX10|x64.Build.0 = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX11|x64.ActiveCfg = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX11|x64.Build.0 = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX8|x64.ActiveCfg = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX8|x64.Build.0 = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX9|x64.ActiveCfg = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX9|x64.Build.0 = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.Release|x64.ActiveCfg = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.Release|x64.Build.0 = Release|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{94A1C366-3D19-48E6-8170-4ADC2E70DF98}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX10|x64.ActiveCfg = Release|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX10|x64.Build.0 = Release|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX11|x64.ActiveCfg = Release|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX11|x64.Build.0 = Release|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX8|x64.ActiveCfg = Release|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX8|x64.Build.0 = Release|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX9|x64.ActiveCfg = Release|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX9|x64.Build.0 = Release|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.Release|x64.ActiveCfg = Release|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.Release|x64.Build.0 = Release|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{1DAEC516-E52C-4A3C-A4DA-AE3553E6E0F8}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX10|x64.ActiveCfg = Release|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX10|x64.Build.0 = Release|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX11|x64.ActiveCfg = Release|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX11|x64.Build.0 = Release|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX8|x64.ActiveCfg = Release|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX8|x64.Build.0 = Release|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX9|x64.ActiveCfg = Release|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX9|x64.Build.0 = Release|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.Release|x64.ActiveCfg = Release|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.Release|x64.Build.0 = Release|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{3F383D3C-FCD8-4170-990B-EB4833F09248}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX10|x64.ActiveCfg = Release|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX10|x64.Build.0 = Release|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX11|x64.ActiveCfg = Release|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX11|x64.Build.0 = Release|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX8|x64.ActiveCfg = Release|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX8|x64.Build.0 = Release|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX9|x64.ActiveCfg = Release|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX9|x64.Build.0 = Release|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.Release|x64.ActiveCfg = Release|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.Release|x64.Build.0 = Release|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX10|x64.ActiveCfg = Release|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX10|x64.Build.0 = Release|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX11|x64.ActiveCfg = Release|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX11|x64.Build.0 = Release|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX8|x64.ActiveCfg = Release|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX8|x64.Build.0 = Release|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX9|x64.ActiveCfg = Release|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX9|x64.Build.0 = Release|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.Release|x64.ActiveCfg = Release|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.Release|x64.Build.0 = Release|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX10|x64.ActiveCfg = Release|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX10|x64.Build.0 = Release|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX11|x64.ActiveCfg = Release|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX11|x64.Build.0 = Release|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX8|x64.ActiveCfg = Release|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX8|x64.Build.0 = Release|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX9|x64.ActiveCfg = Release|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX9|x64.Build.0 = Release|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.Release|x64.ActiveCfg = Release|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.Release|x64.Build.0 = Release|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX10|x64.ActiveCfg = Release|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX10|x64.Build.0 = Release|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX11|x64.ActiveCfg = Release|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX11|x64.Build.0 = Release|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX8|x64.ActiveCfg = Release|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX8|x64.Build.0 = Release|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX9|x64.ActiveCfg = Release|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX9|x64.Build.0 = Release|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.Release|x64.ActiveCfg = Release|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.Release|x64.Build.0 = Release|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{AC9B12ED-A2D7-4337-A981-5BD8430E96D8}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX10|x64.ActiveCfg = Release|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX10|x64.Build.0 = Release|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX11|x64.ActiveCfg = Release|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX11|x64.Build.0 = Release|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX8|x64.ActiveCfg = Release|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX8|x64.Build.0 = Release|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX9|x64.ActiveCfg = Release|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX9|x64.Build.0 = Release|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.Release|x64.ActiveCfg = Release|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.Release|x64.Build.0 = Release|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX10|x64.ActiveCfg = Release|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX10|x64.Build.0 = Release|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX11|x64.ActiveCfg = Release|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX11|x64.Build.0 = Release|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX8|x64.ActiveCfg = Release|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX8|x64.Build.0 = Release|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX9|x64.ActiveCfg = Release|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX9|x64.Build.0 = Release|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.Release|x64.ActiveCfg = Release|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.Release|x64.Build.0 = Release|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX10|x64.ActiveCfg = Release|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX10|x64.Build.0 = Release|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX11|x64.ActiveCfg = Release|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX11|x64.Build.0 = Release|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX8|x64.ActiveCfg = Release|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX8|x64.Build.0 = Release|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX9|x64.ActiveCfg = Release|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX9|x64.Build.0 = Release|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.Release|x64.ActiveCfg = Release|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.Release|x64.Build.0 = Release|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX10|x64.ActiveCfg = Release|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX10|x64.Build.0 = Release|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX11|x64.ActiveCfg = Release|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX11|x64.Build.0 = Release|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX8|x64.ActiveCfg = Release|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX8|x64.Build.0 = Release|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX9|x64.ActiveCfg = Release|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX9|x64.Build.0 = Release|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.Release|x64.ActiveCfg = Release|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.Release|x64.Build.0 = Release|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{893887A1-3ABF-40A0-B931-CD0867010785}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX10|x64.ActiveCfg = Release|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX10|x64.Build.0 = Release|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX11|x64.ActiveCfg = Release|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX11|x64.Build.0 = Release|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX8|x64.ActiveCfg = Release|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX8|x64.Build.0 = Release|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX9|x64.ActiveCfg = Release|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX9|x64.Build.0 = Release|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.Release|x64.ActiveCfg = Release|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.Release|x64.Build.0 = Release|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX10|x64.ActiveCfg = Release|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX10|x64.Build.0 = Release|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX11|x64.ActiveCfg = Release|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX11|x64.Build.0 = Release|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX8|x64.ActiveCfg = Release|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX8|x64.Build.0 = Release|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX9|x64.ActiveCfg = Release|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX9|x64.Build.0 = Release|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.Release|x64.ActiveCfg = Release|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.Release|x64.Build.0 = Release|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX10|x64.ActiveCfg = Release|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX10|x64.Build.0 = Release|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX11|x64.ActiveCfg = Release|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX11|x64.Build.0 = Release|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX8|x64.ActiveCfg = Release|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX8|x64.Build.0 = Release|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX9|x64.ActiveCfg = Release|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX9|x64.Build.0 = Release|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.Release|x64.ActiveCfg = Release|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.Release|x64.Build.0 = Release|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX10|x64.ActiveCfg = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX10|x64.Build.0 = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX10-AVX|x64.ActiveCfg = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX10-AVX|x64.Build.0 = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX11|x64.ActiveCfg = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX11|x64.Build.0 = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX11-AVX|x64.ActiveCfg = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX11-AVX|x64.Build.0 = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX8|x64.ActiveCfg = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX8|x64.Build.0 = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX8-AVX|x64.ActiveCfg = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX8-AVX|x64.Build.0 = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX9|x64.ActiveCfg = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX9|x64.Build.0 = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX9-AVX|x64.ActiveCfg = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.DX9-AVX|x64.Build.0 = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.Release|x64.ActiveCfg = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.Release|x64.Build.0 = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.Release-AVX|x64.ActiveCfg = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.Release-AVX|x64.Build.0 = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.VerifiedDX11|x64.ActiveCfg = Release|x64
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5}.VerifiedDX11|x64.Build.0 = Release|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX10|x64.ActiveCfg = Release|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX10|x64.Build.0 = Release|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX11|x64.ActiveCfg = Release|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX11|x64.Build.0 = Release|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX8|x64.ActiveCfg = Release|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX8|x64.Build.0 = Release|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX9|x64.ActiveCfg = Release|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX9|x64.Build.0 = Release|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.Release|x64.ActiveCfg = Release|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.Release|x64.Build.0 = Release|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{772FE450-F4F3-4687-A2A7-5624825089D7}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX10|x64.ActiveCfg = Release|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX10|x64.Build.0 = Release|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX11|x64.ActiveCfg = Release|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX11|x64.Build.0 = Release|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX8|x64.ActiveCfg = Release|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX8|x64.Build.0 = Release|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX9|x64.ActiveCfg = Release|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX9|x64.Build.0 = Release|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.Release|x64.ActiveCfg = Release|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.Release|x64.Build.0 = Release|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX10|x64.ActiveCfg = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX10|x64.Build.0 = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX11|x64.ActiveCfg = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX11|x64.Build.0 = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX8|x64.ActiveCfg = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX8|x64.Build.0 = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX9|x64.ActiveCfg = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX9|x64.Build.0 = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.Release|x64.ActiveCfg = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.Release|x64.Build.0 = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.Release-AVX|x64.ActiveCfg = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.Release-AVX|x64.Build.0 = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(NestedProjects) = preSolution
+		{1BF75FEB-87DD-486C-880B-227987D191C2} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{566551F4-4EF1-4CB4-A131-F982E7606907} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{CC52E0B3-CC35-4934-9302-035B748F3F2C} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{FA169092-EA3E-40C1-8E5A-A2B575700FE8} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{880CD250-BA77-4DAF-A8D4-552F12DD3AE4} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{44F716E7-05BD-4390-AB02-5F7DAF7FEFDE} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{938C5808-85A1-4B5A-8CB4-D2D9D7851CB8} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{893887A1-3ABF-40A0-B931-CD0867010785} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{0BDF3377-F84E-4B42-A605-B45AAA244CB6} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{3A214E06-B95E-4D61-A291-1F8DF2EC10FD} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{772FE450-F4F3-4687-A2A7-5624825089D7} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{0EB257DC-5CFC-44B0-82C9-CE6B158BE473} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{9646DBF8-1A5E-41F0-9328-F65910706666} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+		SolutionGuid = {76CF157A-A169-443B-AE3A-F17AD29325C6}
+	EndGlobalSection
+	GlobalSection(DPCodeReviewSolutionGUID) = preSolution
+		DPCodeReviewSolutionGUID = {00000000-0000-0000-0000-000000000000}
+	EndGlobalSection
+EndGlobal
diff --git a/src/engine.sln b/src/engine.sln
index a794953..84bd068 100644
--- a/src/engine.sln
+++ b/src/engine.sln
@@ -97,6 +97,8 @@ Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "LuaJIT-2", "3rd party\luaji
 EndProject
 Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "DXERR", "3rd party\DXERR\DXERR.vcxproj", "{772FE450-F4F3-4687-A2A7-5624825089D7}"
 EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "ReShadeCompat", "ReShadeCompat\ReShadeCompat.vcxproj", "{9646DBF8-1A5E-41F0-9328-F65910706666}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		DX10|x64 = DX10|x64
@@ -640,6 +642,24 @@ Global
 		{772FE450-F4F3-4687-A2A7-5624825089D7}.DX9-AVX|x64.Build.0 = Release-AVX|x64
 		{772FE450-F4F3-4687-A2A7-5624825089D7}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
 		{772FE450-F4F3-4687-A2A7-5624825089D7}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX10|x64.ActiveCfg = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX10|x64.Build.0 = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX10-AVX|x64.ActiveCfg = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX10-AVX|x64.Build.0 = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX11|x64.ActiveCfg = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX11|x64.Build.0 = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX11-AVX|x64.ActiveCfg = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX11-AVX|x64.Build.0 = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX8|x64.ActiveCfg = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX8|x64.Build.0 = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX8-AVX|x64.ActiveCfg = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX8-AVX|x64.Build.0 = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX9|x64.ActiveCfg = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX9|x64.Build.0 = Release|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX9-AVX|x64.ActiveCfg = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.DX9-AVX|x64.Build.0 = Release-AVX|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.VerifiedDX11|x64.ActiveCfg = VerifiedDX11|x64
+		{9646DBF8-1A5E-41F0-9328-F65910706666}.VerifiedDX11|x64.Build.0 = VerifiedDX11|x64
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
@@ -659,6 +679,7 @@ Global
 		{CEBDE98B-A6AA-46E6-BC79-FAAF823DB9EC} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
 		{632AEEB6-DC06-4E15-9551-B2B09A4B73C5} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
 		{772FE450-F4F3-4687-A2A7-5624825089D7} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
+		{9646DBF8-1A5E-41F0-9328-F65910706666} = {2BFC806B-CE92-4EA4-8FE8-5F2EA54BA348}
 	EndGlobalSection
 	GlobalSection(ExtensibilityGlobals) = postSolution
 		SolutionGuid = {76CF157A-A169-443B-AE3A-F17AD29325C6}
diff --git a/src/xrCDB/Frustum.cpp b/src/xrCDB/Frustum.cpp
index ec78cb1..defe5a5 100644
--- a/src/xrCDB/Frustum.cpp
+++ b/src/xrCDB/Frustum.cpp
@@ -297,7 +297,7 @@ void CFrustum::CreateOccluder(Fvector* p, int count, Fvector& vBase, CFrustum& c
 		for (int j = 0; j < count; j++) cls[j] = _abs(P.classify(p[j]));
 
 		// test edges to see which lies directly on plane
-		for (j = 0; j < count; j++)
+		for (int j = 0; j < count; j++)
 		{
 			if (cls[j] < EPS_L)
 			{
@@ -315,7 +315,7 @@ void CFrustum::CreateOccluder(Fvector* p, int count, Fvector& vBase, CFrustum& c
 	// here we have all edges marked accordenly to 'open' / 'closed' classification
 	_clear();
 	_add(p[0], p[1], p[2]); // main plane
-	for (i = 0; i < count; i++)
+	for (int i = 0; i < count; i++)
 	{
 		if (!edge[i])
 		{
@@ -346,7 +346,7 @@ sPoly* CFrustum::ClipPoly(sPoly& S, sPoly& D) const
 		src->push_back((*src)[0]);
 		Fvector D;
 		float denum, t;
-		for (j = 0; j < src->size() - 1; j++)
+		for (int j = 0; j < src->size() - 1; j++)
 		{
 			if ((*src)[j].similar((*src)[j + 1], EPS_S)) continue;
 
diff --git a/src/xrCDB/OPC_AABBTree.cpp b/src/xrCDB/OPC_AABBTree.cpp
index 282bf2f..c848d55 100644
--- a/src/xrCDB/OPC_AABBTree.cpp
+++ b/src/xrCDB/OPC_AABBTree.cpp
@@ -190,7 +190,7 @@ bool AABBTreeNode::Subdivide(AABBTreeBuilder* builder)
 
 		// Compute variances
 		Point Vars(0.0f, 0.0f, 0.0f);
-		for (i = 0; i < mNbPrimitives; i++)
+		for (udword i = 0; i < mNbPrimitives; i++)
 		{
 			udword Index = mNodePrimitives[i];
 			float Cx = builder->GetSplittingValue(Index, 0);
diff --git a/src/xrCDB/OPC_OptimizedTree.cpp b/src/xrCDB/OPC_OptimizedTree.cpp
index 2a042fa..3e5d9d1 100644
--- a/src/xrCDB/OPC_OptimizedTree.cpp
+++ b/src/xrCDB/OPC_OptimizedTree.cpp
@@ -461,7 +461,7 @@ bool AABBQuantizedTree::Build(AABBTree* tree)
 
 		// Quantize
 		uintptr_t Data;
-		for (i = 0; i < mNbNodes; i++)
+		for (udword i = 0; i < mNbNodes; i++)
 		{
 			PERFORM_QUANTIZATION
 			REMAP_DATA(mData)
@@ -538,7 +538,7 @@ bool AABBQuantizedNoLeafTree::Build(AABBTree* tree)
 
 		// Quantize
 		uintptr_t Data;
-		for (i = 0; i < mNbNodes; i++)
+		for (udword i = 0; i < mNbNodes; i++)
 		{
 			PERFORM_QUANTIZATION
 			REMAP_DATA(mData)
diff --git a/src/xrCDB/vs2022/xrCDB.vcxproj b/src/xrCDB/vs2022/xrCDB.vcxproj
new file mode 100644
index 0000000..1ca18b9
--- /dev/null
+++ b/src/xrCDB/vs2022/xrCDB.vcxproj
@@ -0,0 +1,340 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{A19B1DF2-82EC-4364-8BDF-85D13A1C89B5}</ProjectGuid>
+    <RootNamespace>xrCDB</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <UseOfMfc>false</UseOfMfc>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCDB_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>
+      </AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCDB_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>
+      </AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCDB_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>
+      </AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\cl_raypick.cpp">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\Frustum.cpp" />
+    <ClCompile Include="..\ISpatial.cpp" />
+    <ClCompile Include="..\ISpatial_q_box.cpp" />
+    <ClCompile Include="..\ISpatial_q_frustum.cpp" />
+    <ClCompile Include="..\ISpatial_q_ray.cpp" />
+    <ClCompile Include="..\ISpatial_verify.cpp" />
+    <ClCompile Include="..\Opcode.cpp" />
+    <ClCompile Include="..\OPC_AABB.cpp" />
+    <ClCompile Include="..\OPC_AABBCollider.cpp" />
+    <ClCompile Include="..\OPC_AABBTree.cpp" />
+    <ClCompile Include="..\OPC_Collider.cpp" />
+    <ClCompile Include="..\OPC_Common.cpp" />
+    <ClCompile Include="..\OPC_Container.cpp" />
+    <ClCompile Include="..\OPC_Matrix3x3.cpp" />
+    <ClCompile Include="..\OPC_Matrix4x4.cpp" />
+    <ClCompile Include="..\OPC_Model.cpp" />
+    <ClCompile Include="..\OPC_OBB.cpp" />
+    <ClCompile Include="..\OPC_OBBCollider.cpp" />
+    <ClCompile Include="..\OPC_OptimizedTree.cpp" />
+    <ClCompile Include="..\OPC_Plane.cpp" />
+    <ClCompile Include="..\OPC_PlanesCollider.cpp" />
+    <ClCompile Include="..\OPC_Point.cpp" />
+    <ClCompile Include="..\OPC_Ray.cpp" />
+    <ClCompile Include="..\OPC_RayCollider.cpp" />
+    <ClCompile Include="..\OPC_SphereCollider.cpp" />
+    <ClCompile Include="..\OPC_TreeBuilders.cpp" />
+    <ClCompile Include="..\OPC_TreeCollider.cpp" />
+    <ClCompile Include="..\OPC_Triangle.cpp" />
+    <ClCompile Include="..\OPC_VolumeCollider.cpp" />
+    <ClCompile Include="..\StdAfx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\xrCDB.cpp" />
+    <ClCompile Include="..\xrCDB_box.cpp">
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">AssemblyAndSourceCode</AssemblerOutput>
+    </ClCompile>
+    <ClCompile Include="..\xrCDB_Collector.cpp" />
+    <ClCompile Include="..\xrCDB_frustum.cpp">
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">AssemblyAndSourceCode</AssemblerOutput>
+    </ClCompile>
+    <ClCompile Include="..\xrCDB_ray.cpp">
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">AssemblyAndSourceCode</AssemblerOutput>
+    </ClCompile>
+    <ClCompile Include="..\xrXRC.cpp" />
+    <ClCompile Include="..\xr_area.cpp" />
+    <ClCompile Include="..\xr_area_query.cpp" />
+    <ClCompile Include="..\xr_area_raypick.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\Frustum.h" />
+    <ClInclude Include="..\ISpatial.h" />
+    <ClInclude Include="..\Opcode.h" />
+    <ClInclude Include="..\OPC_AABB.h" />
+    <ClInclude Include="..\OPC_AABBCollider.h" />
+    <ClInclude Include="..\OPC_AABBTree.h" />
+    <ClInclude Include="..\OPC_BoundingSphere.h" />
+    <ClInclude Include="..\OPC_BoxBoxOverlap.h" />
+    <ClInclude Include="..\OPC_BVTCache.h" />
+    <ClInclude Include="..\OPC_Collider.h" />
+    <ClInclude Include="..\OPC_Common.h" />
+    <ClInclude Include="..\OPC_Container.h" />
+    <ClInclude Include="..\OPC_FPU.h" />
+    <ClInclude Include="..\OPC_Matrix3x3.h" />
+    <ClInclude Include="..\OPC_Matrix4x4.h" />
+    <ClInclude Include="..\OPC_MemoryMacros.h" />
+    <ClInclude Include="..\OPC_Model.h" />
+    <ClInclude Include="..\OPC_OBB.h" />
+    <ClInclude Include="..\OPC_OBBCollider.h" />
+    <ClInclude Include="..\OPC_OptimizedTree.h" />
+    <ClInclude Include="..\OPC_Plane.h" />
+    <ClInclude Include="..\OPC_PlanesAABBOverlap.h" />
+    <ClInclude Include="..\OPC_PlanesCollider.h" />
+    <ClInclude Include="..\OPC_PlanesTriOverlap.h" />
+    <ClInclude Include="..\OPC_Point.h" />
+    <ClInclude Include="..\OPC_Preprocessor.h" />
+    <ClInclude Include="..\OPC_Ray.h" />
+    <ClInclude Include="..\OPC_RayAABBOverlap.h" />
+    <ClInclude Include="..\OPC_RayCollider.h" />
+    <ClInclude Include="..\OPC_RayTriOverlap.h" />
+    <ClInclude Include="..\OPC_Settings.h" />
+    <ClInclude Include="..\OPC_SphereAABBOverlap.h" />
+    <ClInclude Include="..\OPC_SphereCollider.h" />
+    <ClInclude Include="..\OPC_SphereTriOverlap.h" />
+    <ClInclude Include="..\OPC_TreeBuilders.h" />
+    <ClInclude Include="..\OPC_TreeCollider.h" />
+    <ClInclude Include="..\OPC_Triangle.h" />
+    <ClInclude Include="..\OPC_TriBoxOverlap.h" />
+    <ClInclude Include="..\OPC_TriTriOverlap.h" />
+    <ClInclude Include="..\OPC_Types.h" />
+    <ClInclude Include="..\OPC_VolumeCollider.h" />
+    <ClInclude Include="..\StdAfx.h" />
+    <ClInclude Include="..\xrCDB.h" />
+    <ClInclude Include="..\xrXRC.h" />
+    <ClInclude Include="..\xr_area.h" />
+    <ClInclude Include="..\xr_collide_defs.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <Text Include="..\ReadMe.txt" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)Layers\xrAPI\vs2022\xrAPI.vcxproj">
+      <Project>{1daec516-e52c-4a3c-a4da-ae3553e6e0f8}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCore\vs2022\xrCore.vcxproj">
+      <Project>{a0f7d1fb-59a7-4717-a7e4-96f37e91998e}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="1" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/xrCDB/vs2022/xrCDB.vcxproj.filters b/src/xrCDB/vs2022/xrCDB.vcxproj.filters
new file mode 100644
index 0000000..3949ff8
--- /dev/null
+++ b/src/xrCDB/vs2022/xrCDB.vcxproj.filters
@@ -0,0 +1,281 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Kernel">
+      <UniqueIdentifier>{75c5c0d5-1a6a-44e3-b894-b43b2c186164}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Opcode">
+      <UniqueIdentifier>{9c066bf2-d8e8-4d5f-bebc-7fc8bd248346}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="engine">
+      <UniqueIdentifier>{22c59cd1-efdc-431f-b9c7-1e454d9dba6a}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="cl_raypick.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="Frustum.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="StdAfx.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="xrCDB.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="xrCDB_box.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="xrCDB_Collector.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="xrCDB_frustum.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="xrCDB_ray.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_AABB.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_AABBCollider.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_AABBTree.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_Collider.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_Common.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_Container.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_Matrix3x3.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_Matrix4x4.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_Model.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_OBB.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_OBBCollider.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_OptimizedTree.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_Plane.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_PlanesCollider.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_Point.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_Ray.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_RayCollider.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_SphereCollider.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_TreeBuilders.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_TreeCollider.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_Triangle.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="OPC_VolumeCollider.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="Opcode.cpp">
+      <Filter>Opcode</Filter>
+    </ClCompile>
+    <ClCompile Include="ISpatial.cpp">
+      <Filter>engine</Filter>
+    </ClCompile>
+    <ClCompile Include="ISpatial_q_box.cpp">
+      <Filter>engine</Filter>
+    </ClCompile>
+    <ClCompile Include="ISpatial_q_frustum.cpp">
+      <Filter>engine</Filter>
+    </ClCompile>
+    <ClCompile Include="ISpatial_q_ray.cpp">
+      <Filter>engine</Filter>
+    </ClCompile>
+    <ClCompile Include="ISpatial_verify.cpp">
+      <Filter>engine</Filter>
+    </ClCompile>
+    <ClCompile Include="xr_area.cpp">
+      <Filter>engine</Filter>
+    </ClCompile>
+    <ClCompile Include="xr_area_query.cpp">
+      <Filter>engine</Filter>
+    </ClCompile>
+    <ClCompile Include="xr_area_raypick.cpp">
+      <Filter>engine</Filter>
+    </ClCompile>
+    <ClCompile Include="xrXRC.cpp">
+      <Filter>engine</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="Frustum.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="StdAfx.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="xrCDB.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_AABB.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_AABBCollider.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_AABBTree.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_BoundingSphere.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_BoxBoxOverlap.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_BVTCache.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Collider.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Common.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Container.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_FPU.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Matrix3x3.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Matrix4x4.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_MemoryMacros.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Model.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_OBB.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_OBBCollider.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_OptimizedTree.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Plane.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_PlanesAABBOverlap.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_PlanesCollider.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_PlanesTriOverlap.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Point.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Preprocessor.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Ray.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_RayAABBOverlap.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_RayCollider.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_RayTriOverlap.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Settings.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_SphereAABBOverlap.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_SphereCollider.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_SphereTriOverlap.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_TreeBuilders.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_TreeCollider.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Triangle.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_TriBoxOverlap.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_TriTriOverlap.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_Types.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="OPC_VolumeCollider.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="Opcode.h">
+      <Filter>Opcode</Filter>
+    </ClInclude>
+    <ClInclude Include="ISpatial.h">
+      <Filter>engine</Filter>
+    </ClInclude>
+    <ClInclude Include="xr_area.h">
+      <Filter>engine</Filter>
+    </ClInclude>
+    <ClInclude Include="xr_collide_defs.h">
+      <Filter>engine</Filter>
+    </ClInclude>
+    <ClInclude Include="xrXRC.h">
+      <Filter>engine</Filter>
+    </ClInclude>
+  </ItemGroup>
+  <ItemGroup>
+    <Text Include="ReadMe.txt">
+      <Filter>Opcode</Filter>
+    </Text>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/xrCPU_Pipe/vs2022/xrCPU_Pipe.vcxproj b/src/xrCPU_Pipe/vs2022/xrCPU_Pipe.vcxproj
new file mode 100644
index 0000000..72065b5
--- /dev/null
+++ b/src/xrCPU_Pipe/vs2022/xrCPU_Pipe.vcxproj
@@ -0,0 +1,251 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{CA0649DD-D089-423A-981C-46B57A884EB9}</ProjectGuid>
+    <RootNamespace>xrCPU_Pipe</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <UseOfMfc>false</UseOfMfc>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCPU_PIPE_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <DisableSpecificWarnings>4995</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0419</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCPU_PIPE_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <DisableSpecificWarnings>4995</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0419</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCPU_PIPE_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <DisableSpecificWarnings>4995</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0419</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\PLC.cpp" />
+    <ClCompile Include="..\StdAfx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\ttapi.cpp" />
+    <ClCompile Include="..\xrCPU_Pipe.cpp" />
+    <ClCompile Include="..\xrSkin2W.cpp" />
+    <ClCompile Include="..\xrSkin2W_SSE.cpp">
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='Release|x64'">MaxSpeed</Optimization>
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">MaxSpeed</Optimization>
+      <Optimization Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">MaxSpeed</Optimization>
+      <PreprocessToFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</PreprocessToFile>
+      <PreprocessToFile Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">false</PreprocessToFile>
+      <PreprocessToFile Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">false</PreprocessToFile>
+      <PreprocessSuppressLineNumbers Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</PreprocessSuppressLineNumbers>
+      <PreprocessSuppressLineNumbers Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">false</PreprocessSuppressLineNumbers>
+      <PreprocessSuppressLineNumbers Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">false</PreprocessSuppressLineNumbers>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">AssemblyAndSourceCode</AssemblerOutput>
+    </ClCompile>
+    <ClCompile Include="..\xrSkin2W_thread.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\resource.h" />
+    <ClInclude Include="..\StdAfx.h" />
+    <ClInclude Include="..\ttapi.h" />
+    <ClInclude Include="..\xrCPU_Pipe.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\xrCPU_Pipe.rc" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\..\xrCore\vs2022\xrCore.vcxproj">
+      <Project>{a0f7d1fb-59a7-4717-a7e4-96f37e91998e}</Project>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="1" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/xrCPU_Pipe/vs2022/xrCPU_Pipe.vcxproj.filters b/src/xrCPU_Pipe/vs2022/xrCPU_Pipe.vcxproj.filters
new file mode 100644
index 0000000..7903f3f
--- /dev/null
+++ b/src/xrCPU_Pipe/vs2022/xrCPU_Pipe.vcxproj.filters
@@ -0,0 +1,41 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Kernel">
+      <UniqueIdentifier>{8aacf377-d845-4426-8048-45a354e9bcee}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Headers">
+      <UniqueIdentifier>{eecb86ea-6135-4aa2-b6b2-fbeacc58a840}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Skinning">
+      <UniqueIdentifier>{01cdbf5f-965a-4896-919a-d3b3288f07f1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Resources">
+      <UniqueIdentifier>{d355371b-2b35-4ec0-a737-d13fbb8482e1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="TTAPI">
+      <UniqueIdentifier>{fa5b5939-2d25-4a3f-8053-d51ea3349395}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="PLC">
+      <UniqueIdentifier>{e0a5ea73-8694-48d5-ba76-63924a6c4e3b}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\PLC.cpp" />
+    <ClCompile Include="..\StdAfx.cpp" />
+    <ClCompile Include="..\ttapi.cpp" />
+    <ClCompile Include="..\xrCPU_Pipe.cpp" />
+    <ClCompile Include="..\xrSkin2W.cpp" />
+    <ClCompile Include="..\xrSkin2W_SSE.cpp" />
+    <ClCompile Include="..\xrSkin2W_thread.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\resource.h" />
+    <ClInclude Include="..\StdAfx.h" />
+    <ClInclude Include="..\ttapi.h" />
+    <ClInclude Include="..\xrCPU_Pipe.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\xrCPU_Pipe.rc" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/xrCore/LocatorAPI.cpp b/src/xrCore/LocatorAPI.cpp
index c4da34d..51898c1 100644
--- a/src/xrCore/LocatorAPI.cpp
+++ b/src/xrCore/LocatorAPI.cpp
@@ -9,6 +9,7 @@
 #include <direct.h>
 #include <fcntl.h>
 #include <sys\stat.h>
+#define _SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING
 #include <experimental\filesystem>
 #pragma warning(default:4995)
 
diff --git a/src/xrCore/Xr_ini.cpp b/src/xrCore/Xr_ini.cpp
index 3f5ac84..cce213c 100644
--- a/src/xrCore/Xr_ini.cpp
+++ b/src/xrCore/Xr_ini.cpp
@@ -3,6 +3,14 @@
 
 #include "fs_internal.h"
 
+#include <functional>
+#include <regex>
+#include <unordered_map>
+#include <unordered_set>
+#include <vector>
+#include <algorithm>
+#include "mezz_stringbuffer.h"
+
 XRCORE_API CInifile const* pSettings = NULL;
 XRCORE_API CInifile const* pSettingsAuth = NULL;
 
@@ -177,8 +185,19 @@ CInifile::~CInifile()
 		xr_delete(*I);
 }
 
+std::unordered_map<std::string, std::vector<CInifile::Item>> OverrideModifyListData;
+
 static void insert_item(CInifile::Sect* tgt, const CInifile::Item& I)
 {
+	// demonized
+	// DLTX: add or remove item from the section parameter if it has a structure of "name = item1, item2, item3, ..."
+	// >name = item will add item to the list
+	// <name = item will remove item from the list
+	if (*I.first && (I.first.c_str()[0] == '<' || I.first.c_str()[0] == '>')) {
+		OverrideModifyListData[std::string(tgt->Name.c_str())].push_back(I);
+		return;
+	}
+
 	CInifile::SectIt_ sect_it = std::lower_bound(tgt->Data.begin(), tgt->Data.end(), *I.first, item_pred);
 	if (sect_it != tgt->Data.end() && sect_it->first.equal(I.first))
 	{
@@ -210,212 +229,750 @@ void CInifile::Load(IReader* F, LPCSTR path
 )
 {
 	R_ASSERT(F);
-	Sect* Current = 0;
-	string4096 str;
-	string4096 str2;
 
-	BOOL bInsideSTR = FALSE;
+	std::string DLTX_DELETE = "DLTX_DELETE";
 
-	while (!F->eof())
+	std::function<void(std::vector<std::string>*, std::vector<std::string>*, bool)> MergeParentSet = [](std::vector<std::string>* ParentsBase, std::vector<std::string>* ParentsOverride, bool bIncludeRemovers)
 	{
-		F->r_string(str, sizeof(str));
-		_Trim(str);
-		LPSTR comm = strchr(str, ';');
-		LPSTR comm_1 = strchr(str, '/');
-
-		if (comm_1 && (*(comm_1 + 1) == '/') && ((!comm) || (comm && (comm_1 < comm))))
+		for (std::string CurrentParent : *ParentsOverride)
 		{
-			comm = comm_1;
+			bool bIsParentRemoval = CurrentParent[0] == '!';
+
+			std::string StaleParentString = (!bIsParentRemoval ? "!" : "") + CurrentParent.substr(1);
+
+			for (auto It = ParentsBase->rbegin(); It != ParentsBase->rend(); It++)
+			{
+				if (*It == StaleParentString)
+				{
+					ParentsBase->erase(std::next(It).base());
+				}
+			}
+
+			if (bIncludeRemovers || !bIsParentRemoval)
+			{
+				ParentsBase->insert(ParentsBase->end(), CurrentParent);
+			}
 		}
+	};
+
+	string_path currentFileName;
+	std::unordered_map<std::string, std::unordered_map<std::string, bool>> OverrideToFilename;
+	std::unordered_map<std::string, std::string> SectionToFilename;
+
+	std::function<void
+		(
+		IReader*,
+		LPCSTR,
+		std::unordered_map<std::string, Sect>*,
+		std::unordered_map<std::string, std::vector<std::string>>*,
+		BOOL,
+		BOOL
+		)
+	> LTXLoad = [&]
+		(
+		IReader* F,
+		LPCSTR path,
+		std::unordered_map<std::string, Sect>* OutputData,
+		std::unordered_map<std::string, std::vector<std::string>>* ParentDataMap,
+		BOOL bOverridesOnly,
+		BOOL bIsRootFile
+		)
+	{
+		Sect* Current = 0;
+		MezzStringBuffer str;
+		MezzStringBuffer str2;
 
-#ifdef DEBUG
-        LPSTR comment = 0;
-#endif
-		if (comm)
+		BOOL bInsideSTR = FALSE;
+
+		BOOL bIsCurrentSectionOverride = FALSE;
+		BOOL bHasLoadedModFiles = FALSE;
+
+		std::function<std::vector<std::string>*(std::string)> GetParentStrings = [&](std::string SectionName)
 		{
-			//."bla-bla-bla;nah-nah-nah"
-			char quot = '"';
-			bool in_quot = false;
+			auto It = ParentDataMap->find(SectionName);
 
-			LPCSTR q1 = strchr(str, quot);
-			if (q1 && q1 < comm)
+			if (It == ParentDataMap->end())
 			{
-				LPCSTR q2 = strchr(++q1, quot);
-				if (q2 && q2 > comm)
-					in_quot = true;
+				ParentDataMap->insert(std::pair<std::string, std::vector<std::string>>(SectionName, std::vector<std::string>()));
+
+				It = ParentDataMap->find(SectionName);
 			}
 
-			if (!in_quot)
+			return &It->second;
+		};
+
+		auto GetParentsSetFromString = [&](const char* ParentString)
+		{
+			std::vector<std::string> ParentSet = std::vector<std::string>();
+
+			u32 ItemCount = _GetItemCount(ParentString);
+
+			for (u32 i = 0; i < ItemCount; i++)
 			{
-				*comm = 0;
-#ifdef DEBUG
-                comment = comm + 1;
-#endif
+				_GetItem(ParentString, i, str2, str2.GetSize());
+
+				ParentSet.insert(ParentSet.end(), str2.GetBuffer());
 			}
-		}
 
+			return ParentSet;
+		};
+
+		auto GetRegexMatch = [](std::string InputString, std::string PatternString)
+		{
+			std::regex Pattern = std::regex(PatternString);
+			std::smatch MatchResult;
+
+			std::regex_search(InputString, MatchResult, Pattern);
+
+			if (MatchResult.begin() == MatchResult.end())
+			{
+				return std::string();
+			}
+
+			return MatchResult.begin()->str();
+		};
+
+		auto IsFullRegexMatch = [](std::string InputString, std::string PatternString)
+		{
+			return std::regex_match(InputString, std::regex(PatternString));
+		};
 
-		if (str[0] && (str[0] == '#') && strstr(str, "#include")) //handle includes
+		const auto loadFile = [&, LTXLoad](const string_path _fn, const string_path inc_path, const string_path name)
 		{
-			string_path inc_name;
-			R_ASSERT(path&&path[0]);
-			if (_GetItem(str, 1, inc_name, '"'))
+			if (!allow_include_func || allow_include_func(_fn))
 			{
-				string_path fn, inc_path, folder;
-				strconcat(sizeof(fn), fn, path, inc_name);
-				_splitpath(fn, inc_path, folder, 0, 0);
-				xr_strcat(inc_path, sizeof(inc_path), folder);
+				IReader* I = FS.r_open(_fn);
+				R_ASSERT3(I, "Can't find include file:", name);
+
+				strcpy(currentFileName, name);
 
-				const auto loadFile = [&](const string_path _fn, const string_path name)
+				LTXLoad(I, inc_path, OutputData, ParentDataMap, bOverridesOnly, false);
+
+				FS.r_close(I);
+			}
+		};
+
+		auto StashCurrentSection = [&]()
+		{
+			if (Current && bIsCurrentSectionOverride == bOverridesOnly)
+			{
+				//store previous section
+				auto SectIt = OutputData->find(std::string(Current->Name.c_str()));
+				if (SectIt != OutputData->end())
 				{
-					if (!allow_include_func || allow_include_func(_fn))
+					if (!bIsCurrentSectionOverride)
 					{
-						IReader* I = FS.r_open(_fn);
-						R_ASSERT3(I, "Can't find include file:", name);
-						Load(I, inc_path, allow_include_func);
-						FS.r_close(I);
-					}
-				};
 
-				if (strstr(inc_name, "*.ltx"))
-				{
-					FS_FileSet fset;
-					FS.file_list(fset, inc_path, FS_ListFiles, inc_name);
+						Debug.fatal(DEBUG_INFO, "Duplicate section '%s' wasn't marked as an override.\n\nOverride section by prefixing it with '!' (![%s]) or give it a unique name.\n\nCheck this file and its DLTX mods:\n\"%s\",\nfile with section \"%s\",\nfile with duplicate \"%s\"", *Current->Name, *Current->Name, m_file_name, SectionToFilename[std::string(Current->Name.c_str())].c_str(), currentFileName);
+					}
 
-					for (FS_FileSet::iterator it = fset.begin(); it != fset.end(); it++)
+					//Overwrite existing override data
+					for (Item CurrentItem : Current->Data)
 					{
-						LPCSTR _name = it->name.c_str();
-						string_path _fn;
-						strconcat(sizeof(_fn), _fn, inc_path, _name);
-						loadFile(_fn, _name);
+						insert_item(&SectIt->second, CurrentItem);
 					}
+
+					OverrideToFilename[SectIt->first][currentFileName] = true;
 				}
 				else
-					loadFile(fn, inc_name);
+				{
+					OutputData->emplace(std::pair<std::string, Sect>(std::string(Current->Name.c_str()), *Current));
+					OverrideToFilename[std::string(Current->Name.c_str())][currentFileName] = true;
+					SectionToFilename[std::string(Current->Name.c_str())] = currentFileName;
+				}
 			}
-		}
-		else if (str[0] && (str[0] == '[')) //new section ?
+
+			Current = NULL;
+		};
+
+		std::unordered_set<std::string> sectionsMarkedForCreate;
+
+		while (!F->eof() || (bIsRootFile && !bHasLoadedModFiles))
 		{
-			// insert previous filled section
-			if (Current)
+			if (!F->eof())
 			{
-				//store previous section
-				RootIt I = std::lower_bound(DATA.begin(), DATA.end(), *Current->Name, sect_pred);
-				if ((I != DATA.end()) && ((*I)->Name == Current->Name))
-					Debug.fatal(DEBUG_INFO, "Duplicate section '%s' found.", *Current->Name);
-				DATA.insert(I, Current);
+				F->r_string(str, str.GetSize());
+				_Trim(str);
+			}
+			else if (!bHasLoadedModFiles && bIsRootFile)
+			{
+				StashCurrentSection();
+				bHasLoadedModFiles = TRUE;
+
+				if (!m_file_name[0])
+				{
+					continue;
+				}
+
+				//Assemble paths and filename
+				MezzStringBuffer split_drive;
+				MezzStringBuffer split_dir;
+				MezzStringBuffer split_name;
+
+				_splitpath_s(m_file_name, split_drive, split_drive.GetSize(), split_dir, split_dir.GetSize(), split_name, split_name.GetSize(), NULL, 0);
+
+				std::string FilePath = std::string(split_drive) + std::string(split_dir);
+				std::string FileName = split_name;
+
+				//Collect all files that could potentially be confused as a root file by our mod files
+				FS_FileSet AmbiguousFiles;
+				FS.file_list(AmbiguousFiles, FilePath.c_str(), FS_ListFiles, (FileName + "_*.ltx").c_str());
+
+				//Collect all matching mod files
+				FS_FileSet ModFiles;
+				FS.file_list(ModFiles, FilePath.c_str(), FS_ListFiles, ("mod_" + FileName + "_*.ltx").c_str());
+
+				for (auto It = ModFiles.begin(); It != ModFiles.end(); ++It)
+				{
+					std::string ModFileName = It->name.c_str();
+
+					//Determine if we should load this mod file, or if it's meant for a different root file
+					BOOL bIsModfileMeantForMe = [&]()
+					{
+						for (auto It2 = AmbiguousFiles.begin(); It2 != AmbiguousFiles.end(); ++It2)
+						{
+							std::string AmbiguousFileName = GetRegexMatch(It2->name.c_str(), "^.+(?=.ltx$)");
+							std::string AmbiguousFileMatchPattern = std::string("mod_") + AmbiguousFileName + std::string("_.+.ltx");
+
+							if (IsFullRegexMatch(ModFileName, AmbiguousFileMatchPattern))
+							{
+								return false;
+							}
+						}
+
+						return true;
+					}();
+
+					if (!bIsModfileMeantForMe)
+					{
+						continue;
+					}
+
+					loadFile((FilePath + ModFileName).c_str(), FilePath.c_str(), ModFileName.c_str());
+				}
+
+				continue;
+			}
+
+			LPSTR comm = strchr(str, ';');
+			LPSTR comm_1 = strchr(str, '/');
+
+			if (comm_1 && (*(comm_1 + 1) == '/') && ((!comm) || (comm && (comm_1 < comm))))
+			{
+				comm = comm_1;
+			}
+
+#ifdef DEBUG
+			LPSTR comment = 0;
+#endif
+			if (comm)
+			{
+				//."bla-bla-bla;nah-nah-nah"
+				char quot = '"';
+				bool in_quot = false;
+
+				LPCSTR q1 = strchr(str, quot);
+				if (q1 && q1 < comm)
+				{
+					LPCSTR q2 = strchr(++q1, quot);
+					if (q2 && q2 > comm)
+						in_quot = true;
+				}
+
+				if (!in_quot)
+				{
+					*comm = 0;
+#ifdef DEBUG
+					comment = comm + 1;
+#endif
+				}
 			}
-			Current = xr_new<Sect>();
-			Current->Name = 0;
-			// start new section
-			R_ASSERT3(strchr(str, ']'), "Bad ini section found: ", str);
-			LPCSTR inherited_names = strstr(str, "]:");
-			if (0 != inherited_names)
+
+			_Trim(str);
+
+			auto isOverrideSection = [](char* str) {
+				return strstr(str, "![") == &str[0];
+			};
+
+			auto isSafeOverrideSection = [](char* str) {
+				return strstr(str, "@[") == &str[0];
+			};
+
+			auto isModSection = [isOverrideSection, isSafeOverrideSection](char* str) {
+				return isOverrideSection(str) || isSafeOverrideSection(str);
+			};
+
+			if (str[0] && (str[0] == '#') && strstr(str, "#include")) //handle includes
 			{
-				VERIFY2(m_flags.test(eReadOnly), "Allow for readonly mode only.");
-				inherited_names += 2;
-				u32 cnt = _GetItemCount(inherited_names);
-				u32 total_count = 0;
-				u32 k = 0;
-				for (k = 0; k < cnt; ++k)
+				string_path inc_name;
+				R_ASSERT(path && path[0]);
+				if (_GetItem(str, 1, inc_name, '"'))
 				{
-					string512 tmp;
-					_GetItem(inherited_names, k, tmp);
-					Sect& inherited_section = r_section(tmp);
-					total_count += inherited_section.Data.size();
+					string_path fn, inc_path, folder;
+					strconcat(sizeof(fn), fn, path, inc_name);
+					_splitpath(fn, inc_path, folder, 0, 0);
+					xr_strcat(inc_path, sizeof(inc_path), folder);
+
+
+					if (strstr(inc_name, "*.ltx"))
+					{
+						FS_FileSet fset;
+						FS.file_list(fset, inc_path, FS_ListFiles, inc_name);
+
+						for (FS_FileSet::iterator it = fset.begin(); it != fset.end(); it++)
+						{
+							LPCSTR _name = it->name.c_str();
+							string_path _fn;
+							strconcat(sizeof(_fn), _fn, inc_path, _name);
+							loadFile(_fn, inc_path, _name);
+						}
+					}
+					else
+						loadFile(fn, inc_path, inc_name);
 				}
 
-				Current->Data.reserve(Current->Data.size() + total_count);
+				continue;
+			}
+			else if (str[0] && strstr(str, "!![") == &str[0])	//Section delete
+			{
+				StashCurrentSection();
 
-				for (k = 0; k < cnt; ++k)
+				if (!bOverridesOnly)
 				{
-					string512 tmp;
-					_GetItem(inherited_names, k, tmp);
-					Sect& inherited_section = r_section(tmp);
-					for (SectIt_ it = inherited_section.Data.begin(); it != inherited_section.Data.end(); it++)
-						insert_item(Current, *it);
+					continue;
 				}
+
+				Current = xr_new<Sect>();
+				*strchr(str, ']') = 0;
+				Current->Name = strlwr(&str[3]);
+
+				bIsCurrentSectionOverride = true;
+
+				Item DeleteItem;
+				DeleteItem.first = DLTX_DELETE.c_str();
+				DeleteItem.second = "";
+
+				insert_item(Current, DeleteItem);
+
+				continue;
 			}
-			*strchr(str, ']') = 0;
-			Current->Name = strlwr(str + 1);
-		}
-		else // name = value
-		{
-			if (Current)
+			else if ((str[0] && (str[0] == '[')) || isModSection(str)) //new section ?
+			{
+				// insert previous filled section
+				StashCurrentSection();
+
+				u32 SectionNameStartPos = (isModSection(str) ? 2 : 1);
+				std::string SecName = std::string(str).substr(SectionNameStartPos, strchr(str, ']') - str - SectionNameStartPos).c_str();
+				for (auto i = SecName.begin(); i != SecName.end(); ++i)
+				{
+					*i = tolower(*i);
+				}
+				
+				if (isOverrideSection(str)) { //Used to detect bad or unintended overrides
+					bIsCurrentSectionOverride = true;
+				} else if (isSafeOverrideSection(str)) { // Create section if it doesnt exist, override if it does
+					bIsCurrentSectionOverride = true;
+					if (bOverridesOnly) {
+						// Msg("using @[, override existing section %s", SecName.c_str());
+					} else {
+						auto SectIt = OutputData->find(SecName);
+						if (SectIt != OutputData->end()) {
+							// Msg("using @[, override existing section %s", SecName.c_str());
+						} else {
+							// Msg("using @[, create new section %s", SecName.c_str());
+							sectionsMarkedForCreate.insert(SecName);
+						}
+					}
+				} else {
+					bIsCurrentSectionOverride = false;
+				}
+
+				Current = xr_new<Sect>();
+				Current->Name = SecName.c_str();
+
+				// start new section
+				R_ASSERT3(strchr(str, ']'), "Bad ini section found: ", str);
+
+				if (bIsCurrentSectionOverride == bOverridesOnly)
+				{
+					LPCSTR inherited_names = strstr(str, "]:");
+					if (0 != inherited_names)
+					{
+						VERIFY2(m_flags.test(eReadOnly), "Allow for readonly mode only.");
+						inherited_names += 2;
+
+						std::vector<std::string> CurrentParents = GetParentsSetFromString(inherited_names);
+						std::vector<std::string>* SectionParents = GetParentStrings(Current->Name.c_str());
+
+						MergeParentSet(SectionParents, &CurrentParents, true);
+					}
+				}
+
+				continue;
+			}
+			else // name = value
 			{
-				string4096 value_raw;
-				char* name = str;
-				char* t = strchr(name, '=');
-				if (t)
+				if (Current && bIsCurrentSectionOverride == bOverridesOnly)
 				{
-					*t = 0;
-					_Trim(name);
-					++t;
-					xr_strcpy(value_raw, sizeof(value_raw), t);
-					bInsideSTR = _parse(str2, value_raw);
-					if (bInsideSTR) //multiline str value
+					bool bIsDelete = str[0] == '!';
+
+					MezzStringBuffer value_raw;
+					char* name = (char*) (str + (bIsDelete ? 1 : 0));
+					char* t = strchr(name, '=');
+					if (t)
 					{
-						while (bInsideSTR)
+						*t = 0;
+						_Trim(name);
+						++t;
+						xr_strcpy(value_raw, value_raw.GetSize(), t);
+						bInsideSTR = _parse(str2, value_raw);
+						if (bInsideSTR) //multiline str value
 						{
-							xr_strcat(value_raw, sizeof(value_raw), "\r\n");
-							string4096 str_add_raw;
-							F->r_string(str_add_raw, sizeof(str_add_raw));
-							R_ASSERT2(
-								xr_strlen(value_raw) + xr_strlen(str_add_raw) < sizeof(value_raw),
-								make_string(
-									"Incorrect inifile format: section[%s], variable[%s]. Odd number of quotes (\") found, but should be even."
-									,
-									Current->Name.c_str(),
-									name
-								)
-							);
-							xr_strcat(value_raw, sizeof(value_raw), str_add_raw);
-							bInsideSTR = _parse(str2, value_raw);
-							if (bInsideSTR)
+							while (bInsideSTR)
 							{
-								if (is_empty_line_now(F))
-									xr_strcat(value_raw, sizeof(value_raw), "\r\n");
+								xr_strcat(value_raw, value_raw.GetSize(), "\r\n");
+								MezzStringBuffer str_add_raw;
+								F->r_string(str_add_raw, str_add_raw.GetSize());
+								R_ASSERT2(
+									xr_strlen(value_raw) + xr_strlen(str_add_raw) < value_raw.GetSize(),
+									make_string(
+										"Incorrect inifile format: section[%s], variable[%s]. Odd number of quotes (\") found, but should be even."
+										,
+										Current->Name.c_str(),
+										name
+									)
+								);
+								xr_strcat(value_raw, value_raw.GetSize(), str_add_raw);
+								bInsideSTR = _parse(str2, value_raw);
+								if (bInsideSTR)
+								{
+									if (is_empty_line_now(F))
+										xr_strcat(value_raw, value_raw.GetSize(), "\r\n");
+								}
 							}
 						}
 					}
+					else
+					{
+						_Trim(name);
+						str2[0] = 0;
+					}
+
+					Item I;
+					I.first = (name[0] ? name : NULL);
+					I.second = bIsDelete ? DLTX_DELETE.c_str() : (str2[0] ? str2.GetBuffer() : NULL);
+
+					if (*I.first || *I.second)
+					{
+						insert_item(Current, I);
+					}
+				}
+
+				continue;
+			}
+		}
+
+		StashCurrentSection();
+
+		// Create empty sections that were marked with @[ and weren't defined normally
+		if (!bOverridesOnly) {
+			for (auto& SecName : sectionsMarkedForCreate) {
+				auto SectIt = OutputData->find(SecName);
+				if (SectIt == OutputData->end()) {
+					// Msg("section %s does not exist but was marked as @[, creating", SecName.c_str());
+					Current = xr_new<Sect>();
+					Current->Name = SecName.c_str();
+					OutputData->emplace(std::pair<std::string, Sect>(std::string(Current->Name.c_str()), *Current));
+					OverrideToFilename[std::string(Current->Name.c_str())][currentFileName] = true;
+					SectionToFilename[std::string(Current->Name.c_str())] = currentFileName;
+					Current = NULL;
+				}
+			}
+		}
+	};
+
+	std::unordered_map<std::string, std::vector<std::string>> BaseParentDataMap;
+	std::unordered_map<std::string, Sect> BaseData;
+
+	std::unordered_map<std::string, std::vector<std::string>> OverrideParentDataMap;
+	std::unordered_map<std::string, Sect> OverrideData;
+
+	std::unordered_map<std::string, Sect> FinalData;
+
+	std::unordered_set<std::string> FinalizedSections;
+
+	enum InsertType
+	{
+		Override,
+		Base,
+		Parent
+	};
+
+	std::function<void(std::string, std::vector<std::string>*)> EvaluateSection = [&](std::string SectionName, std::vector<std::string>* PreviousEvaluations)
+	{
+		if (FinalizedSections.find(SectionName) != FinalizedSections.end())
+		{
+			return;
+		}
+
+		PreviousEvaluations->insert(PreviousEvaluations->end(), SectionName);
+
+		std::vector<std::string>* BaseParents = &BaseParentDataMap.find(SectionName)->second;
+		std::vector<std::string>* OverrideParents = &OverrideParentDataMap.find(SectionName)->second;
+
+		BOOL bDeleteSectionIfEmpty = FALSE;
+
+		MergeParentSet(BaseParents, OverrideParents, false);
+
+		std::pair<std::string, Sect> CurrentSecPair = std::pair<std::string, Sect>(SectionName, Sect());
+		Sect* CurrentSect = &CurrentSecPair.second;
+		CurrentSect->Name = SectionName.c_str();
+
+		auto IsStringDLTXDelete = [&](shared_str str)
+		{
+			const char* RawString = str.c_str();
+
+			return RawString && std::string(RawString) == DLTX_DELETE;
+		};
+
+		auto InsertItemWithDelete = [&](Item CurrentItem, InsertType Type)
+		{
+			if (IsStringDLTXDelete(CurrentItem.first))
+			{
+				//Delete section
+				bDeleteSectionIfEmpty = TRUE;
+			}
+			else
+			{
+				//Insert item if variable isn't already set
+				CInifile::SectIt_ sect_it = std::lower_bound(CurrentSect->Data.begin(), CurrentSect->Data.end(), *CurrentItem.first, item_pred);
+				if (sect_it != CurrentSect->Data.end() && sect_it->first.equal(CurrentItem.first))
+				{
+					bool bShouldInsert = [&]()
+					{
+						switch (Type)
+						{
+						case InsertType::Override:		return true;
+						case InsertType::Base:			return false;
+						case InsertType::Parent:		return IsStringDLTXDelete(sect_it->second);
+						}
+					}();
+
+					if (bShouldInsert)
+					{
+						sect_it->second = CurrentItem.second;
+					}
 				}
 				else
 				{
-					_Trim(name);
-					str2[0] = 0;
+					CurrentSect->Data.insert(sect_it, CurrentItem);
 				}
+			}
+		};
 
-				Item I;
-				I.first = (name[0] ? name : NULL);
-				I.second = (str2[0] ? str2 : NULL);
-				//#ifdef DEBUG
-				// I.comment = m_flags.test(eReadOnly)?0:comment;
-				//#endif
+		//Insert variables of own data
+		auto InsertData = [&](std::unordered_map<std::string, Sect>* Data, BOOL bIsBase)
+		{
+			auto It = Data->find(SectionName);
 
-				if (m_flags.test(eReadOnly))
+			if (It != Data->end())
+			{
+				Sect* DataSection = &It->second;
+				for (Item CurrentItem : DataSection->Data)
 				{
-					if (*I.first) insert_item(Current, I);
+					InsertItemWithDelete(CurrentItem, bIsBase ? Base : Override);
 				}
-				else
+
+				if (!bIsBase)
 				{
-					if (
-						*I.first
-						|| *I.second
-							//#ifdef DEBUG
-							// || *I.comment
-							//#endif
-					)
-						insert_item(Current, I);
+					Data->erase(It);
+				}
+			}
+		};
+
+		InsertData(&OverrideData, false);
+		InsertData(&BaseData, true);
+
+		//Insert variables from parents
+		for (auto It = BaseParents->rbegin(); It != BaseParents->rend(); ++It)
+		{
+			std::string ParentSectionName = *(It.base() - 1);
+
+			for (auto It = PreviousEvaluations->begin(); It != PreviousEvaluations->end(); ++It)
+			{
+				if (ParentSectionName == *It)
+				{
+					Debug.fatal(DEBUG_INFO, "Section '%s' has cyclical dependencies. Ensure that sections with parents don't inherit in a loop. Check this file and its DLTX mods: %s, mod file %s", ParentSectionName.c_str(), m_file_name, currentFileName);
+				}
+			}
+
+			EvaluateSection(ParentSectionName, PreviousEvaluations);
+
+			auto ParentIt = FinalData.find(ParentSectionName);
+
+			if (ParentIt == FinalData.end())
+			{
+				Debug.fatal(DEBUG_INFO, "Section '%s' inherits from non-existent section '%s'. Check this file and its DLTX mods: %s, mod file %s", SectionName.c_str(), ParentSectionName.c_str(), m_file_name, currentFileName);
+			}
+
+			Sect* ParentSec = &ParentIt->second;
+
+			for (Item CurrentItem : ParentSec->Data)
+			{
+				InsertItemWithDelete(CurrentItem, Parent);
+			}
+		}
+
+		//Delete entries that are still marked DLTX_DELETE
+		for (auto It = CurrentSect->Data.rbegin(); It != CurrentSect->Data.rend(); ++It)
+		{
+			if (IsStringDLTXDelete(It->second))
+			{
+				CurrentSect->Data.erase(It.base() - 1);
+			}
+		}
+
+		// If there is data to modify parameters lists
+		if (OverrideModifyListData.find(std::string(CurrentSect->Name.c_str())) != OverrideModifyListData.end()) {
+			for (auto It = OverrideModifyListData[std::string(CurrentSect->Name.c_str())].begin(); It != OverrideModifyListData[std::string(CurrentSect->Name.c_str())].end(); ++It) {
+				CInifile::Item &I = *It;
+
+				// If section exists with item list, split list and perform operation
+				char dltx_listmode = I.first[0];
+				I.first = I.first.c_str() + 1;
+
+				CInifile::SectIt_ sect_it = std::lower_bound(CurrentSect->Data.begin(), CurrentSect->Data.end(), *I.first, item_pred);
+				if (sect_it != CurrentSect->Data.end() && sect_it->first.equal(I.first)) {
+
+					//Msg("%s has dltx_listmode %s", I.first.c_str(), std::string(1, dltx_listmode).c_str());
+
+					if (dltx_listmode && sect_it->second != NULL) {
+						// Split list 
+						auto split_list = [](const std::string items, const std::string delimiter = ",") {
+							std::string i = items;
+							std::vector<std::string> vec;
+							size_t pos = 0;
+							std::string token;
+							while ((pos = i.find(delimiter)) != std::string::npos) {
+								token = i.substr(0, pos);
+								vec.push_back(token);
+								i.erase(0, pos + delimiter.length());
+							}
+							vec.push_back(i);
+
+							auto trim = [](std::string &s, const char* t = " \t\n\r\f\v") {
+								s.erase(s.find_last_not_of(t) + 1);
+								s.erase(0, s.find_first_not_of(t));
+							};
+							for (auto &item : vec) {
+								trim(item);
+							}
+							return vec;
+						};
+						std::vector<std::string> sect_it_items_vec = split_list(sect_it->second.c_str());
+						std::vector<std::string> I_items_vec = split_list(I.second.c_str());
+
+						// Add or remove to the list
+						auto find_and_store_index = [](const std::vector<std::string> &items_vec, const std::string item, int &vec_index) {
+							auto it = std::find(items_vec.begin(), items_vec.end(), item);
+							if (it != items_vec.end()) {
+								vec_index = it - items_vec.begin();
+								return true;
+							}
+							else {
+								vec_index = -1;
+								return false;
+							}
+						};
+						int vec_index = -1;
+						for (const auto &item : I_items_vec) {
+							if (dltx_listmode == '>') {
+								sect_it_items_vec.push_back(item);
+							}
+							else if (dltx_listmode == '<') {
+								while (find_and_store_index(sect_it_items_vec, item, vec_index)) {
+									sect_it_items_vec.erase(sect_it_items_vec.begin() + vec_index);
+								}
+							}
+						}
+
+						// Store result back
+						auto join_list = [](const std::vector<std::string> &items_vec, const std::string delimiter = ",") {
+							std::string ret;
+							for (const auto &i : items_vec) {
+								if (!ret.empty()) {
+									ret += delimiter;
+								}
+								ret += i;
+							}
+							return ret;
+						};
+
+						/*std::string c(1, dltx_listmode);
+						Msg("%s has dltx_listmode %s, %s items", I.first.c_str(), c.c_str(), dltx_listmode == '>' ? "adding" : "removing");
+						Msg("old %s", sect_it->second.c_str());
+						Msg("new %s", join_list(sect_it_items_vec).c_str());*/
+
+						sect_it->second = join_list(sect_it_items_vec, ",").c_str();
+					}
 				}
 			}
 		}
+		
+
+		//Pop from stack
+		auto LastElement = PreviousEvaluations->end();
+		LastElement--;
+
+		PreviousEvaluations->erase(LastElement);
+
+		//Finalize
+		if (!bDeleteSectionIfEmpty || CurrentSecPair.second.Data.size())
+		{
+			FinalData.emplace(CurrentSecPair);
+		}
+
+		FinalizedSections.insert(SectionName);
+	};
+
+	//Read contents of root file
+	LTXLoad(F, path, &OverrideData, &OverrideParentDataMap, true, true);
+	F->seek(0);
+	LTXLoad(F, path, &BaseData, &BaseParentDataMap, false, true);
+
+	//Merge base and override data together
+	std::vector<std::string> PreviousEvaluations = std::vector<std::string>();
+
+	for (std::pair<std::string, Sect> SectPair : BaseData)
+	{
+		EvaluateSection(SectPair.first, &PreviousEvaluations);
+	}
+
+	//Insert all finalized sections into final container
+	for (std::pair<std::string, Sect> SectPair : FinalData)
+	{
+		Sect* NewSect = xr_new<Sect>();
+		*NewSect = SectPair.second;
+
+		RootIt I = std::lower_bound(DATA.begin(), DATA.end(), SectPair.first.c_str(), sect_pred);
+		DATA.insert(I, NewSect);
 	}
-	if (Current)
+
+	// Clean modifiers of parameters' lists
+	OverrideModifyListData.clear();
+
+	//throw errors if there are overrides that never got used
+	if (OverrideData.size())
 	{
-		RootIt I = std::lower_bound(DATA.begin(), DATA.end(), *Current->Name, sect_pred);
-		if ((I != DATA.end()) && ((*I)->Name == Current->Name))
-			Debug.fatal(DEBUG_INFO, "Duplicate section '%s' found.", *Current->Name);
-		DATA.insert(I, Current);
+		//Debug.fatal(DEBUG_INFO, "Attemped to override section '%s', which doesn't exist. Ensure that a base section with the same name is loaded first. Check this file and its DLTX mods: %s", OverrideData.begin()->first.c_str(), m_file_name);
+		for (auto i = OverrideData.begin(); i != OverrideData.end(); i++) {
+			auto override_filenames = OverrideToFilename.find(i->first);
+			if (override_filenames != OverrideToFilename.end()) {
+				for (auto &override_filename : override_filenames->second) {
+					Msg("!!!DLTX ERROR Attemped to override section '%s', which doesn't exist. Ensure that a base section with the same name is loaded first. Check this file and its DLTX mods: %s, mod file %s", i->first.c_str(), m_file_name, override_filename.first.c_str());
+				}
+			}
+		}
 	}
 }
 
diff --git a/src/xrCore/_math.cpp b/src/xrCore/_math.cpp
index 2553818..af8679f 100644
--- a/src/xrCore/_math.cpp
+++ b/src/xrCore/_math.cpp
@@ -210,7 +210,7 @@ u64 __fastcall GetCLK(void)
 		// Detect QPC Overhead
 		QueryPerformanceFrequency((PLARGE_INTEGER)&qpc_freq);
 		qpc_overhead = 0;
-		for (i = 0; i < 256; i++)
+		for (int i = 0; i < 256; i++)
 		{
 			start = QPC();
 			qpc_overhead += QPC() - start - dummy;
diff --git a/src/xrCore/_matrix.h b/src/xrCore/_matrix.h
index f113efe..8e718af 100644
--- a/src/xrCore/_matrix.h
+++ b/src/xrCore/_matrix.h
@@ -325,6 +325,12 @@ public:
 		return *this;
 	}
 
+	IC SelfRef translate_add(T _x, T _y, T _z) // combine translation
+	{
+		c.add(_x, _y, _z);
+		return *this;
+	}
+
 	IC SelfRef scale(T x, T y, T z) // setup scale matrix
 	{
 		identity();
@@ -869,6 +875,8 @@ public:
 		return *this;
 	}
 
+	ICF SelfRef setHPB(Tvector const& hpb) { return setHPB(hpb.x, hpb.y, hpb.z); }
+
 	IC SelfRef setXYZ(T x, T y, T z) { return setHPB(y, x, z); }
 	IC SelfRef setXYZ(Tvector const& xyz) { return setHPB(xyz.y, xyz.x, xyz.z); }
 	IC SelfRef setXYZi(T x, T y, T z) { return setHPB(-y, -x, -z); }
diff --git a/src/xrCore/_stl_extensions.h b/src/xrCore/_stl_extensions.h
index 2264fde..e610887 100644
--- a/src/xrCore/_stl_extensions.h
+++ b/src/xrCore/_stl_extensions.h
@@ -102,8 +102,8 @@ public:
 	char* _charalloc(size_type n) { return (char*)allocate(n); }
 	void deallocate(pointer p, size_type n) const { xr_free(p); }
 	void deallocate(void* p, size_type n) const { xr_free(p); }
-	void construct(pointer p, const T& _Val) { std::_Construct(p, _Val); }
-	void destroy(pointer p) { std::_Destroy(p); }
+	void construct(pointer p, const T& _Val) { ::new((void*)p) T(_Val); }
+	void destroy(pointer p) { p->~value_type(); }
 
 	size_type max_size() const
 	{
diff --git a/src/xrCore/_vector3d.h b/src/xrCore/_vector3d.h
index b67fcd6..32f8379 100644
--- a/src/xrCore/_vector3d.h
+++ b/src/xrCore/_vector3d.h
@@ -71,6 +71,13 @@ public:
 		z += s;
 		return *this;
 	};
+	ICF SelfRef add(T _x, T _y, T _z)
+	{
+		x += _x;
+		y += _y;
+		z += _z;
+		return *this;
+	};
 	ICF SelfRef add(const Self& a, const Self& v)
 	{
 		x = a.x + v.x;
@@ -100,6 +107,13 @@ public:
 		z -= s;
 		return *this;
 	};
+	ICF SelfRef sub(T _x, T _y, T _z)
+	{
+		x -= _x;
+		y -= _y;
+		z -= _z;
+		return *this;
+	};
 	ICF SelfRef sub(const Self& a, const Self& v)
 	{
 		x = a.x - v.x;
@@ -129,6 +143,13 @@ public:
 		z *= s;
 		return *this;
 	};
+	ICF SelfRef mul(T _x, T _y, T _z)
+	{
+		x *= _x;
+		y *= _y;
+		z *= _z;
+		return *this;
+	};
 	ICF SelfRef mul(const Self& a, const Self& v)
 	{
 		x = a.x * v.x;
@@ -158,6 +179,13 @@ public:
 		z /= s;
 		return *this;
 	};
+	ICF SelfRef div(T _x, T _y, T _z)
+	{
+		x /= _x;
+		y /= _y;
+		z /= _z;
+		return *this;
+	};
 	ICF SelfRef div(const Self& a, const Self& v)
 	{
 		x = a.x / v.x;
diff --git a/src/xrCore/cpuid.cpp b/src/xrCore/cpuid.cpp
index 36a9c43..2a58967 100644
--- a/src/xrCore/cpuid.cpp
+++ b/src/xrCore/cpuid.cpp
@@ -2,6 +2,7 @@
 #pragma hdrstop
 
 #include "cpuid.h"
+#include <intrin.h>
 
 #include <array>
 #include <bitset>
diff --git a/src/xrCore/mezz_stringbuffer.cpp b/src/xrCore/mezz_stringbuffer.cpp
new file mode 100644
index 0000000..13f0470
--- /dev/null
+++ b/src/xrCore/mezz_stringbuffer.cpp
@@ -0,0 +1,26 @@
+#include "stdafx.h"
+
+#include "mezz_stringbuffer.h"
+
+MezzStringBuffer::MezzStringBuffer(uint32_t Size)
+{
+	StringBuffer = std::make_unique<char[]>(Size);
+	BufferRaw = StringBuffer.get();
+
+	BufferSize = Size;
+}
+
+char* MezzStringBuffer::GetBuffer() const
+{
+	return BufferRaw;
+}
+
+uint32_t MezzStringBuffer::GetSize() const
+{
+	return BufferSize;
+}
+
+MezzStringBuffer::operator char* () const
+{
+	return BufferRaw;
+}
\ No newline at end of file
diff --git a/src/xrCore/mezz_stringbuffer.h b/src/xrCore/mezz_stringbuffer.h
new file mode 100644
index 0000000..9f42203
--- /dev/null
+++ b/src/xrCore/mezz_stringbuffer.h
@@ -0,0 +1,21 @@
+#pragma once
+
+#include <memory>
+#include <cstdint>
+
+class MezzStringBuffer
+{
+public:
+	MezzStringBuffer(uint32_t Size = 4096);
+
+	char* GetBuffer() const;
+	uint32_t GetSize() const;
+
+	operator char* () const;
+
+private:
+	std::unique_ptr<char[]> StringBuffer;
+
+	char* BufferRaw;
+	uint32_t BufferSize;
+};
\ No newline at end of file
diff --git a/src/xrCore/vs2022/xrCore.vcxproj b/src/xrCore/vs2022/xrCore.vcxproj
new file mode 100644
index 0000000..09199de
--- /dev/null
+++ b/src/xrCore/vs2022/xrCore.vcxproj
@@ -0,0 +1,489 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}</ProjectGuid>
+    <RootNamespace>xrCore</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS);$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>PURE_ALLOC;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCORE_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)BugTrap\Bin;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>.;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS);$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;PURE_ALLOC;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCORE_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)BugTrap\Bin;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS);$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>PURE_ALLOC;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRCORE_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(DXSDK_DIR)Lib\x86;$(XRAY_16X_LIBS)BugTrap\Bin;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <DataExecutionPrevention>
+      </DataExecutionPrevention>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\blackbox\BlackBoxUI.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </PrecompiledHeader>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">TurnOffAllWarnings</WarningLevel>
+    </ClCompile>
+    <ClCompile Include="..\blackbox\BSUFunctions.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </PrecompiledHeader>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">TurnOffAllWarnings</WarningLevel>
+    </ClCompile>
+    <ClCompile Include="..\blackbox\CrashHandler.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </PrecompiledHeader>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">TurnOffAllWarnings</WarningLevel>
+    </ClCompile>
+    <ClCompile Include="..\blackbox\DiagAssert.cpp">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">true</ExcludedFromBuild>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </PrecompiledHeader>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">TurnOffAllWarnings</WarningLevel>
+    </ClCompile>
+    <ClCompile Include="..\blackbox\GetLoadedModules.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </PrecompiledHeader>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">TurnOffAllWarnings</WarningLevel>
+    </ClCompile>
+    <ClCompile Include="..\blackbox\IsNT.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </PrecompiledHeader>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">TurnOffAllWarnings</WarningLevel>
+    </ClCompile>
+    <ClCompile Include="..\blackbox\NT4ProcessInfo.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </PrecompiledHeader>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">TurnOffAllWarnings</WarningLevel>
+    </ClCompile>
+    <ClCompile Include="..\blackbox\stdafx_.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </PrecompiledHeader>
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+      <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">$(IntDir)%(Filename)1.obj</ObjectFileName>
+    </ClCompile>
+    <ClCompile Include="..\blackbox\TLHELPProcessInfo.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </PrecompiledHeader>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">TurnOffAllWarnings</WarningLevel>
+    </ClCompile>
+    <ClCompile Include="..\clsid.cpp" />
+    <ClCompile Include="..\cpuid.cpp" />
+    <ClCompile Include="..\crc32.cpp" />
+    <ClCompile Include="..\dump_string.cpp" />
+    <ClCompile Include="..\FileSystem.cpp" />
+    <ClCompile Include="..\FileSystem_borland.cpp" />
+    <ClCompile Include="..\file_stream_reader.cpp" />
+    <ClCompile Include="..\FS.cpp" />
+    <ClCompile Include="..\FTimer.cpp" />
+    <ClCompile Include="..\LocatorAPI.cpp" />
+    <ClCompile Include="..\LocatorAPI_auth.cpp" />
+    <ClCompile Include="..\LocatorAPI_defs.cpp" />
+    <ClCompile Include="..\LocatorAPI_Notifications.cpp">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\Lock.cpp" />
+    <ClCompile Include="..\log.cpp" />
+    <ClCompile Include="..\LzHuf.cpp" />
+    <ClCompile Include="..\lzo_compressor.cpp" />
+    <ClCompile Include="..\memory_allocation_stats.cpp" />
+    <ClCompile Include="..\memory_monitor.cpp" />
+    <ClCompile Include="..\memory_usage.cpp" />
+    <ClCompile Include="..\mezz_stringbuffer.cpp" />
+    <ClCompile Include="..\Model.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </PrecompiledHeader>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">TurnOffAllWarnings</WarningLevel>
+      <WarningLevel Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">TurnOffAllWarnings</WarningLevel>
+    </ClCompile>
+    <ClCompile Include="..\NET_utils.cpp" />
+    <ClCompile Include="..\os_clipboard.cpp" />
+    <ClCompile Include="..\ppmd_compressor.cpp" />
+    <ClCompile Include="..\rt_compressor.cpp" />
+    <ClCompile Include="..\rt_compressor9.cpp" />
+    <ClCompile Include="..\rt_lzo1x_1.cpp" />
+    <ClCompile Include="..\rt_lzo1x_9x.cpp" />
+    <ClCompile Include="..\rt_lzo1x_d1.cpp" />
+    <ClCompile Include="..\rt_lzo1x_d2.cpp" />
+    <ClCompile Include="..\rt_lzo1x_d3.cpp" />
+    <ClCompile Include="..\rt_lzo_init.cpp" />
+    <ClCompile Include="..\ScopeLock.cpp" />
+    <ClCompile Include="..\stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\stream_reader.cpp" />
+    <ClCompile Include="..\string_concatenations.cpp" />
+    <ClCompile Include="..\xrCore.cpp" />
+    <ClCompile Include="..\xrDebug.cpp">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\xrDebugNew.cpp" />
+    <ClCompile Include="..\xrMemory.cpp" />
+    <ClCompile Include="..\xrMemory_align.cpp" />
+    <ClCompile Include="..\xrMemory_debug.cpp" />
+    <ClCompile Include="..\xrMemory_POOL.cpp" />
+    <ClCompile Include="..\xrMemory_pso_Copy.cpp">
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">AssemblyAndSourceCode</AssemblerOutput>
+    </ClCompile>
+    <ClCompile Include="..\xrMemory_pso_Fill.cpp">
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">AssemblyAndSourceCode</AssemblerOutput>
+    </ClCompile>
+    <ClCompile Include="..\xrMemory_pso_Fill32.cpp">
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">AssemblyAndSourceCode</AssemblerOutput>
+      <AssemblerOutput Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">AssemblyAndSourceCode</AssemblerOutput>
+    </ClCompile>
+    <ClCompile Include="..\xrMemory_subst_borland.cpp" />
+    <ClCompile Include="..\xrMemory_subst_msvc.cpp" />
+    <ClCompile Include="..\xrsharedmem.cpp" />
+    <ClCompile Include="..\xrstring.cpp" />
+    <ClCompile Include="..\xrSyncronize.cpp" />
+    <ClCompile Include="..\Xr_ini.cpp" />
+    <ClCompile Include="..\xr_shared.cpp" />
+    <ClCompile Include="..\xr_trims.cpp" />
+    <ClCompile Include="..\_compressed_normal.cpp" />
+    <ClCompile Include="..\_math.cpp" />
+    <ClCompile Include="..\_sphere.cpp" />
+    <ClCompile Include="..\_std_extensions.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\build_config_defines.h" />
+    <ClInclude Include="..\blackbox\BugslayerUtil.h" />
+    <ClInclude Include="..\blackbox\CrashHandler.h" />
+    <ClInclude Include="..\blackbox\DiagAssert.h" />
+    <ClInclude Include="..\blackbox\Internal.h" />
+    <ClInclude Include="..\blackbox\stdafx_.h" />
+    <ClInclude Include="..\blackbox\SymbolEngine.h" />
+    <ClInclude Include="..\blackbox\WarningsOff.h" />
+    <ClInclude Include="..\blackbox\WarningsOn.h" />
+    <ClInclude Include="..\buffer_vector.h" />
+    <ClInclude Include="..\buffer_vector_inline.h" />
+    <ClInclude Include="..\ChooseTypes.H" />
+    <ClInclude Include="..\client_id.h" />
+    <ClInclude Include="..\clsid.h" />
+    <ClInclude Include="..\Coder.hpp" />
+    <ClInclude Include="..\compression_ppmd_stream.h" />
+    <ClInclude Include="..\compression_ppmd_stream_inline.h" />
+    <ClInclude Include="..\cpuid.h" />
+    <ClInclude Include="..\dump_string.h" />
+    <ClInclude Include="..\fastdelegate.h" />
+    <CustomBuild Include="..\FileSystem.h" />
+    <ClInclude Include="..\file_stream_reader.h" />
+    <ClInclude Include="..\FixedMap.h" />
+    <ClInclude Include="..\FixedSet.h" />
+    <ClInclude Include="..\FixedVector.h" />
+    <ClInclude Include="..\FS.h" />
+    <ClInclude Include="..\FS_impl.h" />
+    <ClInclude Include="..\FS_internal.h" />
+    <ClInclude Include="..\FTimer.h" />
+    <ClInclude Include="..\intrusive_ptr.h" />
+    <ClInclude Include="..\intrusive_ptr_inline.h" />
+    <ClInclude Include="..\LocatorAPI.h" />
+    <ClInclude Include="..\LocatorAPI_defs.h" />
+    <CustomBuild Include="..\LocatorAPI_Notifications.h">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">true</ExcludedFromBuild>
+    </CustomBuild>
+    <ClInclude Include="..\Lock.hpp" />
+    <ClInclude Include="..\log.h" />
+    <ClInclude Include="..\lzhuf.h" />
+    <ClInclude Include="..\lzo_compressor.h" />
+    <ClInclude Include="..\memory_monitor.h" />
+    <ClInclude Include="..\mezz_stringbuffer.h" />
+    <ClInclude Include="..\net_utils.h" />
+    <ClInclude Include="..\os_clipboard.h" />
+    <ClInclude Include="..\PPMd.h" />
+    <ClInclude Include="..\PPMdType.h" />
+    <ClInclude Include="..\ppmd_compressor.h" />
+    <ClInclude Include="..\resource.h" />
+    <ClInclude Include="..\rt_compressor.h" />
+    <ClInclude Include="..\rt_config1x.h" />
+    <ClInclude Include="..\rt_lzo1x.h" />
+    <ClInclude Include="..\rt_lzoconf.h" />
+    <ClInclude Include="..\rt_lzodefs.h" />
+    <ClInclude Include="..\rt_lzo_conf.h" />
+    <ClInclude Include="..\rt_lzo_config.h" />
+    <ClInclude Include="..\rt_lzo_dict.h" />
+    <ClInclude Include="..\rt_lzo_ptr.h" />
+    <ClInclude Include="..\rt_miniacc.h" />
+    <ClInclude Include="..\ScopeLock.hpp" />
+    <ClInclude Include="..\stdafx.h" />
+    <ClInclude Include="..\stream_reader.h" />
+    <ClInclude Include="..\stream_reader_inline.h" />
+    <ClInclude Include="..\string_concatenations.h" />
+    <ClInclude Include="..\string_concatenations_inline.h" />
+    <ClInclude Include="..\SubAlloc.hpp" />
+    <ClInclude Include="..\vector.h" />
+    <ClInclude Include="..\xrCore.h" />
+    <ClInclude Include="..\xrCore_platform.h" />
+    <ClInclude Include="..\xrDebug.h" />
+    <ClInclude Include="..\xrDebug_macros.h" />
+    <ClInclude Include="..\xrMemory.h" />
+    <ClInclude Include="..\xrMemory_align.h" />
+    <ClInclude Include="..\xrMEMORY_POOL.h" />
+    <ClInclude Include="..\xrMemory_pso.h" />
+    <ClInclude Include="..\xrMemory_pure.h" />
+    <ClInclude Include="..\xrMemory_subst_borland.h" />
+    <ClInclude Include="..\xrMemory_subst_msvc.h" />
+    <ClInclude Include="..\xrPool.h" />
+    <ClInclude Include="..\xrsharedmem.h" />
+    <ClInclude Include="..\xrstring.h" />
+    <ClInclude Include="..\xrSyncronize.h" />
+    <ClInclude Include="..\xr_ini.h" />
+    <ClInclude Include="..\xr_resource.h" />
+    <ClInclude Include="..\xr_shared.h" />
+    <ClInclude Include="..\xr_trims.h" />
+    <ClInclude Include="..\_bitwise.h" />
+    <ClInclude Include="..\_color.h" />
+    <ClInclude Include="..\_compressed_normal.h" />
+    <ClInclude Include="..\_cylinder.h" />
+    <ClInclude Include="..\_fbox.h" />
+    <ClInclude Include="..\_fbox2.h" />
+    <ClInclude Include="..\_flags.h" />
+    <ClInclude Include="..\_math.h" />
+    <ClInclude Include="..\_matrix.h" />
+    <ClInclude Include="..\_matrix33.h" />
+    <ClInclude Include="..\_obb.h" />
+    <ClInclude Include="..\_plane.h" />
+    <ClInclude Include="..\_plane2.h" />
+    <ClInclude Include="..\_quaternion.h" />
+    <ClInclude Include="..\_random.h" />
+    <ClInclude Include="..\_rect.h" />
+    <ClInclude Include="..\_sphere.h" />
+    <ClInclude Include="..\_std_extensions.h" />
+    <ClInclude Include="..\_stl_extensions.h" />
+    <ClInclude Include="..\_types.h" />
+    <ClInclude Include="..\_type_traits.h" />
+    <ClInclude Include="..\_vector2.h" />
+    <ClInclude Include="..\_vector3d.h" />
+    <ClInclude Include="..\_vector3d_ext.h" />
+    <ClInclude Include="..\_vector4.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\xrCore.rc" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="1" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/xrCore/vs2022/xrCore.vcxproj.filters b/src/xrCore/vs2022/xrCore.vcxproj.filters
new file mode 100644
index 0000000..bdaca59
--- /dev/null
+++ b/src/xrCore/vs2022/xrCore.vcxproj.filters
@@ -0,0 +1,268 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Kernel">
+      <UniqueIdentifier>{5c0fc163-75c9-42e2-b414-6a5d0d12cfbe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Math">
+      <UniqueIdentifier>{2770a42d-bbc5-4a1e-acfc-6275c24b532b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Math\CPU">
+      <UniqueIdentifier>{27e2c42a-a9d4-4a05-b1fd-c44c39804452}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Math\STLext">
+      <UniqueIdentifier>{cdb135d6-3d5a-4e89-bf80-091de3bd6ac4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Math\Extensions">
+      <UniqueIdentifier>{0c6ade4d-8ec7-4554-b89d-e07108c95d0c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Math\Extensions\buffer_vector">
+      <UniqueIdentifier>{efdb5722-6fc6-4934-8e4a-249478d675fb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="FS">
+      <UniqueIdentifier>{fbb5a226-8454-4405-aaf5-aee45b8090a4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="FS\stream_reader">
+      <UniqueIdentifier>{b599a5b8-d4a9-45f3-af7e-3d2b8efd5ac3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="FS\file_stream_reader">
+      <UniqueIdentifier>{fd3c609d-f0ba-4a89-a568-ddcc8027b942}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Memory manager">
+      <UniqueIdentifier>{11d9158f-7330-4434-81b2-684eebee4c83}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Debug core">
+      <UniqueIdentifier>{fb17db11-1c85-43ab-9226-0c82ece07b51}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Debug core\BlackBox">
+      <UniqueIdentifier>{7298a13e-3c50-4f43-abc1-d9b9f711ae6c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="shared memory/string library">
+      <UniqueIdentifier>{7df0d0bd-ee41-4712-ace8-642189d21208}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="intrusive_ptr">
+      <UniqueIdentifier>{93a7b313-9b86-4fd4-82a0-9d4a7ec4639f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="memory_monitor">
+      <UniqueIdentifier>{6672355e-6ec8-4680-bf06-19c4aada83ec}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Compression">
+      <UniqueIdentifier>{31e40506-2e4e-4860-be44-290fb6f03c61}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Compression\ppmd">
+      <UniqueIdentifier>{a274d4d6-cc96-4cc5-a9fa-e26b9bf587b5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Compression\ppmd\common">
+      <UniqueIdentifier>{44dcd5cd-6a8b-4544-baa3-54c8196245bf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Compression\ppmd\core">
+      <UniqueIdentifier>{48319557-7f46-4b88-8f3f-f2425bb0fa2e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Compression\ppmd\core\allocator">
+      <UniqueIdentifier>{e7594adb-d5f5-4713-a842-72f0eb0b70a5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Compression\ppmd\stream">
+      <UniqueIdentifier>{eb917568-ae1d-4c88-bee2-4507bdf4c7eb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Compression\rt">
+      <UniqueIdentifier>{7965a62e-399b-4c1d-8875-1a1b3ad35c2c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Compression\lz">
+      <UniqueIdentifier>{323bcbd1-ae95-4728-a16f-b3a4e4a7cab5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Compression\lzo">
+      <UniqueIdentifier>{8478c94c-87c4-4858-8ff7-9c85273343c0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="OS">
+      <UniqueIdentifier>{6d6f8325-ad31-4677-b0b9-de5d952c320b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Threading">
+      <UniqueIdentifier>{174aeeed-7a9a-4510-853f-081b4ce9cbc9}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\blackbox\BlackBoxUI.cpp" />
+    <ClCompile Include="..\blackbox\BSUFunctions.cpp" />
+    <ClCompile Include="..\blackbox\CrashHandler.cpp" />
+    <ClCompile Include="..\blackbox\DiagAssert.cpp" />
+    <ClCompile Include="..\blackbox\GetLoadedModules.cpp" />
+    <ClCompile Include="..\blackbox\IsNT.cpp" />
+    <ClCompile Include="..\blackbox\NT4ProcessInfo.cpp" />
+    <ClCompile Include="..\blackbox\stdafx_.cpp" />
+    <ClCompile Include="..\blackbox\TLHELPProcessInfo.cpp" />
+    <ClCompile Include="..\clsid.cpp" />
+    <ClCompile Include="..\cpuid.cpp" />
+    <ClCompile Include="..\crc32.cpp" />
+    <ClCompile Include="..\dump_string.cpp" />
+    <ClCompile Include="..\FileSystem.cpp" />
+    <ClCompile Include="..\FileSystem_borland.cpp" />
+    <ClCompile Include="..\file_stream_reader.cpp" />
+    <ClCompile Include="..\FS.cpp" />
+    <ClCompile Include="..\FTimer.cpp" />
+    <ClCompile Include="..\LocatorAPI.cpp" />
+    <ClCompile Include="..\LocatorAPI_auth.cpp" />
+    <ClCompile Include="..\LocatorAPI_defs.cpp" />
+    <ClCompile Include="..\LocatorAPI_Notifications.cpp" />
+    <ClCompile Include="..\Lock.cpp" />
+    <ClCompile Include="..\log.cpp" />
+    <ClCompile Include="..\LzHuf.cpp" />
+    <ClCompile Include="..\lzo_compressor.cpp" />
+    <ClCompile Include="..\memory_allocation_stats.cpp" />
+    <ClCompile Include="..\memory_monitor.cpp" />
+    <ClCompile Include="..\memory_usage.cpp" />
+    <ClCompile Include="..\Model.cpp" />
+    <ClCompile Include="..\NET_utils.cpp" />
+    <ClCompile Include="..\os_clipboard.cpp" />
+    <ClCompile Include="..\ppmd_compressor.cpp" />
+    <ClCompile Include="..\rt_compressor.cpp" />
+    <ClCompile Include="..\rt_compressor9.cpp" />
+    <ClCompile Include="..\rt_lzo1x_1.cpp" />
+    <ClCompile Include="..\rt_lzo1x_9x.cpp" />
+    <ClCompile Include="..\rt_lzo1x_d1.cpp" />
+    <ClCompile Include="..\rt_lzo1x_d2.cpp" />
+    <ClCompile Include="..\rt_lzo1x_d3.cpp" />
+    <ClCompile Include="..\rt_lzo_init.cpp" />
+    <ClCompile Include="..\ScopeLock.cpp" />
+    <ClCompile Include="..\stdafx.cpp" />
+    <ClCompile Include="..\stream_reader.cpp" />
+    <ClCompile Include="..\string_concatenations.cpp" />
+    <ClCompile Include="..\xrCore.cpp" />
+    <ClCompile Include="..\xrDebug.cpp" />
+    <ClCompile Include="..\xrDebugNew.cpp" />
+    <ClCompile Include="..\xrMemory.cpp" />
+    <ClCompile Include="..\xrMemory_align.cpp" />
+    <ClCompile Include="..\xrMemory_debug.cpp" />
+    <ClCompile Include="..\xrMemory_POOL.cpp" />
+    <ClCompile Include="..\xrMemory_pso_Copy.cpp" />
+    <ClCompile Include="..\xrMemory_pso_Fill.cpp" />
+    <ClCompile Include="..\xrMemory_pso_Fill32.cpp" />
+    <ClCompile Include="..\xrMemory_subst_borland.cpp" />
+    <ClCompile Include="..\xrMemory_subst_msvc.cpp" />
+    <ClCompile Include="..\xrsharedmem.cpp" />
+    <ClCompile Include="..\xrstring.cpp" />
+    <ClCompile Include="..\xrSyncronize.cpp" />
+    <ClCompile Include="..\Xr_ini.cpp" />
+    <ClCompile Include="..\xr_shared.cpp" />
+    <ClCompile Include="..\xr_trims.cpp" />
+    <ClCompile Include="..\_compressed_normal.cpp" />
+    <ClCompile Include="..\_math.cpp" />
+    <ClCompile Include="..\_sphere.cpp" />
+    <ClCompile Include="..\_std_extensions.cpp" />
+    <ClCompile Include="..\mezz_stringbuffer.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\build_config_defines.h" />
+    <ClInclude Include="..\blackbox\BugslayerUtil.h" />
+    <ClInclude Include="..\blackbox\CrashHandler.h" />
+    <ClInclude Include="..\blackbox\DiagAssert.h" />
+    <ClInclude Include="..\blackbox\Internal.h" />
+    <ClInclude Include="..\blackbox\stdafx_.h" />
+    <ClInclude Include="..\blackbox\SymbolEngine.h" />
+    <ClInclude Include="..\blackbox\WarningsOff.h" />
+    <ClInclude Include="..\blackbox\WarningsOn.h" />
+    <ClInclude Include="..\buffer_vector.h" />
+    <ClInclude Include="..\buffer_vector_inline.h" />
+    <ClInclude Include="..\ChooseTypes.H" />
+    <ClInclude Include="..\client_id.h" />
+    <ClInclude Include="..\clsid.h" />
+    <ClInclude Include="..\Coder.hpp" />
+    <ClInclude Include="..\compression_ppmd_stream.h" />
+    <ClInclude Include="..\compression_ppmd_stream_inline.h" />
+    <ClInclude Include="..\cpuid.h" />
+    <ClInclude Include="..\dump_string.h" />
+    <ClInclude Include="..\fastdelegate.h" />
+    <ClInclude Include="..\file_stream_reader.h" />
+    <ClInclude Include="..\FixedMap.h" />
+    <ClInclude Include="..\FixedSet.h" />
+    <ClInclude Include="..\FixedVector.h" />
+    <ClInclude Include="..\FS.h" />
+    <ClInclude Include="..\FS_impl.h" />
+    <ClInclude Include="..\FS_internal.h" />
+    <ClInclude Include="..\FTimer.h" />
+    <ClInclude Include="..\intrusive_ptr.h" />
+    <ClInclude Include="..\intrusive_ptr_inline.h" />
+    <ClInclude Include="..\LocatorAPI.h" />
+    <ClInclude Include="..\LocatorAPI_defs.h" />
+    <ClInclude Include="..\Lock.hpp" />
+    <ClInclude Include="..\log.h" />
+    <ClInclude Include="..\lzhuf.h" />
+    <ClInclude Include="..\lzo_compressor.h" />
+    <ClInclude Include="..\memory_monitor.h" />
+    <ClInclude Include="..\net_utils.h" />
+    <ClInclude Include="..\os_clipboard.h" />
+    <ClInclude Include="..\PPMd.h" />
+    <ClInclude Include="..\PPMdType.h" />
+    <ClInclude Include="..\ppmd_compressor.h" />
+    <ClInclude Include="..\resource.h" />
+    <ClInclude Include="..\rt_compressor.h" />
+    <ClInclude Include="..\rt_config1x.h" />
+    <ClInclude Include="..\rt_lzo1x.h" />
+    <ClInclude Include="..\rt_lzoconf.h" />
+    <ClInclude Include="..\rt_lzodefs.h" />
+    <ClInclude Include="..\rt_lzo_conf.h" />
+    <ClInclude Include="..\rt_lzo_config.h" />
+    <ClInclude Include="..\rt_lzo_dict.h" />
+    <ClInclude Include="..\rt_lzo_ptr.h" />
+    <ClInclude Include="..\rt_miniacc.h" />
+    <ClInclude Include="..\ScopeLock.hpp" />
+    <ClInclude Include="..\stdafx.h" />
+    <ClInclude Include="..\stream_reader.h" />
+    <ClInclude Include="..\stream_reader_inline.h" />
+    <ClInclude Include="..\string_concatenations.h" />
+    <ClInclude Include="..\string_concatenations_inline.h" />
+    <ClInclude Include="..\SubAlloc.hpp" />
+    <ClInclude Include="..\vector.h" />
+    <ClInclude Include="..\xrCore.h" />
+    <ClInclude Include="..\xrCore_platform.h" />
+    <ClInclude Include="..\xrDebug.h" />
+    <ClInclude Include="..\xrDebug_macros.h" />
+    <ClInclude Include="..\xrMemory.h" />
+    <ClInclude Include="..\xrMemory_align.h" />
+    <ClInclude Include="..\xrMEMORY_POOL.h" />
+    <ClInclude Include="..\xrMemory_pso.h" />
+    <ClInclude Include="..\xrMemory_pure.h" />
+    <ClInclude Include="..\xrMemory_subst_borland.h" />
+    <ClInclude Include="..\xrMemory_subst_msvc.h" />
+    <ClInclude Include="..\xrPool.h" />
+    <ClInclude Include="..\xrsharedmem.h" />
+    <ClInclude Include="..\xrstring.h" />
+    <ClInclude Include="..\xrSyncronize.h" />
+    <ClInclude Include="..\xr_ini.h" />
+    <ClInclude Include="..\xr_resource.h" />
+    <ClInclude Include="..\xr_shared.h" />
+    <ClInclude Include="..\xr_trims.h" />
+    <ClInclude Include="..\_bitwise.h" />
+    <ClInclude Include="..\_color.h" />
+    <ClInclude Include="..\_compressed_normal.h" />
+    <ClInclude Include="..\_cylinder.h" />
+    <ClInclude Include="..\_fbox.h" />
+    <ClInclude Include="..\_fbox2.h" />
+    <ClInclude Include="..\_flags.h" />
+    <ClInclude Include="..\_math.h" />
+    <ClInclude Include="..\_matrix.h" />
+    <ClInclude Include="..\_matrix33.h" />
+    <ClInclude Include="..\_obb.h" />
+    <ClInclude Include="..\_plane.h" />
+    <ClInclude Include="..\_plane2.h" />
+    <ClInclude Include="..\_quaternion.h" />
+    <ClInclude Include="..\_random.h" />
+    <ClInclude Include="..\_rect.h" />
+    <ClInclude Include="..\_sphere.h" />
+    <ClInclude Include="..\_std_extensions.h" />
+    <ClInclude Include="..\_stl_extensions.h" />
+    <ClInclude Include="..\_types.h" />
+    <ClInclude Include="..\_type_traits.h" />
+    <ClInclude Include="..\_vector2.h" />
+    <ClInclude Include="..\_vector3d.h" />
+    <ClInclude Include="..\_vector3d_ext.h" />
+    <ClInclude Include="..\_vector4.h" />
+    <ClInclude Include="..\mezz_stringbuffer.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\xrCore.rc" />
+  </ItemGroup>
+  <ItemGroup>
+    <CustomBuild Include="..\FileSystem.h" />
+    <CustomBuild Include="..\LocatorAPI_Notifications.h" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/xrCore/xrCore.h b/src/xrCore/xrCore.h
index 732e2d0..7fe1627 100644
--- a/src/xrCore/xrCore.h
+++ b/src/xrCore/xrCore.h
@@ -81,7 +81,7 @@
 #include <stdarg.h>
 #include <math.h>
 #include <string.h>
-#include <typeinfo.h>
+#include <typeinfo>
 #include <thread>
 //#include <process.h>
 
diff --git a/src/xrCore/xrCore.vcxproj b/src/xrCore/xrCore.vcxproj
index 209d066..2d57efb 100644
--- a/src/xrCore/xrCore.vcxproj
+++ b/src/xrCore/xrCore.vcxproj
@@ -330,6 +330,7 @@
     <ClCompile Include="memory_allocation_stats.cpp" />
     <ClCompile Include="memory_monitor.cpp" />
     <ClCompile Include="memory_usage.cpp" />
+    <ClCompile Include="mezz_stringbuffer.cpp" />
     <ClCompile Include="Model.cpp">
       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
       </PrecompiledHeader>
@@ -443,6 +444,7 @@
     <ClInclude Include="lzhuf.h" />
     <ClInclude Include="lzo_compressor.h" />
     <ClInclude Include="memory_monitor.h" />
+    <ClInclude Include="mezz_stringbuffer.h" />
     <ClInclude Include="net_utils.h" />
     <ClInclude Include="os_clipboard.h" />
     <ClInclude Include="PPMd.h" />
diff --git a/src/xrCore/xrCore.vcxproj.filters b/src/xrCore/xrCore.vcxproj.filters
index dd3958c..f39a6c6 100644
--- a/src/xrCore/xrCore.vcxproj.filters
+++ b/src/xrCore/xrCore.vcxproj.filters
@@ -280,6 +280,7 @@
     <ClCompile Include="ScopeLock.cpp">
       <Filter>Threading</Filter>
     </ClCompile>
+    <ClCompile Include="mezz_stringbuffer.cpp" />
   </ItemGroup>
   <ItemGroup>
     <ClInclude Include="FTimer.h">
@@ -589,6 +590,7 @@
     <ClInclude Include="ScopeLock.hpp">
       <Filter>Threading</Filter>
     </ClInclude>
+    <ClInclude Include="mezz_stringbuffer.h" />
   </ItemGroup>
   <ItemGroup>
     <ResourceCompile Include="xrCore.rc">
diff --git a/src/xrCore/xrDebugNew.cpp b/src/xrCore/xrDebugNew.cpp
index dd65e49..1c3a710 100644
--- a/src/xrCore/xrDebugNew.cpp
+++ b/src/xrCore/xrDebugNew.cpp
@@ -67,6 +67,20 @@ XRCORE_API xrDebug Debug;
 
 static bool error_after_dialog = false;
 
+namespace crash_saving
+{
+    void (*save_impl)() = nullptr;
+	BOOL enabled = TRUE;
+
+    void save()
+    {
+        if (enabled && save_impl != nullptr)
+        {
+            (*save_impl)();
+        }
+    }
+}
+
 //extern void BuildStackTrace();
 //extern char g_stackTrace[100][4096];
 //extern int g_stackTraceCount;
@@ -206,6 +220,9 @@ void xrDebug::do_exit(const std::string& message)
 void xrDebug::backend(const char* expression, const char* description, const char* argument0, const char* argument1,
                       const char* file, int line, const char* function, bool& ignore_always)
 {
+    // we save first
+    crash_saving::save();
+    
 	static xrCriticalSection CS
 #ifdef PROFILE_CRITICAL_SECTIONS
         (MUTEX_PROFILE_ID(xrDebug::backend))
@@ -232,7 +249,7 @@ void xrDebug::backend(const char* expression, const char* description, const cha
 	ShowCursor(true);
 	ShowWindow(GetActiveWindow(), SW_FORCEMINIMIZE);
 	MessageBox(
-		GetTopWindow(NULL),
+		NULL,
 		assertion_info,
 		"Fatal Error",
 		MB_OK | MB_ICONERROR | MB_SYSTEMMODAL
diff --git a/src/xrCore/xr_trims.cpp b/src/xrCore/xr_trims.cpp
index c5936f7..37f597e 100644
--- a/src/xrCore/xr_trims.cpp
+++ b/src/xrCore/xr_trims.cpp
@@ -7,7 +7,8 @@ LPSTR _TrimLeft(LPSTR str)
 	while (*p && (u8(*p) <= u8(' '))) p++;
 	if (p != str)
 	{
-		for (LPSTR t = str; *p; t++, p++) *t = *p;
+		LPSTR t = str;
+		for (; *p; t++, p++) *t = *p;
 		*t = 0;
 	}
 	return str;
diff --git a/src/xrEngine/CameraManager.cpp b/src/xrEngine/CameraManager.cpp
index 4eb5146..963ffe1 100644
--- a/src/xrEngine/CameraManager.cpp
+++ b/src/xrEngine/CameraManager.cpp
@@ -225,6 +225,21 @@ void CCameraManager::RemoveCamEffector(ECamEffectorType type)
 		}
 }
 
+// demonized: removecameffector by pointer
+void CCameraManager::RemoveCamEffector(CEffectorCam* ef)
+{
+	for (EffectorCamIt it = m_EffectorsCam.begin(); it != m_EffectorsCam.end(); it++)
+	{
+		CEffectorCam* cam = (*it);
+		if (cam == ef)
+		{
+			OnEffectorReleased(cam);
+			m_EffectorsCam.erase(it);
+			return;
+		}
+	}
+}
+
 CEffectorPP* CCameraManager::GetPPEffector(EEffectorPPType type)
 {
 	for (EffectorPPIt it = m_EffectorsPP.begin(); it != m_EffectorsPP.end(); it++)
@@ -234,8 +249,8 @@ CEffectorPP* CCameraManager::GetPPEffector(EEffectorPPType type)
 
 ECamEffectorType CCameraManager::RequestCamEffectorId()
 {
-	for (ECamEffectorType index = (ECamEffectorType)effCustomEffectorStartID;
-	     GetCamEffector(index);
+	ECamEffectorType index = (ECamEffectorType)effCustomEffectorStartID;
+	for (; GetCamEffector(index);
 	     index = (ECamEffectorType)(index + 1))
 	{
 		;
@@ -245,8 +260,8 @@ ECamEffectorType CCameraManager::RequestCamEffectorId()
 
 EEffectorPPType CCameraManager::RequestPPEffectorId()
 {
-	for (EEffectorPPType index = (EEffectorPPType)effCustomEffectorStartID;
-	     GetPPEffector(index);
+	EEffectorPPType index = (EEffectorPPType)effCustomEffectorStartID;
+	for (; GetPPEffector(index);
 	     index = (EEffectorPPType)(index + 1))
 	{
 		;
diff --git a/src/xrEngine/CameraManager.h b/src/xrEngine/CameraManager.h
index ca5bd2f..649a183 100644
--- a/src/xrEngine/CameraManager.h
+++ b/src/xrEngine/CameraManager.h
@@ -154,6 +154,9 @@ public:
 	CEffectorCam* GetCamEffector(ECamEffectorType type);
 	void RemoveCamEffector(ECamEffectorType type);
 
+	// demonized: removecameffector by pointer
+	void RemoveCamEffector(CEffectorCam* ef);
+
 	ECamEffectorType RequestCamEffectorId();
 	EEffectorPPType RequestPPEffectorId();
 	CEffectorPP* GetPPEffector(EEffectorPPType type);
diff --git a/src/xrEngine/Envelope.cpp b/src/xrEngine/Envelope.cpp
index 7f700ae..3cfd1be 100644
--- a/src/xrEngine/Envelope.cpp
+++ b/src/xrEngine/Envelope.cpp
@@ -60,7 +60,8 @@ KeyIt CEnvelope::FindKey(float t, float eps)
 
 void CEnvelope::InsertKey(float t, float val)
 {
-	for (KeyIt k_it = keys.begin(); k_it != keys.end(); k_it++)
+	KeyIt k_it = keys.begin();
+	for (; k_it != keys.end(); k_it++)
 	{
 		if (fsimilar((*k_it)->time, t, EPS_L))
 		{
@@ -112,7 +113,8 @@ BOOL CEnvelope::ScaleKeys(float from_time, float to_time, float scale_factor, fl
 		if (max_k != keys.end()) max_k++;
 		float t0 = (*min_k)->time;
 		float offset = 0;
-		for (KeyIt it = min_k + 1; it != max_k; it++)
+		KeyIt it = min_k + 1;
+		for (; it != max_k; it++)
 		{
 			float new_time = offset + t0 + ((*it)->time - t0) * scale_factor;
 			offset += ((new_time - (*(it - 1))->time) - ((*it)->time - t0));
diff --git a/src/xrEngine/Environment_misc.cpp b/src/xrEngine/Environment_misc.cpp
index bb5c882..eca3900 100644
--- a/src/xrEngine/Environment_misc.cpp
+++ b/src/xrEngine/Environment_misc.cpp
@@ -14,6 +14,7 @@
 
 extern float ps_r2_sun_shafts_min;
 extern float ps_r2_sun_shafts_value;
+extern Fvector3 ssfx_wetness_multiplier;
 
 void CEnvModifier::load(IReader* fs, u32 version)
 {
@@ -505,9 +506,9 @@ void CEnvDescriptorMixer::lerp(CEnvironment* env, CEnvDescriptor& A, CEnvDescrip
 	sun_color.lerp(A.sun_color, B.sun_color, f);
 
 	if (rain_density > 0.f)
-		env->wetness_factor += rain_density / 10000.f;
+		env->wetness_factor += ( rain_density * ssfx_wetness_multiplier.x) / 10000.f;
 	else
-		env->wetness_factor -= 0.00001f;
+		env->wetness_factor -= 0.0001f * ssfx_wetness_multiplier.y;
 
 	clamp(env->wetness_factor, 0.f, 1.f);
 
diff --git a/src/xrEngine/FDemoRecord.cpp b/src/xrEngine/FDemoRecord.cpp
index aa96cfb..0499b90 100644
--- a/src/xrEngine/FDemoRecord.cpp
+++ b/src/xrEngine/FDemoRecord.cpp
@@ -20,7 +20,8 @@ BOOL stored_cross;
 BOOL stored_red_text;
 
 CDemoRecord* xrDemoRecord = 0;
-CDemoRecord::force_position CDemoRecord::g_position = {false, {0, 0, 0}};
+CDemoRecord::force_position CDemoRecord::g_position = { false, {0, 0, 0} };
+CDemoRecord::force_direction CDemoRecord::g_direction = {false, {0, 0, 0}};
 
 Fbox curr_lm_fbox;
 
@@ -77,6 +78,8 @@ CDemoRecord::CDemoRecord(const char* name, float life_time) : CEffectorCam(cefDe
 	m_b_redirect_input_to_level = false;
 	_unlink(name);
 	file = FS.w_open(name);
+	isInputBlocked = FALSE;
+	pDemoRecords = nullptr;
 	if (file)
 	{
 		g_position.set_position = false;
@@ -123,6 +126,23 @@ CDemoRecord::CDemoRecord(const char* name, float life_time) : CEffectorCam(cefDe
 	}
 }
 
+CDemoRecord::CDemoRecord(const char* name, std::unordered_set<CDemoRecord*>* pDemoRecords, BOOL isInputBlocked, float life_time) : CDemoRecord(name, life_time)
+{
+	pDemoRecords->insert(this);
+	this->pDemoRecords = pDemoRecords;
+	this->isInputBlocked = isInputBlocked;
+	if (!file) {
+		StopDemo();
+	}
+}
+
+void CDemoRecord::StopDemo() {
+	fLifeTime = -1;
+	if (pDemoRecords) {
+		pDemoRecords->erase(this);
+	}
+}
+
 CDemoRecord::~CDemoRecord()
 {
 	if (file)
@@ -130,6 +150,9 @@ CDemoRecord::~CDemoRecord()
 		IR_Release(); // release input
 		FS.w_close(file);
 	}
+	if (pDemoRecords) {
+		pDemoRecords->erase(this);
+	}
 	g_bDisableRedText = stored_red_text;
 
 	Device.seqRender.Remove(this);
@@ -372,6 +395,13 @@ BOOL CDemoRecord::ProcessCam(SCamEffectorInfo& info)
 		}
 		else
 			g_position.p.set(m_Position);
+
+		if (g_direction.set_direction)
+		{
+			m_HPB.set(g_direction.d);
+			g_direction.set_direction = false;
+		} else
+			g_direction.d.set(m_Position);
 		// move
 		Fvector vmove;
 
@@ -399,6 +429,9 @@ BOOL CDemoRecord::ProcessCam(SCamEffectorInfo& info)
 		info.p.set(m_Camera.c);
 
 		fLifeTime -= Device.fTimeDelta;
+		if (fLifeTime < 0) {
+			StopDemo();
+		}
 
 		m_vT.set(0, 0, 0);
 		m_vR.set(0, 0, 0);
@@ -420,43 +453,54 @@ void CDemoRecord::IR_OnMouseRelease(int btn)
 
 void CDemoRecord::IR_OnKeyboardPress(int dik)
 {
-	if (dik == DIK_MULTIPLY) m_b_redirect_input_to_level = !m_b_redirect_input_to_level;
-
-	if (m_b_redirect_input_to_level)
-	{
-		g_pGameLevel->IR_OnKeyboardPress(dik);
-		return;
-	}
-	if (dik == DIK_GRAVE)
-		Console->Show();
-	if (dik == DIK_SPACE) RecordKey();
-	if (dik == DIK_BACK) MakeCubemap();
-	if (dik == DIK_F11) MakeLevelMapScreenshot(IR_GetKeyState(DIK_LCONTROL));
-	if (dik == DIK_F12) MakeScreenshot();
-	if (dik == DIK_ESCAPE) fLifeTime = -1;
-
-	//Alundaio: Teleport to demo cam
-	//#ifndef MASTER_GOLD
-	if (dik == DIK_RETURN)
-	{
-		if (strstr(Core.Params, "-dbg"))
+	if (isInputBlocked) {
+		if (dik == DIK_PAUSE)
+			Device.Pause(!Device.Paused(), TRUE, TRUE, "demo_record");
+		if (dik == DIK_GRAVE)
+			Console->Show();
+		if (dik == DIK_ESCAPE)
+			Console->Execute("main_menu on");
+	} else {
+		if (dik == DIK_MULTIPLY) m_b_redirect_input_to_level = !m_b_redirect_input_to_level;
+
+		if (m_b_redirect_input_to_level)
 		{
-			if (g_pGameLevel->CurrentEntity())
+			g_pGameLevel->IR_OnKeyboardPress(dik);
+			return;
+		}
+		if (dik == DIK_GRAVE)
+			Console->Show();
+		if (dik == DIK_SPACE) RecordKey();
+		if (dik == DIK_BACK) MakeCubemap();
+		if (dik == DIK_F11) MakeLevelMapScreenshot(IR_GetKeyState(DIK_LCONTROL));
+		if (dik == DIK_F12) MakeScreenshot();
+		if (dik == DIK_ESCAPE) StopDemo();
+
+		//Alundaio: Teleport to demo cam
+		//#ifndef MASTER_GOLD
+		if (dik == DIK_RETURN)
+		{
+			if (strstr(Core.Params, "-dbg"))
 			{
-				g_pGameLevel->CurrentEntity()->ForceTransform(m_Camera);
-				fLifeTime = -1;
+				if (g_pGameLevel->CurrentEntity())
+				{
+					g_pGameLevel->CurrentEntity()->ForceTransform(m_Camera);
+					StopDemo();
+				}
 			}
 		}
-	}
-	//#endif // #ifndef MASTER_GOLD
-	//-Alundaio
+		//#endif // #ifndef MASTER_GOLD
+		//-Alundaio
 
-	if (dik == DIK_PAUSE)
-		Device.Pause(!Device.Paused(), TRUE, TRUE, "demo_record");
+		if (dik == DIK_PAUSE)
+			Device.Pause(!Device.Paused(), TRUE, TRUE, "demo_record");
+	}
+	
 }
 
 void CDemoRecord::IR_OnKeyboardRelease(int dik)
 {
+	if (isInputBlocked) return;
 	if (m_b_redirect_input_to_level)
 		g_pGameLevel->IR_OnKeyboardRelease(dik);
 }
@@ -471,6 +515,7 @@ static void update_whith_timescale(Fvector& v, const Fvector& v_delta)
 
 void CDemoRecord::IR_OnKeyboardHold(int dik)
 {
+	if (isInputBlocked) return;
 	if (m_b_redirect_input_to_level)
 	{
 		g_pGameLevel->IR_OnKeyboardHold(dik);
@@ -526,6 +571,7 @@ void CDemoRecord::IR_OnKeyboardHold(int dik)
 
 void CDemoRecord::IR_OnMouseMove(int dx, int dy)
 {
+	if (isInputBlocked) return;
 	if (m_b_redirect_input_to_level)
 	{
 		g_pGameLevel->IR_OnMouseMove(dx, dy);
@@ -545,6 +591,7 @@ void CDemoRecord::IR_OnMouseMove(int dx, int dy)
 
 void CDemoRecord::IR_OnMouseHold(int btn)
 {
+	if (isInputBlocked) return;
 	if (m_b_redirect_input_to_level)
 	{
 		g_pGameLevel->IR_OnMouseHold(btn);
diff --git a/src/xrEngine/FDemoRecord.h b/src/xrEngine/FDemoRecord.h
index 2e8de06..5890079 100644
--- a/src/xrEngine/FDemoRecord.h
+++ b/src/xrEngine/FDemoRecord.h
@@ -6,6 +6,8 @@
 #include "iinputreceiver.h"
 #include "effector.h"
 
+#include <unordered_set>
+
 class ENGINE_API CDemoRecord :
 	public CEffectorCam,
 	public IInputReceiver,
@@ -18,6 +20,12 @@ private:
 		Fvector p;
 	} g_position;
 
+	static struct force_direction
+	{
+		bool set_direction;
+		Fvector d;
+	} g_direction;
+
 	int iCount;
 	IWriter* file;
 	Fvector m_HPB;
@@ -44,6 +52,9 @@ private:
 	float m_fAngSpeed2;
 	float m_fAngSpeed3;
 
+	BOOL isInputBlocked;
+	std::unordered_set<CDemoRecord*>* pDemoRecords;
+
 	void MakeCubeMapFace(Fvector& D, Fvector& N);
 	void MakeLevelMapProcess();
 	void MakeScreenshotFace();
@@ -53,6 +64,7 @@ private:
 	void MakeLevelMapScreenshot(BOOL bHQ);
 public:
 	CDemoRecord(const char* name, float life_time = 60 * 60 * 1000);
+	CDemoRecord(const char* name, std::unordered_set<CDemoRecord*>* pDemoRecords, BOOL isInputBlocked = 0, float life_time = 60 * 60 * 1000);
 	virtual ~CDemoRecord();
 
 	virtual void IR_OnKeyboardPress(int dik);
@@ -62,10 +74,13 @@ public:
 	virtual void IR_OnMouseHold(int btn);
 	virtual void IR_OnMousePress(int btn);
 	virtual void IR_OnMouseRelease(int btn);
+	void StopDemo();
 
 	virtual BOOL ProcessCam(SCamEffectorInfo& info);
 	static void SetGlobalPosition(const Fvector& p) { g_position.p.set(p), g_position.set_position = true; }
 	static void GetGlobalPosition(Fvector& p) { p.set(g_position.p); }
+	static void SetGlobalDirection(const Fvector& d) { g_direction.d.set(d), g_direction.set_direction = true; }
+	static void GetGlobalDirection(Fvector& d) { d.set(g_direction.d); }
 	BOOL m_b_redirect_input_to_level;
 	virtual void OnRender();
 };
diff --git a/src/xrEngine/Feel_Touch.cpp b/src/xrEngine/Feel_Touch.cpp
index f5a79ae..0f17103 100644
--- a/src/xrEngine/Feel_Touch.cpp
+++ b/src/xrEngine/Feel_Touch.cpp
@@ -57,7 +57,7 @@ void Touch::feel_touch_update(Fvector& C, float R)
 			{
 				// check for deny
 				BOOL bDeny = FALSE;
-				for (dit = 0; dit < feel_touch_disable.size(); dit++)
+				for (u32 dit = 0; dit < feel_touch_disable.size(); dit++)
 					if (O == feel_touch_disable[dit].O)
 					{
 						bDeny = TRUE;
diff --git a/src/xrEngine/GameFont.cpp b/src/xrEngine/GameFont.cpp
index 01dbbd3..deb68b3 100644
--- a/src/xrEngine/GameFont.cpp
+++ b/src/xrEngine/GameFont.cpp
@@ -236,8 +236,9 @@ u16 CGameFont::GetCutLengthPos(float fTargetWidth, const char* pszText)
 	float fCurWidth = 0.0f, fDelta = 0.0f;
 
 	u16 len = mbhMulti2Wide(wsStr, wsPos, MAX_MB_CHARS, pszText);
+	u16 i = 1;
 
-	for (u16 i = 1; i <= len; i++)
+	for (; i <= len; i++)
 	{
 		fDelta = GetCharTC(wsStr[i]).z - 2;
 
diff --git a/src/xrEngine/IGame_Persistent.cpp b/src/xrEngine/IGame_Persistent.cpp
index b31df1e..8a9ecae 100644
--- a/src/xrEngine/IGame_Persistent.cpp
+++ b/src/xrEngine/IGame_Persistent.cpp
@@ -11,6 +11,7 @@
 # include "Render.h"
 # include "ps_instance.h"
 # include "CustomHUD.h"
+# include "perlin.h"
 #endif
 
 #ifdef _EDITOR
@@ -21,6 +22,8 @@ bool g_dedicated_server = false;
 # include "editor_environment_manager.hpp"
 #endif // INGAME_EDITOR
 
+extern Fvector4 ps_ssfx_grass_interactive;
+
 ENGINE_API IGame_Persistent* g_pGamePersistent = NULL;
 
 bool IsMainMenuActive()
@@ -39,6 +42,10 @@ IGame_Persistent::IGame_Persistent()
 
 	m_pMainMenu = NULL;
 
+	PerlinNoise1D = xr_new<CPerlinNoise1D>(Random.randI(0, 0xFFFF));
+	PerlinNoise1D->SetOctaves(2);
+	PerlinNoise1D->SetAmplitude(0.66666f);
+
 #ifndef INGAME_EDITOR
 #ifndef _EDITOR
 	pEnvironment = xr_new<CEnvironment>();
@@ -53,6 +60,7 @@ IGame_Persistent::IGame_Persistent()
 
 IGame_Persistent::~IGame_Persistent()
 {
+	xr_delete(PerlinNoise1D);
 	RDEVICE.seqFrame.Remove(this);
 	RDEVICE.seqAppStart.Remove(this);
 	RDEVICE.seqAppEnd.Remove(this);
@@ -338,3 +346,305 @@ void IGame_Persistent::OnAssetsChanged()
 	Device.m_pRender->OnAssetsChanged(); //Resources->m_textures_description.Load();
 #endif
 }
+
+void IGame_Persistent::GrassBendersUpdate(u16 id, u8& data_idx, u32& data_frame, Fvector& position, float init_radius, float init_str, bool CheckDistance)
+{
+	// Interactive grass disabled
+	if (ps_ssfx_grass_interactive.y < 1)
+		return;
+
+	// Just update position if not NULL
+	if (data_idx != NULL)
+	{
+		// Explosions can take the mem spot, unassign and try to get a spot later.
+		if (grass_shader_data.id[data_idx] != id)
+		{
+			data_idx = NULL;
+			data_frame = RDEVICE.dwFrame + Random.randI(10, 35);
+		}
+		else
+		{
+			grass_shader_data.pos[data_idx] = position;
+		}
+	}
+
+	if (RDEVICE.dwFrame < data_frame)
+		return;
+
+	// Wait some random frames to split the checks
+	data_frame = RDEVICE.dwFrame + Random.randI(10, 35);
+
+	// Check Distance
+	if (CheckDistance)
+	{
+		if (position.distance_to_xz_sqr(Device.vCameraPosition) > ps_ssfx_grass_interactive.z)
+		{
+			GrassBendersRemoveByIndex(data_idx);
+			return;
+		}
+	}
+
+	CFrustum& view_frust = ::Render->ViewBase;
+	u32 mask = 0xff;
+	float rad = data_idx == NULL ? 1.0 : std::max(1.0f, grass_shader_data.radius_curr[data_idx] + 0.5f);
+
+	// In view frustum?
+	if (!view_frust.testSphere(position, rad, mask))
+	{
+		GrassBendersRemoveByIndex(data_idx);
+		return;
+	}
+
+	// Empty slot, let's use this
+	if (data_idx == NULL)
+	{
+		u8 idx = grass_shader_data.index + 1;
+
+		// Add to grass blenders array
+		if (grass_shader_data.id[idx] == NULL)
+		{
+			data_idx = idx;
+			GrassBendersSet(idx, id, position, Fvector3().set(0, -99, 0), 0, 0, 0.0f, init_radius, BENDER_ANIM_DEFAULT, true);
+
+			grass_shader_data.str_target[idx] = init_str;
+			grass_shader_data.radius_curr[idx] = init_radius;
+		}
+		// Back to 0 when the array limit is reached
+		grass_shader_data.index = idx < ps_ssfx_grass_interactive.y ? idx : 0;
+	}
+	else
+	{
+		// Already inview, let's add more time to re-check
+		data_frame += 60;
+		grass_shader_data.pos[data_idx] = position;
+	}
+}
+
+void IGame_Persistent::GrassBendersAddExplosion(u16 id, Fvector position, Fvector3 dir, float fade, float speed, float intensity, float radius)
+{
+	if (ps_ssfx_grass_interactive.y < 1)
+		return;
+
+	for (int idx = 1; idx < ps_ssfx_grass_interactive.y + 1; idx++)
+	{
+		// Add explosion to any spot not already taken by an explosion.
+		if (grass_shader_data.anim[idx] != BENDER_ANIM_EXPLOSION)
+		{
+			// Add 99 to the ID to avoid conflicts between explosions and basic benders happening at the same time with the same ID.
+			GrassBendersSet(idx, id + 99, position, dir, fade, speed, intensity, radius, BENDER_ANIM_EXPLOSION, true);
+			grass_shader_data.str_target[idx] = intensity;
+			break;
+		}
+	}
+}
+
+void IGame_Persistent::GrassBendersAddShot(u16 id, Fvector position, Fvector3 dir, float fade, float speed, float intensity, float radius)
+{
+	// Is disabled?
+	if (ps_ssfx_grass_interactive.y < 1 || intensity <= 0.0f)
+		return;
+
+	// Check distance
+	if (position.distance_to_xz_sqr(Device.vCameraPosition) > ps_ssfx_grass_interactive.z)
+		return;
+
+	int AddAt = -1;
+
+	// Look for a spot
+	for (int idx = 1; idx < ps_ssfx_grass_interactive.y + 1; idx++)
+	{
+		// Already exist, just update and increase intensity
+		if (grass_shader_data.id[idx] == id)
+		{
+			float currentSTR = grass_shader_data.str[idx];
+			GrassBendersSet(idx, id, position, dir, fade, speed, currentSTR, radius, BENDER_ANIM_EXPLOSION, false);
+			grass_shader_data.str_target[idx] += intensity;
+			AddAt = -1;
+			break;
+		}
+		else
+		{
+			// Check all indexes and keep usable index to use later if needed...
+			if (AddAt == -1 && grass_shader_data.radius[idx] == NULL)
+				AddAt = idx;
+		}
+	}
+
+	// We got an available index... Add bender at AddAt
+	if (AddAt != -1)
+	{
+		GrassBendersSet(AddAt, id, position, dir, fade, speed, 0.001f, radius, BENDER_ANIM_EXPLOSION, true);
+		grass_shader_data.str_target[AddAt] = intensity;
+	}
+}
+
+void IGame_Persistent::GrassBendersUpdateAnimations()
+{
+	for (int idx = 1; idx < ps_ssfx_grass_interactive.y + 1; idx++)
+	{
+		if (grass_shader_data.id[idx] != NULL)
+		{
+			switch (grass_shader_data.anim[idx])
+			{
+			case BENDER_ANIM_EXPLOSION: // Internal Only ( You can use BENDER_ANIM_PULSE for anomalies )
+			{
+				// Radius
+				grass_shader_data.time[idx] += Device.fTimeDelta * grass_shader_data.speed[idx];
+				grass_shader_data.radius_curr[idx] = grass_shader_data.radius[idx] * std::min(1.0f, grass_shader_data.time[idx]);
+
+				grass_shader_data.str_target[idx] = std::min(1.0f, grass_shader_data.str_target[idx]);
+
+				// Easing
+				float diff = abs(grass_shader_data.str[idx] - grass_shader_data.str_target[idx]);
+				diff = std::max(0.1f, diff);
+
+				// Intensity
+				if (grass_shader_data.str_target[idx] <= grass_shader_data.str[idx])
+				{
+					grass_shader_data.str[idx] -= Device.fTimeDelta * grass_shader_data.fade[idx] * diff;
+				}
+				else
+				{
+					grass_shader_data.str[idx] += Device.fTimeDelta * grass_shader_data.speed[idx] * diff;
+
+					if (grass_shader_data.str[idx] >= grass_shader_data.str_target[idx])
+						grass_shader_data.str_target[idx] = 0;
+				}
+
+				// Remove Bender
+				if (grass_shader_data.str[idx] < 0.0f)
+					GrassBendersReset(idx);
+			}
+			break;
+
+			case BENDER_ANIM_WAVY:
+			{
+				// Anim Speed
+				grass_shader_data.time[idx] += Device.fTimeDelta * 1.5f * grass_shader_data.speed[idx];
+
+				// Curve
+				float curve = sin(grass_shader_data.time[idx]);
+
+				// Intensity using curve
+				grass_shader_data.str[idx] = curve * cos(curve * 1.4f) * 1.8f * grass_shader_data.str_target[idx];
+			}
+
+			break;
+
+			case BENDER_ANIM_SUCK:
+			{
+				// Anim Speed
+				grass_shader_data.time[idx] += Device.fTimeDelta * grass_shader_data.speed[idx];
+
+				// Perlin Noise
+				float curve = clampr(PerlinNoise1D->GetContinious(grass_shader_data.time[idx]) + 0.5f, 0.f, 1.f) * -1.0;
+
+				// Intensity using Perlin
+				grass_shader_data.str[idx] = curve * grass_shader_data.str_target[idx];
+			}
+			break;
+
+			case BENDER_ANIM_BLOW:
+			{
+				// Anim Speed
+				grass_shader_data.time[idx] += Device.fTimeDelta * 1.2f * grass_shader_data.speed[idx];
+
+				// Perlin Noise
+				float curve = clampr(PerlinNoise1D->GetContinious(grass_shader_data.time[idx]) + 1.0f, 0.f, 2.0f) * 0.25f;
+
+				// Intensity using Perlin
+				grass_shader_data.str[idx] = curve * grass_shader_data.str_target[idx];
+			}
+			break;
+
+			case BENDER_ANIM_PULSE:
+			{
+				// Anim Speed
+				grass_shader_data.time[idx] += Device.fTimeDelta * grass_shader_data.speed[idx];
+
+				// Radius
+				grass_shader_data.radius_curr[idx] = grass_shader_data.radius[idx] * std::min(1.0f, grass_shader_data.time[idx]);
+
+				// Diminish intensity when radius target is reached
+				if (grass_shader_data.radius_curr[idx] >= grass_shader_data.radius[idx])
+					grass_shader_data.str[idx] += GrassBenderToValue(grass_shader_data.str[idx], 0.0f, grass_shader_data.speed[idx] * 0.6f, true);
+
+				// Loop when intensity is <= 0
+				if (grass_shader_data.str[idx] <= 0.0f)
+				{
+					grass_shader_data.str[idx] = grass_shader_data.str_target[idx];
+					grass_shader_data.radius_curr[idx] = 0.0f;
+					grass_shader_data.time[idx] = 0.0f;
+				}
+
+			}
+			break;
+
+			case BENDER_ANIM_DEFAULT:
+
+				// Just fade to target strength
+				grass_shader_data.str[idx] += GrassBenderToValue(grass_shader_data.str[idx], grass_shader_data.str_target[idx], 2.0f, true);
+
+				break;
+			}
+		}
+	}
+}
+
+void IGame_Persistent::GrassBendersRemoveByIndex(u8& idx)
+{
+	if (idx != NULL)
+	{
+		GrassBendersReset(idx);
+		idx = NULL;
+	}
+}
+
+void IGame_Persistent::GrassBendersRemoveById(u16 id)
+{
+	// Search by Object ID ( Used when removing benders CPHMovementControl::DestroyCharacter() )
+	for (int i = 1; i < ps_ssfx_grass_interactive.y + 1; i++)
+		if (grass_shader_data.id[i] == id)
+			GrassBendersReset(i);
+}
+
+void IGame_Persistent::GrassBendersReset(u8 idx)
+{
+	// Reset Everything
+	GrassBendersSet(idx, NULL, Fvector3().set(0, 0, 0), Fvector3().set(0, -99, 0), 0, 0, 0, 0, BENDER_ANIM_DEFAULT, true);
+	grass_shader_data.str_target[idx] = 0;
+}
+
+void IGame_Persistent::GrassBendersSet(u8 idx, u16 id, Fvector position, Fvector3 dir, float fade, float speed, float intensity, float radius, GrassBenders_Anim anim, bool resetTime)
+{
+	// Set values
+	grass_shader_data.anim[idx] = anim;
+	grass_shader_data.pos[idx] = position;
+	grass_shader_data.id[idx] = id;
+	grass_shader_data.radius[idx] = radius;
+	grass_shader_data.str[idx] = intensity;
+	grass_shader_data.fade[idx] = fade;
+	grass_shader_data.speed[idx] = speed;
+	grass_shader_data.dir[idx] = dir;
+
+	if (resetTime)
+	{
+		grass_shader_data.radius_curr[idx] = 0.01f;
+		grass_shader_data.time[idx] = 0;
+	}
+}
+
+float IGame_Persistent::GrassBenderToValue(float& current, float go_to, float intensity, bool use_easing)
+{
+	float diff = abs(current - go_to);
+
+	float r_value = Device.fTimeDelta * intensity * (use_easing ? std::min(0.5f, diff) : 1.0f);
+
+	if (diff - r_value <= 0)
+	{
+		current = go_to;
+		return 0;
+	}
+
+	return current < go_to ? r_value : -r_value;
+}
\ No newline at end of file
diff --git a/src/xrEngine/IGame_Persistent.h b/src/xrEngine/IGame_Persistent.h
index a39152f..9a88fc8 100644
--- a/src/xrEngine/IGame_Persistent.h
+++ b/src/xrEngine/IGame_Persistent.h
@@ -64,6 +64,44 @@ public:
 	xr_set<CPS_Instance*> ps_active;
 	xr_vector<CPS_Instance*> ps_destroy;
 	xr_vector<CPS_Instance*> ps_needtoplay;
+public:
+	enum GrassBenders_Anim
+	{
+		BENDER_ANIM_EXPLOSION = 0,
+		BENDER_ANIM_DEFAULT = 1,
+		BENDER_ANIM_WAVY = 2,
+		BENDER_ANIM_SUCK = 3,
+		BENDER_ANIM_BLOW = 4,
+		BENDER_ANIM_PULSE = 5,
+	}; 
+
+	void GrassBendersUpdateAnimations();
+	void GrassBendersAddExplosion(u16 id, Fvector position, Fvector3 dir, float fade, float speed, float intensity, float radius);
+	void GrassBendersAddShot(u16 id, Fvector position, Fvector3 dir, float fade, float speed, float intensity, float radius);
+	void GrassBendersRemoveById(u16 id);
+	void GrassBendersRemoveByIndex(u8& idx);
+	void GrassBendersUpdate(u16 id, u8& data_idx, u32& data_frame, Fvector& position, float radius, float str, bool CheckDistance );
+	void GrassBendersReset(u8 idx);
+	void GrassBendersSet(u8 idx, u16 id, Fvector position, Fvector3 dir, float fade, float speed, float str, float radius, GrassBenders_Anim anim, bool resetTime);
+	float GrassBenderToValue(float& current, float go_to, float intensity, bool use_easing);
+
+	CPerlinNoise1D* PerlinNoise1D;
+
+	struct grass_data
+	{
+		u8 index;
+		s8 anim[16];
+		u16 id[16];
+		Fvector pos[16];
+		Fvector3 dir[16];
+		float radius[16];
+		float radius_curr[16];
+		float str[16];
+		float str_target[16];
+		float time[16];
+		float fade[16];
+		float speed[16];
+	} grass_shader_data;
 
 public:
 	void destroy_particles(const bool& all_particles);
diff --git a/src/xrEngine/IRenderable.h b/src/xrEngine/IRenderable.h
index 040868a..b7c60d3 100644
--- a/src/xrEngine/IRenderable.h
+++ b/src/xrEngine/IRenderable.h
@@ -24,6 +24,11 @@ public:
 	virtual void renderable_Render() = 0;
 	virtual BOOL renderable_ShadowGenerate() { return FALSE; };
 	virtual BOOL renderable_ShadowReceive() { return FALSE; };
+
+	//--DSR-- HeatVision_start
+	virtual float GetHotness() { return 0.0; }
+	virtual float GetTransparency() { return 0.0; }
+	//--DSR-- HeatVision_end
 };
 
 #endif // IRENDERABLE_H_INCLUDED
diff --git a/src/xrEngine/Render.h b/src/xrEngine/Render.h
index df52521..29b8b22 100644
--- a/src/xrEngine/Render.h
+++ b/src/xrEngine/Render.h
@@ -283,6 +283,9 @@ public:
 	virtual void add_StaticWallmark(const wm_shader& S, const Fvector& P, float s, CDB::TRI* T, Fvector* V) = 0;
 	// Prefer this function when possible
 	virtual void add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl = 0.f, bool ignore_opt = false, bool random_rotation = true) = 0;
+
+	// demonized: add user defined rotation to wallmark
+	virtual void add_StaticWallmark(IWallMarkArray* pArray, const Fvector& P, float s, CDB::TRI* T, Fvector* V, float ttl, bool ignore_opt, float rotation) = 0;
 	virtual void clear_static_wallmarks() = 0;
 	//virtual void add_SkeletonWallmark (intrusive_ptr<CSkeletonWallmark> wm) = 0;
 	//virtual void add_SkeletonWallmark (const Fmatrix* xf, CKinematics* obj, ref_shader& sh, const Fvector& start, const Fvector& dir, float size)=0;
diff --git a/src/xrEngine/Xr_input.cpp b/src/xrEngine/Xr_input.cpp
index 8910059..9ae6500 100644
--- a/src/xrEngine/Xr_input.cpp
+++ b/src/xrEngine/Xr_input.cpp
@@ -260,7 +260,7 @@ void CInput::KeyUpdate()
 			}
 		}
 
-		for (i = 0; i < COUNT_KB_BUTTONS; i++)
+		for (u32 i = 0; i < COUNT_KB_BUTTONS; i++)
 			if (KBState[i])
 				cbStack.back()->IR_OnKeyboardHold(i);
 	}
diff --git a/src/xrEngine/edit_actions.cpp b/src/xrEngine/edit_actions.cpp
index 5c96844..a219f11 100644
--- a/src/xrEngine/edit_actions.cpp
+++ b/src/xrEngine/edit_actions.cpp
@@ -10,6 +10,7 @@
 #include "line_edit_control.h"
 #include "xr_input.h"
 #include <locale.h>
+#include <locale>
 
 namespace text_editor
 {
@@ -100,7 +101,8 @@ namespace text_editor
 
 			if (pInput->get_dik_name(m_dik, buff, sizeof(buff)))
 			{
-				if (_isalpha_l(buff[0], current_locale) || buff[0] == char(-1)) // "ÿ" = -1
+				// demonized: add extra check for russian letters
+				if (std::isalpha(buff[0], std::locale("")) || _isalpha_l(buff[0], current_locale) || buff[0] == char(-1)) // "ÿ" = -1
 				{
 					_strlwr_l(buff, current_locale);
 					c = buff[0];
diff --git a/src/xrEngine/vs2022/xrEngine.vcxproj b/src/xrEngine/vs2022/xrEngine.vcxproj
new file mode 100644
index 0000000..3263f9e
--- /dev/null
+++ b/src/xrEngine/vs2022/xrEngine.vcxproj
@@ -0,0 +1,783 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="ReleaseR1-AVX|x64">
+      <Configuration>ReleaseR1-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="ReleaseR1|x64">
+      <Configuration>ReleaseR1</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="ReleaseR2-AVX|x64">
+      <Configuration>ReleaseR2-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="ReleaseR2|x64">
+      <Configuration>ReleaseR2</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="ReleaseR3-AVX|x64">
+      <Configuration>ReleaseR3-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="ReleaseR3|x64">
+      <Configuration>ReleaseR3</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="ReleaseR4-AVX|x64">
+      <Configuration>ReleaseR4-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="ReleaseR4|x64">
+      <Configuration>ReleaseR4</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{2578C6D8-660D-48AE-9322-7422F8664F06}</ProjectGuid>
+    <RootNamespace>xrEngine</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR2|x64'" Label="Configuration">
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR2-AVX|x64'" Label="Configuration">
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR4|x64'" Label="Configuration">
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <UseDebugLibraries>true</UseDebugLibraries>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR4-AVX|x64'" Label="Configuration">
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR3|x64'" Label="Configuration">
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR3-AVX|x64'" Label="Configuration">
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR1|x64'" Label="Configuration">
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR1-AVX|x64'" Label="Configuration">
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR2|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR2-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR4|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR4-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR3|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR3-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR1|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR1-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR2|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\</OutDir>
+    <TargetName>AnomalyDX9</TargetName>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR2-AVX|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\</OutDir>
+    <TargetName>AnomalyDX9AVX</TargetName>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR4|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\</OutDir>
+    <TargetName>AnomalyDX11</TargetName>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\</OutDir>
+    <TargetName>VerifiedDX11</TargetName>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR4-AVX|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\</OutDir>
+    <TargetName>AnomalyDX11AVX</TargetName>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR3|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\</OutDir>
+    <TargetName>AnomalyDX10</TargetName>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR3-AVX|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\</OutDir>
+    <TargetName>AnomalyDX10AVX</TargetName>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR1|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\</OutDir>
+    <TargetName>AnomalyDX8</TargetName>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR1-AVX|x64'">
+    <OutDir>$(xrGameDir)bin_dbg\</OutDir>
+    <TargetName>AnomalyDX8AVX</TargetName>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR2|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(XRAY_16X_LIBS)libtheora-1.1.1\include;$(xrSdkDir)include;$(xrSdkDir)include\OpenAutomate;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>STATIC_RENDERER_R2;NDEBUG;WIN32;_WINDOWS;ENGINE_BUILD;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>vfw32.lib;libogg_static.lib;libtheora_static.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(OutDir)$(Platform)\Release\;$(DXSDK_DIR)Lib\x64;$(SolutionDir)3rd party\luajit-2\src\;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)..\lib\$(Platform)\Release;$(SolutionDir)$(Platform)\Release;$(xrSdkDir)libraries\x64;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+    <Manifest>
+      <AdditionalManifestFiles>$(SolutionDir)xrEngine\as-invoker-manifest-part.xml;%(AdditionalManifestFiles)</AdditionalManifestFiles>
+    </Manifest>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR2-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(XRAY_16X_LIBS)libtheora-1.1.1\include;$(xrSdkDir)include;$(xrSdkDir)include\OpenAutomate;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>STATIC_RENDERER_R2;NDEBUG;WIN32;_WINDOWS;ENGINE_BUILD;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>vfw32.lib;libogg_static.lib;libtheora_static.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(OutDir)$(Platform)\Release-AVX\;$(DXSDK_DIR)Lib\x64;$(SolutionDir)3rd party\luajit-2\src\;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)..\lib\$(Platform)\Release;$(SolutionDir)$(Platform)\Release;$(xrSdkDir)libraries\x64;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+    <Manifest>
+      <AdditionalManifestFiles>$(SolutionDir)xrEngine\as-invoker-manifest-part.xml;%(AdditionalManifestFiles)</AdditionalManifestFiles>
+    </Manifest>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR4|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(XRAY_16X_LIBS)libtheora-1.1.1\include;$(xrSdkDir)include;$(xrSdkDir)include\OpenAutomate;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>STATIC_RENDERER_R4;NDEBUG;WIN32;_WINDOWS;ENGINE_BUILD;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>vfw32.lib;libogg_static.lib;libtheora_static.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(OutDir)$(Platform)\Release\;$(DXSDK_DIR)Lib\x64;$(SolutionDir)3rd party\luajit-2\src\;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)..\lib\$(Platform)\Release;$(SolutionDir)$(Platform)\Release;$(xrSdkDir)libraries\x64;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+    <Manifest>
+      <AdditionalManifestFiles>$(SolutionDir)xrEngine\as-invoker-manifest-part.xml;%(AdditionalManifestFiles)</AdditionalManifestFiles>
+    </Manifest>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(XRAY_16X_LIBS)libtheora-1.1.1\include;$(xrSdkDir)include;$(xrSdkDir)include\OpenAutomate;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;STATIC_RENDERER_R4;NDEBUG;WIN32;_WINDOWS;ENGINE_BUILD;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>vfw32.lib;libogg_static.lib;libtheora_static.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(OutDir)$(Platform)\Release\;$(DXSDK_DIR)Lib\x64;$(SolutionDir)3rd party\luajit-2\src\;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)..\lib\$(Platform)\Release;$(SolutionDir)$(Platform)\Release;$(xrSdkDir)libraries\x64;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+    <Manifest>
+      <AdditionalManifestFiles>$(SolutionDir)xrEngine\as-invoker-manifest-part.xml;%(AdditionalManifestFiles)</AdditionalManifestFiles>
+    </Manifest>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR4-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(XRAY_16X_LIBS)libtheora-1.1.1\include;$(xrSdkDir)include;$(xrSdkDir)include\OpenAutomate;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>STATIC_RENDERER_R4;NDEBUG;WIN32;_WINDOWS;ENGINE_BUILD;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>vfw32.lib;libogg_static.lib;libtheora_static.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(OutDir)$(Platform)\Release-AVX\;$(DXSDK_DIR)Lib\x64;$(SolutionDir)3rd party\luajit-2\src\;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)..\lib\$(Platform)\Release;$(SolutionDir)$(Platform)\Release;$(xrSdkDir)libraries\x64;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+    <Manifest>
+      <AdditionalManifestFiles>$(SolutionDir)xrEngine\as-invoker-manifest-part.xml;%(AdditionalManifestFiles)</AdditionalManifestFiles>
+    </Manifest>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR3|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(XRAY_16X_LIBS)libtheora-1.1.1\include;$(xrSdkDir)include;$(xrSdkDir)include\OpenAutomate;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>STATIC_RENDERER_R3;NDEBUG;WIN32;_WINDOWS;ENGINE_BUILD;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>vfw32.lib;libogg_static.lib;libtheora_static.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(OutDir)$(Platform)\Release\;$(DXSDK_DIR)Lib\x64;$(SolutionDir)3rd party\luajit-2\src\;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)..\lib\$(Platform)\Release;$(SolutionDir)$(Platform)\Release;$(xrSdkDir)libraries\x64;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+    <Manifest>
+      <AdditionalManifestFiles>$(SolutionDir)xrEngine\as-invoker-manifest-part.xml;%(AdditionalManifestFiles)</AdditionalManifestFiles>
+    </Manifest>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR3-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(XRAY_16X_LIBS)libtheora-1.1.1\include;$(xrSdkDir)include;$(xrSdkDir)include\OpenAutomate;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>STATIC_RENDERER_R3;NDEBUG;WIN32;_WINDOWS;ENGINE_BUILD;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>vfw32.lib;libogg_static.lib;libtheora_static.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(OutDir)$(Platform)\Release-AVX\;$(DXSDK_DIR)Lib\x64;$(SolutionDir)3rd party\luajit-2\src\;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)..\lib\$(Platform)\Release;$(SolutionDir)$(Platform)\Release;$(xrSdkDir)libraries\x64;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+    <Manifest>
+      <AdditionalManifestFiles>$(SolutionDir)xrEngine\as-invoker-manifest-part.xml;%(AdditionalManifestFiles)</AdditionalManifestFiles>
+    </Manifest>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR1|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(XRAY_16X_LIBS)libtheora-1.1.1\include;$(xrSdkDir)include;$(xrSdkDir)include\OpenAutomate;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>STATIC_RENDERER_R1;NDEBUG;WIN32;_WINDOWS;ENGINE_BUILD;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>vfw32.lib;libogg_static.lib;libtheora_static.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(OutDir)$(Platform)\Release\;$(DXSDK_DIR)Lib\x64;$(SolutionDir)3rd party\luajit-2\src\;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)..\lib\$(Platform)\Release;$(SolutionDir)$(Platform)\Release;$(xrSdkDir)libraries\x64;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+    <Manifest>
+      <AdditionalManifestFiles>$(SolutionDir)xrEngine\as-invoker-manifest-part.xml;%(AdditionalManifestFiles)</AdditionalManifestFiles>
+    </Manifest>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseR1-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(DXSDK_DIR)Include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(XRAY_16X_LIBS)libtheora-1.1.1\include;$(xrSdkDir)include;$(xrSdkDir)include\OpenAutomate;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>STATIC_RENDERER_R1;NDEBUG;WIN32;_WINDOWS;ENGINE_BUILD;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>vfw32.lib;libogg_static.lib;libtheora_static.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(OutDir)$(Platform)\Release-AVX\;$(DXSDK_DIR)Lib\x64;$(SolutionDir)3rd party\luajit-2\src\;$(XRAY_16X_LIBS)OpenAutomate\libraries;$(SolutionDir)..\lib\$(Platform)\Release;$(SolutionDir)$(Platform)\Release;$(xrSdkDir)libraries\x64;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+    <Manifest>
+      <AdditionalManifestFiles>$(SolutionDir)xrEngine\as-invoker-manifest-part.xml;%(AdditionalManifestFiles)</AdditionalManifestFiles>
+    </Manifest>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\3rd party\discord\achievement_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\activity_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\application_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\core.h" />
+    <ClInclude Include="..\..\3rd party\discord\discord.h" />
+    <ClInclude Include="..\..\3rd party\discord\event.h" />
+    <ClInclude Include="..\..\3rd party\discord\ffi.h" />
+    <ClInclude Include="..\..\3rd party\discord\image_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\lobby_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\network_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\overlay_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\relationship_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\storage_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\store_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\types.h" />
+    <ClInclude Include="..\..\3rd party\discord\user_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\voice_manager.h" />
+    <ClInclude Include="..\ai_script_lua_extension.h" />
+    <ClInclude Include="..\ai_script_lua_space.h" />
+    <ClInclude Include="..\ai_script_space.h" />
+    <ClInclude Include="..\bone.h" />
+    <ClInclude Include="..\CameraBase.h" />
+    <ClInclude Include="..\CameraDefs.h" />
+    <ClInclude Include="..\CameraManager.h" />
+    <ClInclude Include="..\cf_dynamic_mesh.h" />
+    <ClInclude Include="..\cl_intersect.h" />
+    <ClInclude Include="..\CustomHUD.h" />
+    <ClInclude Include="..\dedicated_server_only.h" />
+    <ClInclude Include="..\defines.h" />
+    <ClInclude Include="..\device.h" />
+    <ClInclude Include="..\edit_actions.h" />
+    <ClInclude Include="..\Effector.h" />
+    <ClInclude Include="..\EffectorPP.h" />
+    <ClInclude Include="..\Engine.h" />
+    <ClInclude Include="..\EngineAPI.h" />
+    <ClInclude Include="..\EnnumerateVertices.h" />
+    <ClInclude Include="..\envelope.h" />
+    <ClInclude Include="..\Environment.h" />
+    <ClInclude Include="..\EventAPI.h" />
+    <ClInclude Include="..\FDemoPlay.h" />
+    <ClInclude Include="..\FDemoRecord.h" />
+    <ClInclude Include="..\Feel_Sound.h" />
+    <ClInclude Include="..\Feel_Touch.h" />
+    <ClInclude Include="..\Feel_Vision.h" />
+    <ClInclude Include="..\Fmesh.h" />
+    <ClInclude Include="..\GameFont.h" />
+    <ClInclude Include="..\GameMtlLib.h" />
+    <ClInclude Include="..\ICollidable.h" />
+    <ClInclude Include="..\IGame_Level.h" />
+    <ClInclude Include="..\IGame_ObjectPool.h" />
+    <ClInclude Include="..\IGame_Persistent.h" />
+    <ClInclude Include="..\IInputReceiver.h" />
+    <ClInclude Include="..\IObjectPhysicsCollision.h" />
+    <ClInclude Include="..\IPHdebug.h" />
+    <ClInclude Include="..\IPhysicsGeometry.h" />
+    <ClInclude Include="..\IPhysicsShell.h" />
+    <ClInclude Include="..\IRenderable.h" />
+    <ClInclude Include="..\ISheduled.h" />
+    <ClInclude Include="..\LightAnimLibrary.h" />
+    <ClInclude Include="..\line_editor.h" />
+    <ClInclude Include="..\line_edit_control.h" />
+    <ClInclude Include="..\MbHelpers.h" />
+    <ClInclude Include="..\motion.h" />
+    <ClInclude Include="..\mp_logging.h" />
+    <ClInclude Include="..\no_single.h" />
+    <ClInclude Include="..\ObjectAnimator.h" />
+    <ClInclude Include="..\ObjectDump.h" />
+    <ClInclude Include="..\perlin.h" />
+    <ClInclude Include="..\Properties.h" />
+    <ClInclude Include="..\psystem.h" />
+    <ClInclude Include="..\PS_instance.h" />
+    <ClInclude Include="..\pure.h" />
+    <ClInclude Include="..\pure_relcase.h" />
+    <ClInclude Include="..\Rain.h" />
+    <ClInclude Include="..\Render.h" />
+    <ClInclude Include="..\resource.h" />
+    <ClInclude Include="..\ShadersExternalData.h" />
+    <ClInclude Include="..\Shader_xrLC.h" />
+    <ClInclude Include="..\SkeletonMotionDefs.h" />
+    <ClInclude Include="..\SkeletonMotions.h" />
+    <ClInclude Include="..\StatGraph.h" />
+    <ClInclude Include="..\Stats.h" />
+    <ClInclude Include="..\stdafx.h" />
+    <ClInclude Include="..\std_classes.h" />
+    <ClInclude Include="..\Text_Console.h" />
+    <ClInclude Include="..\thunderbolt.h" />
+    <ClInclude Include="..\tntQAVI.h" />
+    <ClInclude Include="..\trivial_encryptor.h" />
+    <ClInclude Include="..\vis_common.h" />
+    <ClInclude Include="..\WaveForm.h" />
+    <ClInclude Include="..\xrHemisphere.h" />
+    <ClInclude Include="..\xrImage_Resampler.h" />
+    <ClInclude Include="..\xrLevel.h" />
+    <ClInclude Include="..\xrSASH.h" />
+    <ClInclude Include="..\xrSheduler.h" />
+    <ClInclude Include="..\xrTheora_Stream.h" />
+    <ClInclude Include="..\xrTheora_Surface.h" />
+    <ClInclude Include="..\xrTheora_Surface_mmx.h" />
+    <ClInclude Include="..\xr_collide_form.h" />
+    <ClInclude Include="..\xr_efflensflare.h" />
+    <ClInclude Include="..\xr_input.h" />
+    <ClInclude Include="..\xr_input_xinput.h" />
+    <ClInclude Include="..\XR_IOConsole.h" />
+    <ClInclude Include="..\xr_ioc_cmd.h" />
+    <ClInclude Include="..\xr_object.h" />
+    <ClInclude Include="..\xr_object_list.h" />
+    <ClInclude Include="..\x_ray.h" />
+    <ClInclude Include="..\_d3d_extensions.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\3rd party\discord\achievement_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\activity_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\application_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\core.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\image_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\lobby_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\network_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\overlay_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\relationship_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\storage_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\store_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\types.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\user_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\voice_manager.cpp" />
+    <ClCompile Include="..\ai_script_lua_debug.cpp" />
+    <ClCompile Include="..\ai_script_lua_extension.cpp" />
+    <ClCompile Include="..\bone.cpp" />
+    <ClCompile Include="..\CameraBase.cpp" />
+    <ClCompile Include="..\CameraManager.cpp" />
+    <ClCompile Include="..\cf_dynamic_mesh.cpp" />
+    <ClCompile Include="..\CustomHUD.cpp" />
+    <ClCompile Include="..\defines.cpp" />
+    <ClCompile Include="..\device.cpp" />
+    <ClCompile Include="..\Device_create.cpp" />
+    <ClCompile Include="..\Device_destroy.cpp" />
+    <ClCompile Include="..\Device_Initialize.cpp" />
+    <ClCompile Include="..\Device_Misc.cpp" />
+    <ClCompile Include="..\Device_overdraw.cpp" />
+    <ClCompile Include="..\Device_wndproc.cpp" />
+    <ClCompile Include="..\edit_actions.cpp" />
+    <ClCompile Include="..\Effector.cpp" />
+    <ClCompile Include="..\EffectorPP.cpp" />
+    <ClCompile Include="..\Engine.cpp" />
+    <ClCompile Include="..\EngineAPI.cpp" />
+    <ClCompile Include="..\Envelope.cpp" />
+    <ClCompile Include="..\Environment.cpp" />
+    <ClCompile Include="..\Environment_misc.cpp" />
+    <ClCompile Include="..\Environment_render.cpp" />
+    <ClCompile Include="..\EventAPI.cpp" />
+    <ClCompile Include="..\FDemoPlay.cpp" />
+    <ClCompile Include="..\FDemoRecord.cpp" />
+    <ClCompile Include="..\Feel_Touch.cpp" />
+    <ClCompile Include="..\Feel_Vision.cpp" />
+    <ClCompile Include="..\fmesh.cpp" />
+    <ClCompile Include="..\GameFont.cpp" />
+    <ClCompile Include="..\GameMtlLib.cpp" />
+    <ClCompile Include="..\GameMtlLib_Engine.cpp" />
+    <ClCompile Include="..\ICollidable.cpp" />
+    <ClCompile Include="..\IGame_Level.cpp" />
+    <ClCompile Include="..\IGame_Level_check_textures.cpp" />
+    <ClCompile Include="..\IGame_ObjectPool.cpp" />
+    <ClCompile Include="..\IGame_Persistent.cpp" />
+    <ClCompile Include="..\IInputReceiver.cpp" />
+    <ClCompile Include="..\interp.cpp" />
+    <ClCompile Include="..\IRenderable.cpp" />
+    <ClCompile Include="..\ISheduled.cpp" />
+    <ClCompile Include="..\LightAnimLibrary.cpp" />
+    <ClCompile Include="..\line_editor.cpp" />
+    <ClCompile Include="..\line_edit_control.cpp" />
+    <ClCompile Include="..\mailSlot.cpp" />
+    <ClCompile Include="..\MbHelpers.cpp" />
+    <ClCompile Include="..\motion.cpp" />
+    <ClCompile Include="..\ObjectAnimator.cpp" />
+    <ClCompile Include="..\ObjectDump.cpp" />
+    <ClCompile Include="..\perlin.cpp" />
+    <ClCompile Include="..\phdebug.cpp" />
+    <ClCompile Include="..\PS_instance.cpp" />
+    <ClCompile Include="..\pure.cpp" />
+    <ClCompile Include="..\pure_relcase.cpp" />
+    <ClCompile Include="..\Rain.cpp" />
+    <ClCompile Include="..\Render.cpp" />
+    <ClCompile Include="..\SkeletonMotions.cpp" />
+    <ClCompile Include="..\StatGraph.cpp" />
+    <ClCompile Include="..\Stats.cpp" />
+    <ClCompile Include="..\stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='ReleaseR2|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='ReleaseR2-AVX|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='ReleaseR4|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='ReleaseR4-AVX|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='ReleaseR3|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='ReleaseR3-AVX|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='ReleaseR1|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='ReleaseR1-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\Text_Console.cpp" />
+    <ClCompile Include="..\Text_Console_WndProc.cpp" />
+    <ClCompile Include="..\thunderbolt.cpp" />
+    <ClCompile Include="..\tntQAVI.cpp" />
+    <ClCompile Include="..\xrHemisphere.cpp" />
+    <ClCompile Include="..\xrImage_Resampler.cpp" />
+    <ClCompile Include="..\xrSASH.cpp" />
+    <ClCompile Include="..\xrSheduler.cpp" />
+    <ClCompile Include="..\xrTheora_Stream.cpp" />
+    <ClCompile Include="..\xrTheora_Surface.cpp" />
+    <ClCompile Include="..\xrTheora_Surface_mmx.cpp" />
+    <ClCompile Include="..\xr_collide_form.cpp" />
+    <ClCompile Include="..\xr_efflensflare.cpp" />
+    <ClCompile Include="..\Xr_input.cpp" />
+    <ClCompile Include="..\xr_input_xinput.cpp" />
+    <ClCompile Include="..\XR_IOConsole.cpp" />
+    <ClCompile Include="..\XR_IOConsole_callback.cpp" />
+    <ClCompile Include="..\XR_IOConsole_control.cpp" />
+    <ClCompile Include="..\XR_IOConsole_get.cpp" />
+    <ClCompile Include="..\xr_ioc_cmd.cpp" />
+    <ClCompile Include="..\xr_object.cpp" />
+    <ClCompile Include="..\xr_object_list.cpp" />
+    <ClCompile Include="..\x_ray.cpp" />
+    <ClCompile Include="..\_scripting.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\resource.rc" />
+  </ItemGroup>
+  <ItemGroup>
+    <Image Include="..\splash_xrcs_en.bmp" />
+    <Image Include="..\stalker_cs.ico" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)3rd party\luabind\vs2022\luabind.beta7-devel.rc4.vcxproj">
+      <Project>{cc52e0b3-cc35-4934-9302-035b748f3f2c}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)3rd party\openal\OpenAL-Windows\Router\vs2022\Router.vcxproj">
+      <Project>{566551f4-4ef1-4cb4-a131-f982e7606907}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)Layers\xrAPI\vs2022\xrAPI.vcxproj">
+      <Project>{1daec516-e52c-4a3c-a4da-ae3553e6e0f8}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrNetServer\vs2022\xrNetServer.vcxproj">
+      <Project>{435bac9a-b225-457d-ab40-c9bd0cc8838c}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrSound\vs2022\xrSound.vcxproj">
+      <Project>{ccca7859-eb86-493e-9b53-c4235f45b3c5}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)3rd party\NVTT\vs2022\NVTT.vcxproj">
+      <Project>{0eb257dc-5cfc-44b0-82c9-ce6b158be473}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)..\sdk\include\jpeg\vs2022\libjpeg.vcxproj">
+      <Project>{938c5808-85a1-4b5a-8cb4-d2d9d7851cb8}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)..\sdk\include\ogg\vs2022\libogg_static.vcxproj">
+      <Project>{893887a1-3abf-40a0-b931-cd0867010785}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)..\sdk\include\theora\vs2022\libtheora_static.vcxproj">
+      <Project>{0bdf3377-f84e-4b42-a605-b45aaa244cb6}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)..\sdk\include\vorbis\vs2022\libvorbisfile_static.vcxproj">
+      <Project>{cebde98b-a6aa-46e6-bc79-faaf823db9ec}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)..\sdk\include\vorbis\vs2022\libvorbis_static.vcxproj">
+      <Project>{3a214e06-b95e-4d61-a291-1f8df2ec10fd}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)3rd party\crypto\vs2022\crypto.vcxproj">
+      <Project>{fa169092-ea3e-40c1-8e5a-a2b575700fe8}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)3rd party\cximage\vs2022\cximage.vcxproj">
+      <Project>{880cd250-ba77-4daf-a8d4-552f12dd3ae4}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)3rd party\DXERR\vs2022\DXERR.vcxproj">
+      <Project>{772fe450-f4f3-4687-a2a7-5624825089d7}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)3rd party\lua-extensions\vs2022\lua_extensions.vcxproj">
+      <Project>{44f716e7-05bd-4390-ab02-5f7daf7fefde}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)3rd party\ode\contrib\msvc7\ode_default\vs2022\default.vcxproj">
+      <Project>{1bf75feb-87dd-486c-880b-227987d191c2}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCDB\vs2022\xrCDB.vcxproj">
+      <Project>{a19b1df2-82ec-4364-8bdf-85d13a1c89b5}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCore\vs2022\xrCore.vcxproj">
+      <Project>{a0f7d1fb-59a7-4717-a7e4-96f37e91998e}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCPU_Pipe\vs2022\xrCPU_Pipe.vcxproj">
+      <Project>{ca0649dd-d089-423a-981c-46b57a884eb9}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrGame\vs2022\xrGame.vcxproj">
+      <Project>{200652a6-043e-4634-8837-87983b3bd5e0}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrParticles\vs2022\xrParticles.vcxproj">
+      <Project>{94a1c366-3d19-48e6-8170-4adc2e70df97}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrPhysics\vs2022\xrPhysics.vcxproj">
+      <Project>{98d24a3d-7666-4c11-9d6e-b10393ce8cba}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrXMLParser\vs2022\xrXMLParser.vcxproj">
+      <Project>{94a1c366-3d19-48e6-8170-4adc2e70df98}</Project>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="1" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/xrEngine/vs2022/xrEngine.vcxproj.filters b/src/xrEngine/vs2022/xrEngine.vcxproj.filters
new file mode 100644
index 0000000..38d3544
--- /dev/null
+++ b/src/xrEngine/vs2022/xrEngine.vcxproj.filters
@@ -0,0 +1,376 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="General">
+      <UniqueIdentifier>{789b2b01-e97a-4aef-b3c2-0281708942c5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="General\Resources">
+      <UniqueIdentifier>{e11e63ee-7e2c-4cae-8562-81d199ac71df}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfaces">
+      <UniqueIdentifier>{fad49c5d-63ff-41cf-acdd-a213a33d84e0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfaces\Sound">
+      <UniqueIdentifier>{58ed43ab-d3e8-455d-a859-ee009d07d3ba}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfaces\Input">
+      <UniqueIdentifier>{0b1e83d9-fa8b-4384-a88c-5860f6cdf71f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfaces\Sheduler">
+      <UniqueIdentifier>{7575db1c-2ef0-4085-9d91-235e61991209}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfaces\Render">
+      <UniqueIdentifier>{b512001a-02d0-4c4d-819e-a54399380b8b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfaces\SPATIAL">
+      <UniqueIdentifier>{f7f04070-84c2-470b-b745-a38c4eba228a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfaces\Collidable">
+      <UniqueIdentifier>{105b295b-4c65-4e36-9195-9b8d16f98cc8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfaces\Physics">
+      <UniqueIdentifier>{2846a11f-c826-4a31-b2a3-9a6e9ba4e119}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API">
+      <UniqueIdentifier>{eeed9049-803d-49c3-8d29-c5e1d31fe71d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API\Objects">
+      <UniqueIdentifier>{066a2ae9-78ac-4c83-a59e-2eef0af7c14a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API\HUD">
+      <UniqueIdentifier>{0a195ccb-af92-4163-a089-8429c03eb82e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API\Environment">
+      <UniqueIdentifier>{3403376e-8cfe-4d6f-bbab-9a876427b184}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API\Environment\Effects">
+      <UniqueIdentifier>{e8189561-ac8f-4f1e-8eb3-3ebb3cb8fe5c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API\Cameras">
+      <UniqueIdentifier>{e9dd2457-5756-446a-a331-6b705c6d2cd2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API\Collision">
+      <UniqueIdentifier>{73f7743c-ab23-4653-b5cd-b4ba1d28da0c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API\Animator">
+      <UniqueIdentifier>{2a6e9664-14b0-4662-a823-1bf4d03349e5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API\Feelers">
+      <UniqueIdentifier>{cea2d26b-c353-43f4-bc5a-4c0607f209a8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API\Demo">
+      <UniqueIdentifier>{e1069bff-104f-4b80-b679-70c0b3577fd5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API\GameMaterials">
+      <UniqueIdentifier>{c16d36cf-5e63-4375-8133-d81ba4982147}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Game API\Debug">
+      <UniqueIdentifier>{897c02e1-3ef6-4941-ade5-7ca637d3298a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Render">
+      <UniqueIdentifier>{d81147d5-363c-40af-9722-e06ce1b52cab}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Render\Visuals">
+      <UniqueIdentifier>{4af72bde-2de3-4c56-8514-d6ead4e8cbfc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Render\Visuals\Skeleton">
+      <UniqueIdentifier>{da95a876-d833-4449-a13f-9bb1c018415e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Render\Visibility">
+      <UniqueIdentifier>{ed69ae34-64e0-4970-bb1f-4119864abc37}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Render\Particle system">
+      <UniqueIdentifier>{b0d34bbe-7ad3-4d93-acc8-07deb94e6776}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Render\Lighting">
+      <UniqueIdentifier>{b3ddc10c-120f-4fce-996f-f44cb9296436}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Render\Font output">
+      <UniqueIdentifier>{0d4df4c7-21f8-4dcb-857e-08757124ed97}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Render\Execution &amp; 3D">
+      <UniqueIdentifier>{bc5c9132-ea91-4db0-be53-98f77132e631}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Render\Execution &amp; 3D\Shaders">
+      <UniqueIdentifier>{c812da3d-dd05-494a-92c9-fe8c60bee6d4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Render\Execution &amp; 3D\Shaders\Textures">
+      <UniqueIdentifier>{be153bad-fd3d-49b2-9f7a-f93bc731673e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Render\Execution &amp; 3D\TextConsole">
+      <UniqueIdentifier>{05c345f6-67bb-479a-8226-b50fddbf5bf6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Engine">
+      <UniqueIdentifier>{cd9ac8cb-af4e-4084-968c-98b28d708e33}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Engine\Collision Core">
+      <UniqueIdentifier>{27ef9226-06f1-48a5-adc5-40991aa22c05}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Engine\Console">
+      <UniqueIdentifier>{0f1086cd-e02a-4030-ae77-22e04fa5cf74}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Engine\Console\commands">
+      <UniqueIdentifier>{758ebbb6-fd04-48c4-a303-7f110452ea17}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Engine\Core">
+      <UniqueIdentifier>{d0fc2a3a-c3e4-41ca-8027-79e04f61f8ba}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Engine\Core\Scripting">
+      <UniqueIdentifier>{9d074bc1-c26f-402e-8cc3-8608d7e96906}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Engine\Noise">
+      <UniqueIdentifier>{c44904b6-e19d-4e72-8ae6-c895d9d483e4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Engine\text_editor">
+      <UniqueIdentifier>{0f8148ae-26b3-4084-84f0-9711e72596b2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Engine\text_editor\line_editor">
+      <UniqueIdentifier>{a561951d-df21-4744-bd9e-0bc69e0dfa42}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Engine\text_editor\line_editor_control">
+      <UniqueIdentifier>{982d1115-af31-4164-88bf-d50bb3a7cad1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Engine\text_editor\edit_actions">
+      <UniqueIdentifier>{e23b35a1-652e-47bb-8941-1653504cd776}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="RenderRef">
+      <UniqueIdentifier>{e4d34774-3a5b-468f-9400-12c702636fa1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="RenderRef\Execution &amp; 3D">
+      <UniqueIdentifier>{32271206-64dd-4f87-a215-4b1106afd35f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="RenderRef\Execution &amp; 3D\Device">
+      <UniqueIdentifier>{43966447-6d34-46c3-956d-adaa49b48525}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="RenderRef\Execution &amp; 3D\Visuals">
+      <UniqueIdentifier>{2e6b0e5e-5f71-4eca-a5a7-9e4ab9a6ef2f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="RenderRef\Execution &amp; 3D\Visuals\Skeleton">
+      <UniqueIdentifier>{efcab557-a4fd-44af-825c-b401bd01da48}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="OpenAutomate">
+      <UniqueIdentifier>{fe56b488-34f8-4632-9f5e-7805f761b338}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Interfaces\Discord">
+      <UniqueIdentifier>{35834be4-924f-4f20-acfc-b2f66194b35d}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\3rd party\discord\achievement_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\activity_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\application_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\core.h" />
+    <ClInclude Include="..\..\3rd party\discord\discord.h" />
+    <ClInclude Include="..\..\3rd party\discord\event.h" />
+    <ClInclude Include="..\..\3rd party\discord\ffi.h" />
+    <ClInclude Include="..\..\3rd party\discord\image_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\lobby_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\network_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\overlay_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\relationship_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\storage_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\store_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\types.h" />
+    <ClInclude Include="..\..\3rd party\discord\user_manager.h" />
+    <ClInclude Include="..\..\3rd party\discord\voice_manager.h" />
+    <ClInclude Include="..\ai_script_lua_extension.h" />
+    <ClInclude Include="..\ai_script_lua_space.h" />
+    <ClInclude Include="..\ai_script_space.h" />
+    <ClInclude Include="..\bone.h" />
+    <ClInclude Include="..\CameraBase.h" />
+    <ClInclude Include="..\CameraDefs.h" />
+    <ClInclude Include="..\CameraManager.h" />
+    <ClInclude Include="..\cf_dynamic_mesh.h" />
+    <ClInclude Include="..\cl_intersect.h" />
+    <ClInclude Include="..\CustomHUD.h" />
+    <ClInclude Include="..\dedicated_server_only.h" />
+    <ClInclude Include="..\defines.h" />
+    <ClInclude Include="..\device.h" />
+    <ClInclude Include="..\edit_actions.h" />
+    <ClInclude Include="..\Effector.h" />
+    <ClInclude Include="..\EffectorPP.h" />
+    <ClInclude Include="..\Engine.h" />
+    <ClInclude Include="..\EngineAPI.h" />
+    <ClInclude Include="..\EnnumerateVertices.h" />
+    <ClInclude Include="..\envelope.h" />
+    <ClInclude Include="..\Environment.h" />
+    <ClInclude Include="..\EventAPI.h" />
+    <ClInclude Include="..\FDemoPlay.h" />
+    <ClInclude Include="..\FDemoRecord.h" />
+    <ClInclude Include="..\Feel_Sound.h" />
+    <ClInclude Include="..\Feel_Touch.h" />
+    <ClInclude Include="..\Feel_Vision.h" />
+    <ClInclude Include="..\Fmesh.h" />
+    <ClInclude Include="..\GameFont.h" />
+    <ClInclude Include="..\GameMtlLib.h" />
+    <ClInclude Include="..\ICollidable.h" />
+    <ClInclude Include="..\IGame_Level.h" />
+    <ClInclude Include="..\IGame_ObjectPool.h" />
+    <ClInclude Include="..\IGame_Persistent.h" />
+    <ClInclude Include="..\IInputReceiver.h" />
+    <ClInclude Include="..\IObjectPhysicsCollision.h" />
+    <ClInclude Include="..\IPHdebug.h" />
+    <ClInclude Include="..\IPhysicsGeometry.h" />
+    <ClInclude Include="..\IPhysicsShell.h" />
+    <ClInclude Include="..\IRenderable.h" />
+    <ClInclude Include="..\ISheduled.h" />
+    <ClInclude Include="..\LightAnimLibrary.h" />
+    <ClInclude Include="..\line_editor.h" />
+    <ClInclude Include="..\line_edit_control.h" />
+    <ClInclude Include="..\MbHelpers.h" />
+    <ClInclude Include="..\motion.h" />
+    <ClInclude Include="..\mp_logging.h" />
+    <ClInclude Include="..\no_single.h" />
+    <ClInclude Include="..\ObjectAnimator.h" />
+    <ClInclude Include="..\ObjectDump.h" />
+    <ClInclude Include="..\perlin.h" />
+    <ClInclude Include="..\Properties.h" />
+    <ClInclude Include="..\psystem.h" />
+    <ClInclude Include="..\PS_instance.h" />
+    <ClInclude Include="..\pure.h" />
+    <ClInclude Include="..\pure_relcase.h" />
+    <ClInclude Include="..\Rain.h" />
+    <ClInclude Include="..\Render.h" />
+    <ClInclude Include="..\resource.h" />
+    <ClInclude Include="..\ShadersExternalData.h" />
+    <ClInclude Include="..\Shader_xrLC.h" />
+    <ClInclude Include="..\SkeletonMotionDefs.h" />
+    <ClInclude Include="..\SkeletonMotions.h" />
+    <ClInclude Include="..\StatGraph.h" />
+    <ClInclude Include="..\Stats.h" />
+    <ClInclude Include="..\stdafx.h" />
+    <ClInclude Include="..\std_classes.h" />
+    <ClInclude Include="..\Text_Console.h" />
+    <ClInclude Include="..\thunderbolt.h" />
+    <ClInclude Include="..\tntQAVI.h" />
+    <ClInclude Include="..\trivial_encryptor.h" />
+    <ClInclude Include="..\vis_common.h" />
+    <ClInclude Include="..\WaveForm.h" />
+    <ClInclude Include="..\xrHemisphere.h" />
+    <ClInclude Include="..\xrImage_Resampler.h" />
+    <ClInclude Include="..\xrLevel.h" />
+    <ClInclude Include="..\xrSASH.h" />
+    <ClInclude Include="..\xrSheduler.h" />
+    <ClInclude Include="..\xrTheora_Stream.h" />
+    <ClInclude Include="..\xrTheora_Surface.h" />
+    <ClInclude Include="..\xrTheora_Surface_mmx.h" />
+    <ClInclude Include="..\xr_collide_form.h" />
+    <ClInclude Include="..\xr_efflensflare.h" />
+    <ClInclude Include="..\xr_input.h" />
+    <ClInclude Include="..\xr_input_xinput.h" />
+    <ClInclude Include="..\XR_IOConsole.h" />
+    <ClInclude Include="..\xr_ioc_cmd.h" />
+    <ClInclude Include="..\xr_object.h" />
+    <ClInclude Include="..\xr_object_list.h" />
+    <ClInclude Include="..\x_ray.h" />
+    <ClInclude Include="..\_d3d_extensions.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\3rd party\discord\achievement_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\activity_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\application_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\core.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\image_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\lobby_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\network_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\overlay_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\relationship_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\storage_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\store_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\types.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\user_manager.cpp" />
+    <ClCompile Include="..\..\3rd party\discord\voice_manager.cpp" />
+    <ClCompile Include="..\ai_script_lua_debug.cpp" />
+    <ClCompile Include="..\ai_script_lua_extension.cpp" />
+    <ClCompile Include="..\bone.cpp" />
+    <ClCompile Include="..\CameraBase.cpp" />
+    <ClCompile Include="..\CameraManager.cpp" />
+    <ClCompile Include="..\cf_dynamic_mesh.cpp" />
+    <ClCompile Include="..\CustomHUD.cpp" />
+    <ClCompile Include="..\defines.cpp" />
+    <ClCompile Include="..\device.cpp" />
+    <ClCompile Include="..\Device_create.cpp" />
+    <ClCompile Include="..\Device_destroy.cpp" />
+    <ClCompile Include="..\Device_Initialize.cpp" />
+    <ClCompile Include="..\Device_Misc.cpp" />
+    <ClCompile Include="..\Device_overdraw.cpp" />
+    <ClCompile Include="..\Device_wndproc.cpp" />
+    <ClCompile Include="..\edit_actions.cpp" />
+    <ClCompile Include="..\Effector.cpp" />
+    <ClCompile Include="..\EffectorPP.cpp" />
+    <ClCompile Include="..\Engine.cpp" />
+    <ClCompile Include="..\EngineAPI.cpp" />
+    <ClCompile Include="..\Envelope.cpp" />
+    <ClCompile Include="..\Environment.cpp" />
+    <ClCompile Include="..\Environment_misc.cpp" />
+    <ClCompile Include="..\Environment_render.cpp" />
+    <ClCompile Include="..\EventAPI.cpp" />
+    <ClCompile Include="..\FDemoPlay.cpp" />
+    <ClCompile Include="..\FDemoRecord.cpp" />
+    <ClCompile Include="..\Feel_Touch.cpp" />
+    <ClCompile Include="..\Feel_Vision.cpp" />
+    <ClCompile Include="..\fmesh.cpp" />
+    <ClCompile Include="..\GameFont.cpp" />
+    <ClCompile Include="..\GameMtlLib.cpp" />
+    <ClCompile Include="..\GameMtlLib_Engine.cpp" />
+    <ClCompile Include="..\ICollidable.cpp" />
+    <ClCompile Include="..\IGame_Level.cpp" />
+    <ClCompile Include="..\IGame_Level_check_textures.cpp" />
+    <ClCompile Include="..\IGame_ObjectPool.cpp" />
+    <ClCompile Include="..\IGame_Persistent.cpp" />
+    <ClCompile Include="..\IInputReceiver.cpp" />
+    <ClCompile Include="..\interp.cpp" />
+    <ClCompile Include="..\IRenderable.cpp" />
+    <ClCompile Include="..\ISheduled.cpp" />
+    <ClCompile Include="..\LightAnimLibrary.cpp" />
+    <ClCompile Include="..\line_editor.cpp" />
+    <ClCompile Include="..\line_edit_control.cpp" />
+    <ClCompile Include="..\mailSlot.cpp" />
+    <ClCompile Include="..\MbHelpers.cpp" />
+    <ClCompile Include="..\motion.cpp" />
+    <ClCompile Include="..\ObjectAnimator.cpp" />
+    <ClCompile Include="..\ObjectDump.cpp" />
+    <ClCompile Include="..\perlin.cpp" />
+    <ClCompile Include="..\phdebug.cpp" />
+    <ClCompile Include="..\PS_instance.cpp" />
+    <ClCompile Include="..\pure.cpp" />
+    <ClCompile Include="..\pure_relcase.cpp" />
+    <ClCompile Include="..\Rain.cpp" />
+    <ClCompile Include="..\Render.cpp" />
+    <ClCompile Include="..\SkeletonMotions.cpp" />
+    <ClCompile Include="..\StatGraph.cpp" />
+    <ClCompile Include="..\Stats.cpp" />
+    <ClCompile Include="..\stdafx.cpp" />
+    <ClCompile Include="..\Text_Console.cpp" />
+    <ClCompile Include="..\Text_Console_WndProc.cpp" />
+    <ClCompile Include="..\thunderbolt.cpp" />
+    <ClCompile Include="..\tntQAVI.cpp" />
+    <ClCompile Include="..\xrHemisphere.cpp" />
+    <ClCompile Include="..\xrImage_Resampler.cpp" />
+    <ClCompile Include="..\xrSASH.cpp" />
+    <ClCompile Include="..\xrSheduler.cpp" />
+    <ClCompile Include="..\xrTheora_Stream.cpp" />
+    <ClCompile Include="..\xrTheora_Surface.cpp" />
+    <ClCompile Include="..\xrTheora_Surface_mmx.cpp" />
+    <ClCompile Include="..\xr_collide_form.cpp" />
+    <ClCompile Include="..\xr_efflensflare.cpp" />
+    <ClCompile Include="..\Xr_input.cpp" />
+    <ClCompile Include="..\xr_input_xinput.cpp" />
+    <ClCompile Include="..\XR_IOConsole.cpp" />
+    <ClCompile Include="..\XR_IOConsole_callback.cpp" />
+    <ClCompile Include="..\XR_IOConsole_control.cpp" />
+    <ClCompile Include="..\XR_IOConsole_get.cpp" />
+    <ClCompile Include="..\xr_ioc_cmd.cpp" />
+    <ClCompile Include="..\xr_object.cpp" />
+    <ClCompile Include="..\xr_object_list.cpp" />
+    <ClCompile Include="..\x_ray.cpp" />
+    <ClCompile Include="..\_scripting.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\resource.rc" />
+  </ItemGroup>
+  <ItemGroup>
+    <Image Include="..\splash_xrcs_en.bmp" />
+    <Image Include="..\stalker_cs.ico" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/xrEngine/x_ray.cpp b/src/xrEngine/x_ray.cpp
index 15a57b9..a087aec 100644
--- a/src/xrEngine/x_ray.cpp
+++ b/src/xrEngine/x_ray.cpp
@@ -67,6 +67,12 @@ float discord_update_rate = .5f;
 //#pragma comment(lib, "sicuuc.lib")
 //#pragma comment(lib, "sicudt.lib")
 
+//Reshade
+#pragma comment(lib, "reshadecompat.lib")
+bool use_reshade = false;
+extern bool init_reshade();
+extern void unregister_reshade();
+
 static LPSTR month_id[12] =
 {
 	"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
@@ -587,6 +593,13 @@ void Startup()
 	//Discord Rich Presence - Rezy
 	Init_Discord();
 
+	//Reshade
+	use_reshade = init_reshade();
+	if (use_reshade)
+		Msg("[ReShade]: Loaded compatibility addon");
+	else
+		Msg("[ReShade]: ReShade not installed or version too old - didn't load compatibility addon");
+
 	// Main cycle
 	Msg("* [x-ray]: Starting Main Loop");
 	Memory.mem_usage();
@@ -596,6 +609,10 @@ void Startup()
 	// Discord
 	clearDiscordPresence();
 
+	//Reshade
+	if (use_reshade)
+		unregister_reshade();
+
 	// Destroy APP
 	xr_delete(g_SpatialSpacePhysic);
 	xr_delete(g_SpatialSpace);
diff --git a/src/xrEngine/xr_ioc_cmd.cpp b/src/xrEngine/xr_ioc_cmd.cpp
index a1ec515..21a3385 100644
--- a/src/xrEngine/xr_ioc_cmd.cpp
+++ b/src/xrEngine/xr_ioc_cmd.cpp
@@ -596,6 +596,21 @@ public:
 	}
 };
 
+extern void updateCurrentScope();
+class CCC_ScopeFactor : public CCC_Float
+{
+public:
+	CCC_ScopeFactor(LPCSTR N, float* V) : CCC_Float(N, V, 0.01f, 1.0f)
+	{
+	}
+
+	virtual void Execute(LPCSTR args)
+	{
+		CCC_Float::Execute(args);
+		updateCurrentScope();
+	}
+};
+
 //-----------------------------------------------------------------------
 /*
 #ifdef DEBUG
@@ -833,6 +848,18 @@ public:
 	}
 };
 
+class CCC_SoundParamsSmoothing : public CCC_Integer
+{
+public:
+	CCC_SoundParamsSmoothing(LPCSTR N, int* V, int _min = 0, int _max = 999) : CCC_Integer(N, V, _min, _max) {};
+
+	virtual void Execute(LPCSTR args)
+	{
+		CCC_Integer::Execute(args);
+		soundSmoothingParams::alpha = soundSmoothingParams::getAlpha();
+	}
+};
+
 ENGINE_API float psHUD_FOV_def = 0.45f;
 ENGINE_API float psHUD_FOV = psHUD_FOV_def;
 
@@ -864,6 +891,23 @@ Ivector4 g_crosshair_color_temp;
 float g_freelook_z_offset;
 float g_ironsights_factor = 1.25f;
 
+// crookr fake scope params (sorry)
+float scope_fog_interp = 0.15f;
+float scope_fog_travel = 0.25f;
+float scope_fog_attack = 0.66f;
+float scope_fog_mattack = 0.25f;
+//float scope_drift_amount = 1.f;
+float scope_ca = 0.003f;
+float scope_outerblur = 1.0f;
+float scope_innerblur = 0.1f;
+float scope_scrollpower = 0.66f;
+float scope_brightness = 1.0f;
+float scope_radius = 0.f;
+float scope_fog_radius = 1.25f;
+float scope_fog_sharp = 4.0f;
+int scope_2dtexactive = 0.0;
+Fvector3 ssfx_wetness_multiplier = Fvector3().set(1.0f, 0.3f, 0.0f);
+
 void CCC_Register()
 {
 	// General
@@ -965,6 +1009,9 @@ void CCC_Register()
 	CMD3(CCC_Mask, "snd_efx", &psSoundFlags, ss_EAX);
 	CMD4(CCC_Integer, "snd_targets", &psSoundTargets, 32, 1024);
 	CMD4(CCC_Integer, "snd_cache_size", &psSoundCacheSizeMB, 8, 256);
+	// Doppler effect power
+	CMD4(CCC_Float, "snd_doppler_power", &soundSmoothingParams::power, 0.f, 5.f);
+	CMD4(CCC_SoundParamsSmoothing, "snd_doppler_smoothing", &soundSmoothingParams::steps, 1, 100);
 
 #ifdef DEBUG
     CMD3(CCC_Mask, "snd_stats", &g_stats_flags, st_sound);
@@ -1023,7 +1070,26 @@ void CCC_Register()
 		CMD4(CCC_Float, "g_freelook_z_offset_factor", &g_freelook_z_offset, -3.f, 3.f);
 
 	CMD4(CCC_Float, "g_ironsights_zoom_factor", &g_ironsights_factor, 1.f, 2.f);
+	CMD4(CCC_Vector3, "ssfx_wetness_multiplier", &ssfx_wetness_multiplier, Fvector3().set(0.1f, 0.1f, 0.0f), Fvector3().set(20.0f, 20.0f, 0.0f));
 	
+	// - CrookR
+	CMD2(CCC_Float, "scope_blur_outer", &scope_outerblur);
+	CMD2(CCC_Float, "scope_blur_inner", &scope_innerblur);
+	CMD2(CCC_ScopeFactor, "scope_factor", &scope_scrollpower);
+	CMD2(CCC_Float, "scope_brightness", &scope_brightness);
+
+	CMD2(CCC_Float, "scope_fog_interp", &scope_fog_interp);
+	CMD4(CCC_Float, "scope_fog_travel", &scope_fog_travel, 0.f, 5.f);
+	CMD4(CCC_Float, "scope_fog_swayAim", &scope_fog_attack, -999.f, 999.f);
+	CMD4(CCC_Float, "scope_fog_swayMove", &scope_fog_mattack, -999.f, 999.f);
+	//CMD4(CCC_Float, "scope_drift_amount", &scope_drift_amount, -999.f, 999.f);
+
+	CMD2(CCC_Float, "scope_ca", &scope_ca);
+	CMD4(CCC_Float, "scope_radius", &scope_radius, 0, 2);
+	CMD4(CCC_Float, "scope_fog_radius", &scope_fog_radius, 0, 1000);
+	CMD4(CCC_Float, "scope_fog_sharp", &scope_fog_sharp, 0, 1000);
+	CMD2(CCC_Integer, "scope_2dtexactive", &scope_2dtexactive);
+
 #ifdef DEBUG
     extern BOOL debug_destroy;
     CMD4(CCC_Integer, "debug_destroy", &debug_destroy, FALSE, TRUE);
diff --git a/src/xrGame/AI_PhraseDialogManager.cpp b/src/xrGame/AI_PhraseDialogManager.cpp
index 30b0d46..07584e4 100644
--- a/src/xrGame/AI_PhraseDialogManager.cpp
+++ b/src/xrGame/AI_PhraseDialogManager.cpp
@@ -61,7 +61,7 @@ void CAI_PhraseDialogManager::AnswerPhrase(DIALOG_SHARED_PTR& phrase_dialog)
 			}
 		}
 
-		for (i = 0; i < phrase_dialog->PhraseList().size(); i++)
+		for (u32 i = 0; i < phrase_dialog->PhraseList().size(); i++)
 		{
 			if (phrase_goodwill == phrase_dialog->PhraseList()[phrase_num]->GoodwillLevel())
 				phrases.push_back(i);
diff --git a/src/xrGame/Actor.cpp b/src/xrGame/Actor.cpp
index 899a940..9bf276b 100644
--- a/src/xrGame/Actor.cpp
+++ b/src/xrGame/Actor.cpp
@@ -246,6 +246,8 @@ CActor::CActor() : CEntityAlive(), current_ik_cam_shift(0)
 	m_bSafemode = false;
 
 	m_bDelayDrawPickupItems = false;
+
+	m_FPCam = NULL;
 }
 
 
@@ -829,6 +831,7 @@ void CActor::HitSignal(float perc, Fvector& vLocalDir, CObject* who, s16 element
 }
 
 void start_tutorial(LPCSTR name);
+extern BOOL firstPersonDeath;
 
 void CActor::Die(CObject* who)
 {
@@ -920,11 +923,25 @@ void CActor::Die(CObject* who)
 
 	if (IsGameTypeSingle())
 	{
-#ifdef FP_DEATH
-        cam_Set(eacFirstEye);
-#else
-		cam_Set(eacFreeLook);
-#endif // FP_DEATH
+		// demonized: First Person Death
+		if (firstPersonDeath) {
+			cam_Set(eacFirstEye);
+			initFPCam();
+			Fvector pos = Device.vCameraPosition;
+			Fvector hpb;
+			hpb.set(
+				Device.vCameraDirection.getH(),
+				Device.vCameraDirection.getP(),
+				0
+			);
+			m_FPCam->m_Position.set(pos);
+			m_FPCam->m_HPB.set(hpb);
+			m_FPCam->m_Camera.setHPB(hpb.x, hpb.y, hpb.z).translate_over(pos);
+			m_FPCam->m_customSmoothing = 0;
+		}
+		else
+			cam_Set(eacFreeLook);
+
 		CurrentGameUI()->HideShownDialogs();
 
 		/* avo: attempt to set camera on timer */
@@ -1566,8 +1583,26 @@ void CActor::shedule_Update(u32 DT)
 		if (bHudView)
 		{
 			CInventoryItem* pInvItem = inventory().ActiveItem();
-			if (!pInvItem)
+			if (pInvItem)
+			{
+				CHudItem* pHudItem = smart_cast<CHudItem*>(pInvItem);
+				if (pHudItem)
+				{
+					if (pHudItem->IsHidden())
+					{
+						g_player_hud->detach_item(pHudItem);
+					}
+					else
+					{
+						g_player_hud->attach_item(pHudItem);
+					}
+				}
+			}
+			else
+			{
 				g_player_hud->detach_item_idx(0);
+				//Msg("---No active item in inventory(), item 0 detached.");
+			}
 		}
 		else
 		{
@@ -1933,7 +1968,8 @@ extern	BOOL	g_ShowAnimationInfo		;
 void CActor::OnHUDDraw(CCustomHUD*)
 {
 	R_ASSERT(IsFocused());
-	if (!((mstate_real & mcLookout) && !IsGameTypeSingle()))
+	//demonized: disable hud when FPCam is on
+	if (!((mstate_real & mcLookout) && !IsGameTypeSingle()) && !m_FPCam)
 		g_player_hud->render_hud();
 
 
@@ -2675,3 +2711,20 @@ void CActor::SwitchNightVision(bool vision_on, bool use_sounds, bool send_event)
 		//Msg("GE_TRADER_FLAGS event sent %d", m_trader_flags.get());
 	}
 }
+
+// demonized: First Person Death
+void CActor::initFPCam()
+{
+	if (!m_FPCam) {
+		m_FPCam = xr_new<CFPCamEffector>();
+		Cameras().AddCamEffector(m_FPCam);
+	}
+}
+
+void CActor::removeFPCam() 
+{
+	if (m_FPCam) {
+		Cameras().RemoveCamEffector(m_FPCam);
+		m_FPCam = NULL;
+	}
+}
diff --git a/src/xrGame/Actor.h b/src/xrGame/Actor.h
index 1440969..eee4444 100644
--- a/src/xrGame/Actor.h
+++ b/src/xrGame/Actor.h
@@ -61,6 +61,7 @@ class CActorStatisticMgr;
 class CLocationManager;
 
 class CNightVisionEffector;
+class CFPCamEffector;
 
 class CActor :
 	public CEntityAlive,
@@ -81,6 +82,14 @@ public:
 	CActor();
 	virtual ~CActor();
 
+// demonized: First Person Death
+public:
+	CFPCamEffector* m_FPCam;
+
+public:
+	void initFPCam();
+	void removeFPCam();
+
 public:
 	virtual BOOL AlwaysTheCrow() { return TRUE; }
 
@@ -458,6 +467,9 @@ public:
 	float m_fRun_StrafeFactor;
 	float m_fSprint_StrafeFactor;
 
+	// demonized: lookout modifier
+	float m_fLookoutFactor = 1;
+
 public:
 	Fvector GetMovementSpeed() { return NET_SavedAccel; };
 	//////////////////////////////////////////////////////////////////////////
diff --git a/src/xrGame/ActorCameras.cpp b/src/xrGame/ActorCameras.cpp
index 19a5c6c..f63b691 100644
--- a/src/xrGame/ActorCameras.cpp
+++ b/src/xrGame/ActorCameras.cpp
@@ -28,6 +28,9 @@
 #include "player_hud.h"
 #include "Missile.h"
 
+#include "EffectorBobbing.h"
+class CFPCamEffector;
+
 ENGINE_API extern float psHUD_FOV;
 ENGINE_API extern float psHUD_FOV_def;
 
@@ -421,7 +424,8 @@ void CActor::cam_Lookout(const Fmatrix& xform, float camera_height)
 				da = PI / 1000.f;
 				if (!fis_zero(r_torso.roll))
 					da *= r_torso.roll / _abs(r_torso.roll);
-				for (float angle = 0.f; _abs(angle) < _abs(alpha); angle += da)
+				float angle = 0.f;
+				for (; _abs(angle) < _abs(alpha); angle += da)
 				{
 					Fvector pt;
 					calc_gl_point(pt, xform, radius, angle);
@@ -453,6 +457,14 @@ static const float ik_cam_shift_tolerance = 0.2f;
 static const float ik_cam_shift_speed = 0.01f;
 #endif
 
+BOOL firstPersonDeath = TRUE;
+float offsetH = 0;
+float offsetP = 0;
+float offsetB = 0;
+float offsetX = 0;
+float offsetY = 0;
+float offsetZ = 0;
+float viewportNearOffset = 0;
 void CActor::cam_Update(float dt, float fFOV)
 {
 	if (m_holder) return;
@@ -576,6 +588,53 @@ void CActor::cam_Update(float dt, float fFOV)
 	{
 		collide_camera(*cameras[eacFirstEye], _viewport_near, this);
 	}
+	
+	if (cam_active == eacFirstEye) {
+		if (firstPersonDeath && !g_Alive() && m_FPCam) {
+			IKinematics* k = Visual()->dcast_PKinematics();
+
+			// Get eye bone position
+			CBoneInstance& eyeBone = k->LL_GetBoneInstance(m_eye_right);
+			Fmatrix matrix = Fidentity;
+			matrix.mul_43(XFORM(), eyeBone.mTransform);
+			Fvector camPos = (matrix.c);
+
+			// Get head bone direction, works better for first person death
+			CBoneInstance& headBone = k->LL_GetBoneInstance(m_head);
+			Fmatrix matrixDir = Fidentity;
+			Fvector camDir;
+			matrixDir.mul_43(XFORM(), headBone.mTransform);
+			matrixDir.getHPB(camDir);
+
+			// Adjust camera direction
+			Fvector adjustedCamDir;
+			adjustedCamDir.set(camDir).setHP(
+				camDir.x + deg2rad(8.f) + deg2rad(offsetH),
+				camDir.y - deg2rad(20.f) + deg2rad(offsetP)
+			);
+			camDir.set(
+				adjustedCamDir.getH(),
+				adjustedCamDir.getP(),
+				camDir.z + deg2rad(90.f) + deg2rad(offsetB)
+			);
+			if (camDir.x < 0) {
+				camDir.x = PI_MUL_2 + camDir.x;
+			}
+
+			Fvector dir, dirUp, dirRight;
+			dir.setHP(camDir.x, camDir.y);
+			Fvector::generate_orthonormal_basis_normalized(dir, dirUp, dirRight);
+
+			camPos.mad(dir, -0.04 + offsetZ);
+			camPos.mad(dirUp, offsetY);
+			camPos.mad(dirRight, -0.01 + offsetX);
+
+			m_FPCam->m_HPB.set(camDir);
+			m_FPCam->m_Position.set(camPos);
+			_viewport_near = VIEWPORT_NEAR - 0.08 + viewportNearOffset;
+			//Cameras().ApplyDevice(_viewport_near);
+		}
+	}
 
 	//Alundaio -psp always
 	//if( psActorFlags.test(AF_PSP) )
diff --git a/src/xrGame/ActorInput.cpp b/src/xrGame/ActorInput.cpp
index 8499334..ad4f3ec 100644
--- a/src/xrGame/ActorInput.cpp
+++ b/src/xrGame/ActorInput.cpp
@@ -433,7 +433,7 @@ void CActor::IR_OnMouseMove(int dx, int dy)
 	float LookFactor = GetLookFactor();
 
 	CCameraBase* C = cameras[cam_active];
-	float scale = (C->f_fov / g_fov) * psMouseSens * psMouseSensScale / 50.f / LookFactor;
+    float scale = (C->f_fov / g_fov) * (psMouseSens * sens_multiple) * psMouseSensScale / 50.f / LookFactor;
 	if (dx)
 	{
 		float d = float(dx) * scale;
@@ -592,11 +592,11 @@ void CActor::ActorUse()
 		}
 	}
 }
-
+extern BOOL firstPersonDeath;
 BOOL CActor::HUDview() const
 {
 	return IsFocused() && (cam_active == eacFirstEye) &&
-		((!m_holder) || (m_holder && m_holder->allowWeapon() && m_holder->HUDView()));
+		((!m_holder) || (m_holder && m_holder->allowWeapon() && m_holder->HUDView())) && (firstPersonDeath ? g_Alive() : true);
 }
 
 static u16 SlotsToCheck [] = {
diff --git a/src/xrGame/Actor_Movement.cpp b/src/xrGame/Actor_Movement.cpp
index b95ff6c..b49421b 100644
--- a/src/xrGame/Actor_Movement.cpp
+++ b/src/xrGame/Actor_Movement.cpp
@@ -426,6 +426,9 @@ void CActor::g_Orientate(u32 mstate_rl, float dt)
 	{
 		tgt_roll = (mstate_rl & mcLLookout) ? -ACTOR_LLOOKOUT_ANGLE : ACTOR_RLOOKOUT_ANGLE;
 
+		// demonized: add lookout modifier
+		tgt_roll *= m_fLookoutFactor;
+
 		if ((mstate_rl & mcLLookout) && (mstate_rl & mcRLookout))
 			tgt_roll = 0.0f;
 	}
diff --git a/src/xrGame/Actor_Weapon.cpp b/src/xrGame/Actor_Weapon.cpp
index 14eefbd..242bd5c 100644
--- a/src/xrGame/Actor_Weapon.cpp
+++ b/src/xrGame/Actor_Weapon.cpp
@@ -74,7 +74,7 @@ float CActor::GetWeaponAccuracy() const
 		}
 	}
 
-	if (W->m_lastCartridge.param_s.buckShot > 1)
+	if (W && W->m_lastCartridge.param_s.buckShot > 1)
 		dispersion *= GetWeaponParam(W, Get_PDM_BuckShot(), 1.0f);
 
 	return dispersion;
@@ -287,6 +287,9 @@ void CActor::on_weapon_shot_start(CWeapon* weapon)
 		{
 			effector->Initialize(camera_recoil);
 		}
+		else {
+			effector->UpdateCameraRecoil(camera_recoil);
+		}
 	}
 
 	effector->m_WeaponID = weapon->ID();
diff --git a/src/xrGame/Artefact.h b/src/xrGame/Artefact.h
index 35f5e1c..2298a74 100644
--- a/src/xrGame/Artefact.h
+++ b/src/xrGame/Artefact.h
@@ -70,7 +70,6 @@ protected:
 	float m_fTrailLightRange;
 	u8 m_af_rank;
 	bool m_bLightsEnabled;
-	float m_additional_weight;
 
 	virtual void UpdateLights();
 public:
@@ -91,6 +90,8 @@ public:
 	{
 	};
 
+	float m_additional_weight;
+
 	float AdditionalInventoryWeight() const { return m_additional_weight; }
 	bool m_bCanSpawnZone;
 	float m_fHealthRestoreSpeed;
diff --git a/src/xrGame/CustomOutfit.cpp b/src/xrGame/CustomOutfit.cpp
index 350d6f1..df7f414 100644
--- a/src/xrGame/CustomOutfit.cpp
+++ b/src/xrGame/CustomOutfit.cpp
@@ -110,7 +110,8 @@ void CCustomOutfit::Load(LPCSTR section)
 
 	m_full_icon_name = pSettings->r_string(section, "full_icon_name");
 	m_artefact_count = READ_IF_EXISTS(pSettings, r_u32, section, "artefact_count", 0);
-	clamp(m_artefact_count, (u32)0, (u32)5);
+	//clamp(m_artefact_count, (u32)0, (u32)5);
+	m_artefact_count = _max(m_artefact_count, (u32)0);
 
 	m_BonesProtectionSect = READ_IF_EXISTS(pSettings, r_string, section, "bones_koeff_protection", "");
 	bIsHelmetAvaliable = !!READ_IF_EXISTS(pSettings, r_bool, section, "helmet_avaliable", true);
@@ -363,7 +364,8 @@ bool CCustomOutfit::install_upgrade_impl(LPCSTR section, bool test)
 	clamp(m_fPowerLoss, 0.0f, 1.0f);
 
 	result |= process_if_exists(section, "artefact_count", &CInifile::r_u32, m_artefact_count, test);
-	clamp(m_artefact_count, (u32)0, (u32)5);
+	//clamp(m_artefact_count, (u32)0, (u32)5);
+	m_artefact_count = _max(m_artefact_count, (u32)0);
 
 	return result;
 }
diff --git a/src/xrGame/CustomZone.cpp b/src/xrGame/CustomZone.cpp
index ff568cd..248e7b8 100644
--- a/src/xrGame/CustomZone.cpp
+++ b/src/xrGame/CustomZone.cpp
@@ -22,6 +22,8 @@
 #define WIND_RADIUS (4*Radius())	//ðàññòîÿíèå äî àêòåðà, êîãäà ïîÿâëÿåòñÿ âåòåð 
 #define FASTMODE_DISTANCE (100.f)	//distance to camera from sphere, when zone switches to fast update sequence
 
+extern Fvector4 ps_ssfx_int_grass_params_1;
+
 CCustomZone::CCustomZone(void)
 {
 	m_zone_flags.zero();
@@ -59,6 +61,7 @@ CCustomZone::CCustomZone(void)
 
 CCustomZone::~CCustomZone(void)
 {
+	g_pGamePersistent->GrassBendersRemoveByIndex(grassbender_id);
 	m_idle_sound.destroy();
 	m_accum_sound.destroy();
 	m_awaking_sound.destroy();
@@ -96,6 +99,59 @@ void CCustomZone::Load(LPCSTR section)
 
 	LPCSTR sound_str = NULL;
 
+	// -- Interactive Grass - IDLE
+	if (pSettings->line_exist(section, "bend_grass_idle_anim"))
+		m_BendGrass_idle_anim = pSettings->r_s8(section, "bend_grass_idle_anim");
+	else
+		m_BendGrass_idle_anim = -1;
+
+	if (pSettings->line_exist(section, "bend_grass_idle_str"))
+		m_BendGrass_idle_str = pSettings->r_float(section, "bend_grass_idle_str");
+	else
+		m_BendGrass_idle_str = 1.0f;
+
+	if (pSettings->line_exist(section, "bend_grass_idle_radius"))
+		m_BendGrass_idle_radius = pSettings->r_float(section, "bend_grass_idle_radius");
+	else
+		m_BendGrass_idle_radius = 1.0f;
+
+	if (pSettings->line_exist(section, "bend_grass_idle_speed"))
+		m_BendGrass_idle_speed = pSettings->r_float(section, "bend_grass_idle_speed");
+	else
+		m_BendGrass_idle_speed = 1.0f;
+
+	// -- Interactive Grass - ACTIVE
+	if (pSettings->line_exist(section, "bend_grass_whenactive_anim"))
+		m_BendGrass_whenactive_anim = pSettings->r_s8(section, "bend_grass_whenactive_anim");
+	else
+		m_BendGrass_whenactive_anim = -1;
+
+	if (pSettings->line_exist(section, "bend_grass_whenactive_speed"))
+		m_BendGrass_whenactive_speed = pSettings->r_float(section, "bend_grass_whenactive_speed");
+	else
+		m_BendGrass_whenactive_speed = -1;
+
+	if (pSettings->line_exist(section, "bend_grass_whenactive_str"))
+		m_BendGrass_whenactive_str = pSettings->r_float(section, "bend_grass_whenactive_str");
+	else
+		m_BendGrass_whenactive_str = -1;
+
+	// -- Interactive Grass - BLOWOUT
+	if (pSettings->line_exist(section, "bend_grass_blowout_duration"))
+		m_BendGrass_Blowout_time = pSettings->r_u32(section, "bend_grass_blowout_duration");
+	else
+		m_BendGrass_Blowout_time = -1;
+
+	if (pSettings->line_exist(section, "bend_grass_blowout"))
+		m_BendGrass_Blowout = pSettings->r_bool(section, "bend_grass_blowout");
+
+	if (pSettings->line_exist(section, "bend_grass_blowout_speed"))
+		m_BendGrass_Blowout_speed = pSettings->r_float(section, "bend_grass_blowout_speed");
+
+	if (pSettings->line_exist(section, "bend_grass_blowout_radius"))
+		m_BendGrass_Blowout_radius = pSettings->r_float(section, "bend_grass_blowout_radius");
+	// --
+
 	if (pSettings->line_exist(section, "idle_sound"))
 	{
 		sound_str = pSettings->r_string(section, "idle_sound");
@@ -582,6 +638,31 @@ void CCustomZone::shedule_Update(u32 dt)
 
 		if (!m_zone_flags.test(eFastMode))
 			UpdateWorkload(dt);
+
+		if (act_distance < ps_ssfx_int_grass_params_1.w)
+			GrassZoneUpdate();
+		else
+		{
+			// Out of range, fadeOut if a grassbender_id is assigned
+			if (grassbender_id)
+			{
+				IGame_Persistent::grass_data& GData = g_pGamePersistent->grass_shader_data;
+
+				// If the ID doesn't match... Just remove the grassbender_id.
+				if (GData.id[grassbender_id] == ID())
+				{
+					GData.str_target[grassbender_id] += g_pGamePersistent->GrassBenderToValue(GData.str_target[grassbender_id], 0.0f, 4.0f, false);
+
+					// Remove ( Don't worry, GrassBenderToValue() it's going to get the == 0 )
+					if (GData.str_target[grassbender_id] == 0)
+						g_pGamePersistent->GrassBendersRemoveByIndex(grassbender_id);
+				}
+				else
+				{
+					grassbender_id = NULL;
+				}
+			}
+		}
 	};
 
 	UpdateOnOffState();
@@ -786,6 +867,8 @@ void CCustomZone::PlayBlowoutParticles()
 	pParticles = CParticlesObject::Create(*m_sBlowoutParticles,TRUE);
 	pParticles->UpdateParent(XFORM(), zero_vel);
 	pParticles->Play(false);
+
+	m_fBlowoutTimeLeft = (float)Device.dwTimeGlobal + m_BendGrass_Blowout_time;
 }
 
 void CCustomZone::PlayHitParticles(CGameObject* pObject)
@@ -1125,6 +1208,9 @@ void CCustomZone::UpdateBlowout()
 		m_dwBlowoutExplosionTime < (u32)m_iStateTime)
 	{
 		AffectObjects();
+		
+		if (m_BendGrass_Blowout)
+			g_pGamePersistent->GrassBendersAddExplosion(ID(), Position(), Fvector().set(0, -99, 0), 1.33f, m_BendGrass_Blowout_speed, 1.0f, m_BendGrass_Blowout_radius);
 	}
 }
 
@@ -1158,6 +1244,13 @@ void CCustomZone::OnMove()
 
 		if (m_pIdleLight && m_pIdleLight->get_active())
 			m_pIdleLight->set_position(Position());
+
+		if (grassbender_id)
+		{
+			// Check ID, just in case...
+			if (g_pGamePersistent->grass_shader_data.id[grassbender_id] == ID())
+				g_pGamePersistent->grass_shader_data.pos[grassbender_id] = Position();
+		}
 	}
 }
 
@@ -1597,3 +1690,61 @@ void CCustomZone::load(IReader& input_packet)
 	else
 		m_eZoneState = eZoneStateIdle;
 }
+
+void CCustomZone::GrassZoneUpdate()
+{
+	if (m_BendGrass_idle_anim == -1 && m_BendGrass_whenactive_anim == -1)
+		return;
+
+	IGame_Persistent::grass_data& GData = g_pGamePersistent->grass_shader_data;
+	bool IsActive;
+	s8 targetAnim = -1;
+
+	// If m_BendGrass_Blowout_time is not set, use m_eZoneState to detect activation
+	if (m_BendGrass_Blowout_time <= -1)
+		IsActive = m_eZoneState != eZoneStateIdle;
+	else
+		IsActive = m_fBlowoutTimeLeft > (float)Device.dwTimeGlobal;
+
+	// Target animation depending if Zone is active
+	if (IsActive)
+		targetAnim = (m_BendGrass_whenactive_anim > -1) ? m_BendGrass_whenactive_anim : m_BendGrass_idle_anim;
+	else
+		targetAnim = m_BendGrass_idle_anim;
+
+	// Update grass bender if the animation is > -1
+	if (targetAnim > 0 || (GData.anim[grassbender_id] > 0 && grassbender_id > 0))
+		g_pGamePersistent->GrassBendersUpdate(ID(), grassbender_id, grassbender_frame, Position(), m_BendGrass_idle_radius, 0.0f, false);
+	else
+		g_pGamePersistent->GrassBendersRemoveByIndex(grassbender_id);
+
+	// Return if grassbender_id doesn't exist
+	if (grassbender_id <= 0)
+		return;
+
+	// Animation transition, diminish intensity to 0 and change.
+	if (GData.anim[grassbender_id] != targetAnim)
+	{
+		GData.str_target[grassbender_id] += g_pGamePersistent->GrassBenderToValue(GData.str_target[grassbender_id], 0.0f, 7.5f, false);
+
+		if (GData.str_target[grassbender_id] <= 0.05f)
+			GData.anim[grassbender_id] = targetAnim;
+
+		return;
+	}
+
+	// Apply settings when needed
+	if (IsActive)
+	{
+		if (m_BendGrass_whenactive_speed >= 0)
+			GData.speed[grassbender_id] += g_pGamePersistent->GrassBenderToValue(GData.speed[grassbender_id], m_BendGrass_whenactive_speed, 10.0f, true);
+
+		if (m_BendGrass_whenactive_str >= 0)
+			GData.str_target[grassbender_id] += g_pGamePersistent->GrassBenderToValue(GData.str_target[grassbender_id], m_BendGrass_whenactive_str, 10.0f, true);
+	}
+	else
+	{
+		GData.speed[grassbender_id] += g_pGamePersistent->GrassBenderToValue(GData.speed[grassbender_id], m_BendGrass_idle_speed, 10.0f, true);
+		GData.str_target[grassbender_id] += g_pGamePersistent->GrassBenderToValue(GData.str_target[grassbender_id], m_BendGrass_idle_str, 10.0f, true);
+	}
+}
\ No newline at end of file
diff --git a/src/xrGame/CustomZone.h b/src/xrGame/CustomZone.h
index 3baa654..eca8679 100644
--- a/src/xrGame/CustomZone.h
+++ b/src/xrGame/CustomZone.h
@@ -159,6 +159,28 @@ protected:
 	float volumetric_intensity;
 	float volumetric_quality;
 
+	// Interactive grass Settings
+	float m_fBlowoutTimeLeft;
+
+	s8 m_BendGrass_idle_anim;
+	float m_BendGrass_idle_radius;
+	float m_BendGrass_idle_speed;
+	float m_BendGrass_idle_str;
+
+	s8 m_BendGrass_whenactive_anim;
+	float m_BendGrass_whenactive_speed;
+	float m_BendGrass_whenactive_str;
+
+	bool m_BendGrass_Blowout;
+	s32 m_BendGrass_Blowout_time;
+	float m_BendGrass_Blowout_speed;
+	float m_BendGrass_Blowout_radius;
+
+	u8 grassbender_id;
+	u32 grassbender_frame;
+
+	void GrassZoneUpdate();
+
 	//ìàññèâ ñ âðåìåíàìè, ñêîëüêî êàæäîå ñîñòîÿíèå äîëæíî 
 	//äëèòüñÿ (åñëè 0, òî ìãíîâåííî -1 - áåñêîíå÷íîñòü, 
 	//-2 - âîîáùå íå äîëæíî âûçûâàòüñÿ)
diff --git a/src/xrGame/EffectorBobbing.cpp b/src/xrGame/EffectorBobbing.cpp
index ffd7c19..4ac05a2 100644
--- a/src/xrGame/EffectorBobbing.cpp
+++ b/src/xrGame/EffectorBobbing.cpp
@@ -113,3 +113,56 @@ BOOL CEffectorBobbing::ProcessCam(SCamEffectorInfo& info)
 	//	}
 	return TRUE;
 }
+
+// demonized: First Person Death (Cam Effector, can be used in scripts any time to set custom position and direction)
+CFPCamEffector::CFPCamEffector() : CEffectorCam(eCEUser, INT_MAX) {
+	m_Camera.identity();
+	m_Camera.setHPB(0, 0, 0);
+	m_HPB.set(0, 0, 0);
+	m_Position.set(0, 0, 0);
+	m_customSmoothing = 0;
+}
+
+// EMA smoothing for changing values, frame independent
+int firstPersonDeathPositionSmoothing = 6;
+int firstPersonDeathDirectionSmoothing = 12;
+
+void CFPCamEffector::ema(Fvector &current, Fvector &target, unsigned int steps) {
+	float smoothing_alpha = 2.0 / (steps + 1);
+	float delta = Device.dwTimeDelta;
+
+	if (fis_zero(current.x) && fis_zero(current.y) && fis_zero(current.z)) {
+		current.x = target.x;
+		current.y = target.y;
+		current.z = target.z;
+		return;
+	}
+
+	current.x = current.x + min(1.f, smoothing_alpha * (delta / steps)) * (target.x - current.x);
+	current.y = current.y + min(1.f, smoothing_alpha * (delta / steps)) * (target.y - current.y);
+	current.z = current.z + min(1.f, smoothing_alpha * (delta / steps)) * (target.z - current.z);
+}
+
+BOOL CFPCamEffector::ProcessCam(SCamEffectorInfo& info)
+{
+	// Set target camera
+	Fmatrix temp;
+	temp.identity().setHPB(m_HPB.x, m_HPB.y, m_HPB.z).translate_over(m_Position);
+
+	// Smooth out transition between current camera and target
+	if (m_customSmoothing) {
+		ema(m_Camera.j, temp.j, m_customSmoothing);
+		ema(m_Camera.k, temp.k, m_customSmoothing);
+		ema(m_Camera.c, temp.c, m_customSmoothing);
+	} else {
+		ema(m_Camera.j, temp.j, firstPersonDeathDirectionSmoothing);
+		ema(m_Camera.k, temp.k, firstPersonDeathDirectionSmoothing);
+		ema(m_Camera.c, temp.c, firstPersonDeathPositionSmoothing);
+	}
+
+	// update camera
+	info.n.set(m_Camera.j);
+	info.d.set(m_Camera.k);
+	info.p.set(m_Camera.c);
+	return TRUE;
+}
\ No newline at end of file
diff --git a/src/xrGame/EffectorBobbing.h b/src/xrGame/EffectorBobbing.h
index 854b7a7..e202596 100644
--- a/src/xrGame/EffectorBobbing.h
+++ b/src/xrGame/EffectorBobbing.h
@@ -33,3 +33,19 @@ public:
 };
 
 #endif //_EFFECTOR_BOBBING_H
+
+// demonized: First Person Death Cam Effector
+class CFPCamEffector : public CEffectorCam
+{
+public:
+	Fvector m_Position;
+	Fvector m_HPB;
+	Fmatrix m_Camera;
+	unsigned int m_customSmoothing; // 0 - use FPDeath smoothing params, no custom smoothing
+	virtual void ema(Fvector& current, Fvector& target, unsigned int steps);
+	
+public:
+	CFPCamEffector();
+	virtual BOOL ProcessCam(SCamEffectorInfo& info);
+
+};
diff --git a/src/xrGame/EffectorShot.cpp b/src/xrGame/EffectorShot.cpp
index 8ac8fa4..a7ae406 100644
--- a/src/xrGame/EffectorShot.cpp
+++ b/src/xrGame/EffectorShot.cpp
@@ -21,6 +21,11 @@ void CWeaponShotEffector::Initialize(const CameraRecoil& cam_recoil)
 	Reset();
 }
 
+void CWeaponShotEffector::UpdateCameraRecoil(const CameraRecoil& cam_recoil)
+{
+	m_cam_recoil.Clone(cam_recoil);
+}
+
 void CWeaponShotEffector::Reset()
 {
 	m_angle_vert = 0.0f;
diff --git a/src/xrGame/EffectorShot.h b/src/xrGame/EffectorShot.h
index 451d458..500db02 100644
--- a/src/xrGame/EffectorShot.h
+++ b/src/xrGame/EffectorShot.h
@@ -45,6 +45,7 @@ public:
 	};
 
 	void Initialize(const CameraRecoil& cam_recoil);
+	void UpdateCameraRecoil(const CameraRecoil& cam_recoil);
 	void Reset();
 
 	IC bool IsActive() { return m_actived; }
diff --git a/src/xrGame/EliteDetector.cpp b/src/xrGame/EliteDetector.cpp
index add236a..d5b0641 100644
--- a/src/xrGame/EliteDetector.cpp
+++ b/src/xrGame/EliteDetector.cpp
@@ -146,12 +146,7 @@ void CUIArtefactDetectorElite::Draw()
 	Fmatrix LM;
 	GetUILocatorMatrix(LM);
 
-	IUIRender::ePointType bk = UI().m_currentPointType;
-
-	UI().m_currentPointType = IUIRender::pttLIT;
-
 	UIRender->CacheSetXformWorld(LM);
-	UIRender->CacheSetCullMode(IUIRender::cmNONE);
 
 	CUIWindow::Draw();
 
@@ -193,7 +188,7 @@ void CUIArtefactDetectorElite::Draw()
 		}
 	}
 
-	UI().m_currentPointType = bk;
+	UI().ScreenFrustumLIT().Clear();
 }
 
 void CUIArtefactDetectorElite::GetUILocatorMatrix(Fmatrix& _m)
diff --git a/src/xrGame/Entity.cpp b/src/xrGame/Entity.cpp
index 70a5767..11b4e80 100644
--- a/src/xrGame/Entity.cpp
+++ b/src/xrGame/Entity.cpp
@@ -401,3 +401,24 @@ void CEntity::ChangeTeam(int team, int squad, int group)
 	Level().seniority_holder().team(g_Team()).squad(g_Squad()).group(g_Group()).register_member(this);
 	on_after_change_team();
 }
+
+//--DSR-- HeatVision_start
+u32 clampU(u32 x, u32 a, u32 b) {
+	if (x < a) return a;
+	else if (x > b) return b;
+	return x;
+}
+
+float CEntity::GetHotness() {
+	if (AlreadyDie() || !g_Alive())
+		return 1.0f - (float)clampU(Device.dwTimeGlobal - m_level_death_time, 0, 20000) / 20000.0f;
+	return 1.0f;
+}
+
+void CEntity::OnChangeVisual()
+{
+	inherited::OnChangeVisual();
+	if (renderable.visual != 0)
+		renderable.visual->MarkAsHot(true);
+}
+//--DSR-- HeatVision_end
diff --git a/src/xrGame/Entity.h b/src/xrGame/Entity.h
index c5697ab..b21f2ec 100644
--- a/src/xrGame/Entity.h
+++ b/src/xrGame/Entity.h
@@ -82,6 +82,11 @@ public:
 	/*	virtual*/
 	IC void SetMaxHealth(float v) { m_entity_condition->max_health() = v; }
 
+	//--DSR-- HeatVision_start
+	virtual float GetHotness();
+	virtual void  OnChangeVisual();
+	//--DSR-- HeatVision_end
+
 	/*virtual*/
 	IC BOOL g_Alive() const { return GetfHealth() > 0; }
 	virtual BOOL g_State(SEntityState&) const { return FALSE; }
diff --git a/src/xrGame/Explosive.cpp b/src/xrGame/Explosive.cpp
index ef648e9..4154e12 100644
--- a/src/xrGame/Explosive.cpp
+++ b/src/xrGame/Explosive.cpp
@@ -341,6 +341,11 @@ void CExplosive::Explode()
 		DBG_DrawPoint(pos,0.3f,D3DCOLOR_XRGB(255,0,0));
 	}
 #endif
+	
+	// Interactive Grass FX
+	extern Fvector4 ps_ssfx_int_grass_params_2;
+	g_pGamePersistent->GrassBendersAddExplosion(cast_game_object()->ID(), pos, Fvector().set(0, -99, 0), 1.33f, ps_ssfx_int_grass_params_2.y, ps_ssfx_int_grass_params_2.x, m_fBlastRadius * 2.0f);
+	
 	//	Msg("---------CExplosive Explode [%d] frame[%d]",cast_game_object()->ID(), Device.dwFrame);
 	OnBeforeExplosion();
 	//èãðàåì çâóê âçðûâà
diff --git a/src/xrGame/GameObject.cpp b/src/xrGame/GameObject.cpp
index 1516f8d..1ce2261 100644
--- a/src/xrGame/GameObject.cpp
+++ b/src/xrGame/GameObject.cpp
@@ -116,6 +116,13 @@ void CGameObject::net_Destroy()
 #endif
 
 	VERIFY(m_spawned);
+
+	luabind::functor<void> funct;
+	if (ai().script_engine().functor("_G.CGameObject_NetDestroy", funct))
+	{
+		funct(this->lua_game_object());
+	}
+
 	if (m_anim_mov_ctrl)
 		destroy_anim_mov_ctrl();
 
@@ -441,6 +448,11 @@ BOOL CGameObject::net_Spawn(CSE_Abstract* DC)
 	}
 	BOOL ret =CScriptBinder::net_Spawn(DC);
 #else
+	luabind::functor<void> funct;
+	if (ai().script_engine().functor("_G.CGameObject_NetSpawn", funct))
+	{
+		funct(this->lua_game_object());
+	}
 	return (CScriptBinder::net_Spawn(DC));
 #endif
 
diff --git a/src/xrGame/GamePersistent.cpp b/src/xrGame/GamePersistent.cpp
index 7087c3a..a45da94 100644
--- a/src/xrGame/GamePersistent.cpp
+++ b/src/xrGame/GamePersistent.cpp
@@ -529,6 +529,14 @@ void CGamePersistent::game_loaded()
 			m_intro->Start("game_loaded");
 			Msg("intro_start game_loaded");
 			m_intro->m_on_destroy_event.bind(this, &CGamePersistent::update_game_loaded);
+
+			// demonized
+			// Callback for when loading screen happens and "Press Any Key to Continue" prompt appears
+			luabind::functor<void> funct;
+			if (ai().script_engine().functor("_G.OnLoadingScreenKeyPrompt", funct))
+			{
+				funct();
+			}
 		}
 		m_intro_event = 0;
 	}
@@ -539,6 +547,14 @@ void CGamePersistent::update_game_loaded()
 	xr_delete(m_intro);
 	Msg("intro_delete ::update_game_loaded");
 	start_game_intro();
+
+	// demonized
+	// Callback for when player dismisses loading screen after "Press Any Key to Continue" pressed
+	luabind::functor<void> funct;
+	if (ai().script_engine().functor("_G.OnLoadingScreenDismissed", funct))
+	{
+		funct();
+	}
 }
 
 void CGamePersistent::start_game_intro()
diff --git a/src/xrGame/HudItem.cpp b/src/xrGame/HudItem.cpp
index 85bf746..01c90a3 100644
--- a/src/xrGame/HudItem.cpp
+++ b/src/xrGame/HudItem.cpp
@@ -596,7 +596,7 @@ void CHudItem::on_a_hud_attach()
 
 void CHudItem::render_item_3d_ui()
 {
-	if (render_item_3d_ui_query() && script_ui)
+	if (script_ui)
 	{
 		Fmatrix LM;
 		Fmatrix trans = HudItemData()->m_item_transform;
@@ -618,17 +618,9 @@ void CHudItem::render_item_3d_ui()
 		else
 			LM.mulB_43(script_ui_matrix);
 
-		IUIRender::ePointType bk = UI().m_currentPointType;
-		UI().m_currentPointType = IUIRender::pttLIT;
 		UIRender->CacheSetXformWorld(LM);
-		UIRender->CacheSetCullMode(IUIRender::cmNONE);
-		UI().ScreenFrustumLIT().Clear();
 		script_ui->Draw();
-		UI().m_currentPointType = bk;
 	}
-
-	//	Restore cull mode
-	UIRender->CacheSetCullMode(IUIRender::cmCCW);
 }
 
 extern float g_end_modif;
diff --git a/src/xrGame/Inventory.cpp b/src/xrGame/Inventory.cpp
index 38b7669..a4e5334 100644
--- a/src/xrGame/Inventory.cpp
+++ b/src/xrGame/Inventory.cpp
@@ -863,7 +863,16 @@ void CInventory::Update()
 				}
 			}
 
+			// demonized: add on changed slot callback
+			luabind::functor<void> funct;
+			auto prev_obj = ActiveItem() ? ActiveItem()->object().lua_game_object() : NULL;
+			auto prev_slot = m_iActiveSlot;
 			m_iActiveSlot = GetNextActiveSlot();
+			auto obj = ActiveItem() ? ActiveItem()->object().lua_game_object() : NULL;
+			if (ai().script_engine().functor("_G.CActor_OnChangedSlot", funct))
+			{
+				funct(m_iActiveSlot, obj, prev_slot, prev_obj);
+			}
 		}
 		else if ((GetNextActiveSlot() != NO_ACTIVE_SLOT) && ActiveItem() && ActiveItem()->cast_hud_item()->IsHidden())
 					ActiveItem()->ActivateItem();
@@ -881,7 +890,7 @@ void CInventory::UpdateDropTasks()
 			UpdateDropItem(itm);
 	}
 
-	for (i = 0; i < 2; ++i)
+	for (u16 i = 0; i < 2; ++i)
 	{
 		TIItemContainer& list = i ? m_ruck : m_belt;
 		TIItemContainer::iterator it = list.begin();
diff --git a/src/xrGame/Level.cpp b/src/xrGame/Level.cpp
index 2f93a35..2a35e43 100644
--- a/src/xrGame/Level.cpp
+++ b/src/xrGame/Level.cpp
@@ -54,11 +54,12 @@
 #include "UIGameCustom.h"
 #include "ui/UIPdaWnd.h"
 #include "UICursor.h"
+#include "debug_renderer.h"
+#include "LevelDebugScript.h"
 
 #ifdef DEBUG
 #include "level_debug.h"
 #include "ai/stalker/ai_stalker.h"
-#include "debug_renderer.h"
 #include "PhysicObject.h"
 #include "PHDebug.h"
 #include "debug_text_tree.h"
@@ -96,6 +97,74 @@ u16	GetSpawnInfo(NET_Packet &P, u16 &parent_id)
 #endif
 //-AVO
 
+namespace crash_saving {
+	extern void(*save_impl)();
+	static bool g_isSaving = false;
+	int saveCountMax = 10;
+
+	void _save_impl()
+	{
+		if (g_isSaving) return;
+		if (saveCountMax <= 0) return;
+
+		int saveCount = -1;
+		g_isSaving = true;
+		NET_Packet net_packet;
+		net_packet.w_begin(M_SAVE_GAME);
+
+		std::string path = "fatal_ctd_save_";
+		std::string path_mask(path);
+		std::string path_ext = ".scop";
+		path_mask.append("*").append(path_ext);
+
+		FS_FileSet fset_temp;
+		FS.file_list(fset_temp, "$game_saves$", FS_ListFiles | FS_RootOnly, path_mask.c_str());
+
+		std::vector<FS_File> fset(fset_temp.begin(), fset_temp.end());
+		struct {
+			bool operator()(FS_File& a, FS_File& b) {
+				return a.time_write > b.time_write;
+			}
+		} sortFilesDesc;
+		std::sort(fset.begin(), fset.end(), sortFilesDesc);
+
+		//Msg("save mask %s", path_mask.c_str());
+
+		for (auto &file : fset)
+		{
+			string128 name;
+			xr_strcpy(name, sizeof(name), file.name.c_str());
+			std::string name_string(name);
+			name_string.erase(name_string.length() - path_ext.length());
+
+			//Msg("found save file %s, save_name %s", name, name_string.c_str());
+
+			try {
+				//Msg("save number %s", name_string.substr(path.length()).c_str());
+				int name_count = std::stoi(name_string.substr(path.length()));
+				saveCount = name_count;
+				break;
+			} catch (...) {
+				Msg("!error getting save number from %s", name);
+			}
+		}
+
+		saveCount++;
+		if (saveCount >= saveCountMax) {
+			saveCount = 0;
+		}
+
+		path.append(std::to_string(saveCount));
+		net_packet.w_stringZ(path.c_str());
+		net_packet.w_u8(1);
+		CLevel& level = Level();
+		if (&level != nullptr)
+		{
+			level.Send(net_packet, net_flags(1));
+		}
+
+	}
+}
 
 CLevel::CLevel() :
 	IPureClient(Device.GetTimerGlobal())
@@ -129,8 +198,8 @@ CLevel::CLevel() :
 		m_space_restriction_manager = xr_new<CSpaceRestrictionManager>();
 		m_client_spawn_manager = xr_new<CClientSpawnManager>();
 		m_autosave_manager = xr_new<CAutosaveManager>();
-#ifdef DEBUG
         m_debug_renderer = xr_new<CDebugRenderer>();
+#ifdef DEBUG
         m_level_debug = xr_new<CLevelDebug>();
 #endif
 	}
@@ -141,12 +210,14 @@ CLevel::CLevel() :
 	g_player_hud = xr_new<player_hud>();
 	g_player_hud->load_default();
 	Msg("%s", Core.Params);
+	crash_saving::save_impl = crash_saving::_save_impl; // CLevel ready, we can save now
 }
 
 extern CAI_Space* g_ai_space;
 
 CLevel::~CLevel()
 {
+	crash_saving::save_impl = nullptr; // CLevel not available, disable crash save
 	xr_delete(g_player_hud);
 	delete_data(hud_zones_list);
 	hud_zones_list = nullptr;
@@ -180,9 +251,8 @@ CLevel::~CLevel()
 	xr_delete(m_seniority_hierarchy_holder);
 	xr_delete(m_client_spawn_manager);
 	xr_delete(m_autosave_manager);
-#ifdef DEBUG
     xr_delete(m_debug_renderer);
-#endif
+	delete_data(m_debug_render_queue);
 	if (!g_dedicated_server)
 		ai().script_engine().remove_script_process(ScriptEngine::eScriptProcessorLevel);
 	xr_delete(game);
@@ -710,6 +780,8 @@ extern Flags32 dbg_net_Draw_Flags;
 #endif
 
 extern void draw_wnds_rects();
+extern bool use_reshade;
+extern void render_reshade_effects();
 
 void CLevel::OnRender()
 {
@@ -776,8 +848,13 @@ void CLevel::OnRender()
 	if (Device.m_SecondViewport.IsSVPFrame())
 		Render->RenderToTarget(Render->rtSVP);
 
+	if (use_reshade)
+		render_reshade_effects();
+
 	HUD().RenderUI();
 
+	ScriptDebugRender();
+
 #ifdef DEBUG
     draw_wnds_rects();
     physics_world()->OnRender();
@@ -850,7 +927,7 @@ void CLevel::OnRender()
         UI().Font().pFontStat->SetHeight(8.0f);
     }
 #endif
-
+	debug_renderer().render();
 #ifdef DEBUG
     if (bDebug)
     {
@@ -858,7 +935,6 @@ void CLevel::OnRender()
         DBG().draw_text();
         DBG().draw_level_info();
     }
-    debug_renderer().render();
     DBG().draw_debug_text();
     if (psAI_Flags.is(aiVision))
     {
@@ -886,6 +962,23 @@ void CLevel::OnRender()
 #endif
 }
 
+void CLevel::ScriptDebugRender()
+{
+	if (!m_debug_render_queue.size())
+		return;
+
+	DRender->OnFrameEnd();
+
+	xr_map<u16, DBG_ScriptObject*>::iterator it = m_debug_render_queue.begin();
+	xr_map<u16, DBG_ScriptObject*>::iterator it_e = m_debug_render_queue.end();
+	for (; it != it_e; ++it)
+	{
+		DBG_ScriptObject* obj = (*it).second;
+		if (obj->m_visible)
+			obj->Render();
+	}
+}
+
 void CLevel::OnEvent(EVENT E, u64 P1, u64 /**P2/**/)
 {
 	if (E == eEntitySpawn)
@@ -1170,12 +1263,14 @@ void CLevel::OnAlifeSimulatorUnLoaded()
 {
 	MapManager().ResetStorage();
 	GameTaskManager().ResetStorage();
+	delete_data(m_debug_render_queue);
 }
 
 void CLevel::OnAlifeSimulatorLoaded()
 {
 	MapManager().ResetStorage();
 	GameTaskManager().ResetStorage();
+	delete_data(m_debug_render_queue);
 }
 
 void CLevel::OnSessionTerminate(LPCSTR reason)
diff --git a/src/xrGame/Level.h b/src/xrGame/Level.h
index 92a34bd..b88f915 100644
--- a/src/xrGame/Level.h
+++ b/src/xrGame/Level.h
@@ -33,10 +33,8 @@ class CZoneList;
 class message_filter;
 class demoplay_control;
 class demo_info;
-
-#ifdef DEBUG
 class CDebugRenderer;
-#endif
+class DBG_ScriptObject;
 
 extern float g_fov;
 
@@ -70,9 +68,7 @@ protected:
 	CSeniorityHierarchyHolder* m_seniority_hierarchy_holder = nullptr;
 	CClientSpawnManager* m_client_spawn_manager = nullptr;
 	CAutosaveManager* m_autosave_manager = nullptr;
-#ifdef DEBUG
     CDebugRenderer* m_debug_renderer = nullptr;
-#endif
 	CPHCommander* m_ph_commander = nullptr;
 	CPHCommander* m_ph_commander_scripts = nullptr;
 	CPHCommander* m_ph_commander_physics_worldstep = nullptr;
@@ -221,6 +217,19 @@ public:
 	virtual void OnEvent(EVENT E, u64 P1, u64 P2);
 	virtual void _BCL OnFrame(void);
 	virtual void OnRender();
+
+	enum DBG_RENDER_FLAGS
+	{
+		DBG_Script = 1 << 0,
+		DBG_SpaceRestrictors = 1 << 1,
+		DBG_GameGraph = 1 << 2
+	};
+
+	Flags32 m_debug_render_flags;
+	xr_map<u16, DBG_ScriptObject*> m_debug_render_queue;
+	xr_map<u16, DBG_ScriptObject*>* getScriptRenderQueue() { return &m_debug_render_queue; }
+	void ScriptDebugRender();
+
 	virtual shared_str OpenDemoFile(const char* demo_file_name);
 	virtual void net_StartPlayDemo();
 	void cl_Process_Event(u16 dest, u16 type, NET_Packet& P);
@@ -262,9 +271,7 @@ public:
 	IC CSeniorityHierarchyHolder& seniority_holder();
 	IC CClientSpawnManager& client_spawn_manager();
 	IC CAutosaveManager& autosave_manager();
-#ifdef DEBUG
     IC CDebugRenderer& debug_renderer();
-#endif
 	void __stdcall script_gc(); // GC-cycle
 	IC CPHCommander& ph_commander();
 	IC CPHCommander& ph_commander_scripts();
@@ -375,13 +382,11 @@ IC CAutosaveManager& CLevel::autosave_manager()
 	return *m_autosave_manager;
 }
 
-#ifdef DEBUG
 IC CDebugRenderer& CLevel::debug_renderer()
 {
     VERIFY(m_debug_renderer);
     return *m_debug_renderer;
 }
-#endif
 
 IC CPHCommander& CLevel::ph_commander()
 {
diff --git a/src/xrGame/LevelDebugScript.cpp b/src/xrGame/LevelDebugScript.cpp
new file mode 100644
index 0000000..fa0dd29
--- /dev/null
+++ b/src/xrGame/LevelDebugScript.cpp
@@ -0,0 +1,20 @@
+#pragma once
+#include "StdAfx.h"
+#include "LevelDebugScript.h"
+#include "Level.h"
+#include "debug_renderer.h"
+
+void DBG_ScriptSphere::Render()
+{
+	Level().debug_renderer().draw_ellipse(m_mat, m_color.get(), m_hud);
+}
+
+void DBG_ScriptBox::Render()
+{
+	Level().debug_renderer().draw_obb(m_mat, m_size, m_color.get(), m_hud);
+}
+
+void DBG_ScriptLine::Render()
+{
+	Level().debug_renderer().draw_line(Fidentity, m_point_a, m_point_b, m_color.get(), m_hud);
+}
\ No newline at end of file
diff --git a/src/xrGame/LevelDebugScript.h b/src/xrGame/LevelDebugScript.h
new file mode 100644
index 0000000..7e00c89
--- /dev/null
+++ b/src/xrGame/LevelDebugScript.h
@@ -0,0 +1,90 @@
+#pragma once
+
+class DBG_ScriptSphere;
+class DBG_ScriptBox;
+class DBG_ScriptLine;
+
+enum DebugRenderType
+{
+	eDBGLine = 0,
+	eDBGSphere,
+	eDBGBox,
+	eDBGUndef
+};
+
+class DBG_ScriptObject
+{
+public:
+	Fcolor m_color;
+	bool m_visible;
+	bool m_hud;
+
+	DBG_ScriptObject()
+	{
+		m_color.set(1, 0, 0, 1);
+		m_visible = true;
+		m_hud = false;
+	}
+
+	virtual ~DBG_ScriptObject() {}
+
+	virtual DBG_ScriptSphere* cast_dbg_sphere() { return nullptr; }
+	virtual DBG_ScriptBox* cast_dbg_box() { return nullptr; }
+	virtual DBG_ScriptLine* cast_dbg_line() { return nullptr; }
+
+	virtual void Render() {}
+};
+
+class DBG_ScriptSphere : public DBG_ScriptObject
+{
+public:
+	Fmatrix m_mat;
+
+	DBG_ScriptSphere()
+	{
+		m_mat = Fidentity;
+	}
+
+	virtual ~DBG_ScriptSphere() {}
+
+	virtual DBG_ScriptSphere* cast_dbg_sphere() { return this; }
+
+	virtual void Render();
+};
+
+class DBG_ScriptBox : public DBG_ScriptObject
+{
+public:
+	Fmatrix m_mat;
+	Fvector m_size;
+
+	DBG_ScriptBox()
+	{
+		m_mat = Fidentity;
+		m_size.set(1, 1, 1);
+	}
+
+	virtual ~DBG_ScriptBox() {}
+
+	virtual DBG_ScriptBox* cast_dbg_box() { return this; }
+
+	virtual void Render();
+};
+
+class DBG_ScriptLine : public DBG_ScriptObject
+{
+public:
+	Fvector m_point_a, m_point_b;
+
+	DBG_ScriptLine()
+	{
+		m_point_a.set(0, 0, 0);
+		m_point_b.set(0, 0, 0);
+	}
+
+	virtual ~DBG_ScriptLine() {}
+
+	virtual DBG_ScriptLine* cast_dbg_line() { return this; }
+
+	virtual void Render();
+};
\ No newline at end of file
diff --git a/src/xrGame/Level_Bullet_Manager.cpp b/src/xrGame/Level_Bullet_Manager.cpp
index c68bb69..7e3b612 100644
--- a/src/xrGame/Level_Bullet_Manager.cpp
+++ b/src/xrGame/Level_Bullet_Manager.cpp
@@ -12,6 +12,7 @@
 #include "game_cl_base_weapon_usage_statistic.h"
 #include "game_cl_mp.h"
 #include "reward_event_generator.h"
+#include "material_manager.h"
 
 #include "../Include/xrRender/UIRender.h"
 #include "../Include/xrRender/Kinematics.h"
@@ -41,6 +42,7 @@ SBullet::~SBullet()
 {
 }
 
+u32 SBullet::bulletCount = 0;
 
 void SBullet::Init(const Fvector& position,
                    const Fvector& direction,
@@ -106,6 +108,37 @@ void SBullet::Init(const Fvector& position,
 
 	targetID = 0;
 	density_mode = 0;
+
+	catridgeSection = cartridge.m_ammoSect.c_str();
+	bulletId = bulletCount++;
+}
+
+// demonized: construct bullet table for Lua
+void populateBulletTable (
+	luabind::object& table,
+	const Fvector& position,
+	const Fvector& direction,
+	float speed,
+	float fly_dist,
+	LPCSTR catridgeSection,
+	u32 bulletId,
+	u16 weaponId,
+	u16 parentId,
+	u16 targetId,
+	LPCSTR materialName,
+	float life_time
+) {
+	table["position"] = position;
+	table["direction"] = direction;
+	table["speed"] = speed;
+	table["distance"] = fly_dist;
+	table["section"] = catridgeSection;
+	table["bullet_id"] = bulletId;
+	table["weapon_id"] = weaponId;
+	table["parent_id"] = parentId;
+	table["target_id"] = targetId;
+	table["material"] = materialName;
+	table["life_time"] = life_time;
 }
 
 
@@ -229,6 +262,28 @@ void CBulletManager::AddBullet(const Fvector& position,
 	            e_hit_type, maximum_distance, cartridge, air_resistance_factor, SendHit, iShotNum);
 	//	bullet.frame_num			= Device.dwFrame;
 	bullet.flags.aim_bullet = AimBullet;
+
+	// demonized - bullet on init callback
+	luabind::functor<void> funct;
+	if (ai().script_engine().functor("_G.CBulletOnInit", funct)) {
+		luabind::object table = luabind::newtable(ai().script_engine().lua());
+		populateBulletTable(
+			table,
+			position,
+			direction,
+			starting_speed,
+			0,
+			bullet.catridgeSection,
+			bullet.bulletId,
+			bullet.weapon_id,
+			bullet.parent_id,
+			65535,
+			NULL,
+			bullet.life_time
+		);
+		funct(table);
+	}
+
 	if (!IsGameTypeSingle())
 	{
 		if (SendHit)
@@ -836,6 +891,13 @@ bool CBulletManager::trajectory_check_error(
 	bullet.start_velocity = Fvector().mul(bullet.dir, bullet.speed);
 	bullet.born_time += iFloor(data.collide_time * 1000.f);
 	bullet.life_time = 0.f;
+
+	// Add RQ range to the bullet fly dist
+	for (auto i = storage.r_begin(); i != storage.r_end();) {
+		bullet.fly_dist += i->range;
+		break;
+	}
+	
 	return (false);
 }
 
@@ -867,6 +929,41 @@ static bool try_update_bullet(SBullet& bullet, Fvector const& gravity, float con
 	bullet.bullet_pos = new_position;
 	bullet.dir = Fvector(new_velocity).normalize_safe();
 	bullet.life_time = time;
+
+	// demonized: bullet on update callback
+	luabind::functor<void> funct;
+	if (ai().script_engine().functor("_G.CBulletOnUpdate", funct)) {
+		luabind::object table = luabind::newtable(ai().script_engine().lua());
+		populateBulletTable(
+			table,
+			bullet.bullet_pos,
+			bullet.dir,
+			bullet.speed,
+			bullet.fly_dist,
+			bullet.catridgeSection,
+			bullet.bulletId,
+			bullet.weapon_id,
+			bullet.parent_id,
+			65535,
+			NULL,
+			bullet.life_time
+		);
+		funct(table);
+
+		/*
+		luabind::object output = funct(table);
+
+		if (output && output.type() == LUA_TTABLE) {
+			bullet.bullet_pos = luabind::object_cast<Fvector>(table["position"]);
+			bullet.dir = luabind::object_cast<Fvector>(table["direction"]);
+			bullet.speed = luabind::object_cast<float>(table["speed"]);
+			bullet.fly_dist = luabind::object_cast<float>(table["distance"]);
+			bullet.weapon_id = luabind::object_cast<u16>(table["weapon_id"]);
+			bullet.parent_id = luabind::object_cast<u16>(table["parent_id"]);
+		}
+		*/
+	}
+
 	return (true);
 }
 
@@ -1108,16 +1205,62 @@ void CBulletManager::CommitEvents() // @ the start of frame
 	for (u32 _it = 0; _it < m_Events.size(); _it++)
 	{
 		_event& E = m_Events[_it];
+		SBullet* bullet = &E.bullet;
+		Fvector& end_point = E.point;
+		SGameMtl* mt = GMLib.GetMaterialByIdx(E.tgt_material);
 		switch (E.Type)
 		{
 		case EVENT_HIT:
 			{
+				// demonized: bullet on impact callback
+				luabind::functor<void> funct;
+				if (ai().script_engine().functor("_G.CBulletOnImpact", funct)) {
+					luabind::object table = luabind::newtable(ai().script_engine().lua());
+					populateBulletTable(
+						table,
+						!fis_zero(end_point.x) && !fis_zero(end_point.y) && !fis_zero(end_point.z) ? end_point : bullet->bullet_pos,
+						bullet->dir,
+						bullet->speed,
+						bullet->fly_dist + E.R.range,
+						bullet->catridgeSection,
+						bullet->bulletId,
+						bullet->weapon_id,
+						bullet->parent_id,
+						E.dynamic && E.R.O ? E.R.O->ID() : 65535,
+						mt ? mt->m_Name.c_str() : NULL,
+						bullet->life_time
+					);
+					funct(table);
+				}
+
 				if (E.dynamic) DynamicObjectHit(E);
 				else StaticObjectHit(E);
 			}
+
 			break;
 		case EVENT_REMOVE:
 			{
+				// demonized: bullet on remove callback
+				luabind::functor<void> funct;
+				if (ai().script_engine().functor("_G.CBulletOnRemove", funct)) {
+					luabind::object table = luabind::newtable(ai().script_engine().lua());
+					populateBulletTable(
+						table,
+						!fis_zero(end_point.x) && !fis_zero(end_point.y) && !fis_zero(end_point.z) ? end_point : bullet->bullet_pos,
+						bullet->dir,
+						bullet->speed,
+						bullet->fly_dist,
+						bullet->catridgeSection,
+						bullet->bulletId,
+						bullet->weapon_id,
+						bullet->parent_id,
+						65535,
+						NULL,
+						bullet->life_time
+					);
+					funct(table);
+				}
+
 				if (E.bullet.flags.allow_sendhit && GameID() != eGameIDSingle)
 					Game().m_WeaponUsageStatistic->OnBullet_Remove(&E.bullet);
 				m_Bullets[E.tgt_material] = m_Bullets.back();
diff --git a/src/xrGame/Level_Bullet_Manager.h b/src/xrGame/Level_Bullet_Manager.h
index 80938ef..5fb4aab 100644
--- a/src/xrGame/Level_Bullet_Manager.h
+++ b/src/xrGame/Level_Bullet_Manager.h
@@ -45,6 +45,9 @@ struct SBullet
 
 	u16 parent_id; //ID ïåðñîíàæà êîòîðûé èíèöèðîâàë äåéñòâèå
 	u16 weapon_id; //ID îðóæèÿ èç êîòîðîãî áûëà âûïóùåíû ïóëÿ
+	LPCSTR catridgeSection;
+	static u32 bulletCount;
+	u32 bulletId;
 
 	float fly_dist; //äèñòàíöèÿ êîòîðóþ ïóëÿ ïðîëåòåëà
 	Fvector tracer_start_position;
diff --git a/src/xrGame/Level_input.cpp b/src/xrGame/Level_input.cpp
index 3d06b55..4b86cb4 100644
--- a/src/xrGame/Level_input.cpp
+++ b/src/xrGame/Level_input.cpp
@@ -56,7 +56,18 @@ void CLevel::IR_OnMouseWheel(int direction)
 
 	/* avo: script callback */
 #ifdef MOUSE_INPUT_CALLBACKS
-    if (g_actor) g_actor->callback(GameObject::eMouseWheel)(direction);
+    if (g_actor) {
+        // demonized: add mouse wheel callback with consuming input
+        luabind::functor<bool> funct;
+        if (ai().script_engine().functor("_G.COnMouseWheel", funct))
+        {
+            if (!funct(direction))
+            {
+                return;
+            }
+        }
+        //g_actor->callback(GameObject::eMouseWheel)(direction);
+    }
 #endif
 	/* avo: end */
 
@@ -114,6 +125,12 @@ void CLevel::IR_OnMouseMove(int dx, int dy)
 		IInputReceiver* IR = smart_cast<IInputReceiver*>(smart_cast<CGameObject*>(CURRENT_ENTITY()));
 		if (IR) IR->IR_OnMouseMove(dx, dy);
 	}
+
+    POINT p;
+    p.x = Device.dwWidth / 2;
+    p.y = Device.dwHeight / 2;
+    ClientToScreen(Device.m_hWnd, &p);
+    SetCursorPos(p.x, p.y);
 }
 
 // Îáðàáîòêà íàæàòèÿ êëàâèø
diff --git a/src/xrGame/MainMenu.cpp b/src/xrGame/MainMenu.cpp
index ef05e45..c8d3c33 100644
--- a/src/xrGame/MainMenu.cpp
+++ b/src/xrGame/MainMenu.cpp
@@ -399,6 +399,8 @@ bool CMainMenu::OnRenderPPUI_query()
 
 
 extern void draw_wnds_rects();
+extern bool use_reshade;
+extern void render_reshade_effects();
 
 void CMainMenu::OnRender()
 {
@@ -408,7 +410,11 @@ void CMainMenu::OnRender()
 	if (g_pGameLevel)
 		Render->Calculate();
 
+	if (use_reshade)
+		render_reshade_effects();
+
 	Render->Render();
+
 	if (!OnRenderPPUI_query())
 	{
 		DoRenderDialogs();
@@ -424,6 +430,9 @@ void CMainMenu::OnRenderPPUI_main()
 	if (m_Flags.test(flGameSaveScreenshot))
 		return;
 
+	if (use_reshade)
+		render_reshade_effects();
+
 	UI().pp_start();
 
 	if (OnRenderPPUI_query())
diff --git a/src/xrGame/NewZoomFlag.h b/src/xrGame/NewZoomFlag.h
new file mode 100644
index 0000000..ec29839
--- /dev/null
+++ b/src/xrGame/NewZoomFlag.h
@@ -0,0 +1,13 @@
+#pragma once
+//New_zoom
+enum
+{
+	NEW_ZOOM = (1 << 0),
+	SDS_ZOOM = (1 << 1),
+	SDS_SPEED = (1 << 3),
+	SDS = (1 << 4),
+
+};
+
+extern Flags32 zoomFlags;
+//
\ No newline at end of file
diff --git a/src/xrGame/PHMovementControl.cpp b/src/xrGame/PHMovementControl.cpp
index 7836b3c..aba30d5 100644
--- a/src/xrGame/PHMovementControl.cpp
+++ b/src/xrGame/PHMovementControl.cpp
@@ -521,8 +521,9 @@ void CPHMovementControl::PathNearestPoint(const xr_vector<DetailPathManager::STr
 
 	Fvector path_point, vtemp;
 	float temp;
+	int i = 0;
 
-	for (int i = 0; i < m_path_size - 1; ++i)
+	for (; i < m_path_size - 1; ++i)
 	{
 		const Fvector &first = path[i].position, &second = path[i + 1].position;
 		from_first.sub(new_position, first);
@@ -609,8 +610,9 @@ void CPHMovementControl::PathNearestPointFindUp(const xr_vector<DetailPathManage
 	Fvector path_point, vtemp;
 	float temp;
 	dir.set(0, 0, 1);
+	int i = m_start_index;
 
-	for (int i = m_start_index; i < m_path_size - 1; ++i)
+	for (; i < m_path_size - 1; ++i)
 	{
 		const Fvector &first = path[i].position, &second = path[i + 1].position;
 		from_first.sub(new_position, first);
@@ -695,7 +697,9 @@ void CPHMovementControl::PathNearestPointFindDown(const xr_vector<DetailPathMana
 	float temp;
 	//(going down)
 	dir.set(0, 0, 1);
-	for (int i = m_start_index; i > 1; --i)
+	int i = m_start_index;
+
+	for (; i > 1; --i)
 	{
 		const Fvector &first = path[i - 1].position, &second = path[i].position;
 		from_first.sub(new_position, first);
@@ -1125,6 +1129,11 @@ void CPHMovementControl::PHReleaseObject()
 void CPHMovementControl::DestroyCharacter()
 {
 	VERIFY(m_character);
+
+	// Remove Grass bender if PHCharacter is not NULL
+	if (m_character->PhysicsRefObject() != NULL)
+		g_pGamePersistent->GrassBendersRemoveById(m_character->PhysicsRefObject()->ObjectID());
+
 	m_character->Destroy();
 	phcapture_destroy(m_capture);
 	//xr_delete(m_capture);
diff --git a/src/xrGame/PhraseScript.cpp b/src/xrGame/PhraseScript.cpp
index afe98a2..f0b01dc 100644
--- a/src/xrGame/PhraseScript.cpp
+++ b/src/xrGame/PhraseScript.cpp
@@ -53,7 +53,7 @@ bool CDialogScriptHelper::CheckInfo(const CInventoryOwner* pOwner) const
 		}
 	}
 
-	for (i = 0; i < m_DontHasInfo.size(); i++)
+	for (u32 i = 0; i < m_DontHasInfo.size(); i++)
 	{
 		if (Actor()->HasInfo(m_DontHasInfo[i]))
 		{
@@ -75,7 +75,7 @@ void CDialogScriptHelper::TransferInfo(const CInventoryOwner* pOwner) const
 	for (u32 i = 0; i < m_GiveInfo.size(); ++i)
 		Actor()->TransferInfo(m_GiveInfo[i], true);
 
-	for (i = 0; i < m_DisableInfo.size(); ++i)
+	for (u32 i = 0; i < m_DisableInfo.size(); ++i)
 		Actor()->TransferInfo(m_DisableInfo[i], false);
 }
 
diff --git a/src/xrGame/ScriptXMLInit.cpp b/src/xrGame/ScriptXMLInit.cpp
index 3c89e6d..6e490ca 100644
--- a/src/xrGame/ScriptXMLInit.cpp
+++ b/src/xrGame/ScriptXMLInit.cpp
@@ -37,6 +37,29 @@ void _attach_child(CUIWindow* _child, CUIWindow* _parent)
 		_parent->AttachChild(_child);
 }
 
+// demonized
+// Clear XML from BOM
+LPCSTR clearBOM(LPCSTR s) {
+	if (s[0] == (char)0xEF && s[1] == (char)0xBB && s[2] == (char)0xBF) {
+		LPCSTR new_s = s + 3;
+		return new_s;
+	}
+	return s;
+}
+
+// demonized
+// Send XML file contents to Lua for edit
+void XMLLuaCallback(CXml &m_xml, LPCSTR xml_string) {
+	xml_string = clearBOM(xml_string);
+	luabind::functor<LPCSTR> funct;
+	if (ai().script_engine().functor("_G.COnXmlRead", funct))
+	{
+		LPCSTR res = funct(m_xml.m_xml_file_name, xml_string);
+		//Msg("XMLLuaCallback, xml %s, contents %s", m_xml.m_xml_file_name, res);
+		m_xml.LoadFromString(res);
+	}
+}
+
 void CScriptXmlInit::ParseFile(LPCSTR xml_file)
 {
 	m_xml.Load(CONFIG_PATH, UI_PATH, xml_file);
diff --git a/src/xrGame/UIDosimeter.cpp b/src/xrGame/UIDosimeter.cpp
index 4bc899a..9088514 100644
--- a/src/xrGame/UIDosimeter.cpp
+++ b/src/xrGame/UIDosimeter.cpp
@@ -105,19 +105,9 @@ void CUIDosimeter::Draw()
 {
 	Fmatrix LM;
 	GetUILocatorMatrix(LM);
-
-	IUIRender::ePointType bk = UI().m_currentPointType;
-
-	UI().m_currentPointType = IUIRender::pttLIT;
-
 	UIRender->CacheSetXformWorld(LM);
-	UIRender->CacheSetCullMode(IUIRender::cmNONE);
-
-	UI().ScreenFrustumLIT().Clear();
-
 	CUIWindow::Draw();
-
-	UI().m_currentPointType = bk;
+	UI().ScreenFrustumLIT().Clear();
 }
 
 void CUIDosimeter::GetUILocatorMatrix(Fmatrix& _m)
diff --git a/src/xrGame/Weapon.cpp b/src/xrGame/Weapon.cpp
index 080f84d..29a56ee 100644
--- a/src/xrGame/Weapon.cpp
+++ b/src/xrGame/Weapon.cpp
@@ -42,6 +42,47 @@
 float f_weapon_deterioration = 1.0f;
 extern CUIXml* pWpnScopeXml;
 
+//////////
+extern float scope_radius;
+
+Flags32 zoomFlags = {};
+extern float n_zoom_step_count;
+float sens_multiple = 1.0f;
+
+
+float CWeapon::SDS_Radius(bool alt) {
+	shared_str scope_tex_name;
+	if (m_zoomtype == 0 && zoomFlags.test(SDS))
+	{
+		if (0 != (m_flagsAddOnState & CSE_ALifeItemWeapon::eWeaponAddonScope) && m_scopes.size())
+		{
+			scope_tex_name = pSettings->r_string(GetScopeName(), alt ? "scope_texture_alt" : "scope_texture");
+		}
+		else
+		{
+			scope_tex_name = READ_IF_EXISTS(pSettings, r_string, cNameSect(), alt ? "scope_texture_alt" : "scope_texture", NULL);
+		}
+
+		if (scope_tex_name != 0) {
+			auto item = listScopeRadii.find(scope_tex_name);
+			if (item != listScopeRadii.end()) {
+				return item->second;
+			}
+			else {
+				return 0.0;
+			}
+		}
+		else {
+			return 0.0;
+		}
+	}
+	else {
+		return 0.0;
+	}
+}
+
+//////////
+
 CWeapon::CWeapon()
 {
 	SetState(eHidden);
@@ -101,8 +142,13 @@ CWeapon::CWeapon()
 
 	//PP.RQ.range = 0.f;
 	//PP.RQ.set(NULL, 0.f, -1);
+
+	bHasBulletsToHide = false;
+	bullet_cnt = 0;
+	IsCustomReloadAvaible = false;
 }
 
+extern int scope_2dtexactive; //crookr
 CWeapon::~CWeapon()
 {
 	xr_delete(m_UIScope);
@@ -218,8 +264,32 @@ void CWeapon::UpdateFireDependencies_internal()
 	}
 }
 
-void CWeapon::UpdateUIScope()
-{
+void updateCurrentScope() {
+	if (!g_pGameLevel) return;
+
+	CInventoryOwner* pGameObject = smart_cast<CInventoryOwner*>(Level().Objects.net_Find(0));
+	if (pGameObject) {
+		if (pGameObject->inventory().ActiveItem()) {
+			CWeapon* weapon = smart_cast<CWeapon*>(pGameObject->inventory().ActiveItem());
+			if (weapon) {
+				weapon->UpdateZoomParams();
+			}
+		}
+	}
+}
+
+void CWeapon::UpdateZoomParams() {
+	//////////
+	m_zoom_params.m_fMinBaseZoomFactor = READ_IF_EXISTS(pSettings, r_float, cNameSect(), "min_scope_zoom_factor", 200.0f);
+
+
+	float zoom_multiple = 1.0f;
+	if (zoomFlags.test(SDS_ZOOM) && (SDS_Radius() > 0.0)) {
+		zoom_multiple = scope_scrollpower;
+	}
+
+	//////////
+
 	// Load scopes.xml if it's not loaded
 	if (pWpnScopeXml == nullptr)
 	{
@@ -230,30 +300,47 @@ void CWeapon::UpdateUIScope()
 	// update zoom factor
 	if (m_zoomtype == 2) //GL
 	{
+		m_zoom_params.m_bUseDynamicZoom = m_zoom_params.m_bUseDynamicZoom_GL || READ_IF_EXISTS(pSettings, r_bool, cNameSect(), "scope_dynamic_zoom_gl", false);
 		m_zoom_params.m_fScopeZoomFactor = g_player_hud->m_adjust_mode ? g_player_hud->m_adjust_zoom_factor[1] : READ_IF_EXISTS(pSettings, r_float, cNameSect(), "gl_zoom_factor", 0);
-	}
-	else if (m_zoomtype == 1) //Alt
+	} else if (m_zoomtype == 1) //Alt
 	{
-		m_zoom_params.m_fScopeZoomFactor = g_player_hud->m_adjust_mode ? g_player_hud->m_adjust_zoom_factor[2] : READ_IF_EXISTS(pSettings, r_float, cNameSect(), "scope_zoom_factor_alt", 0);
-	}
-	else //Main Sight
+		m_zoom_params.m_bUseDynamicZoom = m_zoom_params.m_bUseDynamicZoom_Alt || READ_IF_EXISTS(pSettings, r_bool, cNameSect(), "scope_dynamic_zoom_alt", false);
+		m_zoom_params.m_fScopeZoomFactor = (g_player_hud->m_adjust_mode ? g_player_hud->m_adjust_zoom_factor[2] : READ_IF_EXISTS(pSettings, r_float, cNameSect(), "scope_zoom_factor_alt", 0)) / (READ_IF_EXISTS(pSettings, r_string, cNameSect(), "scope_texture_alt", NULL) && zoomFlags.test(SDS_ZOOM) && (SDS_Radius(true) > 0.0) ? zoom_multiple : 1);
+	} else //Main Sight
 	{
+		m_zoom_params.m_bUseDynamicZoom = m_zoom_params.m_bUseDynamicZoom_Primary || READ_IF_EXISTS(pSettings, r_bool, cNameSect(), "scope_dynamic_zoom", false);
 		if (g_player_hud->m_adjust_mode)
 		{
-			m_zoom_params.m_fScopeZoomFactor = g_player_hud->m_adjust_zoom_factor[0];
-		}
-		else if (ALife::eAddonPermanent != m_eScopeStatus && 0 != (m_flagsAddOnState & CSE_ALifeItemWeapon::eWeaponAddonScope) && m_scopes.size())
+			m_zoom_params.m_fScopeZoomFactor = g_player_hud->m_adjust_zoom_factor[0] / zoom_multiple;
+		} else if (ALife::eAddonPermanent != m_eScopeStatus && 0 != (m_flagsAddOnState & CSE_ALifeItemWeapon::eWeaponAddonScope) && m_scopes.size())
 		{
-			m_zoom_params.m_fScopeZoomFactor = pSettings->r_float(GetScopeName(), "scope_zoom_factor");
-		}
-		else
+			m_zoom_params.m_fScopeZoomFactor = pSettings->r_float(GetScopeName(), "scope_zoom_factor") / zoom_multiple;
+		} else
 		{
-			m_zoom_params.m_fScopeZoomFactor = m_zoom_params.m_fBaseZoomFactor;
+			m_zoom_params.m_fScopeZoomFactor = m_zoom_params.m_fBaseZoomFactor / zoom_multiple;
+		}
+	}
+
+	if (IsZoomed()) {
+		scope_radius = SDS_Radius();
+		if (m_zoomtype == 0 && zoomFlags.test(SDS_SPEED) && (scope_radius > 0.0)) {
+			sens_multiple = scope_scrollpower;
+		} else {
+			sens_multiple = 1.0f;
+		}
+
+
+		if (m_zoom_params.m_bUseDynamicZoom) {
+			SetZoomFactor(m_fRTZoomFactor / zoom_multiple);
+		} else {
+			SetZoomFactor(m_zoom_params.m_fScopeZoomFactor);
 		}
 	}
+}
 
-	if (IsZoomed())
-		m_zoom_params.m_fCurrentZoomFactor = m_zoom_params.m_fScopeZoomFactor;
+void CWeapon::UpdateUIScope()
+{
+	UpdateZoomParams();
 
 	// Change or remove scope texture
 	shared_str scope_tex_name;
@@ -276,6 +363,7 @@ void CWeapon::UpdateUIScope()
 	if (!g_dedicated_server)
 	{
 		xr_delete(m_UIScope);
+		scope_2dtexactive = 0; //crookr
 
 		if (!scope_tex_name || scope_tex_name.equal("none") || g_player_hud->m_adjust_mode)
 			return;
@@ -290,6 +378,7 @@ void CWeapon::SwitchZoomType()
 	if (m_zoomtype == 0 && (m_altAimPos || g_player_hud->m_adjust_mode))
 	{
 		m_zoomtype = 1;
+        m_zoom_params.m_bUseDynamicZoom = m_zoom_params.m_bUseDynamicZoom_Alt || READ_IF_EXISTS(pSettings, r_bool, cNameSect(), "scope_dynamic_zoom_alt", false);
 	}
 	else if (IsGrenadeLauncherAttached())
 	{
@@ -299,6 +388,7 @@ void CWeapon::SwitchZoomType()
 	else if (m_zoomtype != 0)
 	{
 		m_zoomtype = 0;
+        m_zoom_params.m_bUseDynamicZoom = m_zoom_params.m_bUseDynamicZoom_Primary || READ_IF_EXISTS(pSettings, r_bool, cNameSect(), "scope_dynamic_zoom", false);
 	}
 
 	UpdateUIScope();
@@ -641,6 +731,19 @@ void CWeapon::Load(LPCSTR section)
 	m_shoot_shake_mat.identity();
 }
 
+// demonized: World model on stalkers adjustments
+void CWeapon::set_mFirePoint(Fvector &fire_point) {
+	vLoadedFirePoint = fire_point;
+}
+
+void CWeapon::set_mFirePoint2(Fvector &fire_point) {
+	vLoadedFirePoint2 = fire_point;
+}
+
+void CWeapon::set_mShellPoint(Fvector &fire_point) {
+	vLoadedShellPoint = fire_point;
+}
+
 void CWeapon::LoadFireParams(LPCSTR section)
 {
 	cam_recoil.Dispersion = deg2rad(pSettings->r_float(section, "cam_dispersion"));
@@ -1150,11 +1253,22 @@ bool CWeapon::Action(u16 cmd, u32 flags)
 						{
 							if (pActor && pActor->is_safemode())
 								pActor->set_safemode(false);
+
+							if (GetState() != eAimStart && HudAnimationExist("anm_idle_aim_start"))
+								SwitchState(eAimStart);
+							else if (GetState() != eIdle)
+								SwitchState(eIdle);
+
 							OnZoomIn();
 						}
 					}
 					else
+					{
+						if (GetState() != eAimEnd && HudAnimationExist("anm_idle_aim_end"))
+							SwitchState(eAimEnd);
+
 						OnZoomOut();
+					}
 				}
 			}
 			else
@@ -1165,11 +1279,21 @@ bool CWeapon::Action(u16 cmd, u32 flags)
 					{
 						if (pActor && pActor->is_safemode())
 							pActor->set_safemode(false);
+
+						if (GetState() != eAimStart && HudAnimationExist("anm_idle_aim_start"))
+							SwitchState(eAimStart);
+						else if (GetState() != eIdle)
+							SwitchState(eIdle);
+
 						OnZoomIn();
 					}
 				}
 				else if (IsZoomed())
+				{
+					if (GetState() != eAimEnd && HudAnimationExist("anm_idle_aim_end"))
+						SwitchState(eAimEnd);
 					OnZoomOut();
+				}
 			}
 			return true;
 		}
@@ -1430,6 +1554,30 @@ void CWeapon::Reload()
 	OnZoomOut();
 }
 
+void CWeapon::HUD_VisualBulletUpdate(bool force, int force_idx)
+{
+	if (!bHasBulletsToHide)
+		return;
+
+	if (!GetHUDmode())	return;
+
+	bool hide = true;
+
+	//Msg("Print %d bullets", last_hide_bullet);
+
+	if (last_hide_bullet == bullet_cnt || force) hide = false;
+
+	for (u8 b = 0; b < bullet_cnt; b++)
+	{
+		u16 bone_id = HudItemData()->m_model->LL_BoneID(bullets_bones[b]);
+
+		if (bone_id != BI_NONE)
+			HudItemData()->set_bone_visible(bullets_bones[b], !hide);
+
+		if (b == last_hide_bullet) hide = false;
+	}
+}
+
 bool CWeapon::IsGrenadeLauncherAttached() const
 {
 	return (ALife::eAddonAttachable == m_eGrenadeLauncherStatus &&
@@ -1616,11 +1764,22 @@ float CWeapon::CurrentZoomFactor()
 
 void CWeapon::OnZoomIn()
 {
+    //////////
+    scope_radius = SDS_Radius();
+
+	if ((scope_radius > 0.0) && zoomFlags.test(SDS_SPEED)) {
+		sens_multiple = scope_scrollpower;
+	}
+	else {
+		sens_multiple = 1.0f;
+	}
+    //////////
+    
 	m_zoom_params.m_bIsZoomModeNow = true;
 	if (m_zoom_params.m_bUseDynamicZoom)
-		SetZoomFactor(m_fRTZoomFactor);
+		SetZoomFactor(scope_radius > 0.0 ? m_fRTZoomFactor / scope_scrollpower : m_fRTZoomFactor);
 	else
-		m_zoom_params.m_fCurrentZoomFactor = CurrentZoomFactor();
+		SetZoomFactor(CurrentZoomFactor());
 
 	if (m_zoom_params.m_bZoomDofEnabled && !IsScopeAttached())
 		GamePersistent().SetEffectorDOF(m_zoom_params.m_ZoomDof);
@@ -1650,7 +1809,11 @@ void CWeapon::OnZoomIn()
 void CWeapon::OnZoomOut()
 {
 	m_zoom_params.m_bIsZoomModeNow = false;
-	m_fRTZoomFactor = GetZoomFactor(); //store current
+    if (m_zoom_params.m_bUseDynamicZoom)
+    {
+        m_fRTZoomFactor = scope_radius > 0.0 ? GetZoomFactor() * scope_scrollpower : GetZoomFactor(); //store current
+    }
+    
 	m_zoom_params.m_fCurrentZoomFactor = g_fov;
 
 	GamePersistent().RestoreEffectorDOF();
@@ -1668,6 +1831,11 @@ void CWeapon::OnZoomOut()
 	}
 
 	g_player_hud->updateMovementLayerState();
+    
+    scope_radius = 0.0;
+    scope_2dtexactive = 0;
+    sens_multiple = 1.0f;
+
 }
 
 CUIWindow* CWeapon::ZoomTexture()
@@ -1675,7 +1843,10 @@ CUIWindow* CWeapon::ZoomTexture()
 	if (UseScopeTexture())
 		return m_UIScope;
 	else
+	{
+		scope_2dtexactive = 0; //crookr
 		return NULL;
+	}
 }
 
 void CWeapon::SwitchState(u32 S)
@@ -1775,6 +1946,21 @@ void CWeapon::reload(LPCSTR section)
 	m_ef_weapon_type = READ_IF_EXISTS(pSettings, r_u32, section, "ef_weapon_type", u32(-1));
 }
 
+// demonized: World model on stalkers adjustments
+void CWeapon::set_mOffset(Fvector position, Fvector orientation) {
+	orientation.mul(PI / 180.f);
+
+	m_Offset.setHPB(orientation.x, orientation.y, orientation.z);
+	m_Offset.translate_over(position);
+}
+
+void CWeapon::set_mStrapOffset(Fvector position, Fvector orientation) {
+	orientation.mul(PI / 180.f);
+
+	m_StrapOffset.setHPB(orientation.x, orientation.y, orientation.z);
+	m_StrapOffset.translate_over(position);
+}
+
 void CWeapon::create_physic_shell()
 {
 	CPhysicsShellHolder::create_physic_shell();
@@ -2516,6 +2702,9 @@ void CWeapon::render_item_ui()
 
 	ZoomTexture()->Update();
 	ZoomTexture()->Draw();
+
+	//crookr
+	scope_2dtexactive = ZoomTexture()->IsShown() ? 1 : 0;
 }
 
 bool CWeapon::unlimited_ammo()
@@ -2697,16 +2886,46 @@ bool CWeapon::IsHudModeNow()
 	return (HudItemData() != NULL);
 }
 
+void NewGetZoomData(const float scope_factor, float& delta, float& min_zoom_factor, float zoom, float min_zoom)
+{
+	
+	float def_fov = float(g_fov);
+	float min_zoom_k = 0.3f;
+	float delta_factor_total = def_fov - scope_factor;
+	VERIFY(delta_factor_total > 0);
+	float loc_min_zoom_factor = ((atan(tan(def_fov * (0.5 * PI / 180)) / g_ironsights_factor) / (0.5 * PI / 180)) / 0.75f) * (scope_radius > 0.0 ? scope_scrollpower : 1);
+
+	//Msg("min zoom factor %f, min zoom %f, loc min zoom factor %f", min_zoom_factor, min_zoom, loc_min_zoom_factor);
+
+	if (min_zoom < loc_min_zoom_factor) {
+		min_zoom_factor = min_zoom;
+	}
+	else {
+		min_zoom_factor = loc_min_zoom_factor;
+	}
+
+	delta = ((delta_factor_total * (1 - min_zoom_k)) / n_zoom_step_count) * (zoom / def_fov);
+}
+
 void CWeapon::ZoomInc()
 {
 	if (!IsScopeAttached()) return;
 	if (!m_zoom_params.m_bUseDynamicZoom) return;
 	float delta, min_zoom_factor;
-	GetZoomData(m_zoom_params.m_fScopeZoomFactor, delta, min_zoom_factor);
-
-	float f = GetZoomFactor() - delta;
-	clamp(f, m_zoom_params.m_fScopeZoomFactor, min_zoom_factor);
-	SetZoomFactor(f);
+	float power = scope_radius > 0.0 ? scope_scrollpower : 1;
+	//
+	if (zoomFlags.test(NEW_ZOOM)) {
+		NewGetZoomData(m_zoom_params.m_fScopeZoomFactor * power, delta, min_zoom_factor, GetZoomFactor() * power, m_zoom_params.m_fMinBaseZoomFactor);
+	}
+	else {
+        GetZoomData(m_zoom_params.m_fScopeZoomFactor * power, delta, min_zoom_factor);
+	}
+	//
+	float f = GetZoomFactor() * power - delta;
+	clamp(f, m_zoom_params.m_fScopeZoomFactor * power, min_zoom_factor);
+	SetZoomFactor(f / power);
+	//
+	m_fRTZoomFactor = GetZoomFactor() * power;
 }
 
 void CWeapon::ZoomDec()
@@ -2714,11 +2933,20 @@ void CWeapon::ZoomDec()
 	if (!IsScopeAttached()) return;
 	if (!m_zoom_params.m_bUseDynamicZoom) return;
 	float delta, min_zoom_factor;
-	GetZoomData(m_zoom_params.m_fScopeZoomFactor, delta, min_zoom_factor);
-
-	float f = GetZoomFactor() + delta;
-	clamp(f, m_zoom_params.m_fScopeZoomFactor, min_zoom_factor);
-	SetZoomFactor(f);
+	float power = scope_radius > 0.0 ? scope_scrollpower : 1;
+	//
+	if (zoomFlags.test(NEW_ZOOM)) {
+		NewGetZoomData(m_zoom_params.m_fScopeZoomFactor * power, delta, min_zoom_factor, GetZoomFactor() * power, m_zoom_params.m_fMinBaseZoomFactor);
+	}
+	else {
+        GetZoomData(m_zoom_params.m_fScopeZoomFactor * power, delta, min_zoom_factor);
+	}
+	//
+	float f = GetZoomFactor() * power + delta;
+	clamp(f, m_zoom_params.m_fScopeZoomFactor * power, min_zoom_factor);
+	SetZoomFactor(f / power);
+	//
+	m_fRTZoomFactor = GetZoomFactor() * power;
 }
 
 u32 CWeapon::Cost() const
diff --git a/src/xrGame/Weapon.h b/src/xrGame/Weapon.h
index 9880065..ac0acc3 100644
--- a/src/xrGame/Weapon.h
+++ b/src/xrGame/Weapon.h
@@ -14,6 +14,8 @@
 
 #include "CameraRecoil.h"
 
+#include "NewZoomFlag.h"
+
 class CEntity;
 class ENGINE_API CMotionDef;
 class CSE_ALifeItemWeapon;
@@ -26,6 +28,11 @@ class CNightVisionEffector;
 
 extern float f_weapon_deterioration;
 
+extern std::map<shared_str, float> listScopeRadii;
+
+extern float scope_scrollpower;
+extern float sens_multiple;
+
 struct PickParam
 {
 	collide::rq_result RQ;
@@ -81,6 +88,16 @@ public:
 	IC float GetSecondVPZoomFactor() const { return m_zoom_params.m_fSecondVPFovFactor; }
 	IC float IsSecondVPZoomPresent() const { return GetSecondVPZoomFactor() > 0.005f; }
 
+
+	// Up
+	// Magazine system & etc
+	xr_vector<shared_str> bullets_bones;
+	int bullet_cnt;
+	int last_hide_bullet;
+	bool bHasBulletsToHide;
+
+	virtual void HUD_VisualBulletUpdate(bool force = false, int force_idx = -1);
+
 	void UpdateSecondVP();
 
 	virtual void UpdateCL();
@@ -103,6 +120,14 @@ public:
 
 	virtual void reinit();
 	virtual void reload(LPCSTR section);
+
+	// demonized: World model on stalkers adjustments
+	void set_mOffset(Fvector position, Fvector orientation);
+	void set_mStrapOffset(Fvector position, Fvector orientation);
+	void set_mFirePoint(Fvector &fire_point);
+	void set_mFirePoint2(Fvector &fire_point);
+	void set_mShellPoint(Fvector &fire_point);
+
 	virtual void create_physic_shell();
 	virtual void activate_physic_shell();
 	virtual void setup_physic_shell();
@@ -142,6 +167,8 @@ public:
 		eMisfire,
 		eSwitch,
 		eSwitchMode,
+		eAimStart,
+		eAimEnd,
 	};
 
 	enum EWeaponSubStates
@@ -149,6 +176,7 @@ public:
 		eSubstateReloadBegin = 0,
 		eSubstateReloadInProcess,
 		eSubstateReloadEnd,
+		eSubstateReloadInProcessEmptyEnd,
 	};
 
 	enum
@@ -195,6 +223,8 @@ protected:
 public:
 	u8 m_sub_state;
 
+	bool IsCustomReloadAvaible;
+
 	bool IsGrenadeLauncherAttached() const;
 	bool IsScopeAttached() const;
 	bool IsSilencerAttached() const;
@@ -317,6 +347,7 @@ protected:
 
 	struct SZoomParams
 	{
+        float m_fMinBaseZoomFactor;
 		bool m_bZoomEnabled;
 		bool m_bHideCrosshairInZoom;
 		bool m_bZoomDofEnabled;
@@ -331,6 +362,9 @@ protected:
 		Fvector4 m_ReloadDof;
 		Fvector4 m_ReloadEmptyDof; //Swartz: reload when empty mag. DOF
 		BOOL m_bUseDynamicZoom;
+		BOOL m_bUseDynamicZoom_Primary;
+		BOOL m_bUseDynamicZoom_Alt;
+		BOOL m_bUseDynamicZoom_GL;
 		shared_str m_sUseZoomPostprocess;
 		shared_str m_sUseBinocularVision;
 		CBinocularsVision* m_pVision;
@@ -386,7 +420,16 @@ public:
 	LPCSTR GetScopeNameScript() const { return *GetScopeName(); }
 	float GetFireDispersionScript() const { return fireDispersionBase; }
 	float RPMScript() const { return fOneShotTime; }
+	float RealRPMScript() const { return 60.0f / fOneShotTime; } // Return actual RPM like in configs
 	float ModeRPMScript() const { return fModeShotTime; }
+	float ModeRealRPMScript() const { return 60.0f / fModeShotTime; }
+
+	//Setters
+	void SetFireDispersionScript(float val) { fireDispersionBase = val; }
+	void SetRPM(float newOneShotTime) { fOneShotTime = newOneShotTime; } // Input - time between shots like received from getter
+	void SetRealRPM(float rpm) { fOneShotTime = 60.0f / rpm; } // Input - actual RPM like in configs
+	void SetModeRPM(float newOneShotTime) { fModeShotTime = newOneShotTime; } // Input - time between shots like received from getter
+	void SetModeRealRPM(float rpm) { fModeShotTime = 60.0f / rpm; } // Input - actual RPM like in configs
 
 	virtual float Weight() const;
 	virtual u32 Cost() const;
@@ -452,6 +495,7 @@ public:
 	//virtual collide::rq_result& GetRQ() { return PP.RQ; }
 	//virtual void net_Relcase(CObject* object);
 	Fmatrix m_shoot_shake_mat;
+	void UpdateZoomParams();
 
 protected:
 	virtual void UpdateFireDependencies_internal();
@@ -563,6 +607,42 @@ public:
 	CameraRecoil cam_recoil; // simple mode (walk, run)
 	CameraRecoil zoom_cam_recoil; // using zoom =(ironsight or scope)
 
+	// Getters
+	float GetCamRelaxSpeed() { return cam_recoil.RelaxSpeed; };
+	float GetCamRelaxSpeed_AI() { return cam_recoil.RelaxSpeed_AI; };
+	float GetCamDispersion() { return cam_recoil.Dispersion; };
+	float GetCamDispersionInc() { return cam_recoil.DispersionInc; };
+	float GetCamDispersionFrac() { return cam_recoil.DispersionFrac; };
+	float GetCamMaxAngleVert() { return cam_recoil.MaxAngleVert; };
+	float GetCamMaxAngleHorz() { return cam_recoil.MaxAngleHorz; };
+	float GetCamStepAngleHorz() { return cam_recoil.StepAngleHorz; };
+	float GetZoomCamRelaxSpeed() { return zoom_cam_recoil.RelaxSpeed; };
+	float GetZoomCamRelaxSpeed_AI() { return zoom_cam_recoil.RelaxSpeed_AI; };
+	float GetZoomCamDispersion() { return zoom_cam_recoil.Dispersion; };
+	float GetZoomCamDispersionInc() { return zoom_cam_recoil.DispersionInc; };
+	float GetZoomCamDispersionFrac() { return zoom_cam_recoil.DispersionFrac; };
+	float GetZoomCamMaxAngleVert() { return zoom_cam_recoil.MaxAngleVert; };
+	float GetZoomCamMaxAngleHorz() { return zoom_cam_recoil.MaxAngleHorz; };
+	float GetZoomCamStepAngleHorz() { return zoom_cam_recoil.StepAngleHorz; };
+
+	// Setters
+	void SetCamRelaxSpeed(float val) { cam_recoil.RelaxSpeed = val; };
+	void SetCamRelaxSpeed_AI(float val) { cam_recoil.RelaxSpeed_AI = val; };
+	void SetCamDispersion(float val) { cam_recoil.Dispersion = val; };
+	void SetCamDispersionInc(float val) { cam_recoil.DispersionInc = val; };
+	void SetCamDispersionFrac(float val) { cam_recoil.DispersionFrac = val; };
+	void SetCamMaxAngleVert(float val) { cam_recoil.MaxAngleVert = val; };
+	void SetCamMaxAngleHorz(float val) { cam_recoil.MaxAngleHorz = val; };
+	void SetCamStepAngleHorz(float val) { cam_recoil.StepAngleHorz = val; };
+	void SetZoomCamRelaxSpeed(float val) { zoom_cam_recoil.RelaxSpeed = val; };
+	void SetZoomCamRelaxSpeed_AI(float val) { zoom_cam_recoil.RelaxSpeed_AI = val; };
+	void SetZoomCamDispersion(float val) { zoom_cam_recoil.Dispersion = val; };
+	void SetZoomCamDispersionInc(float val) { zoom_cam_recoil.DispersionInc = val; };
+	void SetZoomCamDispersionFrac(float val) { zoom_cam_recoil.DispersionFrac = val; };
+	void SetZoomCamMaxAngleVert(float val) { zoom_cam_recoil.MaxAngleVert = val; };
+	void SetZoomCamMaxAngleHorz(float val) { zoom_cam_recoil.MaxAngleHorz = val; };
+	void SetZoomCamStepAngleHorz(float val) { zoom_cam_recoil.StepAngleHorz = val; };
+
 protected:
 	//Ã´Ã ÃªÃ²Ã®Ã° Ã³Ã¢Ã¥Ã«Ã¨Ã·Ã¥Ã­Ã¨Ã¿ Ã¤Ã¨Ã±Ã¯Ã¥Ã°Ã±Ã¨Ã¨ Ã¯Ã°Ã¨ Ã¬Ã ÃªÃ±Ã¨Ã¬Ã Ã«Ã¼Ã­Ã®Ã© Ã¨Ã§Ã­Ã®Ã¸Ã¥Ã­Ã®Ã±Ã²Ã¨
 	//(Ã­Ã  Ã±ÃªÃ®Ã«Ã¼ÃªÃ® Ã¯Ã°Ã®Ã¶Ã¥Ã­Ã²Ã®Ã¢ Ã³Ã¢Ã¥Ã«Ã¨Ã·Ã¨Ã²Ã±Ã¿ Ã¤Ã¨Ã±Ã¯Ã¥Ã°Ã±Ã¨Ã¿)
@@ -590,6 +670,17 @@ public:
 		return misfireEndCondition;
 	};
 
+	// Setters
+	void SetMisfireStartCondition(float val)
+	{
+		misfireStartCondition = val;
+	};
+
+	void SetMisfireEndCondition(float val)
+	{
+		misfireEndCondition = val;
+	};
+
 protected:
 	struct SPDM
 	{
@@ -750,6 +841,107 @@ public:
 	{
 		return m_first_bullet_controller.get_fire_dispertion();
 	};
+
+	// Setters
+	virtual void Set_PDM_Base(float val) 
+	{
+		m_pdm.m_fPDM_disp_base = val;
+	};
+
+	virtual void Set_Silencer_PDM_Base(float val) 
+	{
+		cur_silencer_koef.pdm_base = val;
+	};
+
+	virtual void Set_Scope_PDM_Base(float val) 
+	{
+		cur_scope_koef.pdm_base = val;
+	};
+
+	virtual void Set_Launcher_PDM_Base(float val) 
+	{
+		cur_launcher_koef.pdm_base = val;
+	};
+
+	virtual void Set_PDM_BuckShot(float val) 
+	{
+		m_pdm.m_fPDM_disp_buckShot = val;
+	};
+
+	virtual void Set_PDM_Vel_F(float val) 
+	{
+		m_pdm.m_fPDM_disp_vel_factor = val;
+	};
+
+	virtual void Set_Silencer_PDM_Vel(float val) 
+	{
+		cur_silencer_koef.pdm_vel = val;
+	};
+
+	virtual void Set_Scope_PDM_Vel(float val) 
+	{
+		cur_scope_koef.pdm_vel = val;
+	};
+
+	virtual void Set_Launcher_PDM_Vel(float val) 
+	{
+		cur_launcher_koef.pdm_vel = val;
+	};
+
+	virtual void Set_PDM_Accel_F(float val) 
+	{
+		m_pdm.m_fPDM_disp_accel_factor = val;
+	};
+
+	virtual void Set_Silencer_PDM_Accel(float val) 
+	{
+		cur_silencer_koef.pdm_accel = val;
+	};
+
+	virtual void Set_Scope_PDM_Accel(float val) 
+	{
+		cur_scope_koef.pdm_accel = val;
+	};
+
+	virtual void Set_Launcher_PDM_Accel(float val) 
+	{
+		cur_launcher_koef.pdm_accel = val;
+	};
+
+	virtual void Set_PDM_Crouch(float val) 
+	{
+		m_pdm.m_fPDM_disp_crouch = val;
+	};
+
+	virtual void Set_PDM_Crouch_NA(float val) 
+	{
+		m_pdm.m_fPDM_disp_crouch_no_acc = val;
+	};
+
+	virtual void SetCrosshairInertion(float val) 
+	{
+		m_crosshair_inertion = val;
+	};
+
+	virtual void Set_Silencer_CrosshairInertion(float val) 
+	{
+		cur_silencer_koef.crosshair_inertion = val;
+	};
+
+	virtual void Set_Scope_CrosshairInertion(float val) 
+	{
+		cur_scope_koef.crosshair_inertion = val;
+	};
+
+	virtual void Set_Launcher_CrosshairInertion(float val)
+	{
+		cur_launcher_koef.crosshair_inertion = val;
+	};
+
+	void SetFirstBulletDisp(float val)
+	{
+		m_first_bullet_controller.set_fire_dispertion(val);
+	};
 protected:
 	int iAmmoElapsed; // ammo in magazine, currently
 	int iMagazineSize; // size (in bullets) of magazine
@@ -795,6 +987,20 @@ public:
 	virtual float GetHitPowerCritical() { return fvHitPowerCritical[g_SingleGameDifficulty]; };
 	virtual float GetHitImpulse() { return fHitImpulse; };
 	virtual float GetFireDistance() { return fireDistance; };
+
+	// Setters
+	virtual void SetHitPower(float val) {
+		for (int i = ESingleGameDifficulty::egdNovice; i < ESingleGameDifficulty::egdCount; i++) {
+			fvHitPower[i] = val;
+		}
+	};
+	virtual void SetHitPowerCritical(float val) {
+		for (int i = ESingleGameDifficulty::egdNovice; i < ESingleGameDifficulty::egdCount; i++) {
+			fvHitPowerCritical[i] = val;
+		}
+	};
+	virtual void SetHitImpulse(float val) { fHitImpulse = val; };
+	virtual void SetFireDistance(float val) { fireDistance = val; };
 	
 	IC u8 GetZoomType() const
 	{
@@ -878,4 +1084,6 @@ public:
 	{
 		return cNameSect();
 	};
+    
+    float SDS_Radius(bool alt = false);
 };
diff --git a/src/xrGame/WeaponAK74.cpp b/src/xrGame/WeaponAK74.cpp
index 6f55903..45f79bc 100644
--- a/src/xrGame/WeaponAK74.cpp
+++ b/src/xrGame/WeaponAK74.cpp
@@ -62,7 +62,9 @@ void CWeaponAK74::script_register	(lua_State *L)
 			.def("GetAmmoType", &CWeapon::GetAmmoType)
 			.def("AmmoTypeForEach", &CWeapon::AmmoTypeForEach)
 			.def("RPM", &CWeapon::RPMScript)
+			.def("RealRPM", &CWeapon::RealRPMScript)
 			.def("ModeRPM", &CWeapon::ModeRPMScript)
+			.def("ModeRealRPM", &CWeapon::ModeRealRPMScript)
 			.def("GetZoomType", &CWeapon::GetZoomType)
 			
 			.def("Get_PDM_Base", &CWeapon::Get_PDM_Base)
@@ -93,6 +95,83 @@ void CWeaponAK74::script_register	(lua_State *L)
 			.def("GetFireMode", &CWeapon::GetCurrentFireMode)
 
 			.def("GetInertionAimFactor", &CWeapon::GetInertionAimFactor)
+
+			// Setters
+			.def("SetFireDispersion", &CWeapon::SetFireDispersionScript)
+			.def("SetMisfireStartCondition", &CWeapon::SetMisfireStartCondition)
+			.def("SetMisfireEndCondition", &CWeapon::SetMisfireEndCondition)
+			.def("SetRPM", &CWeapon::SetRPM)
+			.def("SetRealRPM", &CWeapon::SetRealRPM)
+			.def("SetModeRPM", &CWeapon::SetModeRPM)
+			.def("SetModeRealRPM", &CWeapon::SetModeRealRPM)
+			.def("Set_PDM_Base", &CWeapon::Set_PDM_Base)
+			.def("Set_Silencer_PDM_Base", &CWeapon::Set_Silencer_PDM_Base)
+			.def("Set_Scope_PDM_Base", &CWeapon::Set_Scope_PDM_Base)
+			.def("Set_Launcher_PDM_Base", &CWeapon::Set_Launcher_PDM_Base)
+			.def("Set_PDM_BuckShot", &CWeapon::Set_PDM_BuckShot)
+			.def("Set_PDM_Vel_F", &CWeapon::Set_PDM_Vel_F)
+			.def("Set_Silencer_PDM_Vel", &CWeapon::Set_Silencer_PDM_Vel)
+			.def("Set_Scope_PDM_Vel", &CWeapon::Set_Scope_PDM_Vel)
+			.def("Set_Launcher_PDM_Vel", &CWeapon::Set_Launcher_PDM_Vel)
+			.def("Set_PDM_Accel_F", &CWeapon::Set_PDM_Accel_F)
+			.def("Set_Silencer_PDM_Accel", &CWeapon::Set_Silencer_PDM_Accel)
+			.def("Set_Scope_PDM_Accel", &CWeapon::Set_Scope_PDM_Accel)
+			.def("Set_Launcher_PDM_Accel", &CWeapon::Set_Launcher_PDM_Accel)
+			.def("Set_PDM_Crouch", &CWeapon::Set_PDM_Crouch)
+			.def("Set_PDM_Crouch_NA", &CWeapon::Set_PDM_Crouch_NA)
+			.def("SetCrosshairInertion", &CWeapon::SetCrosshairInertion)
+			.def("Set_Silencer_CrosshairInertion", &CWeapon::Set_Silencer_CrosshairInertion)
+			.def("Set_Scope_CrosshairInertion", &CWeapon::Set_Scope_CrosshairInertion)
+			.def("Set_Launcher_CrosshairInertion", &CWeapon::Set_Launcher_CrosshairInertion)
+			.def("SetFirstBulletDisp", &CWeapon::SetFirstBulletDisp)
+			.def("SetHitPower", &CWeapon::SetHitPower)
+			.def("SetHitPowerCritical", &CWeapon::SetHitPowerCritical)
+			.def("SetHitImpulse", &CWeapon::SetHitImpulse)
+			.def("SetFireDistance", &CWeapon::SetFireDistance)
+
+			// demonized: World model on stalkers adjustments
+			.def("Set_mOffset", &CWeapon::set_mOffset)
+			.def("Set_mStrapOffset", &CWeapon::set_mStrapOffset)
+			.def("Set_mFirePoint", &CWeapon::set_mFirePoint)
+			.def("Set_mFirePoint2", &CWeapon::set_mFirePoint2)
+			.def("Set_mShellPoint", &CWeapon::set_mShellPoint)
+
+			// Cam Recoil
+			// Getters
+			.def("GetCamRelaxSpeed", &CWeapon::GetCamRelaxSpeed)
+			.def("GetCamRelaxSpeed_AI", &CWeapon::GetCamRelaxSpeed_AI)
+			.def("GetCamDispersion", &CWeapon::GetCamDispersion)
+			.def("GetCamDispersionInc", &CWeapon::GetCamDispersionInc)
+			.def("GetCamDispersionFrac", &CWeapon::GetCamDispersionFrac)
+			.def("GetCamMaxAngleVert", &CWeapon::GetCamMaxAngleVert)
+			.def("GetCamMaxAngleHorz", &CWeapon::GetCamMaxAngleHorz)
+			.def("GetCamStepAngleHorz", &CWeapon::GetCamStepAngleHorz)
+			.def("GetZoomCamRelaxSpeed", &CWeapon::GetZoomCamRelaxSpeed)
+			.def("GetZoomCamRelaxSpeed_AI", &CWeapon::GetZoomCamRelaxSpeed_AI)
+			.def("GetZoomCamDispersion", &CWeapon::GetZoomCamDispersion)
+			.def("GetZoomCamDispersionInc", &CWeapon::GetZoomCamDispersionInc)
+			.def("GetZoomCamDispersionFrac", &CWeapon::GetZoomCamDispersionFrac)
+			.def("GetZoomCamMaxAngleVert", &CWeapon::GetZoomCamMaxAngleVert)
+			.def("GetZoomCamMaxAngleHorz", &CWeapon::GetZoomCamMaxAngleHorz)
+			.def("GetZoomCamStepAngleHorz", &CWeapon::GetZoomCamStepAngleHorz)
+
+			// Setters
+			.def("SetCamRelaxSpeed", &CWeapon::SetCamRelaxSpeed)
+			.def("SetCamRelaxSpeed_AI", &CWeapon::SetCamRelaxSpeed_AI)
+			.def("SetCamDispersion", &CWeapon::SetCamDispersion)
+			.def("SetCamDispersionInc", &CWeapon::SetCamDispersionInc)
+			.def("SetCamDispersionFrac", &CWeapon::SetCamDispersionFrac)
+			.def("SetCamMaxAngleVert", &CWeapon::SetCamMaxAngleVert)
+			.def("SetCamMaxAngleHorz", &CWeapon::SetCamMaxAngleHorz)
+			.def("SetCamStepAngleHorz", &CWeapon::SetCamStepAngleHorz)
+			.def("SetZoomCamRelaxSpeed", &CWeapon::SetZoomCamRelaxSpeed)
+			.def("SetZoomCamRelaxSpeed_AI", &CWeapon::SetZoomCamRelaxSpeed_AI)
+			.def("SetZoomCamDispersion", &CWeapon::SetZoomCamDispersion)
+			.def("SetZoomCamDispersionInc", &CWeapon::SetZoomCamDispersionInc)
+			.def("SetZoomCamDispersionFrac", &CWeapon::SetZoomCamDispersionFrac)
+			.def("SetZoomCamMaxAngleVert", &CWeapon::SetZoomCamMaxAngleVert)
+			.def("SetZoomCamMaxAngleHorz", &CWeapon::SetZoomCamMaxAngleHorz)
+			.def("SetZoomCamStepAngleHorz", &CWeapon::SetZoomCamStepAngleHorz)
 			
 			.def("Cost", &CWeapon::Cost)
 			.def("Weight", &CWeapon::Weight)
diff --git a/src/xrGame/WeaponAutomaticShotgun.cpp b/src/xrGame/WeaponAutomaticShotgun.cpp
index 0601295..01cca9f 100644
--- a/src/xrGame/WeaponAutomaticShotgun.cpp
+++ b/src/xrGame/WeaponAutomaticShotgun.cpp
@@ -26,6 +26,11 @@ void CWeaponAutomaticShotgun::Load(LPCSTR section)
 	{
 		m_bTriStateReload = !!pSettings->r_bool(section, "tri_state_reload");
 	};
+	if (pSettings->line_exist(section, "bas_state_reload"))
+	{
+		IsCustomReloadAvaible = !!pSettings->r_bool(section, "bas_state_reload");
+	}
+	
 	if (m_bTriStateReload)
 	{
 		m_sounds.LoadSound(section, "snd_open_weapon", "sndOpen", false, m_eSoundOpen);
@@ -35,6 +40,8 @@ void CWeaponAutomaticShotgun::Load(LPCSTR section)
 		m_sounds.LoadSound(section, "snd_close_weapon", "sndClose", false, m_eSoundClose);
 
 		m_sounds.LoadSound(section, "snd_close_weapon_empty", "sndCloseEmpty", false, m_eSoundClose);
+
+		m_sounds.LoadSound(section, "snd_shoot_last", "sndShootL", false, m_eSoundShot);
 	};
 }
 
@@ -49,10 +56,11 @@ bool CWeaponAutomaticShotgun::Action(u16 cmd, u32 flags)
 
 	if (m_bTriStateReload && GetState() == eReload &&
 		cmd == kWPN_FIRE && flags & CMD_START &&
-		m_sub_state == eSubstateReloadInProcess) //îñòàíîâèòü ïåðåçàãðóçêó
-	{
+		m_sub_state == eSubstateReloadInProcess || m_sub_state == eSubstateReloadInProcessEmptyEnd) //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
+	{	
 		AddCartridge(1);
 		m_sub_state = eSubstateReloadEnd;
+		if(IsCustomReloadAvaible) SwitchState(eReload);
 		return true;
 	}
 	return false;
@@ -78,16 +86,28 @@ void CWeaponAutomaticShotgun::OnAnimationEnd(u32 state)
 			{
 				m_sub_state = eSubstateReloadEnd;
 			}
+			else if (BeginReloadWasEmpty && IsCustomReloadAvaible)
+			{
+				m_sub_state = eSubstateReloadInProcessEmptyEnd;
+				
+			}
 			SwitchState(eReload);
 		}
 		break;
 
 	case eSubstateReloadEnd:
 		{
+			BeginReloadWasEmpty = false;
 			m_sub_state = eSubstateReloadBegin;
 			SwitchState(eIdle);
 		}
 		break;
+	case eSubstateReloadInProcessEmptyEnd:
+		{
+			m_sub_state = eSubstateReloadBegin;
+			SwitchState(eReload);
+		}
+		break;
 	};
 }
 
@@ -139,9 +159,32 @@ void CWeaponAutomaticShotgun::OnStateSwitch(u32 S, u32 oldState)
 	case eSubstateReloadEnd:
 		switch2_EndReload();
 		break;
+	case eSubstateReloadInProcessEmptyEnd:
+		switch2_EndReload();
+		break;
 	};
 }
 
+void CWeaponAutomaticShotgun::PlaySoundShot()
+{
+	// Temp fix for shotguns last shot
+	if (iAmmoElapsed > 1 || !HudAnimationExist("anm_shot_l"))
+	{
+		inherited::PlaySoundShot();
+	}
+	else
+	{
+		if (m_sounds.FindSoundItem("sndShootL", false))
+		{
+			m_sounds.PlaySound("sndShootL", get_LastFP(), H_Root(), !!GetHUDmode(), false, (u8)-1);
+		}
+		else
+		{
+			inherited::PlaySoundShot();
+		}
+	}
+}
+
 void CWeaponAutomaticShotgun::switch2_StartReload()
 {
 	BeginReloadWasEmpty = !m_magazine.size();
@@ -161,7 +204,6 @@ void CWeaponAutomaticShotgun::switch2_AddCartgidge()
 void CWeaponAutomaticShotgun::switch2_EndReload()
 {
 	SetPending(FALSE);
-
 	if (BeginReloadWasEmpty && m_sounds.FindSoundItem("sndCloseEmpty", false))
 		PlaySound("sndCloseEmpty", get_LastFP());
 	else
@@ -179,7 +221,7 @@ void CWeaponAutomaticShotgun::PlayAnimOpenWeapon()
 void CWeaponAutomaticShotgun::PlayAnimAddOneCartridgeWeapon()
 {
 	VERIFY(GetState()==eReload);
-	PlayHUDMotion("anm_add_cartridge",TRUE, this, GetState(), 1.f, 0.f, false);
+	PlayHUDMotion("anm_add_cartridge",FALSE, this, GetState());
 }
 
 void CWeaponAutomaticShotgun::PlayAnimCloseWeapon()
@@ -187,9 +229,9 @@ void CWeaponAutomaticShotgun::PlayAnimCloseWeapon()
 	VERIFY(GetState()==eReload);
 
 	if (BeginReloadWasEmpty && HudAnimationExist("anm_close_empty"))
-		PlayHUDMotion("anm_close_empty", TRUE, this, GetState(), 1.f, 0.f, false);
+		PlayHUDMotion("anm_close_empty", FALSE, this, GetState());
 	else
-		PlayHUDMotion("anm_close",TRUE, this, GetState(), 1.f, 0.f, false);
+		PlayHUDMotion("anm_close", FALSE, this, GetState());
 }
 
 bool CWeaponAutomaticShotgun::HaveCartridgeInInventory(u8 cnt)
@@ -250,7 +292,7 @@ u8 CWeaponAutomaticShotgun::AddCartridge(u8 cnt)
 
 	VERIFY((u32)iAmmoElapsed == m_magazine.size());
 
-	//âûêèíóòü êîðîáêó ïàòðîíîâ, åñëè îíà ïóñòàÿ
+	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½, ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 	if (m_pCurrentAmmo && !m_pCurrentAmmo->m_boxCurr && OnServer())
 		m_pCurrentAmmo->SetDropManual(TRUE);
 
diff --git a/src/xrGame/WeaponAutomaticShotgun.h b/src/xrGame/WeaponAutomaticShotgun.h
index 6203831..ad2056d 100644
--- a/src/xrGame/WeaponAutomaticShotgun.h
+++ b/src/xrGame/WeaponAutomaticShotgun.h
@@ -31,7 +31,7 @@ protected:
 	virtual void OnAnimationEnd(u32 state);
 	void TriStateReload();
 	virtual void OnStateSwitch(u32 S, u32 oldState);
-
+	virtual void PlaySoundShot();
 	bool HaveCartridgeInInventory(u8 cnt);
 	bool BeginReloadWasEmpty;
 	virtual u8 AddCartridge(u8 cnt);
diff --git a/src/xrGame/WeaponBinoculars.cpp b/src/xrGame/WeaponBinoculars.cpp
index 21be7d1..768462e 100644
--- a/src/xrGame/WeaponBinoculars.cpp
+++ b/src/xrGame/WeaponBinoculars.cpp
@@ -9,6 +9,9 @@
 #include "object_broker.h"
 #include "inventory.h"
 
+extern float n_zoom_step_count;
+float czoom;
+
 CWeaponBinoculars::CWeaponBinoculars()
 {
 	m_binoc_vision = NULL;
@@ -56,6 +59,7 @@ void CWeaponBinoculars::OnZoomIn()
 		}
 	}
 	inherited::OnZoomIn();
+    SetZoomFactor(czoom);
 }
 
 void CWeaponBinoculars::OnZoomOut()
@@ -75,6 +79,7 @@ void CWeaponBinoculars::OnZoomOut()
 
 BOOL CWeaponBinoculars::net_Spawn(CSE_Abstract* DC)
 {
+    czoom = CWeaponBinoculars::m_zoom_params.m_fScopeZoomFactor;
 	return inherited::net_Spawn(DC);
 }
 
@@ -115,24 +120,36 @@ void GetZoomData(const float scope_factor, float& delta, float& min_zoom_factor)
 	delta = (delta_factor_total * (1 - min_zoom_k)) / zoom_step_count;
 }
 
+void newGetZoomData(const float scope_factor, float& delta, float& min_zoom_factor, float c_zoom)
+{
+    float def_fov = float(g_fov);
+    float min_zoom_k = 0.3f;
+    float delta_factor_total = def_fov - scope_factor;
+    VERIFY(delta_factor_total > 0);
+    min_zoom_factor = def_fov - delta_factor_total * min_zoom_k;
+    delta = (delta_factor_total * (1 - min_zoom_k)) / n_zoom_step_count * (c_zoom / def_fov);
+}
+
 void CWeaponBinoculars::ZoomInc()
 {
 	float delta, min_zoom_factor;
-	GetZoomData(m_zoom_params.m_fScopeZoomFactor, delta, min_zoom_factor);
+    newGetZoomData(m_zoom_params.m_fScopeZoomFactor, delta, min_zoom_factor, czoom);
 
 	float f = GetZoomFactor() - delta;
 	clamp(f, m_zoom_params.m_fScopeZoomFactor, min_zoom_factor);
 	SetZoomFactor(f);
+    czoom = f;
 }
 
 void CWeaponBinoculars::ZoomDec()
 {
 	float delta, min_zoom_factor;
-	GetZoomData(m_zoom_params.m_fScopeZoomFactor, delta, min_zoom_factor);
+    newGetZoomData(m_zoom_params.m_fScopeZoomFactor, delta, min_zoom_factor, czoom);
 
 	float f = GetZoomFactor() + delta;
 	clamp(f, m_zoom_params.m_fScopeZoomFactor, min_zoom_factor);
 	SetZoomFactor(f);
+    czoom = f;
 }
 
 void CWeaponBinoculars::save(NET_Packet& output_packet)
diff --git a/src/xrGame/WeaponFire.cpp b/src/xrGame/WeaponFire.cpp
index 39bbeda..60f4e8c 100644
--- a/src/xrGame/WeaponFire.cpp
+++ b/src/xrGame/WeaponFire.cpp
@@ -130,6 +130,10 @@ void CWeapon::FireTrace(const Fvector& P, const Fvector& D)
 	if (m_bLightShotEnabled)
 		Light_Start();
 
+	// Interactive Grass FX
+	extern Fvector4 ps_ssfx_int_grass_params_2;
+	Fvector ShotPos = Fvector().mad(P, D, 1.5f);
+	g_pGamePersistent->GrassBendersAddShot(cast_game_object()->ID(), ShotPos, D, 3.0f, 20.0f, ps_ssfx_int_grass_params_2.z, ps_ssfx_int_grass_params_2.w);
 
 	// Ammo
 	m_lastCartridge = l_cartridge;
diff --git a/src/xrGame/WeaponMagazineExtended.cpp b/src/xrGame/WeaponMagazineExtended.cpp
new file mode 100644
index 0000000..37fdac9
--- /dev/null
+++ b/src/xrGame/WeaponMagazineExtended.cpp
@@ -0,0 +1,77 @@
+#include "stdafx.h"
+#include "WeaponMagazined.h"
+#include "WeaponMagazinedWGrenade.h"
+
+void CWeaponMagazined::switch2_StartAim()
+{
+	VERIFY(GetState() == eAimStart);
+
+	if(iAmmoElapsed == 0 && HudAnimationExist("anm_idle_aim_start_empty"))
+		PlayHUDMotion("anm_idle_aim_start_empty", TRUE, this, GetState());
+	else
+		PlayHUDMotion("anm_idle_aim_start", TRUE, this, GetState());
+}
+
+void CWeaponMagazined::switch2_EndAim()
+{
+	VERIFY(GetState() == eAimEnd);
+
+	if (iAmmoElapsed == 0 && HudAnimationExist("anm_idle_aim_end_empty"))
+		PlayHUDMotion("anm_idle_aim_end_empty", TRUE, this, GetState());
+	else
+		PlayHUDMotion("anm_idle_aim_end", TRUE, this, GetState());
+}
+
+void CWeaponMagazinedWGrenade::switch2_StartAim()
+{
+	VERIFY(GetState() == eAimStart);
+
+	if (IsGrenadeLauncherAttached())
+	{
+		if (m_bGrenadeMode)
+		{
+			if (iAmmoElapsed == 0 && HudAnimationExist("anm_idle_aim_start_g_empty"))
+				PlayHUDMotion("anm_idle_aim_start_g_empty", TRUE, this, GetState());
+			else
+				PlayHUDMotion("anm_idle_aim_start_g", TRUE, this, GetState());
+		}
+		else
+		{
+			if (iAmmoElapsed == 0 && HudAnimationExist("anm_idle_aim_start_w_gl_empty"))
+				PlayHUDMotion("anm_idle_aim_start_w_gl_empty", TRUE, this, GetState());
+			else
+				PlayHUDMotion("anm_idle_aim_start_w_gl", TRUE, this, GetState());
+		}
+	}
+	else
+		inherited::switch2_StartAim();
+
+
+	
+}
+
+void CWeaponMagazinedWGrenade::switch2_EndAim()
+{
+	VERIFY(GetState() == eAimEnd);
+
+	if (IsGrenadeLauncherAttached())
+	{
+		if (m_bGrenadeMode)
+		{
+			if (iAmmoElapsed == 0 && HudAnimationExist("anm_idle_aim_end_g_empty"))
+				PlayHUDMotion("anm_idle_aim_end_g_empty", TRUE, this, GetState());
+			else
+				PlayHUDMotion("anm_idle_aim_end_g", TRUE, this, GetState());
+		}
+		else
+		{
+			if (iAmmoElapsed == 0 && HudAnimationExist("anm_idle_aim_end_w_gl_empty"))
+				PlayHUDMotion("anm_idle_aim_end_w_gl_empty", TRUE, this, GetState());
+			else
+				PlayHUDMotion("anm_idle_aim_end_w_gl", TRUE, this, GetState());
+		}
+	}
+	else
+		inherited::switch2_EndAim();
+
+}
\ No newline at end of file
diff --git a/src/xrGame/WeaponMagazined.cpp b/src/xrGame/WeaponMagazined.cpp
index b933f2a..3ba166e 100644
--- a/src/xrGame/WeaponMagazined.cpp
+++ b/src/xrGame/WeaponMagazined.cpp
@@ -196,6 +196,20 @@ void CWeaponMagazined::Load(LPCSTR section)
 		empty_click_speed = READ_IF_EXISTS(pSettings, r_float, *hud_sect, "empty_click_anm_speed", 1.f);
 		empty_click_power = READ_IF_EXISTS(pSettings, r_float, *hud_sect, "empty_click_anm_power", 1.f);
 	}
+
+	if (pSettings->line_exist(section, "bullet_bones"))
+	{
+		bHasBulletsToHide = true;
+		LPCSTR str = pSettings->r_string(section, "bullet_bones");
+		for (int i = 0, count = _GetItemCount(str); i < count; ++i)
+		{
+			string128 bullet_bone_name;
+			_GetItem(str, i, bullet_bone_name);
+			bullets_bones.push_back(bullet_bone_name);
+			bullet_cnt++;
+		}
+
+	}
 }
 
 void CWeaponMagazined::FireStart()
@@ -343,8 +357,54 @@ void CWeaponMagazined::OnMagazineEmpty()
 	inherited::OnMagazineEmpty();
 }
 
+int CWeaponMagazined::CheckAmmoBeforeReload(u8& v_ammoType)
+{
+	if (m_set_next_ammoType_on_reload != undefined_ammo_type)
+		v_ammoType = m_set_next_ammoType_on_reload;
+
+	//Msg("Ammo type in next reload : %d", m_set_next_ammoType_on_reload);
+
+	if (m_ammoTypes.size() <= v_ammoType)
+	{
+		//Msg("Ammo type is wrong : %d", v_ammoType);
+		return 0;
+	}
+
+	LPCSTR tmp_sect_name = m_ammoTypes[v_ammoType].c_str();
+
+	if (!tmp_sect_name)
+	{
+		//Msg("Sect name is wrong");
+		return 0;
+	}
+
+	CWeaponAmmo* ammo = smart_cast<CWeaponAmmo*>(m_pInventory->GetAny(tmp_sect_name));
+
+	if (!ammo && !m_bLockType)
+	{
+		for (u8 i = 0; i < u8(m_ammoTypes.size()); ++i)
+		{
+			//Ð¿ÑÐ¾Ð²ÐµÑÐ¸ÑÑ Ð¿Ð°ÑÑÐ¾Ð½Ñ Ð²ÑÐµÑ Ð¿Ð¾Ð´ÑÐ¾Ð´ÑÑÐ¸Ñ ÑÐ¸Ð¿Ð¾Ð²
+			ammo = smart_cast<CWeaponAmmo*>(m_pInventory->GetAny(m_ammoTypes[i].c_str()));
+			if (ammo)
+			{
+				v_ammoType = i;
+				break;
+			}
+		}
+	}
+
+	//Msg("Ammo type %d", v_ammoType);
+
+	return GetAmmoCount(v_ammoType);
+
+}
+
 void CWeaponMagazined::UnloadMagazine(bool spawn_ammo)
 {
+	last_hide_bullet = -1;
+	HUD_VisualBulletUpdate();
+
 	xr_map<LPCSTR, u16> l_ammo;
 
 	while (!m_magazine.empty())
@@ -495,6 +555,7 @@ void CWeaponMagazined::ReloadMagazine()
 
 void CWeaponMagazined::OnStateSwitch(u32 S, u32 oldState)
 {
+	HUD_VisualBulletUpdate();
 	inherited::OnStateSwitch(S, oldState);
 	CInventoryOwner* owner = smart_cast<CInventoryOwner*>(this->H_Parent());
 	switch (S)
@@ -509,6 +570,12 @@ void CWeaponMagazined::OnStateSwitch(u32 S, u32 oldState)
 		if (smart_cast<CActor*>(this->H_Parent()) && (Level().CurrentViewEntity() == H_Parent()))
 			CurrentGameUI()->AddCustomStatic("gun_jammed", true);
 		break;
+	case eAimStart:
+		switch2_StartAim();
+		break;
+	case eAimEnd:
+		switch2_EndAim();
+		break;
 	case eReload:
 		if (owner)
 			m_sounds_enabled = owner->CanPlayShHdRldSounds();
@@ -776,6 +843,9 @@ void CWeaponMagazined::OnShot()
 	// Animation
 	PlayAnimShoot();
 
+	// Update bullets
+	HUD_VisualBulletUpdate();
+
 	// Shell Drop
 	Fvector vel;
 	PHGetLinearVell(vel);
@@ -845,6 +915,8 @@ void CWeaponMagazined::OnAnimationEnd(u32 state)
 		break; // End of Show
 	case eIdle: switch2_Idle();
 		break; // Keep showing idle
+	case eAimStart: SwitchState(eIdle);		break;
+	case eAimEnd:   SwitchState(eIdle);		break;
 	case eSwitchMode: UpdateFireMode();
 		SwitchState(eIdle);
 		break; // Back to idle
@@ -1316,6 +1388,7 @@ bool CWeaponMagazined::Detach(const char* item_section_name, bool b_spawn_item)
 		return inherited::Detach(item_section_name, b_spawn_item);;
 }
 
+extern int scope_2dtexactive; //crookr
 void CWeaponMagazined::InitAddons()
 {
 	if (IsScopeAttached())
@@ -1332,6 +1405,7 @@ void CWeaponMagazined::InitAddons()
 			if (m_UIScope)
 			{
 				xr_delete(m_UIScope);
+				scope_2dtexactive = 0;//crookr
 			}
 
 			if (!g_dedicated_server && scope_tex_name != NULL)
@@ -1348,6 +1422,7 @@ void CWeaponMagazined::InitAddons()
 		if (m_eScopeStatus != ALife::eAddonPermanent && m_UIScope)
 		{
 			xr_delete(m_UIScope);
+			scope_2dtexactive = 0;//crookr
 		}
 		ResetScopeKoeffs();
 	}
@@ -1454,6 +1529,9 @@ void CWeaponMagazined::ResetScopeKoeffs()
 
 void CWeaponMagazined::PlayAnimShow()
 {
+
+	HUD_VisualBulletUpdate();
+
 	VERIFY(GetState() == eShowing);
 	iAmmoElapsed == 0 && HudAnimationExist("anm_show_empty")
 		? PlayHUDMotion("anm_show_empty", FALSE, this, GetState(), 1.f, 0.f, false)
@@ -1531,17 +1609,24 @@ void CWeaponMagazined::PlayAnimShoot()
 	VERIFY(GetState() == eFire);
 	if (iAmmoElapsed > 1 || !HudAnimationExist("anm_shot_l"))
 	{
-		PlayHUDMotion("anm_shots", TRUE, this, GetState(), 1.f, 0.f, false);
+		if(!IsZoomed() || !HudAnimationExist("anm_shots_aim"))
+			PlayHUDMotion("anm_shots", TRUE, this, GetState(), 1.f, 0.f, false);
+		else
+			PlayHUDMotion("anm_shots_aim", TRUE, this, GetState(), 1.f, 0.f, false);
 	}
-	else
+	else 
 	{
-		PlayHUDMotion("anm_shot_l", TRUE, this, GetState(), 1.f, 0.f, false);
+		if (!IsZoomed() || !HudAnimationExist("anm_shots_aim_l"))
+			PlayHUDMotion("anm_shot_l", TRUE, this, GetState(), 1.f, 0.f, false);
+		else
+			PlayHUDMotion("anm_shots_aim_l", TRUE, this, GetState(), 1.f, 0.f, false);
 	}
 }
 
 void CWeaponMagazined::OnMotionMark(u32 state, const motion_marks& M)
 {
 	inherited::OnMotionMark(state, M);
+
 	if (state == eReload)
 	{
 		if (bClearJamOnly)
@@ -1550,9 +1635,26 @@ void CWeaponMagazined::OnMotionMark(u32 state, const motion_marks& M)
 			bClearJamOnly = false;
 			return;
 		}
-			
-		if (m_needReload)
-			ReloadMagazine();
+		
+		if (bHasBulletsToHide && xr_strcmp(M.name.c_str(),"lmg_reload")==0)
+		{
+			u8 ammo_type = m_ammoType;
+			int ae = CheckAmmoBeforeReload(ammo_type);
+
+			if (ammo_type == m_ammoType)
+			{
+				ae += iAmmoElapsed;
+			}
+
+			last_hide_bullet = ae >= bullet_cnt ? bullet_cnt : bullet_cnt - ae - 1;
+
+			HUD_VisualBulletUpdate();
+		}
+		else
+		{
+			if (m_needReload)
+				ReloadMagazine();
+		}
 	}
 }
 
@@ -1691,6 +1793,15 @@ bool CWeaponMagazined::GetBriefInfo(II_BriefInfo& info)
 	xr_sprintf(int_str, "%d", ae);
 	info.cur_ammo = int_str;
 
+	if (bHasBulletsToHide)
+	{
+		last_hide_bullet = ae >= bullet_cnt ? bullet_cnt : bullet_cnt - ae - 1;
+
+		if (ae == 0) last_hide_bullet = -1;
+
+		//HUD_VisualBulletUpdate();
+	}
+
 	if (HasFireModes())
 	{
 		if (m_iQueueSize == WEAPON_ININITE_QUEUE)
diff --git a/src/xrGame/WeaponMagazined.h b/src/xrGame/WeaponMagazined.h
index cedd588..e45bdd2 100644
--- a/src/xrGame/WeaponMagazined.h
+++ b/src/xrGame/WeaponMagazined.h
@@ -46,6 +46,9 @@ protected:
 	virtual void switch2_Hidden();
 	virtual void switch2_Showing();
 
+	virtual void switch2_StartAim();
+	virtual void switch2_EndAim();
+
 	virtual void OnShot();
 	virtual void PlaySoundShot();
 
@@ -96,6 +99,7 @@ public:
 	virtual void net_Import(NET_Packet& P);
 
 	virtual void OnMotionMark(u32 state, const motion_marks& M);
+	virtual int     CheckAmmoBeforeReload(u8& v_ammoType);
 
 	virtual void OnH_A_Chield();
 
diff --git a/src/xrGame/WeaponMagazinedWGrenade.cpp b/src/xrGame/WeaponMagazinedWGrenade.cpp
index d46318b..9aa4bd3 100644
--- a/src/xrGame/WeaponMagazinedWGrenade.cpp
+++ b/src/xrGame/WeaponMagazinedWGrenade.cpp
@@ -1,4 +1,4 @@
-ï»¿#include "stdafx.h"
+#include "stdafx.h"
 #include "weaponmagazinedwgrenade.h"
 #include "entity.h"
 #include "ParticlesObject.h"
@@ -154,6 +154,36 @@ void CWeaponMagazinedWGrenade::OnShot()
 		inherited::OnShot();
 }
 
+void CWeaponMagazinedWGrenade::PlayAnimFireModeSwitch()
+{
+	if (IsGrenadeLauncherAttached())
+	{
+		if (!m_bGrenadeMode)
+		{
+			if (!m_bHasDifferentFireModes) return;
+			if (m_aFireModes.size() <= 1) return;
+			if (GetState() != eIdle) return;
+
+			if (HudAnimationExist("anm_switch_mode_w_gl"))
+			{
+				SetPending(TRUE);
+				iAmmoElapsed == 0 && HudAnimationExist("anm_switch_mode_w_gl_empty")
+					? PlayHUDMotion("anm_switch_mode_w_gl_empty", TRUE, this, eSwitchMode)
+					: PlayHUDMotion("anm_switch_mode_w_gl", TRUE, this, eSwitchMode);
+			}
+			else
+				UpdateFireMode();
+
+			if (m_sounds.FindSoundItem("sndSwitchMode", false))
+				PlaySound("sndSwitchMode", get_LastFP());
+		}
+	}
+	else
+	{
+		inherited::PlayAnimFireModeSwitch();
+	}
+}
+
 bool CWeaponMagazinedWGrenade::SwitchMode()
 {
 	bool bUsefulStateToSwitch = ((eIdle == GetState()) || (eHidden == GetState()) || (eMisfire == GetState())) && (!IsPending());
@@ -678,6 +708,9 @@ void CWeaponMagazinedWGrenade::PlayAnimShow()
 	VERIFY(GetState() == eShowing);
 	if (IsGrenadeLauncherAttached())
 	{
+		if (!m_bGrenadeMode)
+			HUD_VisualBulletUpdate();
+
 		if (!m_bGrenadeMode)
 			iAmmoElapsed == 0 && HudAnimationExist("anm_show_empty_w_gl")
 			? PlayHUDMotion("anm_show_empty_w_gl", FALSE, this, GetState(), 1.f, 0.f, false)
@@ -856,12 +889,18 @@ void CWeaponMagazinedWGrenade::PlayAnimShoot()
 	{
 		if (iAmmoElapsed > 1 || !HudAnimationExist("anm_shot_g_l"))
 		{
-			PlayHUDMotion("anm_shots_g", TRUE, this, GetState(), 1.f, 0.f, false);
+			if (!IsZoomed() || !HudAnimationExist("anm_shots_g_aim"))
+				PlayHUDMotion("anm_shots_g", TRUE, this, GetState(), 1.f, 0.f, false);
+			else
+				PlayHUDMotion("anm_shots_g_aim", TRUE, this, GetState(), 1.f, 0.f, false);
 		}
 		else
 		{
-			PlayHUDMotion("anm_shot_g_l", TRUE, this, GetState(), 1.f, 0.f, false);
-		}
+			if(!IsZoomed() || !HudAnimationExist("anm_shot_g_l_aim"))
+				PlayHUDMotion("anm_shot_g_l", TRUE, this, GetState(), 1.f, 0.f, false);
+			else
+				PlayHUDMotion("anm_shot_g_l_aim", TRUE, this, GetState(), 1.f, 0.f, false);
+		}		
 	}
 	else
 	{
@@ -869,11 +908,17 @@ void CWeaponMagazinedWGrenade::PlayAnimShoot()
 		if (IsGrenadeLauncherAttached())
 			if (iAmmoElapsed > 1 || !HudAnimationExist("anm_shot_w_gl_l"))
 			{
-				PlayHUDMotion("anm_shots_w_gl", TRUE, this, GetState(), 1.f, 0.f, false);
+				if (!IsZoomed() || !HudAnimationExist("anm_shots_w_gl_aim"))
+					PlayHUDMotion("anm_shots_w_gl", TRUE, this, GetState(), 1.f, 0.f, false);
+				else
+					PlayHUDMotion("anm_shots_w_gl_aim", TRUE, this, GetState(), 1.f, 0.f, false);
 			}
 			else
 			{
-				PlayHUDMotion("anm_shot_w_gl_l", TRUE, this, GetState(), 1.f, 0.f, false);
+				if (!IsZoomed() || !HudAnimationExist("anm_shot_w_gl_l_aim"))
+					PlayHUDMotion("anm_shot_w_gl_l", TRUE, this, GetState(), 1.f, 0.f, false);
+				else
+					PlayHUDMotion("anm_shot_w_gl_l_aim", TRUE, this, GetState(), 1.f, 0.f, false);
 			}
 		else
 			inherited::PlayAnimShoot();
@@ -1116,6 +1161,13 @@ bool CWeaponMagazinedWGrenade::GetBriefInfo(II_BriefInfo& info)
 	int ae = GetAmmoElapsed();
 	xr_sprintf(int_str, "%d", ae);
 	info.cur_ammo._set(int_str);
+
+	if (bHasBulletsToHide && !m_bGrenadeMode)
+	{
+		last_hide_bullet = ae >= bullet_cnt ? bullet_cnt : bullet_cnt - ae - 1;
+		if (ae == 0) last_hide_bullet = -1;
+	}
+
 	if (HasFireModes())
 	{
 		if (m_iQueueSize == WEAPON_ININITE_QUEUE)
diff --git a/src/xrGame/WeaponMagazinedWGrenade.h b/src/xrGame/WeaponMagazinedWGrenade.h
index ec9b0b8..f5e014f 100644
--- a/src/xrGame/WeaponMagazinedWGrenade.h
+++ b/src/xrGame/WeaponMagazinedWGrenade.h
@@ -41,6 +41,10 @@ public:
 	virtual void OnStateSwitch(u32 S, u32 oldState);
 
 	virtual void switch2_Reload();
+	virtual void switch2_StartAim();
+	virtual void switch2_EndAim();
+
+
 	virtual void state_Fire(float dt);
 	virtual void OnShot();
 	virtual void OnEvent(NET_Packet& P, u16 type);
@@ -50,7 +54,7 @@ public:
 
 	virtual void UpdateSounds();
 
-	//ïåðåêëþ÷åíèå â ðåæèì ïîäñòâîëüíèêà
+	//Ð¿ÐµÑÐµÐºÐ»ÑÑÐµÐ½Ð¸Ðµ Ð² ÑÐµÐ¶Ð¸Ð¼ Ð¿Ð¾Ð´ÑÑÐ²Ð¾Ð»ÑÐ½Ð¸ÐºÐ°
 	virtual bool SwitchMode();
 	void PerformSwitchGL();
 	void OnAnimationEnd(u32 state);
@@ -59,13 +63,14 @@ public:
 
 	virtual bool IsNecessaryItem(const shared_str& item_sect);
 	virtual float Weight() const;
-	//âèðòóàëüíûå ôóíêöèè äëÿ ïðîèãðûâàíèÿ àíèìàöèè HUD
+	//Ð²Ð¸ÑÑÑÐ°Ð»ÑÐ½ÑÐµ ÑÑÐ½ÐºÑÐ¸Ð¸ Ð´Ð»Ñ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°Ð½Ð¸Ñ Ð°Ð½Ð¸Ð¼Ð°ÑÐ¸Ð¸ HUD
 	virtual void PlayAnimShow();
 	virtual void PlayAnimHide();
 	virtual void PlayAnimReload();
 	virtual void PlayAnimIdle();
 	virtual void PlayAnimShoot();
 	virtual void PlayAnimModeSwitch();
+	virtual void PlayAnimFireModeSwitch();
 	virtual bool TryPlayAnimBore();
 
 	//Script exports
@@ -105,8 +110,8 @@ private:
 	virtual bool install_upgrade_ammo_class(LPCSTR section, bool test);
 
 public:
-	//äîïîëíèòåëüíûå ïàðàìåòðû ïàòðîíîâ 
-	//äëÿ ïîäñòâîëüíèêà
+	//Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÐµ Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÑ Ð¿Ð°ÑÑÐ¾Ð½Ð¾Ð² 
+	//Ð´Ð»Ñ Ð¿Ð¾Ð´ÑÑÐ²Ð¾Ð»ÑÐ½Ð¸ÐºÐ°
 	//-	CWeaponAmmo*			m_pAmmo2;
 	xr_vector<shared_str> m_ammoTypes2;
 	u8 m_ammoType2;
diff --git a/src/xrGame/WeaponShotgun.cpp b/src/xrGame/WeaponShotgun.cpp
index dfac63a..6c7d139 100644
--- a/src/xrGame/WeaponShotgun.cpp
+++ b/src/xrGame/WeaponShotgun.cpp
@@ -31,6 +31,10 @@ void CWeaponShotgun::Load(LPCSTR section)
 	{
 		m_bTriStateReload = !!pSettings->r_bool(section, "tri_state_reload");
 	};
+	if (pSettings->line_exist(section, "bas_state_reload"))
+	{
+		IsCustomReloadAvaible = !!pSettings->r_bool(section, "bas_state_reload");
+	}
 	if (m_bTriStateReload)
 	{
 		m_sounds.LoadSound(section, "snd_open_weapon", "sndOpen", false, m_eSoundOpen);
@@ -56,7 +60,7 @@ bool CWeaponShotgun::Action(u16 cmd, u32 flags)
 
 	if (m_bTriStateReload && GetState() == eReload &&
 		cmd == kWPN_FIRE && flags & CMD_START &&
-		m_sub_state == eSubstateReloadInProcess) //îñòàíîâèòü ïåðåçàãðóçêó
+		m_sub_state == eSubstateReloadInProcess || m_sub_state == eSubstateReloadInProcessEmptyEnd) //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 	{
 		AddCartridge(1);
 		m_sub_state = eSubstateReloadEnd;
@@ -85,16 +89,27 @@ void CWeaponShotgun::OnAnimationEnd(u32 state)
 			{
 				m_sub_state = eSubstateReloadEnd;
 			}
+			else if (BeginReloadWasEmpty && IsCustomReloadAvaible)
+			{
+				m_sub_state = eSubstateReloadInProcessEmptyEnd;
+			}
 			SwitchState(eReload);
 		}
 		break;
 
 	case eSubstateReloadEnd:
 		{
+			BeginReloadWasEmpty = false;
 			m_sub_state = eSubstateReloadBegin;
 			SwitchState(eIdle);
 		}
 		break;
+	case eSubstateReloadInProcessEmptyEnd:
+		{	
+			m_sub_state = eSubstateReloadBegin;
+			SwitchState(eReload);
+		}
+		break;
 	};
 }
 
@@ -146,6 +161,9 @@ void CWeaponShotgun::OnStateSwitch(u32 S, u32 oldState)
 	case eSubstateReloadEnd:
 		switch2_EndReload();
 		break;
+	case eSubstateReloadInProcessEmptyEnd:
+		switch2_EndReload();
+		break;
 	};
 }
 
@@ -186,7 +204,7 @@ void CWeaponShotgun::PlayAnimOpenWeapon()
 void CWeaponShotgun::PlayAnimAddOneCartridgeWeapon()
 {
 	VERIFY(GetState()==eReload);
-	PlayHUDMotion("anm_add_cartridge",TRUE, this, GetState(), 1.f, 0.f, false);
+	PlayHUDMotion("anm_add_cartridge", FALSE, this, GetState());
 }
 
 void CWeaponShotgun::PlayAnimCloseWeapon()
@@ -194,9 +212,9 @@ void CWeaponShotgun::PlayAnimCloseWeapon()
 	VERIFY(GetState()==eReload);
 
 	if (BeginReloadWasEmpty && HudAnimationExist("anm_close_empty"))
-		PlayHUDMotion("anm_close_empty", TRUE, this, GetState(), 1.f, 0.f, false);
+		PlayHUDMotion("anm_close_empty", FALSE, this, GetState());
 	else
-		PlayHUDMotion("anm_close", TRUE, this, GetState(), 1.f, 0.f, false);
+		PlayHUDMotion("anm_close", FALSE, this, GetState());
 }
 
 bool CWeaponShotgun::HaveCartridgeInInventory(u8 cnt)
@@ -257,7 +275,7 @@ u8 CWeaponShotgun::AddCartridge(u8 cnt)
 
 	VERIFY((u32)iAmmoElapsed == m_magazine.size());
 
-	//âûêèíóòü êîðîáêó ïàòðîíîâ, åñëè îíà ïóñòàÿ
+	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½, ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 	if (m_pCurrentAmmo && !m_pCurrentAmmo->m_boxCurr && OnServer())
 		m_pCurrentAmmo->SetDropManual(TRUE);
 
diff --git a/src/xrGame/WeaponUpgrade.cpp b/src/xrGame/WeaponUpgrade.cpp
index 4b266c9..27af437 100644
--- a/src/xrGame/WeaponUpgrade.cpp
+++ b/src/xrGame/WeaponUpgrade.cpp
@@ -281,6 +281,10 @@ bool CWeapon::install_upgrade_addon(LPCSTR section, bool test)
 	result |= process_if_exists_set(section, "scope_alive_detector", &CInifile::r_string_wb,
 	                                m_zoom_params.m_sUseBinocularVision, test);
 
+	process_if_exists_set(section, "scope_dynamic_zoom", &CInifile::r_bool, m_zoom_params.m_bUseDynamicZoom_Primary, test);
+	process_if_exists_set(section, "scope_dynamic_zoom_alt", &CInifile::r_bool, m_zoom_params.m_bUseDynamicZoom_Alt, test);
+	process_if_exists_set(section, "scope_dynamic_zoom_gl", &CInifile::r_bool, m_zoom_params.m_bUseDynamicZoom_GL, test);
+
 	result |= result2;
 
 	temp_int = (int)m_eSilencerStatus;
diff --git a/src/xrGame/ai/ai_monsters_anims.h b/src/xrGame/ai/ai_monsters_anims.h
index e7b9066..db55e76 100644
--- a/src/xrGame/ai/ai_monsters_anims.h
+++ b/src/xrGame/ai/ai_monsters_anims.h
@@ -31,7 +31,8 @@ public:
 	{
 		A.clear();
 		string256 S;
-		for (int j = 0; caBaseNames[j]; ++j);
+		int j = 0;
+		for (; caBaseNames[j]; ++j);
 		A.resize(j);
 		for (int i = 0; i < j; ++i)
 		{
@@ -55,7 +56,8 @@ public:
 	{
 		A.clear();
 		string256 S;
-		for (int j = 0; caBaseNames[j]; ++j);
+		int j = 0;
+		for (; caBaseNames[j]; ++j);
 		A.resize(j);
 		for (int i = 0; i < j; ++i)
 			A[i].Load(tpKinematics, strconcat(sizeof(S), S, caBaseName, caBaseNames[i]));
diff --git a/src/xrGame/ai/monsters/bloodsucker/bloodsucker.cpp b/src/xrGame/ai/monsters/bloodsucker/bloodsucker.cpp
index 2379645..dcb0f6e 100644
--- a/src/xrGame/ai/monsters/bloodsucker/bloodsucker.cpp
+++ b/src/xrGame/ai/monsters/bloodsucker/bloodsucker.cpp
@@ -505,6 +505,21 @@ CAI_Bloodsucker::visibility_t CAI_Bloodsucker::get_visibility_state() const
 	return m_force_visibility_state != unset ? m_force_visibility_state : m_visibility_state;
 }
 
+//--DSR-- HeatVision_start
+float CAI_Bloodsucker::GetTransparency() 
+{
+	if (m_visibility_state == no_visibility) 
+	{
+		return 1.0f;
+	}
+	else
+	{
+		return 0.0f;
+	}
+
+}
+//--DSR-- HeatVision_end
+
 void CAI_Bloodsucker::set_visibility_state(visibility_t new_state)
 {
 	if (m_force_visibility_state != unset)
@@ -540,6 +555,12 @@ void CAI_Bloodsucker::set_visibility_state(visibility_t new_state)
 	{
 		start_invisible_predator();
 	}
+	//--DSR-- HeatVision_start
+	/*else if (m_visibility_state == no_visibility)
+	{
+		start_invisible_predator();
+	}*/
+	//--DSR-- HeatVision_end
 	else
 	{
 		sound().play(CAI_Bloodsucker::eChangeVisibility);
@@ -856,12 +877,20 @@ void CAI_Bloodsucker::manual_deactivate()
 	setVisible(TRUE);
 }
 
+
+extern int ps_r2_heatvision;
 void CAI_Bloodsucker::renderable_Render()
 {
-	if (m_visibility_state != no_visibility)
-	{
+	//--DSR-- HeatVision_start
+	
+	//if (m_visibility_state != no_visibility)
+	//{
+	//	inherited::renderable_Render();  
+	//}
+
+	if (m_visibility_state != no_visibility || ps_r2_heatvision > 0)
 		inherited::renderable_Render();
-	}
+	//--DSR-- HeatVision_end
 }
 
 bool CAI_Bloodsucker::done_enough_hits_before_vampire()
diff --git a/src/xrGame/ai/monsters/bloodsucker/bloodsucker.h b/src/xrGame/ai/monsters/bloodsucker/bloodsucker.h
index 7fa710b..cffb4ae 100644
--- a/src/xrGame/ai/monsters/bloodsucker/bloodsucker.h
+++ b/src/xrGame/ai/monsters/bloodsucker/bloodsucker.h
@@ -215,6 +215,9 @@ private:
 	TTime m_runaway_invisible_time;
 
 public:
+
+	virtual float GetTransparency(); //--DSR-- HeatVision
+
 	float get_full_visibility_radius();
 	float get_partial_visibility_radius();
 	float get_no_visibility_radius();
diff --git a/src/xrGame/ai/monsters/burer/burer_state_attack_gravi_inline.h b/src/xrGame/ai/monsters/burer/burer_state_attack_gravi_inline.h
index 59ffe28..a25205f 100644
--- a/src/xrGame/ai/monsters/burer/burer_state_attack_gravi_inline.h
+++ b/src/xrGame/ai/monsters/burer/burer_state_attack_gravi_inline.h
@@ -138,4 +138,8 @@ void CStateBurerAttackGravi<Object>::ExecuteGraviFire()
 
 	object->StopGraviPrepare();
 	object->sound().play(CBurer::eMonsterSoundGraviAttack);
+
+	// Interactive Grass FX
+	extern Fvector4 ps_ssfx_grass_interactive;
+	g_pGamePersistent->GrassBendersAddExplosion(object->ID(), from_pos, object->Direction(), 1.33f, 3.0f, ps_ssfx_grass_interactive.w, 13.0f);
 }
diff --git a/src/xrGame/ai/monsters/chimera/chimera_attack_state_inline.h b/src/xrGame/ai/monsters/chimera/chimera_attack_state_inline.h
index 849f6bc..9053b3c 100644
--- a/src/xrGame/ai/monsters/chimera/chimera_attack_state_inline.h
+++ b/src/xrGame/ai/monsters/chimera/chimera_attack_state_inline.h
@@ -187,8 +187,9 @@ bool ChimeraAttackState<Object>::select_target_for_move()
 		float const move_scan_points = 8;
 		float const move_scan_angle = deg2rad(360.f) / move_scan_points;
 
-		for (u32 index = 0;
-		     index < move_scan_points;
+		u32 index = 0;
+
+		for (; index < move_scan_points;
 		     ++index)
 		{
 			float const angle = move_scan_angle *
diff --git a/src/xrGame/ai/monsters/control_animation_base_accel.cpp b/src/xrGame/ai/monsters/control_animation_base_accel.cpp
index 10bd71f..02d3e9f 100644
--- a/src/xrGame/ai/monsters/control_animation_base_accel.cpp
+++ b/src/xrGame/ai/monsters/control_animation_base_accel.cpp
@@ -136,6 +136,8 @@ bool CControlAnimationBase::accel_check_braking(float before_interval, float nom
 {
 	if (!m_man->path_builder().is_moving_on_path()) return (braking_mode = false);
 	if (!accel_active(eAV_Braking)) return (braking_mode = false);
+	if (m_man->path_builder().detail().path()[m_man->path_builder().detail().curr_travel_point_index()].velocity == MonsterMovement::eVelocityParameterStand)
+		return (braking_mode = false);
 
 	float acceleration = accel_get(eAV_Braking);
 	float braking_dist = (nominal_speed * ((braking_mode) ? nominal_speed : m_man->movement().velocity_current())) / (2
diff --git a/src/xrGame/ai/monsters/pseudogigant/pseudo_gigant.cpp b/src/xrGame/ai/monsters/pseudogigant/pseudo_gigant.cpp
index 908d83f..bf0aaa1 100644
--- a/src/xrGame/ai/monsters/pseudogigant/pseudo_gigant.cpp
+++ b/src/xrGame/ai/monsters/pseudogigant/pseudo_gigant.cpp
@@ -17,6 +17,13 @@
 #include "../control_path_builder_base.h"
 #include "inventory_item.h"
 
+#include "script_hit.h"
+#include "pch_script.h"
+#include "../../script_game_object.h"
+
+// demonized: Flag for damaging NPCs and other objects by the stomp attack
+BOOL pseudogiantCanDamageObjects = 1;
+
 
 CPseudoGigant::CPseudoGigant()
 {
@@ -262,6 +269,21 @@ void CPseudoGigant::on_activate_control(ControlCom::EControlType type)
 	{
 		m_sound_start_threaten.play_at_pos(this, get_head_position(this));
 		m_time_next_threaten = time() + Random.randI(m_threaten_delay_min, m_threaten_delay_max);
+
+		// callback for start animation, will be triggered by everyone in radius
+		m_nearest.clear_not_free();
+		Level().ObjectSpace.GetNearest(m_nearest, Position(), 15.f, NULL);
+		for (u32 i = 0; i < m_nearest.size(); i++)
+		{
+			CPhysicsShellHolder* obj = smart_cast<CPhysicsShellHolder*>(m_nearest[i]);
+			if (obj && obj->ID() != 0 && obj->ID() != ID()) {
+				luabind::functor<void> funct;
+				if (ai().script_engine().functor("_G.CPseudoGigant__OnStartStompAnimation", funct))
+				{
+					funct(obj->lua_game_object(), this->lua_game_object());
+				}
+			}
+		}
 	}
 }
 
@@ -274,6 +296,56 @@ void CPseudoGigant::on_threaten_execute()
 	{
 		CPhysicsShellHolder* obj = smart_cast<CPhysicsShellHolder *>(m_nearest[i]);
 		CInventoryItem* itm = smart_cast<CInventoryItem*>(m_nearest[i]);
+
+		if (pseudogiantCanDamageObjects && obj && obj->ID() != 0 && obj->ID() != ID()) {
+			float dist_to_enemy = obj->Position().distance_to(Position());
+			float hit_value;
+			hit_value = m_kick_damage - m_kick_damage * dist_to_enemy / m_threaten_dist_max;
+			clamp(hit_value, 0.f, 1.f);
+
+			SHit HS;
+
+			HS.GenHeader(GE_HIT, obj->ID()); 
+			HS.whoID = ID(); 
+			HS.who = this;
+			HS.weaponID = ID(); 
+			HS.dir = Fvector().set(0.f, 1.f, 0.f); 
+			HS.power = hit_value; 
+			HS.boneID = smart_cast<IKinematics*>(obj->Visual())->LL_GetBoneRoot();
+			HS.p_in_bone_space = Fvector().set(0.f, 0.f, 0.f);
+
+			HS.impulse = obj->cast_entity_alive() && obj->cast_entity_alive()->g_Alive() ? 80 * 80 : 0; // 0 impulse for not alive objects, they will receive the impulse later
+			//HS.impulse = 80 * obj->character_physics_support()->movement()->GetMass();
+
+			HS.hit_type = ALife::eHitTypeStrike;
+
+			bool doHit = true;
+			luabind::functor<bool> funct;
+			CScriptHit tLuaHit(&HS);
+			if (ai().script_engine().functor("_G.CPseudoGigant__BeforeHitCallback", funct))
+			{
+				doHit = funct(obj->lua_game_object(), this->lua_game_object(), &tLuaHit, HS.boneID);
+				if (doHit) {
+					HS.ApplyScriptHit(&tLuaHit);
+				}
+			}
+
+			if (doHit) {
+				//Msg("hit entity %d, name %s, damage %f", obj->ID(), obj->Name(), hit_value);
+				obj->Hit(&HS);
+
+				luabind::functor<void> hitFunct;
+				if (ai().script_engine().functor("_G.CPseudoGigant__HitCallback", hitFunct))
+				{
+					hitFunct(obj->lua_game_object(), this->lua_game_object(), &tLuaHit, HS.boneID);
+				}
+
+				//NET_Packet l_P;
+				//HS.Write_Packet(l_P);
+				//u_EventSend(l_P);
+			}						
+		}
+
 		if (!obj || !obj->m_pPhysicsShell || (itm && itm->IsQuestItem())) continue;
 
 		Fvector dir;
@@ -291,6 +363,10 @@ void CPseudoGigant::on_threaten_execute()
 	pos.y += 0.1f;
 	m_sound_threaten_hit.play_at_pos(this, pos);
 
+	// Interactive Grass FX
+	extern Fvector4 ps_ssfx_grass_interactive;
+	g_pGamePersistent->GrassBendersAddExplosion(ID(), pos, Fvector().set(0, -99, 0), 1.33f, 5.0f, ps_ssfx_grass_interactive.w, 20);
+
 	// èãðàòü ïàðòèêëû
 	PlayParticles(m_kick_particles, pos, Direction());
 
diff --git a/src/xrGame/ai/stalker/ai_stalker.h b/src/xrGame/ai/stalker/ai_stalker.h
index 0409ea5..8b4965f 100644
--- a/src/xrGame/ai/stalker/ai_stalker.h
+++ b/src/xrGame/ai/stalker/ai_stalker.h
@@ -157,6 +157,10 @@ public:
 public:
 	bool m_wounded;
 
+	// demonized: add enabling pathfinding and damage by anomalies flags
+	bool m_enable_anomalies_pathfinding = false;
+	bool m_enable_anomalies_damage = false;
+
 public:
 	CAI_Stalker();
 	virtual ~CAI_Stalker();
diff --git a/src/xrGame/ai/stalker/ai_stalker_events.cpp b/src/xrGame/ai/stalker/ai_stalker_events.cpp
index f38ad85..0c63483 100644
--- a/src/xrGame/ai/stalker/ai_stalker_events.cpp
+++ b/src/xrGame/ai/stalker/ai_stalker_events.cpp
@@ -15,6 +15,7 @@
 #include "../../level.h"
 #include "../../ai_monster_space.h"
 #include "../../characterphysicssupport.h"
+#include "CustomZone.h"
 
 using namespace StalkerSpace;
 using namespace MonsterSpace;
@@ -139,6 +140,7 @@ void CAI_Stalker::UpdateAvailableDialogs(CPhraseDialogManager* partner)
 	CAI_PhraseDialogManager::UpdateAvailableDialogs(partner);
 }
 
+extern BOOL g_ai_die_in_anomaly;
 void CAI_Stalker::feel_touch_new(CObject* O)
 {
 	//	Msg					("FEEL_TOUCH::NEW : %s",*O->cName());
@@ -146,6 +148,14 @@ void CAI_Stalker::feel_touch_new(CObject* O)
 	if (Remote()) return;
 	if ((O->spatial.type | STYPE_VISIBLEFORAI) != O->spatial.type) return;
 
+	// demonized: add g_ai_die_in_anomaly == 0 check
+	if (!(g_ai_die_in_anomaly || m_enable_anomalies_pathfinding)) {
+		CCustomZone* sr = smart_cast<CCustomZone*>(O);
+		if (sr) {
+			return;
+		}
+	}
+
 	// Now, test for game specific logical objects to minimize traffic
 	CInventoryItem* I = smart_cast<CInventoryItem*>(O);
 
diff --git a/src/xrGame/ai/stalker/ai_stalker_feel.cpp b/src/xrGame/ai/stalker/ai_stalker_feel.cpp
index c0d54c9..cd81af1 100644
--- a/src/xrGame/ai/stalker/ai_stalker_feel.cpp
+++ b/src/xrGame/ai/stalker/ai_stalker_feel.cpp
@@ -14,6 +14,7 @@
 #include "../../sight_manager.h"
 #include "../../stalker_movement_manager_smart_cover.h"
 #include "../../stalker_animation_manager.h"
+#include "CustomZone.h"
 
 #ifdef DEBUG
 #	include "../../ai_debug.h"
@@ -56,6 +57,7 @@ bool CAI_Stalker::bfCheckForNodeVisibility(u32 dwNodeID, bool bIfRayPick)
 	return (memory().visual().visible(dwNodeID, movement().m_head.current.yaw, ffGetFov()));
 }
 
+extern BOOL g_ai_die_in_anomaly;
 bool CAI_Stalker::feel_touch_contact(CObject* O)
 {
 	if (!m_take_items_enabled && smart_cast<CInventoryItem*>(O))
@@ -71,6 +73,15 @@ bool CAI_Stalker::feel_touch_contact(CObject* O)
 	if (!game_object)
 		return (false);
 
+	// demonized: add g_ai_die_in_anomaly == 0 and m_enable_anomalies_pathfinding check
+	// when 0 - disable pathfinding around anomaly
+	if (!(g_ai_die_in_anomaly || m_enable_anomalies_pathfinding)) {
+		CCustomZone* sr = smart_cast<CCustomZone*>(O);
+		if (sr && (sr->spatial.type & STYPE_VISIBLEFORAI)) {
+			return false;
+		}
+	}
+
 	return (game_object->feel_touch_on_contact(this));
 }
 
@@ -81,6 +92,15 @@ bool CAI_Stalker::feel_touch_on_contact(CObject* O)
 	if ((O->spatial.type | STYPE_VISIBLEFORAI) != O->spatial.type)
 		return (false);
 
+	// demonized: add g_ai_die_in_anomaly == 0 and m_enable_anomalies_damage check
+	// when 0 - prevent any damage from anomalies
+	if (!(g_ai_die_in_anomaly || m_enable_anomalies_damage)) {
+		CCustomZone* sr = smart_cast<CCustomZone*>(O);
+		if (sr) {
+			return false;
+		}
+	}
+
 	return (inherited::feel_touch_on_contact(O));
 }
 
diff --git a/src/xrGame/ai_object_location.h b/src/xrGame/ai_object_location.h
index 25bb6ea..8299ed8 100644
--- a/src/xrGame/ai_object_location.h
+++ b/src/xrGame/ai_object_location.h
@@ -36,7 +36,7 @@ public:
 	IC const _GRAPH_ID game_vertex_id() const;
 	IC void level_vertex(CLevelVertex const* level_vertex);
 	void level_vertex(u32 const& level_vertex_id);
-	IC const CLevelVertex* level_vertex() const;
+	const CLevelVertex* level_vertex() const;
 	IC const u32 level_vertex_id() const;
 };
 
diff --git a/src/xrGame/ai_object_location_impl.h b/src/xrGame/ai_object_location_impl.h
index 663614d..1d550c9 100644
--- a/src/xrGame/ai_object_location_impl.h
+++ b/src/xrGame/ai_object_location_impl.h
@@ -56,7 +56,7 @@ void CAI_ObjectLocation::level_vertex(u32 const& level_vertex_id)
 	m_level_vertex_id = level_vertex_id;
 }
 
-IC const CLevelGraph::CVertex* CAI_ObjectLocation::level_vertex() const
+const CLevelGraph::CVertex* CAI_ObjectLocation::level_vertex() const
 {
 	VERIFY(ai().level_graph().valid_vertex_id(m_level_vertex_id));
 	return (ai().level_graph().vertex(m_level_vertex_id));
diff --git a/src/xrGame/alife_group_abstract.cpp b/src/xrGame/alife_group_abstract.cpp
index 3b3a6bc..16ea80f 100644
--- a/src/xrGame/alife_group_abstract.cpp
+++ b/src/xrGame/alife_group_abstract.cpp
@@ -138,7 +138,8 @@ void CSE_ALifeGroupAbstract::try_switch_offline()
 	VERIFY(I);
 
 	// iterating on group members
-	for (u32 i = 0, N = (u32)m_tpMembers.size(); i < N; ++i)
+	u32 i = 0, N = (u32)m_tpMembers.size();
+	for (; i < N; ++i)
 	{
 		// casting group member to the abstract monster to get access to the Health property
 		CSE_ALifeMonsterAbstract* tpGroupMember = smart_cast<CSE_ALifeMonsterAbstract*>(
diff --git a/src/xrGame/alife_monster_movement_manager_script.cpp b/src/xrGame/alife_monster_movement_manager_script.cpp
index 0c02675..f85be84 100644
--- a/src/xrGame/alife_monster_movement_manager_script.cpp
+++ b/src/xrGame/alife_monster_movement_manager_script.cpp
@@ -10,6 +10,7 @@
 #include "alife_monster_movement_manager.h"
 #include "alife_monster_detail_path_manager.h"
 #include "alife_monster_patrol_path_manager.h"
+#include "movement_manager_space.h"
 
 using namespace luabind;
 
diff --git a/src/xrGame/alife_monster_patrol_path_manager_script.cpp b/src/xrGame/alife_monster_patrol_path_manager_script.cpp
index 8b6547b..a83f97a 100644
--- a/src/xrGame/alife_monster_patrol_path_manager_script.cpp
+++ b/src/xrGame/alife_monster_patrol_path_manager_script.cpp
@@ -8,6 +8,7 @@
 
 #include "pch_script.h"
 #include "alife_monster_patrol_path_manager.h"
+#include "patrol_path_manager_space.h"
 
 using namespace luabind;
 
diff --git a/src/xrGame/alife_object_registry.cpp b/src/xrGame/alife_object_registry.cpp
index 6a95e20..dab5713 100644
--- a/src/xrGame/alife_object_registry.cpp
+++ b/src/xrGame/alife_object_registry.cpp
@@ -112,7 +112,13 @@ CSE_ALifeDynamicObject* CALifeObjectRegistry::get_object(IReader& file_stream)
 #endif
 	// create entity
 	CSE_Abstract* tpSE_Abstract = F_entity_Create(s_name);
-	R_ASSERT2(tpSE_Abstract, "Can't create entity.");
+	if (!tpSE_Abstract)
+	{
+		Msg("! Can't create entity '%s'", s_name);
+		tNetPacket.B.count = file_stream.r_u16();
+		file_stream.advance(tNetPacket.B.count);
+		return nullptr;
+	}
 	CSE_ALifeDynamicObject* tpALifeDynamicObject = smart_cast<CSE_ALifeDynamicObject*>(tpSE_Abstract);
 	R_ASSERT2(tpALifeDynamicObject, "Non-ALife object in the saved game!");
 	tpALifeDynamicObject->Spawn_Read(tNetPacket);
@@ -135,15 +141,14 @@ void CALifeObjectRegistry::load(IReader& file_stream)
 	m_objects.clear();
 
 	u32 count = file_stream.r_u32();
-	CSE_ALifeDynamicObject** objects = (CSE_ALifeDynamicObject**)_alloca(count * sizeof(CSE_ALifeDynamicObject*));
-
-	CSE_ALifeDynamicObject** I = objects;
-	CSE_ALifeDynamicObject** E = objects + count;
-	for (; I != E; ++I)
+	for (u32 I = 0; I < count; ++I)
 	{
-		*I = get_object(file_stream);
-		add(*I);
+		CSE_ALifeDynamicObject* tpSE_Abstract = get_object(file_stream);
+		if (!tpSE_Abstract)
+			continue;
+
+		add(tpSE_Abstract);
 	}
 
-	Msg("* %d objects are successfully loaded", count);
+	Msg("* %d objects are successfully loaded", m_objects.size());
 }
diff --git a/src/xrGame/alife_simulator_script.cpp b/src/xrGame/alife_simulator_script.cpp
index e5b96f1..34e7719 100644
--- a/src/xrGame/alife_simulator_script.cpp
+++ b/src/xrGame/alife_simulator_script.cpp
@@ -412,6 +412,15 @@ CSE_Abstract* reprocess_spawn(CALifeSimulator* self, CSE_Abstract* object)
 	return (self->server().Process_spawn(packet, clientID));
 }
 
+// demonized: iterate alife objects
+void CALifeSimulator__iterate_objects(const CALifeSimulator* self, luabind::functor<bool> functor)
+{
+	const CALifeObjectRegistry &objects = self->objects();
+	for (const auto& se_obj : objects.objects()) {
+		if (functor(se_obj.second)) break;
+	}
+}
+
 CSE_Abstract* try_to_clone_object(CALifeSimulator* self, CSE_Abstract* object, LPCSTR section, const Fvector& position,
                                   u32 level_vertex_id, GameGraph::_GRAPH_ID game_vertex_id, ALife::_OBJECT_ID id_parent,
                                   bool bRegister = true)
@@ -514,6 +523,9 @@ void CALifeSimulator::script_register(lua_State* L)
 		.def("get_children", &get_children, return_stl_iterator)
 		//Alundaio: END
 
+		// demonized: iterate alife objects
+		.def("iterate_objects", &CALifeSimulator__iterate_objects)
+
 		, def("alife", &alife)
 	];
 
diff --git a/src/xrGame/artefact_script.cpp b/src/xrGame/artefact_script.cpp
index 90f6dcf..c3f787c 100644
--- a/src/xrGame/artefact_script.cpp
+++ b/src/xrGame/artefact_script.cpp
@@ -33,6 +33,7 @@ void CArtefact::script_register(lua_State* L)
 		.def_readwrite("m_fSatietyRestoreSpeed", &CArtefact::m_fSatietyRestoreSpeed)
 		.def_readwrite("m_fPowerRestoreSpeed", &CArtefact::m_fPowerRestoreSpeed)
 		.def_readwrite("m_fBleedingRestoreSpeed", &CArtefact::m_fBleedingRestoreSpeed)
+		.def_readwrite("m_additional_weight", &CArtefact::m_additional_weight)
 		.def("FollowByPath", &CArtefact::FollowByPath)
 		.def("SwitchVisibility", &CArtefact::SwitchVisibility)
 		.def("GetAfRank", &CArtefact::GetAfRank),
diff --git a/src/xrGame/console_commands.cpp b/src/xrGame/console_commands.cpp
index 2841970..5c78962 100644
--- a/src/xrGame/console_commands.cpp
+++ b/src/xrGame/console_commands.cpp
@@ -1,3 +1,4 @@
+#include <unordered_set>
 #include "pch_script.h"
 #include "../xrEngine/xr_ioconsole.h"
 #include "../xrEngine/xr_ioc_cmd.h"
@@ -60,6 +61,9 @@
 
 #include "..\..\xrEngine\x_ray.h"
 
+#include "NewZoomFlag.h"
+float n_zoom_step_count = 3.0f;
+
 string_path g_last_saved_game;
 
 #ifdef DEBUG
@@ -110,6 +114,15 @@ float streff;
 
 extern BOOL g_ai_die_in_anomaly; //Alundaio
 
+//demonized: new console vars
+extern BOOL firstPersonDeath;
+extern BOOL pseudogiantCanDamageObjects;
+extern BOOL use_english_text_for_missing_translations;
+namespace crash_saving {
+	extern BOOL enabled;
+	extern int saveCountMax;
+}
+
 ENGINE_API extern float g_console_sensitive;
 
 u32 g_dead_body_collision = 1;
@@ -458,6 +471,7 @@ public:
 };
 
 //-----------------------------------------------------------------------
+std::unordered_set<CDemoRecord*> pDemoRecords;
 class CCC_DemoRecord : public IConsole_Command
 {
 public:
@@ -482,7 +496,55 @@ public:
 		string_path fn;
 		FS.update_path(fn, "$game_saves$", fn_);
 
-		g_pGameLevel->Cameras().AddCamEffector(xr_new<CDemoRecord>(fn));
+		auto pDemoRecord = xr_new<CDemoRecord>(fn, &pDemoRecords);
+		g_pGameLevel->Cameras().AddCamEffector(pDemoRecord);
+	}
+};
+
+class CCC_DemoRecordBlockedInput : public IConsole_Command
+{
+public:
+
+	CCC_DemoRecordBlockedInput(LPCSTR N) : IConsole_Command(N)
+	{
+	};
+
+	virtual void Execute(LPCSTR args)
+	{
+#ifndef	DEBUG
+		//if (GameID() != eGameIDSingle)
+		//{
+		//	Msg("For this game type Demo Record is disabled.");
+		//	return;
+		//};
+#endif
+		Console->Hide();
+
+		LPSTR fn_;
+		STRCONCAT(fn_, args, ".xrdemo");
+		string_path fn;
+		FS.update_path(fn, "$game_saves$", fn_);
+
+		auto pDemoRecord = xr_new<CDemoRecord>(fn, &pDemoRecords, TRUE);
+		g_pGameLevel->Cameras().AddCamEffector(pDemoRecord);
+	}
+};
+
+class CCC_DemoRecordStop : public IConsole_Command
+{
+public:
+
+	CCC_DemoRecordStop(LPCSTR N) : IConsole_Command(N)
+	{
+		bEmptyArgsHandled = true;
+	};
+
+	virtual void Execute(LPCSTR args)
+	{
+		for (auto pDemoRecord : pDemoRecords) {
+			pDemoRecord->StopDemo();
+		}
+		pDemoRecords.clear();
 	}
 };
 
@@ -515,6 +577,35 @@ public:
 
 Fvector CCC_DemoRecordSetPos::p = {0, 0, 0};
 
+class CCC_DemoRecordSetDir : public CCC_Vector3
+{
+	static Fvector d;
+public:
+
+	CCC_DemoRecordSetDir(LPCSTR N) : CCC_Vector3(N, &d, Fvector().set(-FLT_MAX, -FLT_MAX, -FLT_MAX),
+		Fvector().set(FLT_MAX, FLT_MAX, FLT_MAX))
+	{
+	};
+
+	virtual void Execute(LPCSTR args)
+	{
+#ifndef	DEBUG
+		//if (GameID() != eGameIDSingle)
+		//{
+		//	Msg("For this game type Demo Record is disabled.");
+		//	return;
+		//};
+#endif
+		CDemoRecord::GetGlobalDirection(d);
+		CCC_Vector3::Execute(args);
+		CDemoRecord::SetGlobalDirection(d);
+	}
+
+	virtual void Save(IWriter* F) { ; }
+};
+
+Fvector CCC_DemoRecordSetDir::d = { 0, 0, 0 };
+
 class CCC_DemoPlay : public IConsole_Command
 {
 public:
@@ -555,6 +646,57 @@ public:
 	}
 };
 
+// First Person Death
+extern float offsetH;
+extern float offsetP;
+extern float offsetB;
+extern float offsetX;
+extern float offsetY;
+extern float offsetZ;
+extern float viewportNearOffset;
+extern int firstPersonDeathPositionSmoothing;
+extern int firstPersonDeathDirectionSmoothing;
+
+class CCC_FPDDirectionOffset : public CCC_Vector3
+{
+	static Fvector d;
+public:
+
+	CCC_FPDDirectionOffset(LPCSTR N) : CCC_Vector3(N, &d, Fvector().set(-FLT_MAX, -FLT_MAX, -FLT_MAX),
+		Fvector().set(FLT_MAX, FLT_MAX, FLT_MAX))
+	{
+	};
+
+	virtual void Execute(LPCSTR args)
+	{
+		CCC_Vector3::Execute(args);
+		offsetH = d.x;
+		offsetP = d.y;
+		offsetB = d.z;
+	}
+};
+Fvector CCC_FPDDirectionOffset::d = { 0, 0, 0 };
+
+class CCC_FPDPositionOffset : public CCC_Vector3
+{
+	static Fvector d;
+public:
+
+	CCC_FPDPositionOffset(LPCSTR N) : CCC_Vector3(N, &d, Fvector().set(-FLT_MAX, -FLT_MAX, -FLT_MAX),
+		Fvector().set(FLT_MAX, FLT_MAX, FLT_MAX))
+	{
+	};
+
+	virtual void Execute(LPCSTR args)
+	{
+		CCC_Vector3::Execute(args);
+		offsetX = d.x;
+		offsetY = d.y;
+		offsetZ = d.z;
+	}
+};
+Fvector CCC_FPDPositionOffset::d = { 0, 0, 0 };
+
 // helper functions --------------------------------------------
 
 bool valid_saved_game_name(LPCSTR file_name)
@@ -2072,7 +2214,10 @@ void CCC_RegisterCommands()
 	//#ifndef MASTER_GOLD
 	CMD1(CCC_DemoPlay, "demo_play");
 	CMD1(CCC_DemoRecord, "demo_record");
+	CMD1(CCC_DemoRecordBlockedInput, "demo_record_blocked_input");
+	CMD1(CCC_DemoRecordStop, "demo_record_stop");
 	CMD1(CCC_DemoRecordSetPos, "demo_set_cam_position");
+	CMD1(CCC_DemoRecordSetDir, "demo_set_cam_direction");
 	//#endif // #ifndef MASTER_GOLD
 
 #ifndef MASTER_GOLD
@@ -2448,6 +2593,8 @@ void CCC_RegisterCommands()
 
 	CMD4(CCC_Integer, "ai_die_in_anomaly", &g_ai_die_in_anomaly, 0, 1); //Alundaio
 
+	CMD4(CCC_Integer, "pseudogiant_can_damage_objects_on_stomp", &pseudogiantCanDamageObjects, 0, 1);
+
 	CMD4(CCC_Float, "ai_aim_predict_time", &g_aim_predict_time, 0.f, 10.f);
 
 	CMD4(CCC_Float, "head_bob_factor", &g_head_bob_factor, 0.f, 2.f);
@@ -2508,8 +2655,35 @@ void CCC_RegisterCommands()
 	CMD3(CCC_Mask, "g_feel_grenade", &psDeviceFlags2, rsFeelGrenade);
 	CMD3(CCC_Mask, "g_always_active", &psDeviceFlags2, rsAlwaysActive);
 
+	// demonized: use_english_text_for_missing_translations
+	CMD4(CCC_Integer, "use_english_text_for_missing_translations", &use_english_text_for_missing_translations, 0, 1);
+
+	//First Person Death
+	CMD4(CCC_Integer, "first_person_death", &firstPersonDeath, 0, 1);
+	CMD1(CCC_FPDDirectionOffset, "first_person_death_direction_offset");
+	CMD1(CCC_FPDPositionOffset, "first_person_death_position_offset");
+	CMD4(CCC_Integer, "first_person_death_position_smoothing", &firstPersonDeathPositionSmoothing, 1, 30);
+	CMD4(CCC_Integer, "first_person_death_direction_smoothing", &firstPersonDeathDirectionSmoothing, 1, 60);
+	CMD4(CCC_Float, "first_person_death_near_plane_offset", &viewportNearOffset, -0.1, 0.5);
+
+	//Toggle crash saving
+	CMD4(CCC_Integer, "crash_save", &crash_saving::enabled, 0, 1);
+	CMD4(CCC_Integer, "crash_save_count", &crash_saving::saveCountMax, 0, 20);
+
 	if (strstr(Core.Params, "-dbgdev"))
 		CMD4(CCC_Float, "g_streff", &streff, -10.f, 10.f);
 	//No need for server commands in a singleplayer-only mod
 	//register_mp_console_commands();
+    
+    zoomFlags.set(NEW_ZOOM, FALSE);
+    zoomFlags.set(SDS_ZOOM, TRUE);
+    zoomFlags.set(SDS_SPEED, TRUE);
+    zoomFlags.set(SDS, TRUE);
+
+    CMD3(CCC_Mask, "new_zoom_enable", &zoomFlags, NEW_ZOOM);
+    CMD3(CCC_Mask, "sds_zoom_enable", &zoomFlags, SDS_ZOOM);
+    CMD3(CCC_Mask, "sds_speed_enable", &zoomFlags, SDS_SPEED);
+    CMD3(CCC_Mask, "sds_enable", &zoomFlags, SDS);
+
+    CMD4(CCC_Float, "zoom_step_count", &n_zoom_step_count, 1.0f, 10.0f);
 }
diff --git a/src/xrGame/cover_manager.cpp b/src/xrGame/cover_manager.cpp
index 08fa9c1..4fbe961 100644
--- a/src/xrGame/cover_manager.cpp
+++ b/src/xrGame/cover_manager.cpp
@@ -90,7 +90,8 @@ void CCoverManager::compute_static_cover()
 	m_temp.resize(ai().level_graph().header().vertex_count());
 
 	CLevelGraph const& graph = ai().level_graph();
-	for (u32 i = 0, n = ai().level_graph().header().vertex_count(); i < n; ++i)
+	u32 n = ai().level_graph().header().vertex_count();
+	for (u32 i = 0; i < n; ++i)
 	{
 		CLevelGraph::CVertex const& vertex = *graph.vertex(i);
 		if (vertex.high_cover(0) + vertex.high_cover(1) + vertex.high_cover(2) + vertex.high_cover(3))
diff --git a/src/xrGame/data_storage_binary_heap_inline.h b/src/xrGame/data_storage_binary_heap_inline.h
index 39c41e8..c3505af 100644
--- a/src/xrGame/data_storage_binary_heap_inline.h
+++ b/src/xrGame/data_storage_binary_heap_inline.h
@@ -70,7 +70,8 @@ TEMPLATE_SPECIALIZATION
 IC void CBinaryHeap::decrease_opened(CGraphVertex& vertex, const _dist_type value)
 {
 	VERIFY(!is_opened_empty());
-	for (CGraphVertex** i = m_heap_head; *i != &vertex; ++i);
+	CGraphVertex** i = m_heap_head;
+	for (; *i != &vertex; ++i);
 	std::push_heap(m_heap_head, i + 1, CGraphNodePredicate());
 }
 
diff --git a/src/xrGame/death_anims_predicates.cpp b/src/xrGame/death_anims_predicates.cpp
index 05efd48..c9d6437 100644
--- a/src/xrGame/death_anims_predicates.cpp
+++ b/src/xrGame/death_anims_predicates.cpp
@@ -6,6 +6,7 @@
 #include	"ai/stalker/ai_stalker.h"
 #include	"stalker_movement_manager_smart_cover.h"
 #include	"weaponshotgun.h"
+#include	"WeaponAutomaticShotgun.h"
 #include	"explosive.h"
 #include	"weaponmagazined.h"
 #include	"CharacterPhysicsSupport.h"
@@ -177,8 +178,11 @@ class type_motion2 : public type_motion
 			return false;
 		//static_cast<CGameObject*>(O)->cast_weapon()
 		CWeaponShotgun* s = smart_cast<CWeaponShotgun*>(static_cast<CGameObject*>(O));
-		if (!s)
-			return false;
+		if (!s) {
+			CWeaponAutomaticShotgun* s = smart_cast<CWeaponAutomaticShotgun*>(static_cast<CGameObject*>(O));
+			if (!s)
+				return false;
+		}		
 		Fvector p;
 		const float max_distance = 20.f;
 		if (Fvector().sub(H.initiator()->Position(), global_hit_position(p, ea, H)).magnitude() > max_distance)
diff --git a/src/xrGame/debug_renderer.cpp b/src/xrGame/debug_renderer.cpp
index 7e2f502..7910e88 100644
--- a/src/xrGame/debug_renderer.cpp
+++ b/src/xrGame/debug_renderer.cpp
@@ -7,15 +7,14 @@
 ////////////////////////////////////////////////////////////////////////////
 
 #include "stdafx.h"
-#ifdef DEBUG
-#	include "debug_renderer.h"
+#include "debug_renderer.h"
 
-void CDebugRenderer::add_lines		(Fvector const *vertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color)
+void CDebugRenderer::add_lines		(Fvector const *vertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color, bool bHud)
 {
-	DRender->add_lines				(vertices, vertex_count, pairs, pair_count, color);
+	DRender->add_lines				(vertices, vertex_count, pairs, pair_count, color, bHud);
 }
 
-void CDebugRenderer::draw_obb		(const Fmatrix &matrix, const u32 &color)
+void CDebugRenderer::draw_obb		(const Fmatrix &matrix, const u32 &color, bool bHud)
 {
 	Fvector							aabb[8];
 	matrix.transform_tiny			(aabb[0],Fvector().set( -1, -1, -1)); // 0
@@ -31,20 +30,20 @@ void CDebugRenderer::draw_obb		(const Fmatrix &matrix, const u32 &color)
 		0,1,  1,2,  2,3,  3,0,  4,5,  5,6,  6,7,  7,4,  1,5,  2,6,  3,7,  0,4
 	};
 
-	add_lines						(aabb, sizeof(aabb)/sizeof(Fvector), &aabb_id[0], sizeof(aabb_id)/(2*sizeof(u16)), color);
+	add_lines						(aabb, sizeof(aabb)/sizeof(Fvector), &aabb_id[0], sizeof(aabb_id)/(2*sizeof(u16)), color, bHud);
 }
 
-void CDebugRenderer::draw_obb		(const Fmatrix &matrix, const Fvector &half_size, const u32 &color)
+void CDebugRenderer::draw_obb		(const Fmatrix &matrix, const Fvector &half_size, const u32 &color, bool bHud)
 {
 	Fmatrix							mL2W_Transform,mScaleTransform;
 
 	mScaleTransform.scale			(half_size);
 	mL2W_Transform.mul_43			(matrix,mScaleTransform);
 
-	draw_obb						(mL2W_Transform,color);
+	draw_obb						(mL2W_Transform,color,bHud);
 }
 
-void CDebugRenderer::draw_ellipse	(const Fmatrix &matrix, const u32 &color)
+void CDebugRenderer::draw_ellipse	(const Fmatrix &matrix, const u32 &color, bool bHud)
 {
 	float vertices[114*3]			= {
 			0.0000f,0.0000f,1.0000f,  0.0000f,0.3827f,0.9239f,  -0.1464f,0.3536f,0.9239f,
@@ -135,6 +134,5 @@ void CDebugRenderer::draw_ellipse	(const Fmatrix &matrix, const u32 &color)
 	for ( ; I != E; ++I)
 		matrix.transform_tiny		(*I,Fvector().set(*I));
 
-	add_lines						((Fvector*)&vertices[0], sizeof(vertices)/sizeof(Fvector), &pairs[0], sizeof(pairs)/(2*sizeof(u16)), color);
+	add_lines						((Fvector*)&vertices[0], sizeof(vertices)/sizeof(Fvector), &pairs[0], sizeof(pairs)/(2*sizeof(u16)), color, bHud);
 }
-#endif // DEBUG
diff --git a/src/xrGame/debug_renderer.h b/src/xrGame/debug_renderer.h
index 4f0a52e..40daf60 100644
--- a/src/xrGame/debug_renderer.h
+++ b/src/xrGame/debug_renderer.h
@@ -7,25 +7,20 @@
 ////////////////////////////////////////////////////////////////////////////
 
 #pragma once
-
-#ifdef DEBUG
-
 #include "../Include/xrRender/DebugRender.h"
 
 class CDebugRenderer {
 private:
-			void	add_lines		(Fvector const *vertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color);
+			void	add_lines		(Fvector const *vertices, u32 const &vertex_count, u16 const *pairs, u32 const &pair_count, u32 const &color, bool bHud);
 public:
 	IC		void	render			();
 
 public:
-	IC		void	draw_line		(const Fmatrix &matrix, const Fvector &vertex0, const Fvector &vertex1, const u32 &color);
-	IC		void	draw_aabb		(const Fvector &center, const float &half_radius_x, const float &half_radius_y, const float &half_radius_z, const u32 &color);
-			void	draw_obb		(const Fmatrix &matrix, const u32 &color);
-			void	draw_obb		(const Fmatrix &matrix, const Fvector &half_size, const u32 &color);
-			void	draw_ellipse	(const Fmatrix &matrix, const u32 &color);
+	IC		void	draw_line		(const Fmatrix &matrix, const Fvector &vertex0, const Fvector &vertex1, const u32 &color, bool bHud);
+	IC		void	draw_aabb		(const Fvector &center, const float &half_radius_x, const float &half_radius_y, const float &half_radius_z, const u32 &color, bool bHud);
+			void	draw_obb		(const Fmatrix &matrix, const u32 &color, bool bHud);
+			void	draw_obb		(const Fmatrix &matrix, const Fvector &half_size, const u32 &color, bool bHud);
+			void	draw_ellipse	(const Fmatrix &matrix, const u32 &color, bool bHud);
 };
 
 #include "debug_renderer_inline.h"
-
-#endif // DEBUG
diff --git a/src/xrGame/debug_renderer_inline.h b/src/xrGame/debug_renderer_inline.h
index 87b6212..9f9153e 100644
--- a/src/xrGame/debug_renderer_inline.h
+++ b/src/xrGame/debug_renderer_inline.h
@@ -14,16 +14,16 @@ IC void CDebugRenderer::render()
 }
 
 IC void CDebugRenderer::draw_line(const Fmatrix& matrix, const Fvector& vertex0, const Fvector& vertex1,
-                                  const u32& color)
+                                  const u32& color, bool bHud)
 {
 	Fvector vertices[2] = {vertex0, vertex1};
 	u16 indices[2] = {0, 1};
 	add_lines(&vertices[0], sizeof(vertices) / sizeof(Fvector), &indices[0], sizeof(indices) / (2 * sizeof(u16)),
-	          color);
+	          color, bHud);
 }
 
 IC void CDebugRenderer::draw_aabb(const Fvector& center, const float& half_radius_x, const float& half_radius_y,
-                                  const float& half_radius_z, const u32& color)
+                                  const float& half_radius_z, const u32& color, bool bHud)
 {
 	Fvector half_radius;
 	half_radius.set(half_radius_x, half_radius_y, half_radius_z);
@@ -31,5 +31,5 @@ IC void CDebugRenderer::draw_aabb(const Fvector& center, const float& half_radiu
 	Fmatrix matrix;
 	matrix.translate(center);
 
-	draw_obb(matrix, half_radius, color);
+	draw_obb(matrix, half_radius, color, bHud);
 }
diff --git a/src/xrGame/edge_path_inline.h b/src/xrGame/edge_path_inline.h
index 45327f5..1e4725a 100644
--- a/src/xrGame/edge_path_inline.h
+++ b/src/xrGame/edge_path_inline.h
@@ -43,7 +43,8 @@ TEMPLATE_SPECIALIZATION
 IC void CEdgePathBuilder::get_edge_path(xr_vector<_edge_type>& path, CGraphVertex* best, bool reverse_order)
 {
 	CGraphVertex *t1 = best, *t2 = best->back();
-	for (u32 i = 1; t2; t1 = t2, t2 = t2->back(), ++i);
+	u32 i = 1;
+	for (; t2; t1 = t2, t2 = t2->back(), ++i);
 	u32 n = (u32)path.size();
 
 	path.resize(n + --i);
diff --git a/src/xrGame/ef_pattern.cpp b/src/xrGame/ef_pattern.cpp
index f2f44c6..7743049 100644
--- a/src/xrGame/ef_pattern.cpp
+++ b/src/xrGame/ef_pattern.cpp
@@ -87,7 +87,7 @@ void CPatternFunction::vfLoadEF(LPCSTR caFileName)
 	m_dwaPatternIndexes = xr_alloc<u32>(m_dwPatternCount);
 	ZeroMemory(m_dwaPatternIndexes, m_dwPatternCount*sizeof(u32));
 	m_dwParameterCount = 0;
-	for (i = 0; i < m_dwPatternCount; ++i)
+	for (u32 i = 0; i < m_dwPatternCount; ++i)
 	{
 		if (i)
 			m_dwaPatternIndexes[i] = m_dwParameterCount;
diff --git a/src/xrGame/ef_pattern.h b/src/xrGame/ef_pattern.h
index 9b9be09..23a0359 100644
--- a/src/xrGame/ef_pattern.h
+++ b/src/xrGame/ef_pattern.h
@@ -42,7 +42,8 @@ private:
 	IC u32 dwfGetPatternIndex(u32* dwpTest, int iPatternIndex)
 	{
 		SPattern& tPattern = m_tpPatterns[iPatternIndex];
-		for (u32 i = 1, dwIndex = dwpTest[tPattern.dwaVariableIndexes[0]]; i < (int)tPattern.dwCardinality; ++i)
+		u32 dwIndex = dwpTest[tPattern.dwaVariableIndexes[0]];
+		for (u32 i = 1; i < (int)tPattern.dwCardinality; ++i)
 			dwIndex = dwIndex * m_dwaAtomicFeatureRange[tPattern.dwaVariableIndexes[i]] + dwpTest[tPattern.
 				dwaVariableIndexes[i]];
 		return (dwIndex + m_dwaPatternIndexes[iPatternIndex]);
diff --git a/src/xrGame/first_bullet_controller.h b/src/xrGame/first_bullet_controller.h
index 0d3548b..e55621e 100644
--- a/src/xrGame/first_bullet_controller.h
+++ b/src/xrGame/first_bullet_controller.h
@@ -14,6 +14,7 @@ public:
 	void load(shared_str const& section);
 	bool is_bullet_first(float actor_linear_velocity) const;
 	inline float get_fire_dispertion() const { return m_fire_dispertion; };
+	inline void set_fire_dispertion(float val) { m_fire_dispertion = val; };
 	void make_shot();
 }; //class first_bullet_controller
 
diff --git a/src/xrGame/game_cl_base_weapon_usage_statistic_save.cpp b/src/xrGame/game_cl_base_weapon_usage_statistic_save.cpp
index 1b26291..bc01f41 100644
--- a/src/xrGame/game_cl_base_weapon_usage_statistic_save.cpp
+++ b/src/xrGame/game_cl_base_weapon_usage_statistic_save.cpp
@@ -258,7 +258,7 @@ void Weapon_Statistic::Write(FILE* pFile)
 		if (Hit.Completed) NumHits++;
 	};
 	fwrite(&NumHits, 4, 1, pFile);
-	for (i = 0; i < m_Hits.size(); i++)
+	for (u32 i = 0; i < m_Hits.size(); i++)
 	{
 		HitData& Hit = m_Hits[i];
 		if (!Hit.Completed) continue;
diff --git a/src/xrGame/ik/limb.cxx b/src/xrGame/ik/limb.cxx
index 16cfce3..37a728b 100644
--- a/src/xrGame/ik/limb.cxx
+++ b/src/xrGame/ik/limb.cxx
@@ -991,9 +991,9 @@ void dump_file(char* file, int euler_type, float min[], float max[],
 	fprintf(fp, "%f %f %f \n", max[2], max[1], max[0]);
 	for (int i = 0; i < 4; i++)
 		fprintf(fp, "%f %f %f %f\n", c[i][0], c[i][1], c[i][2], c[i][3]);
-	for (i = 0; i < 4; i++)
+	for (int i = 0; i < 4; i++)
 		fprintf(fp, "%f %f %f %f\n", s[i][0], s[i][1], s[i][2], s[i][3]);
-	for (i = 0; i < 4; i++)
+	for (int i = 0; i < 4; i++)
 		fprintf(fp, "%f %f %f %f\n", o[i][0], o[i][1], o[i][2], o[i][3]);
 
 	fclose(fp);
diff --git a/src/xrGame/ini_id_loader.h b/src/xrGame/ini_id_loader.h
index 271a67a..a81d297 100644
--- a/src/xrGame/ini_id_loader.h
+++ b/src/xrGame/ini_id_loader.h
@@ -123,8 +123,8 @@ CSINI_IdToIndex::~CIni_IdToIndex()
 TEMPLATE_SPECIALIZATION
 const typename ITEM_DATA* CSINI_IdToIndex::GetById(const T_ID& str_id, bool no_assert)
 {
-	for (T_VECTOR::iterator it = m_pItemDataVector->begin();
-	     m_pItemDataVector->end() != it; ++it)
+	T_VECTOR::iterator it = m_pItemDataVector->begin();
+	for (; m_pItemDataVector->end() != it; ++it)
 	{
 		if (!xr_strcmp((*it).id, str_id))
 			break;
diff --git a/src/xrGame/level_script.cpp b/src/xrGame/level_script.cpp
index c16d21c..a541e9b 100644
--- a/src/xrGame/level_script.cpp
+++ b/src/xrGame/level_script.cpp
@@ -50,6 +50,8 @@
 #include "../xrEngine/GameMtlLib.h"
 #include "../xrEngine/xr_input.h"
 #include "script_ini_file.h"
+#include "EffectorBobbing.h"
+#include "LevelDebugScript.h"
 
 using namespace luabind;
 
@@ -333,6 +335,12 @@ void map_remove_object_spot(u16 id, LPCSTR spot_type)
 	Level().MapManager().RemoveMapLocation(spot_type, id);
 }
 
+// demonized: remove all map object spots by id
+void map_remove_all_object_spots(u16 id)
+{
+	Level().MapManager().RemoveAllMapLocationsById(id);
+}
+
 u16 map_has_object_spot(u16 id, LPCSTR spot_type)
 {
 	return Level().MapManager().HasMapLocation(spot_type, id);
@@ -626,6 +634,27 @@ float add_cam_effector(LPCSTR fn, int id, bool cyclic, LPCSTR cb_func, float cam
 	return e->GetAnimatorLength();
 }
 
+// demonized: Set custom camera position and direction with movement smoothing (for cutscenes, etc)
+void set_cam_position_direction(Fvector& position, Fvector& direction, unsigned int smoothing)
+{
+	CActor* actor = Actor();
+	actor->initFPCam();
+	actor->m_FPCam->m_HPB.set(direction);
+	actor->m_FPCam->m_Position.set(position);
+	actor->m_FPCam->m_customSmoothing = smoothing;
+}
+
+void set_cam_position_direction(Fvector& position, Fvector& direction)
+{
+	set_cam_position_direction(position, direction, 1);
+}
+
+void remove_cam_position_direction() 
+{
+	CActor* actor = Actor();
+	actor->removeFPCam();
+}
+
 void remove_cam_effector(int id)
 {
 	Actor()->Cameras().RemoveCamEffector((ECamEffectorType)id);
@@ -679,6 +708,15 @@ void set_snd_volume(float v)
 	clamp(psSoundVFactor, 0.0f, 1.0f);
 }
 
+float get_music_volume() {
+	return psSoundVMusicFactor;
+}
+
+void set_music_volume(float v) {
+	psSoundVMusicFactor = v;
+	clamp(psSoundVMusicFactor, 0.0f, 1.0f);
+}
+
 #include "actor_statistic_mgr.h"
 
 void add_actor_points(LPCSTR sect, LPCSTR detail_key, int cnt, int pts)
@@ -1331,7 +1369,7 @@ const u32 ActorMovingState()
 
 extern ENGINE_API float psHUD_FOV;
 
-const Fvector2 world2ui(Fvector pos, bool hud = false)
+const Fvector2 world2ui(Fvector pos, bool hud = false, bool allow_offscreen = false)
 {
 	Fmatrix world, res;
 	world.identity();
@@ -1359,8 +1397,11 @@ const Fvector2 world2ui(Fvector pos, bool hud = false)
 	v_res.y = res._42 / v_res.w;
 	v_res.z = res._43 / v_res.w;
 
-	if (v_res.z < 0 || v_res.w < 0) return { -9999,0 };
-	if (abs(v_res.x) > 1.f || abs(v_res.y) > 1.f) return { -9999,0 };
+	if (!allow_offscreen)
+	{
+		if (v_res.z < 0 || v_res.w < 0) return { -9999,0 };
+		if (abs(v_res.x) > 1.f || abs(v_res.y) > 1.f) return { -9999,0 };
+	}
 
 	float x = (1.f + v_res.x) / 2.f * (Device.dwWidth);
 	float y = (1.f - v_res.y) / 2.f * (Device.dwHeight);
@@ -1374,6 +1415,98 @@ const Fvector2 world2ui(Fvector pos, bool hud = false)
 	return { x,y };
 }
 
+// demonized: unproject ui coordinates (ie mouse cursor coordinates) to world coordinates
+// returns position and underlying object id if found. If there is no object, obj_id will be 65535
+void ui2world(Fvector2 pos, Fvector& res, u16& obj_id)
+{
+	res.set(0, 0, 0);
+	if (pos.x < 0 || pos.x > UI_BASE_WIDTH || pos.y < 0 || pos.y > UI_BASE_HEIGHT) {
+		return;
+	}
+
+	// Convert to [-1; 1] NDC space
+	pos.x = 2 * pos.x / UI_BASE_WIDTH - 1;
+	pos.y = 1 - 2 * pos.y / UI_BASE_HEIGHT;
+
+	Fmatrix mProject = Device.mFullTransform;
+
+	// 4x4 invert of camera matrix
+	{
+		Fmatrix& m = mProject;
+
+		float mProjectDet = m._11 * (m._22*m._33*m._44 + m._23*m._34*m._42 + m._24*m._32*m._43 - m._24*m._33*m._42 - m._23*m._32*m._44 - m._22*m._34*m._43)
+						-   m._21 * (m._12*m._33*m._44 + m._13*m._34*m._42 + m._14*m._32*m._43 - m._14*m._33*m._42 - m._13*m._32*m._44 - m._12*m._34*m._43)
+						+   m._31 * (m._12*m._23*m._44 + m._13*m._24*m._42 + m._14*m._22*m._43 - m._14*m._23*m._42 - m._13*m._22*m._44 - m._12*m._24*m._43)
+						-   m._41 * (m._12*m._23*m._34 + m._13*m._24*m._32 + m._14*m._22*m._33 - m._14*m._23*m._32 - m._13*m._22*m._34 - m._12*m._24*m._33);
+
+		Fmatrix mProjectAdjugate;
+		mProjectAdjugate._11 = m._22*m._33*m._44 + m._23*m._34*m._42 + m._24*m._32*m._43 - m._24*m._33*m._42 - m._23*m._32*m._44 - m._22*m._34*m._43;
+		mProjectAdjugate._12 = -m._12*m._33*m._44 - m._13*m._34*m._42 - m._14*m._32*m._43 + m._14*m._33*m._42 + m._13*m._32*m._44 + m._12*m._34*m._43;
+		mProjectAdjugate._13 = m._12*m._23*m._44 + m._13*m._24*m._42 + m._14*m._22*m._43 - m._14*m._23*m._42 - m._13*m._22*m._44 - m._12*m._24*m._43;
+		mProjectAdjugate._14 = -m._12*m._23*m._34 - m._13*m._24*m._32 - m._14*m._22*m._33 + m._14*m._23*m._32 + m._13*m._22*m._34 + m._12*m._24*m._33;
+
+		mProjectAdjugate._21 = -m._21*m._33*m._44 - m._23*m._34*m._41 - m._24*m._31*m._43 + m._24*m._33*m._41 + m._23*m._31*m._44 + m._21*m._34*m._43;
+		mProjectAdjugate._22 = m._11*m._33*m._44 + m._13*m._34*m._41 + m._14*m._31*m._43 - m._14*m._33*m._41 - m._13*m._31*m._44 - m._11*m._34*m._43;
+		mProjectAdjugate._23 = -m._11*m._23*m._44 - m._13*m._24*m._41 - m._14*m._21*m._43 + m._14*m._23*m._41 + m._13*m._21*m._44 + m._11*m._24*m._43;
+		mProjectAdjugate._24 = m._11*m._23*m._34 + m._13*m._24*m._31 + m._14*m._21*m._33 - m._14*m._23*m._31 - m._13*m._21*m._34 - m._11*m._24*m._33;
+
+		mProjectAdjugate._31 = m._21*m._32*m._44 + m._22*m._34*m._41 + m._24*m._31*m._42 - m._24*m._32*m._41 - m._22*m._31*m._44 - m._21*m._34*m._42;
+		mProjectAdjugate._32 = -m._11*m._32*m._44 - m._12*m._34*m._41 - m._14*m._31*m._42 + m._14*m._32*m._41 + m._12*m._31*m._44 + m._11*m._34*m._42;
+		mProjectAdjugate._33 = m._11*m._22*m._44 + m._12*m._24*m._41 + m._14*m._21*m._42 - m._14*m._22*m._41 - m._12*m._21*m._44 - m._11*m._24*m._42;
+		mProjectAdjugate._34 = -m._11*m._22*m._34 - m._12*m._24*m._31 - m._14*m._21*m._32 + m._14*m._22*m._31 + m._12*m._21*m._34 + m._11*m._24*m._32;
+
+		mProjectAdjugate._41 = -m._21*m._32*m._43 - m._22*m._33*m._41 - m._23*m._31*m._42 + m._23*m._32*m._41 + m._22*m._31*m._43 + m._21*m._33*m._42;
+		mProjectAdjugate._42 = m._11*m._32*m._43 + m._12*m._33*m._41 + m._13*m._31*m._42 - m._13*m._32*m._41 - m._12*m._31*m._43 - m._11*m._33*m._42;
+		mProjectAdjugate._43 = -m._11*m._22*m._43 - m._12*m._23*m._41 - m._13*m._21*m._42 + m._13*m._22*m._41 + m._12*m._21*m._43 + m._11*m._23*m._42;
+		mProjectAdjugate._44 = m._11*m._22*m._33 + m._12*m._23*m._31 + m._13*m._21*m._32 - m._13*m._22*m._31 - m._12*m._21*m._33 - m._11*m._23*m._32;
+
+		mProjectDet = 1.0 / mProjectDet;
+		mProjectAdjugate.mul(mProjectDet);
+		mProject.set(mProjectAdjugate);
+	}
+		
+	// get position at arbitrary depth
+	res.set(pos.x, pos.y, 1);
+	{
+		auto& e = mProject.m;
+		auto x = res.x;
+		auto y = res.y;
+		auto z = res.z;
+		float w = 1.0 / (e[0][3] * x + e[1][3] * y + e[2][3] * z + e[3][3]);
+
+		res.x = (e[0][0] * x + e[1][0] * y + e[2][0] * z + e[3][0]) * w;
+		res.y = (e[0][1] * x + e[1][1] * y + e[2][1] * z + e[3][1]) * w;
+		res.z = (e[0][2] * x + e[1][2] * y + e[2][2] * z + e[3][2]) * w;
+	}
+
+	// perform ray cast to get actual position
+	collide::rq_result R;
+	CObject* ignore = Actor();
+	Fvector start = Device.vCameraPosition;
+	Fvector dir;
+	dir.set(res).sub(start).normalize();
+	start.mad(dir, R_VIEWPORT_NEAR);
+	float range = g_pGamePersistent->Environment().CurrentEnv->far_plane;
+
+	obj_id = 65535;
+	if (Level().ObjectSpace.RayPick(start, dir, range, collide::rqtBoth, R, ignore))
+	{
+		res.mad(start, dir, R.range);
+
+		if (R.O) {
+			CGameObject* o = smart_cast<CGameObject*>(R.O);
+			if (o) {
+				obj_id = o->ID();
+			}
+		}
+	}
+}
+
+void ui2world(Fvector& pos, Fvector& res, u16& obj_id)
+{
+	ui2world(Fvector2().set(pos.x, pos.y), res, obj_id);
+}
+
 const float get_env_rads()
 {
 	if (!CurrentGameUI())
@@ -1427,6 +1560,28 @@ u32 g_get_target_element()
 	return (0);
 }
 
+// demonized: get world position under crosshair
+Fvector g_get_target_pos()
+{
+	collide::rq_result& RQ = HUD().GetCurrentRayQuery();
+	if (RQ.range)
+	{
+		return Fvector().mad(Device.vCameraPosition, Device.vCameraDirection, RQ.range);
+	}
+	return Fvector().set(0, 0, 0);
+}
+
+// demonized: get result of crosshair ray query
+script_rq_result g_get_target_result()
+{
+	collide::rq_result& RQ = HUD().GetCurrentRayQuery();
+	auto script_rq = script_rq_result();
+	if (RQ.range) {
+		script_rq.set(RQ);
+	}
+	return script_rq;
+}
+
 u8 get_active_cam()
 {
 	CActor* actor = smart_cast<CActor*>(Level().CurrentViewEntity());
@@ -1602,15 +1757,108 @@ CScriptIniFile* GetVisualUserdata(LPCSTR visual)
 	return ini;
 }
 
+DBG_ScriptObject* get_object(u16 id)
+{
+	xr_map<u16, DBG_ScriptObject*>::iterator it = Level().getScriptRenderQueue()->find(id);
+	if (it == Level().getScriptRenderQueue()->end())
+		return nullptr;
+
+	return it->second;
+}
+
+void remove_object(u16 id)
+{
+	DBG_ScriptObject* dbg_obj = get_object(id);
+	if (!dbg_obj)
+		return;
+
+	xr_delete(dbg_obj);
+	Level().getScriptRenderQueue()->erase(id);
+}
+
+DBG_ScriptObject* add_object(u16 id, DebugRenderType type)
+{
+	remove_object(id);
+	DBG_ScriptObject* dbg_obj;
+
+	switch (type)
+	{
+	case eDBGSphere:
+		dbg_obj = xr_new<DBG_ScriptSphere>();
+		break;
+	case eDBGBox:
+		dbg_obj = xr_new<DBG_ScriptBox>();
+		break;
+	case eDBGLine:
+		dbg_obj = xr_new<DBG_ScriptLine>();
+		break;
+	default:
+		R_ASSERT2(false, "Wrong debug object type used!");
+	}
+
+	R_ASSERT(dbg_obj);
+	Level().getScriptRenderQueue()->emplace(mk_pair(id, dbg_obj));
+
+	return dbg_obj;
+}
+
+u32 get_flags()
+{
+	return Level().m_debug_render_flags.get();
+}
+
+void set_flags(u32 flags)
+{
+	Level().m_debug_render_flags.assign(flags);
+}
+
 #pragma optimize("s",on)
 void CLevel::script_register(lua_State* L)
 {
-	class_<CEnvDescriptor>("CEnvDescriptor")
-		.def_readonly("fog_density", &CEnvDescriptor::fog_density)
+	module(L)
+		[
+			class_<CEnvDescriptor>("CEnvDescriptor")
+			.def_readonly("fog_density", &CEnvDescriptor::fog_density)
 		.def_readonly("far_plane", &CEnvDescriptor::far_plane),
 
 		class_<CEnvironment>("CEnvironment")
-		.def("current", current_environment);
+		.def("current", current_environment),
+
+		class_<DBG_ScriptObject>("DBG_ScriptObject")
+		.enum_("dbg_type")
+		[
+			value("line", (int)DebugRenderType::eDBGLine),
+			value("sphere", (int)DebugRenderType::eDBGSphere),
+			value("box", (int)DebugRenderType::eDBGBox)
+		]
+	.def("cast_dbg_sphere", &DBG_ScriptObject::cast_dbg_sphere)
+		.def("cast_dbg_box", &DBG_ScriptObject::cast_dbg_box)
+		.def("cast_dbg_line", &DBG_ScriptObject::cast_dbg_line)
+		.def_readwrite("color", &DBG_ScriptObject::m_color)
+		.def_readwrite("hud", &DBG_ScriptObject::m_hud)
+		.def_readwrite("visible", &DBG_ScriptObject::m_visible),
+
+		class_<DBG_ScriptSphere, DBG_ScriptObject>("DBG_ScriptSphere")
+		.def_readwrite("matrix", &DBG_ScriptSphere::m_mat),
+
+		class_<DBG_ScriptBox, DBG_ScriptObject>("DBG_ScriptBox")
+		.def_readwrite("matrix", &DBG_ScriptBox::m_mat)
+		.def_readwrite("size", &DBG_ScriptBox::m_size),
+
+		class_<DBG_ScriptLine, DBG_ScriptObject>("DBG_ScriptLine")
+		.def_readwrite("point_a", &DBG_ScriptLine::m_point_a)
+		.def_readwrite("point_b", &DBG_ScriptLine::m_point_b)
+		];
+
+	module(L, "debug_render")
+		[
+			def("add_object", add_object),
+			def("remove_object", remove_object),
+			def("get_object", get_object),
+			def("get_flags", get_flags),
+			def("set_flags", set_flags)
+		];
+
 
 	module(L, "level")
 		[
@@ -1620,6 +1868,13 @@ void CLevel::script_register(lua_State* L)
 			def("get_target_obj", &g_get_target_obj), //intentionally named to what is in xray extensions
 			def("get_target_dist", &g_get_target_dist),
 			def("get_target_element", &g_get_target_element), //Can get bone cursor is targetting
+			
+			// demonized: get world position under crosshair
+			def("get_target_pos", &g_get_target_pos),
+
+			// demonized: get result of crosshair ray query
+			def("get_target_result", &g_get_target_result),
+
 			def("spawn_item", &spawn_section),
 			def("get_active_cam", &get_active_cam),
 			def("set_active_cam", &set_active_cam),
@@ -1675,6 +1930,9 @@ void CLevel::script_register(lua_State* L)
 			def("map_has_object_spot", map_has_object_spot),
 			def("map_change_spot_hint", map_change_spot_hint),
 
+			// demonized: remove all map object spots by id
+			def("map_remove_all_object_spots", map_remove_all_object_spots),
+
 			def("add_dialog_to_render", add_dialog_to_render),
 			def("remove_dialog_to_render", remove_dialog_to_render),
 			def("hide_indicators", hide_indicators),
@@ -1705,10 +1963,18 @@ void CLevel::script_register(lua_State* L)
 			def("get_snd_volume", &get_snd_volume),
 			def("get_rain_volume", &get_rain_volume),
 			def("set_snd_volume", &set_snd_volume),
+			def("get_music_volume", &get_music_volume),
+			def("set_music_volume", &set_music_volume),
 			def("add_cam_effector", ((float (*)(LPCSTR, int, bool, LPCSTR))&add_cam_effector)),
 			def("add_cam_effector", ((float (*)(LPCSTR, int, bool, LPCSTR, float))&add_cam_effector)),
 			def("add_cam_effector", ((float (*)(LPCSTR, int, bool, LPCSTR, float, bool))&add_cam_effector)),
 			def("add_cam_effector", ((float (*)(LPCSTR, int, bool, LPCSTR, float, bool, float))&add_cam_effector)),
+
+			// demonized: Set custom camera position and direction with movement smoothing (for cutscenes, etc)
+			def("set_cam_custom_position_direction", ((void (*)(Fvector&, Fvector&, unsigned int))&set_cam_position_direction)),
+			def("set_cam_custom_position_direction", ((void (*)(Fvector&, Fvector&))&set_cam_position_direction)),
+			def("remove_cam_custom_position_direction", &remove_cam_position_direction),
+
 			def("remove_cam_effector", &remove_cam_effector),
 			def("set_cam_effector_factor", &set_cam_effector_factor),
 			def("get_cam_effector_factor", &get_cam_effector_factor),
@@ -1762,6 +2028,21 @@ void CLevel::script_register(lua_State* L)
 		.def_readonly("object", &script_rq_result::O)
 		.def_readonly("range", &script_rq_result::range)
 		.def_readonly("element", &script_rq_result::element)
+		.def_readonly("material_name", &script_rq_result::pMaterialName)
+		.def_readonly("material_flags", &script_rq_result::pMaterialFlags)
+		.def_readonly("material_phfriction", &script_rq_result::fPHFriction)
+		.def_readonly("material_phdamping", &script_rq_result::fPHDamping)
+		.def_readonly("material_phspring", &script_rq_result::fPHSpring)
+		.def_readonly("material_phbounce_start_velocity", &script_rq_result::fPHBounceStartVelocity)
+		.def_readonly("material_phbouncing", &script_rq_result::fPHBouncing)
+		.def_readonly("material_flotation_factor", &script_rq_result::fFlotationFactor)
+		.def_readonly("material_shoot_factor", &script_rq_result::fShootFactor)
+		.def_readonly("material_shoot_factor_mp", &script_rq_result::fShootFactorMP)
+		.def_readonly("material_bounce_damage_factor", &script_rq_result::fBounceDamageFactor)
+		.def_readonly("material_injurious_speed", &script_rq_result::fInjuriousSpeed)
+		.def_readonly("material_vis_transparency_factor", &script_rq_result::fVisTransparencyFactor)
+		.def_readonly("material_snd_occlusion_factor", &script_rq_result::fSndOcclusionFactor)
+		.def_readonly("material_density_factor", &script_rq_result::fDensityFactor)
 		.def(constructor<>()),
 		class_<enum_exporter<collide::rq_target>>("rq_target")
 		.enum_("targets")
@@ -1887,6 +2168,8 @@ void CLevel::script_register(lua_State* L)
 		def("prefetch_texture", prefetch_texture),
 		def("prefetch_model", prefetch_model),
 		def("get_visual_userdata", GetVisualUserdata),
-		def("world2ui", world2ui)
+		def("world2ui", world2ui),
+		def("ui2world", (void (*)(Fvector2, Fvector&, u16&))&ui2world, pure_out_value(_2) + pure_out_value(_3)),
+		def("ui2world", (void (*)(Fvector&, Fvector&, u16&))&ui2world, pure_out_value(_2) + pure_out_value(_3))
 	];
 }
\ No newline at end of file
diff --git a/src/xrGame/level_sounds.cpp b/src/xrGame/level_sounds.cpp
index 28718aa..8ea30cb 100644
--- a/src/xrGame/level_sounds.cpp
+++ b/src/xrGame/level_sounds.cpp
@@ -1,4 +1,6 @@
 #include "stdafx.h"
+#include <random>
+#include <algorithm>
 #pragma hdrstop
 
 #include "level.h"
@@ -188,6 +190,9 @@ void CLevelSoundManager::Load()
 				Msg("- Loading music tracks from '%s'...",music_sect);
 #endif // #ifdef DEBUG
 				CInifile::Sect& S = gameLtx.r_section(music_sect);
+				std::random_device rd;
+				std::mt19937 g(rd());
+				std::shuffle(S.Data.begin(), S.Data.end(), g);
 				CInifile::SectCIt it = S.Data.begin(), end = S.Data.end();
 				m_MusicTracks.reserve(S.Data.size());
 				for (; it != end; it++)
@@ -206,6 +211,7 @@ void CLevelSoundManager::Unload()
 	m_StaticSounds.clear();
 	// music
 	m_MusicTracks.clear();
+	m_PlayedMusicIndices.clear();
 }
 
 void CLevelSoundManager::Update()
@@ -228,32 +234,46 @@ void CLevelSoundManager::Update()
 		if (m_CurrentTrack < 0 && engine_time > m_NextTrackTime)
 		{
 			U32Vec indices;
-			for (u32 k = 0; k < m_MusicTracks.size(); ++k)
+			for (u32 k = 0; k < m_MusicTracks.size(); k++)
 			{
+				// Msg("Checking track %d", k);
 				SMusicTrack& T = m_MusicTracks[k];
-				if (T.IsPlaying())
+				if (T.IsPlaying()) {
 					T.Stop();
-
-				if (T.in(game_time))
+					// Msg("Stopping track %d", k);
+				}
+				if ((T.in(game_time) && m_PlayedMusicIndices.empty()) || 
+					(T.in(game_time) && !(std::find(m_PlayedMusicIndices.begin(), m_PlayedMusicIndices.end(), k) != m_PlayedMusicIndices.end()))) {
 					indices.push_back(k);
-				/*
-								if ((0==T.m_ActiveTime.x) && (0==T.m_ActiveTime.y)||
-									((int(game_time)>=T.m_ActiveTime.x)&&(int(game_time)<T.m_ActiveTime.y)))
-									indices.push_back	(k);
-				*/
+					// Msg("Pushing track %d", k);
+					/*
+									if ((0==T.m_ActiveTime.x) && (0==T.m_ActiveTime.y)||
+										((int(game_time)>=T.m_ActiveTime.x)&&(int(game_time)<T.m_ActiveTime.y)))
+										indices.push_back	(k);
+					*/
+				}
 			}
 			if (!indices.empty())
 			{
-				u32 idx = Random.randI(indices.size());
+				//u32 idx = Random.randI(indices.size());
+				u32 idx = 0;
 				m_CurrentTrack = indices[idx];
 				SMusicTrack& T = m_MusicTracks[m_CurrentTrack];
 				T.Play();
+				m_PlayedMusicIndices.push_back(indices[idx]);
+				// Msg("Starting track %d", indices[idx]);
 #ifdef DEBUG
 				Log				("- Play music track:",T.m_DbgName.c_str());
 #endif
 			}
 			else
 			{
+				// Msg("m_PlayedMusicIndices.size %d", m_PlayedMusicIndices.size());
+				m_PlayedMusicIndices.clear();
+				std::random_device rd;
+				std::mt19937 g(rd());
+				std::shuffle(m_MusicTracks.begin(), m_MusicTracks.end(), g);
+				// Msg("Refreshing tracks");
 				m_NextTrackTime = engine_time + 10000; // next check after 10 sec
 			}
 		}
@@ -262,7 +282,7 @@ void CLevelSoundManager::Update()
 		{
 			SMusicTrack& T = m_MusicTracks[m_CurrentTrack];
 			if (!T.IsPlaying())
-			{
+			{	
 				m_CurrentTrack = -1;
 				m_NextTrackTime = engine_time;
 
diff --git a/src/xrGame/level_sounds.h b/src/xrGame/level_sounds.h
index 596cc31..79359b6 100644
--- a/src/xrGame/level_sounds.h
+++ b/src/xrGame/level_sounds.h
@@ -44,6 +44,7 @@ class CLevelSoundManager
 	StaticSoundsVec m_StaticSounds;
 	DEFINE_VECTOR(SMusicTrack, MusicTrackVec, MusicTrackVecIt);
 	MusicTrackVec m_MusicTracks;
+	U32Vec m_PlayedMusicIndices; //Already played music array
 	u32 m_NextTrackTime;
 	int m_CurrentTrack;
 public:
diff --git a/src/xrGame/map_manager.cpp b/src/xrGame/map_manager.cpp
index b354e38..dc72c28 100644
--- a/src/xrGame/map_manager.cpp
+++ b/src/xrGame/map_manager.cpp
@@ -170,6 +170,21 @@ void CMapManager::RemoveMapLocation(const shared_str& spot_type, u16 id)
 	}
 }
 
+// demonized: remove all map object spots by id
+void CMapManager::RemoveAllMapLocationsById(u16 id)
+{
+	for (Locations_it it = Locations().begin(); it != Locations().end(); ) {
+		if (it->object_id == id) {
+			if (IsGameTypeSingle())
+				Level().GameTaskManager().MapLocationRelcase((*it).location);
+			Destroy((*it).location);
+			it = Locations().erase(it);
+		} else {
+			it++;
+		}
+	}
+}
+
 void CMapManager::RemoveMapLocationByObjectID(u16 id) //call on destroy object
 {
 	FindLocationByID key(id);
diff --git a/src/xrGame/map_manager.h b/src/xrGame/map_manager.h
index a49b14a..56eb0ee 100644
--- a/src/xrGame/map_manager.h
+++ b/src/xrGame/map_manager.h
@@ -21,6 +21,10 @@ public:
 	CMapLocation* AddMapLocation(const shared_str& spot_type, u16 id);
 	CMapLocation* AddRelationLocation(CInventoryOwner* pInvOwner);
 	void RemoveMapLocation(const shared_str& spot_type, u16 id);
+
+	// demonized: remove all map object spots by id
+	void RemoveAllMapLocationsById(u16 id);
+
 	bool HasMapLocation(const shared_str& spot_type, u16 id);
 	void RemoveMapLocationByObjectID(u16 id); //call on destroy object
 	void RemoveMapLocation(CMapLocation* ml);
diff --git a/src/xrGame/movement_manager.cpp b/src/xrGame/movement_manager.cpp
index 117d30d..cc471eb 100644
--- a/src/xrGame/movement_manager.cpp
+++ b/src/xrGame/movement_manager.cpp
@@ -360,7 +360,9 @@ void CMovementManager::on_restrictions_change()
 
 bool CMovementManager::can_use_distributed_computations(u32 option) const
 {
-	return (!m_build_at_once && g_mt_config.test(option) && !object().getDestroy());
+	//return (!m_build_at_once && g_mt_config.test(option) && !object().getDestroy());
+	return false; // Fix for bug which makes mutants running in one place. Something happens with the thread, and the mutants will wait for a thread which will never finish running.
+	// Many thanks to Arszi for finding this <3
 }
 
 void CMovementManager::on_frame(CPHMovementControl* movement_control, Fvector& dest_position)
@@ -373,6 +375,9 @@ void CMovementManager::on_frame(CPHMovementControl* movement_control, Fvector& d
 		update_path();
 
 	move_along_path(movement_control, dest_position, object().client_update_fdelta());
+
+	// Update Grass benders
+	g_pGamePersistent->GrassBendersUpdate(object().ID(), grassbender_id, grassbender_frame, object().Position(), -1.0f, 1.0f, true);
 }
 
 void CMovementManager::on_travel_point_change(const u32& previous_travel_point_index)
diff --git a/src/xrGame/movement_manager.h b/src/xrGame/movement_manager.h
index 2427493..4f7fe8b 100644
--- a/src/xrGame/movement_manager.h
+++ b/src/xrGame/movement_manager.h
@@ -84,6 +84,10 @@ class CDetailPathBuilder;
 
 class CMovementManager
 {
+public:
+	u8 grassbender_id;
+	u32 grassbender_frame;
+
 private:
 	friend class CLevelPathBuilder;
 	friend class CDetailPathBuilder;
diff --git a/src/xrGame/new_sds.h b/src/xrGame/new_sds.h
new file mode 100644
index 0000000..229a8a3
--- /dev/null
+++ b/src/xrGame/new_sds.h
@@ -0,0 +1,6 @@
+#pragma once
+
+#include "map"
+#include "../xrCore/xrstring.h"
+
+std::map<shared_str, float> listScopeRadii;
\ No newline at end of file
diff --git a/src/xrGame/player_hud.cpp b/src/xrGame/player_hud.cpp
index 96fae36..b2c924c 100644
--- a/src/xrGame/player_hud.cpp
+++ b/src/xrGame/player_hud.cpp
@@ -401,7 +401,7 @@ void attachable_hud_item::load(const shared_str& sect_name)
 	// Visual
 	LPCSTR visual_name = pSettings->r_string(sect_name, "item_visual");
 	IKinematicsAnimated* visual = ::Render->model_Create(visual_name)->dcast_PKinematicsAnimated();
-	R_ASSERT2(visual, make_string("could not create model %s", visual_name));
+	R_ASSERT2(visual, make_string("could not create model %s, section %s", visual_name, sect_name.c_str()));
 	m_model = smart_cast<IKinematics*>(visual);
 
 	m_attach_place_idx = pSettings->r_u16(sect_name, "attach_place_idx");
@@ -456,7 +456,7 @@ u32 attachable_hud_item::anim_play(const shared_str& anm_name_b, BOOL bMixIn, co
 		else if (bDebug)
 			Msg("playing item animation [%s]", item_anm_name.c_str());
 
-		R_ASSERT3(M2.valid(), "model has no motion [idle] ", pSettings->r_string(m_sect_name, "item_visual"));
+		R_ASSERT3(M2.valid(), make_string("model has no motion [idle], section %s", m_sect_name.c_str()).c_str(), pSettings->r_string(m_sect_name, "item_visual"));
 
 		u16 root_id = m_model->LL_GetBoneRoot();
 		CBoneInstance& root_binst = m_model->LL_GetBoneInstance(root_id);
@@ -493,12 +493,16 @@ u32 attachable_hud_item::anim_play(const shared_str& anm_name_b, BOOL bMixIn, co
 			strconcat(sizeof(anm_name), anm_name, "camera_effects\\weapon\\", M.name.c_str(), ".anm");
 			if (FS.exist(ce_path, "$game_anims$", anm_name))
 			{
-				CAnimatorCamEffector* e = xr_new<CAnimatorCamEffector>();
-				e->SetType(eCEWeaponAction);
-				e->SetHudAffect(false);
-				e->SetCyclic(false);
-				e->Start(anm_name);
-				current_actor->Cameras().AddCamEffector(e);
+				if (!(m_attach_place_idx == 1 && m_parent->attached_item(0)))
+				{
+					int rand = ::Random.randI(5000, 10000);
+					CAnimatorCamEffector* e = xr_new<CAnimatorCamEffector>();
+					e->SetType(ECamEffectorType(rand));
+					e->SetHudAffect(false);
+					e->SetCyclic(false);
+					e->Start(anm_name);
+					current_actor->Cameras().AddCamEffector(e);
+				}
 			}
 		}
 	}
@@ -682,6 +686,10 @@ void player_hud::load(const shared_str& player_hud_sect, bool force)
 	m_model_2->dcast_PKinematics()->CalculateBones_Invalidate();
 	m_model_2->dcast_PKinematics()->CalculateBones(TRUE);
 
+	//--DSR-- HeatVision_start
+	m_model->dcast_RenderVisual()->MarkAsHot(true);
+	m_model_2->dcast_RenderVisual()->MarkAsHot(true);
+	//--DSR-- HeatVision_end
 }
 
 void player_hud::load_script(LPCSTR section)
@@ -705,11 +713,18 @@ bool player_hud::render_item_ui_query()
 
 void player_hud::render_item_ui()
 {
+	IUIRender::ePointType bk = UI().m_currentPointType;
+	UI().m_currentPointType = IUIRender::pttLIT;
+	UIRender->CacheSetCullMode(IUIRender::cmNONE);
+
 	if (m_attached_items[0])
 		m_attached_items[0]->render_item_ui();
 
 	if (m_attached_items[1])
 		m_attached_items[1]->render_item_ui();
+
+	UIRender->CacheSetCullMode(IUIRender::cmCCW);
+	UI().m_currentPointType = bk;
 }
 
 void player_hud::render_hud()
@@ -896,8 +911,11 @@ void player_hud::update(const Fmatrix& cam_trans)
 		if (wep && wep->IsZoomed())
 			trans_2.mulB_43(wep->m_shoot_shake_mat);
 	}
-	else
+	
+	if (m_attached_items[0] && !m_attached_items[1])
 		trans_2 = trans;
+	else if (m_attached_items[1] && !m_attached_items[0])
+		trans = trans_2;
 	
 	// override hand offset for single hand animation
 	if (script_anim_part == 2 || (script_anim_part && !m_attached_items[0] && !m_attached_items[1]))
@@ -1263,7 +1281,7 @@ player_hud_motion_container* player_hud::get_hand_motions(LPCSTR section)
 		if (phm->section == section)
 			return &phm->pm;
 	}
-
+	
 	hand_motions* res = xr_new<hand_motions>();
 	res->section = section;
 	res->pm.load(m_model, section);
@@ -1442,8 +1460,10 @@ void player_hud::remove_from_model_pool(LPCSTR sect)
 	}
 }
 
+shared_str current_player_hud_sect;
 attachable_hud_item* player_hud::create_hud_item(const shared_str& sect)
 {
+	current_player_hud_sect = sect;
 	xr_vector<attachable_hud_item*>::iterator it = m_pool.begin();
 	xr_vector<attachable_hud_item*>::iterator it_e = m_pool.end();
 	for (; it != it_e; ++it)
diff --git a/src/xrGame/player_hud.h b/src/xrGame/player_hud.h
index 71e970e..dec8c86 100644
--- a/src/xrGame/player_hud.h
+++ b/src/xrGame/player_hud.h
@@ -371,14 +371,13 @@ private:
 	const Fvector& attach_pos(u8 part) const;
 
 	shared_str m_sect_name;
-
-	IKinematicsAnimated* m_model;
-	IKinematicsAnimated* m_model_2;
 	xr_vector<u16> m_ancors;
 	attachable_hud_item* m_attached_items[2];
 	xr_vector<attachable_hud_item*> m_pool;
 	static void _BCL FingerCallback(CBoneInstance* B);
 public:
+	IKinematicsAnimated* m_model;
+	IKinematicsAnimated* m_model_2;
 	Fvector m_adjust_offset[2][5]; // pos,rot/ normal,aim,GL,aim_alt,safemode
 	Fvector m_adjust_obj[2]; // pos,rot; used for the item/weapon itself
 	Fvector m_adjust_ui_offset[2]; // pos,rot; used for custom device ui
diff --git a/src/xrGame/purchase_list.cpp b/src/xrGame/purchase_list.cpp
index 4b83716..917ad86 100644
--- a/src/xrGame/purchase_list.cpp
+++ b/src/xrGame/purchase_list.cpp
@@ -58,7 +58,8 @@ void CPurchaseList::process(const CGameObject& owner, const shared_str& name, co
 	const Fvector& position = owner.Position();
 	const u32& level_vertex_id = owner.ai_location().level_vertex_id();
 	const ALife::_OBJECT_ID& id = owner.ID();
-	for (u32 i = 0, j = 0; i < count; ++i)
+	u32 j = 0;
+	for (u32 i = 0; i < count; ++i)
 	{
 		if (::Random.randF(0.f, 1.f) > probability)
 			continue;
diff --git a/src/xrGame/raypick.h b/src/xrGame/raypick.h
index 81e990e..de53eef 100644
--- a/src/xrGame/raypick.h
+++ b/src/xrGame/raypick.h
@@ -2,6 +2,7 @@
 #include "gameobject.h"
 #include "script_game_object.h"
 #include "../xrcdb/xr_collide_defs.h"
+#include "material_manager.h"
 
 struct script_rq_result
 {
@@ -9,6 +10,26 @@ struct script_rq_result
 	float range;
 	int element;
 
+	// Material of tri of ray query result
+	str_c pMaterialName;
+	u32 pMaterialFlags;
+
+	// physics part
+	float fPHFriction; // ?
+	float fPHDamping; // ?
+	float fPHSpring; // ?
+	float fPHBounceStartVelocity; // ?
+	float fPHBouncing; // ?
+					   // shoot&bounce&visibility&flotation
+	float fFlotationFactor; // 0.f - 1.f (1.f-ïîëíîñòüþ ïðîõîäèìûé)
+	float fShootFactor; // 0.f - 1.f (1.f-ïîëíîñòüþ ïðîñòðåëèâàåìûé)
+	float fShootFactorMP; // 0.f - 1.f (1.f-ïîëíîñòüþ ïðîñòðåëèâàåìûé)
+	float fBounceDamageFactor; // 0.f - 100.f
+	float fInjuriousSpeed; // 0.f - ... (0.f-íå îòáèðàåò çäîðîâüå (ñêîðîñòü óìåíüøåíèÿ çäîðîâüÿ))
+	float fVisTransparencyFactor; // 0.f - 1.f (1.f-ïîëíîñòüþ ïðîçðà÷íûé)
+	float fSndOcclusionFactor; // 0.f - 1.f (1.f-ïîëíîñòüþ ñëûøåí)
+	float fDensityFactor;
+
 	script_rq_result()
 	{
 		O = 0;
@@ -26,6 +47,30 @@ struct script_rq_result
 		}
 		range = R.range;
 		element = R.element;
+
+		// demonized: set material params of ray pick result
+		//Msg("no object, check material");
+		auto pTri = Level().ObjectSpace.GetStaticTris() + R.element;
+		auto pMaterial = GMLib.GetMaterialByIdx(pTri->material);
+		auto pMaterialFlagsRQ = pMaterial->Flags;
+		//pTri = pTri;
+		//pMaterial = pMaterial;
+		pMaterialFlags = pMaterialFlagsRQ.flags;
+		pMaterialName = pMaterial->m_Name.c_str();
+
+		fPHFriction = pMaterial->fPHFriction;
+		fPHDamping = pMaterial->fPHDamping;
+		fPHSpring = pMaterial->fPHSpring;
+		fPHBounceStartVelocity = pMaterial->fPHBounceStartVelocity;
+		fPHBouncing = pMaterial->fPHBouncing;
+		fFlotationFactor = pMaterial->fFlotationFactor;
+		fShootFactor = pMaterial->fShootFactor;
+		fShootFactorMP = pMaterial->fShootFactorMP;
+		fBounceDamageFactor = pMaterial->fBounceDamageFactor;
+		fInjuriousSpeed = pMaterial->fInjuriousSpeed;
+		fVisTransparencyFactor = pMaterial->fVisTransparencyFactor;
+		fSndOcclusionFactor = pMaterial->fSndOcclusionFactor;
+		fDensityFactor = pMaterial->fDensityFactor;
 	};
 };
 
diff --git a/src/xrGame/relation_registry_fights.cpp b/src/xrGame/relation_registry_fights.cpp
index beced70..bdb2e40 100644
--- a/src/xrGame/relation_registry_fights.cpp
+++ b/src/xrGame/relation_registry_fights.cpp
@@ -28,7 +28,8 @@ void RELATION_REGISTRY::FightRegister(u16 attacker, u16 defender, ALife::ERelati
 	UpdateFightRegister();
 
 	FIGHT_VECTOR& fights = fight_registry();
-	for (FIGHT_VECTOR_IT it = fights.begin(); it != fights.end(); it++)
+	FIGHT_VECTOR_IT it = fights.begin();
+	for (; it != fights.end(); it++)
 	{
 		FIGHT_DATA& fight_data = *it;
 		if (attacker == fight_data.attacker && defender == fight_data.defender)
diff --git a/src/xrGame/safe_map_iterator_inline.h b/src/xrGame/safe_map_iterator_inline.h
index f18d939..bfd869d 100644
--- a/src/xrGame/safe_map_iterator_inline.h
+++ b/src/xrGame/safe_map_iterator_inline.h
@@ -129,7 +129,8 @@ IC u32 CSSafeMapIterator::update(const _update_predicate& predicate, bool const
 	++m_cycle_count;
 	_iterator I = next();
 	VERIFY(I != m_objects.end());
-	for (u32 i = 0; (I != m_objects.end()) && !time_over() && predicate(I, m_cycle_count, true); ++i)
+	u32 i = 0;
+	for (; (I != m_objects.end()) && !time_over() && predicate(I, m_cycle_count, true); ++i)
 	{
 		update_next();
 		predicate(I, m_cycle_count);
diff --git a/src/xrGame/script_game_object.cpp b/src/xrGame/script_game_object.cpp
index 5489997..c9c2f28 100644
--- a/src/xrGame/script_game_object.cpp
+++ b/src/xrGame/script_game_object.cpp
@@ -181,11 +181,6 @@ const CScriptEntityAction* CScriptGameObject::GetActionByIndex(u32 action_index)
 //////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////
 
-u16 CScriptGameObject::get_bone_id(LPCSTR bone_name) const
-{
-	return object().Visual()->dcast_PKinematics()->LL_BoneID(bone_name);
-}
-
 cphysics_shell_scripted* CScriptGameObject::get_physics_shell() const
 {
 	CPhysicsShellHolder* ph_shell_holder = smart_cast<CPhysicsShellHolder*>(&object());
@@ -343,44 +338,202 @@ u32 CScriptGameObject::get_current_patrol_point_index()
 //////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////
 
-Fvector CScriptGameObject::bone_position(LPCSTR bone_name, bool bHud) const
+u16 CScriptGameObject::bone_id(LPCSTR bone_name, bool bHud)
 {
 	IKinematics* k = nullptr;
 
-	CHudItem* itm = smart_cast<CHudItem*>(&object());
-	if (bHud && itm && itm->HudItemData())
-		k = itm->HudItemData()->m_model;
-	else
+	if (bHud)
+	{
+		CActor* act = smart_cast<CActor*>(&object());
+		CHudItem* itm = smart_cast<CHudItem*>(&object());
+		if (itm)
+			k = itm->HudItemData()->m_model;
+		else if (act)
+			k = g_player_hud->m_model->dcast_PKinematics();
+	}
+
+	if (!k)
 		k = object().Visual()->dcast_PKinematics();
 
-	u16 bone_id;
+	if (!k) return BI_NONE;
+
+	u16 bone_id = BI_NONE;
 	if (xr_strlen(bone_name))
-	{
 		bone_id = k->LL_BoneID(bone_name);
-		if (bone_id == BI_NONE)
-			bone_id = k->LL_GetBoneRoot();
+
+	return bone_id;
+}
+
+Fvector CScriptGameObject::bone_position(u16 bone_id, bool bHud)
+{
+	if (bone_id == BI_NONE) return Fvector().set(0, 0, 0);
+
+	IKinematics* k = nullptr;
+	Fmatrix* xform = nullptr;
+
+	if (bHud)
+	{
+		CActor* act = smart_cast<CActor*>(&object());
+		CHudItem* itm = smart_cast<CHudItem*>(&object());
+		if (itm)
+		{
+			k = itm->HudItemData()->m_model;
+			xform = &itm->HudItemData()->m_item_transform;
+		}
+		else if (act)
+		{
+			k = (bone_id > 20) ? g_player_hud->m_model->dcast_PKinematics() : g_player_hud->m_model_2->dcast_PKinematics();
+			xform = (bone_id > 20) ? &g_player_hud->m_transform : &g_player_hud->m_transform_2;
+		}
 	}
-	else
-		bone_id = k->LL_GetBoneRoot();
+
+	if (!k)
+	{
+		k = object().Visual()->dcast_PKinematics();
+		xform = &object().XFORM();
+	}
+
+	if (!k) return Fvector().set(0, 0, 0);
 
 	Fmatrix matrix;
-	matrix.mul_43((bHud && itm && itm->HudItemData()) ? itm->HudItemData()->m_item_transform : object().XFORM(),
-	              k->LL_GetBoneInstance(bone_id).mTransform);
+	matrix.mul_43(*xform, k->LL_GetTransform(bone_id));
 	return (matrix.c);
 }
 
+Fvector CScriptGameObject::bone_direction(u16 bone_id, bool bHud)
+{
+	if (bone_id == BI_NONE) return Fvector().set(0, 0, 0);
+
+	IKinematics* k = nullptr;
+	Fmatrix* xform = nullptr;
+
+	if (bHud)
+	{
+		CActor* act = smart_cast<CActor*>(&object());
+		CHudItem* itm = smart_cast<CHudItem*>(&object());
+		if (itm)
+		{
+			k = itm->HudItemData()->m_model;
+			xform = &itm->HudItemData()->m_item_transform;
+		}
+		else if (act)
+		{
+			k = (bone_id > 20) ? g_player_hud->m_model->dcast_PKinematics() : g_player_hud->m_model_2->dcast_PKinematics();
+			xform = (bone_id > 20) ? &g_player_hud->m_transform : &g_player_hud->m_transform_2;
+		}
+	}
+
+	if (!k)
+	{
+		k = object().Visual()->dcast_PKinematics();
+		xform = &object().XFORM();
+	}
+
+	if (!k) return Fvector().set(0, 0, 0);
 
-LPCSTR CScriptGameObject::bone_name(u16 id, bool bHud)
+	Fmatrix matrix;
+	Fvector res;
+	matrix.mul_43(*xform, k->LL_GetTransform(bone_id));
+	matrix.getHPB(res);
+	return (res);
+}
+
+u16 CScriptGameObject::bone_parent(u16 bone_id, bool bHud)
 {
 	IKinematics* k = nullptr;
 
-	CHudItem* itm = smart_cast<CHudItem*>(&object());
-	if (bHud && itm && itm->HudItemData())
-		k = itm->HudItemData()->m_model;
-	else
+	if (bHud)
+	{
+		CActor* act = smart_cast<CActor*>(&object());
+		CHudItem* itm = smart_cast<CHudItem*>(&object());
+		if (itm)
+			k = itm->HudItemData()->m_model;
+		else if (act)
+			k = g_player_hud->m_model->dcast_PKinematics();
+	}
+
+	if (!k)
+		k = object().Visual()->dcast_PKinematics();
+
+	if (!k || bone_id == k->LL_GetBoneRoot() || bone_id >= k->LL_BoneCount()) return BI_NONE;
+
+	CBoneData* data = &k->LL_GetData(bone_id);
+	u16 ParentID = data->GetParentID();
+	return ParentID;
+}
+
+LPCSTR CScriptGameObject::bone_name(u16 bone_id, bool bHud)
+{
+	if (bone_id == BI_NONE) return "";
+
+	IKinematics* k = nullptr;
+
+	if (bHud)
+	{
+		CActor* act = smart_cast<CActor*>(&object());
+		CHudItem* itm = smart_cast<CHudItem*>(&object());
+		if (itm)
+			k = itm->HudItemData()->m_model;
+		else if (act)
+			k = g_player_hud->m_model->dcast_PKinematics();
+	}
+
+	if (!k)
 		k = object().Visual()->dcast_PKinematics();
 
-	return (k->LL_BoneName_dbg(id));
+	if (!k) return "";
+
+	return (k->LL_BoneName_dbg(bone_id));
+}
+
+void CScriptGameObject::set_bone_visible(u16 bone_id, bool bVisibility, bool bRecursive, bool bHud)
+{
+	if (bone_id == BI_NONE) return;
+
+	IKinematics* k = nullptr;
+
+	if (bHud)
+	{
+		CActor* act = smart_cast<CActor*>(&object());
+		CHudItem* itm = smart_cast<CHudItem*>(&object());
+		if (itm)
+			k = itm->HudItemData()->m_model;
+		else if (act)
+			k = (bone_id > 20) ? g_player_hud->m_model->dcast_PKinematics() : g_player_hud->m_model_2->dcast_PKinematics();
+	}
+
+	if (!k)
+		k = object().Visual()->dcast_PKinematics();
+
+	if (!k)
+		return;
+
+	if (bVisibility != !!k->LL_GetBoneVisible(bone_id))
+		k->LL_SetBoneVisible(bone_id, bVisibility, bRecursive);
+}
+
+bool CScriptGameObject::is_bone_visible(u16 bone_id, bool bHud)
+{
+	if (bone_id == BI_NONE) return false;
+
+	IKinematics* k = nullptr;
+
+	if (bHud)
+	{
+		CActor* act = smart_cast<CActor*>(&object());
+		CHudItem* itm = smart_cast<CHudItem*>(&object());
+		if (itm)
+			k = itm->HudItemData()->m_model;
+		else if (act)
+			k = (bone_id > 20) ? g_player_hud->m_model->dcast_PKinematics() : g_player_hud->m_model_2->dcast_PKinematics();
+	}
+
+	if (!k)
+		k = object().Visual()->dcast_PKinematics();
+
+	if (!k) return false;
+
+	return !!k->LL_GetBoneVisible(bone_id);
 }
 
 //////////////////////////////////////////////////////////////////////////
diff --git a/src/xrGame/script_game_object.h b/src/xrGame/script_game_object.h
index 640dcab..8cab598 100644
--- a/src/xrGame/script_game_object.h
+++ b/src/xrGame/script_game_object.h
@@ -682,11 +682,8 @@ public:
 	void start_particles(LPCSTR pname, LPCSTR bone);
 	void stop_particles(LPCSTR pname, LPCSTR bone);
 
-	Fvector bone_position(LPCSTR bone_name, bool bHud = false) const;
-	LPCSTR bone_name(u16 id, bool bHud);
 	bool is_body_turning() const;
 	cphysics_shell_scripted* get_physics_shell() const;
-	u16 get_bone_id(LPCSTR bone_name) const;
 	bool weapon_strapped() const;
 	bool weapon_unstrapped() const;
 	void eat(CScriptGameObject* item);
@@ -937,6 +934,12 @@ public:
 	u8 GetRestrictionType();
 	void SetRestrictionType(u8 typ);
 
+	// demonized: add getters and setters for pathfinding for npcs around anomalies and damage for npcs
+	bool get_enable_anomalies_pathfinding();
+	void set_enable_anomalies_pathfinding(bool v);
+	bool get_enable_anomalies_damage();
+	void set_enable_anomalies_damage(bool v);
+
 	//Weapon
 	void Weapon_AddonAttach(CScriptGameObject* item);
 	void Weapon_AddonDetach(LPCSTR item_section, bool b_spawn_item = true);
@@ -975,8 +978,35 @@ public:
 	void SwitchState(u32 state);
 	u32 GetState();
 	//Works for anything with visual
-	bool IsBoneVisible(LPCSTR bone_name, bool bHud = false);
-	void SetBoneVisible(LPCSTR bone_name, bool bVisibility, bool bRecursive = true, bool bHud = false);
+	u16 bone_id(LPCSTR bone_name, bool bHud);
+	u16 bone_id(LPCSTR bone_name) { return bone_id(bone_name, false); }
+	LPCSTR bone_name(u16 bone_id, bool bHud);
+	LPCSTR bone_name(u16 bone_id) { return bone_name(bone_id, false); }
+
+	bool is_bone_visible(u16 bone_id, bool bHud);
+	bool is_bone_visible(u16 bone_id) { return is_bone_visible(bone_id, false); }
+	bool is_bone_visible(LPCSTR bone_name, bool bHud) { return is_bone_visible(bone_id(bone_name, bHud), bHud); }
+	bool is_bone_visible(LPCSTR bone_name) { return is_bone_visible(bone_id(bone_name), false); }
+
+	void set_bone_visible(u16 bone_id, bool bVisibility, bool bRecursive, bool bHud);
+	void set_bone_visible(u16 bone_id, bool bVisibility, bool bRecursive) { set_bone_visible(bone_id, bVisibility, bRecursive, false); }
+	void set_bone_visible(LPCSTR bone_name, bool bVisibility, bool bRecursive, bool bHud) { set_bone_visible(bone_id(bone_name, bHud), bVisibility, bRecursive, bHud); }
+	void set_bone_visible(LPCSTR bone_name, bool bVisibility, bool bRecursive) { set_bone_visible(bone_id(bone_name), bVisibility, bRecursive, false); }
+
+	Fvector bone_position(u16 bone_id, bool bHud);
+	Fvector bone_position(u16 bone_id) { return bone_position(bone_id, false); }
+	Fvector bone_position(LPCSTR bone_name, bool bHud) { return bone_position(bone_id(bone_name, bHud), bHud); }
+	Fvector bone_position(LPCSTR bone_name) { return bone_position(bone_id(bone_name), false); }
+
+	Fvector bone_direction(u16 bone_id, bool bHud);
+	Fvector bone_direction(u16 bone_id) { return bone_direction(bone_id, false); }
+	Fvector bone_direction(LPCSTR bone_name, bool bHud) { return bone_direction(bone_id(bone_name, bHud), bHud); }
+	Fvector bone_direction(LPCSTR bone_name) { return bone_direction(bone_id(bone_name), false); }
+
+	u16 bone_parent(u16 bone_id, bool bHud);
+	u16 bone_parent(u16 bone_id) { return bone_parent(bone_id, false); }
+	u16 bone_parent(LPCSTR bone_name, bool bHud) { return bone_parent(bone_id(bone_name, bHud), bHud); }
+	u16 bone_parent(LPCSTR bone_name) { return bone_parent(bone_id(bone_name), false); }
 
 	//CAI_Stalker
 	void ResetBoneProtections(LPCSTR imm_sect, LPCSTR bone_sect);
@@ -998,6 +1028,9 @@ public:
 	void SetArtefactBleedingRestoreSpeed(float value);
 	void SetArtefactImmunity(ALife::EHitType hit_type, float value);
 
+	float GetArtefactAdditionalInventoryWeight();
+	void SetArtefactAdditionalInventoryWeight(float value);
+
 	//Eatable items
 	void SetRemainingUses(u8 value);
 	u8 GetRemainingUses();
@@ -1027,6 +1060,14 @@ public:
 	void SetActorRunCoef(float run_coef);
 	float GetActorRunBackCoef() const;
 	void SetActorRunBackCoef(float run_back_coef);
+	float GetActorWalkAccel() const;
+	void SetActorWalkAccel(float val);
+	float GetActorWalkBackCoef() const;
+	void SetActorWalkBackCoef(float val);
+
+	// demonized: Adjust Lookout coeff
+	float GetActorLookoutCoef() const;
+	void SetActorLookoutCoef(float val);
 
 	void SetCharacterIcon(LPCSTR iconName);
 #endif
diff --git a/src/xrGame/script_game_object3.cpp b/src/xrGame/script_game_object3.cpp
index c7b3f95..02eff43 100644
--- a/src/xrGame/script_game_object3.cpp
+++ b/src/xrGame/script_game_object3.cpp
@@ -1540,6 +1540,22 @@ void CScriptGameObject::SetArtefactImmunity(ALife::EHitType hit_type, float valu
 	return artefact->SetImmunity(hit_type, value);
 }
 
+float CScriptGameObject::GetArtefactAdditionalInventoryWeight()
+{
+	CArtefact* artefact = smart_cast<CArtefact*>(&object());
+	THROW(artefact);
+
+	return artefact->m_additional_weight;
+}
+
+void CScriptGameObject::SetArtefactAdditionalInventoryWeight(float value)
+{
+	CArtefact* artefact = smart_cast<CArtefact*>(&object());
+	THROW(artefact);
+
+	artefact->m_additional_weight = value;
+}
+
 void CScriptGameObject::AttachVehicle(CScriptGameObject* veh, bool bForce)
 {
 	CActor* actor = smart_cast<CActor*>(&object());
@@ -1646,49 +1662,6 @@ bool CScriptGameObject::WeaponInGrenadeMode()
 	return wpn->m_bGrenadeMode;
 }
 
-void CScriptGameObject::SetBoneVisible(LPCSTR bone_name, bool bVisibility, bool bRecursive, bool bHud)
-{
-	IKinematics* k = nullptr;
-
-	CHudItem* itm = smart_cast<CHudItem*>(&object());
-	if (bHud && itm && itm->HudItemData())
-		k = itm->HudItemData()->m_model;
-	else
-		k = object().Visual()->dcast_PKinematics();
-
-	if (!k)
-		return;
-
-	u16 bone_id = k->LL_BoneID(bone_name);
-	if (bone_id == BI_NONE)
-		return;
-
-	if (bVisibility != k->LL_GetBoneVisible(bone_id))
-		k->LL_SetBoneVisible(bone_id, bVisibility, bRecursive);
-
-	return;
-}
-
-bool CScriptGameObject::IsBoneVisible(LPCSTR bone_name, bool bHud)
-{
-	IKinematics* k = nullptr;
-
-	CHudItem* itm = smart_cast<CHudItem*>(&object());
-	if (bHud && itm && itm->HudItemData())
-		k = itm->HudItemData()->m_model;
-	else
-		k = object().Visual()->dcast_PKinematics();
-
-	if (!k)
-		return false;
-
-	u16 bone_id = k->LL_BoneID(bone_name);
-	if (bone_id == BI_NONE)
-		return false;
-
-	return k->LL_GetBoneVisible(bone_id) == TRUE ? true : false;
-}
-
 float CScriptGameObject::GetLuminocityHemi()
 {
 	CObject* e = smart_cast<CObject*>(&object());
@@ -1823,5 +1796,51 @@ void CScriptGameObject::SetRestrictionType(u8 typ)
 			Level().space_restriction_manager().register_restrictor(restr, RestrictionSpace::ERestrictorTypes(typ));
 	}
 }
+
+// demonized: add getters and setters for pathfinding for npcs around anomalies and damage for npcs
+bool CScriptGameObject::get_enable_anomalies_pathfinding()
+{
+	auto stalker = smart_cast<CAI_Stalker*>(&object());
+	if (!stalker)
+	{
+		ai().script_engine().script_log(ScriptStorage::eLuaMessageTypeError,
+			"CGameObject : cannot access class member m_enable_anomalies_pathfinding!");
+		return false;
+	}
+	return stalker->m_enable_anomalies_pathfinding;
+}
+void CScriptGameObject::set_enable_anomalies_pathfinding(bool v)
+{
+	auto stalker = smart_cast<CAI_Stalker*>(&object());
+	if (!stalker)
+	{
+		ai().script_engine().script_log(ScriptStorage::eLuaMessageTypeError,
+			"CGameObject : cannot access class member m_enable_anomalies_pathfinding!");
+		return;
+	}
+	stalker->m_enable_anomalies_pathfinding = v;
+}
+bool CScriptGameObject::get_enable_anomalies_damage()
+{
+	auto stalker = smart_cast<CAI_Stalker*>(&object());
+	if (!stalker)
+	{
+		ai().script_engine().script_log(ScriptStorage::eLuaMessageTypeError,
+			"CGameObject : cannot access class member m_enable_anomalies_damage!");
+		return false;
+	}
+	return stalker->m_enable_anomalies_damage;
+}
+void CScriptGameObject::set_enable_anomalies_damage(bool v)
+{
+	auto stalker = smart_cast<CAI_Stalker*>(&object());
+	if (!stalker)
+	{
+		ai().script_engine().script_log(ScriptStorage::eLuaMessageTypeError,
+			"CGameObject : cannot access class member m_enable_anomalies_damage!");
+		return;
+	}
+	stalker->m_enable_anomalies_damage = v;
+}
 #endif
 //-Alundaio
\ No newline at end of file
diff --git a/src/xrGame/script_game_object_inventory_owner.cpp b/src/xrGame/script_game_object_inventory_owner.cpp
index 3ad0a2f..377a214 100644
--- a/src/xrGame/script_game_object_inventory_owner.cpp
+++ b/src/xrGame/script_game_object_inventory_owner.cpp
@@ -2491,6 +2491,55 @@ void CScriptGameObject::SetActorRunBackCoef(float run_back_coef)
 	pActor->m_fRunBackFactor = run_back_coef;
 }
 
+
+float CScriptGameObject::GetActorWalkAccel() const
+{
+	CActor* pActor = smart_cast<CActor*>(&object());
+	if (!pActor)
+	{
+		ai().script_engine().script_log(ScriptStorage::eLuaMessageTypeError,
+			"CActor : cannot access class member GetActorWalkAccel!");
+		return (false);
+	}
+	return (pActor->m_fWalkAccel);
+}
+void CScriptGameObject::SetActorWalkAccel(float val)
+{
+	CActor* pActor = smart_cast<CActor*>(&object());
+	if (!pActor)
+	{
+		ai().script_engine().script_log(ScriptStorage::eLuaMessageTypeError,
+			"CActor : cannot access class member SetActorWalkAccel!");
+		return;
+	}
+	pActor->m_fWalkAccel = val;
+}
+
+
+float CScriptGameObject::GetActorWalkBackCoef() const
+{
+	CActor* pActor = smart_cast<CActor*>(&object());
+	if (!pActor)
+	{
+		ai().script_engine().script_log(ScriptStorage::eLuaMessageTypeError,
+			"CActor : cannot access class member GetActorWalkBackCoef!");
+		return (false);
+	}
+	return (pActor->m_fWalkBackFactor);
+}
+void CScriptGameObject::SetActorWalkBackCoef(float val)
+{
+	CActor* pActor = smart_cast<CActor*>(&object());
+	if (!pActor)
+	{
+		ai().script_engine().script_log(ScriptStorage::eLuaMessageTypeError,
+			"CActor : cannot access class member SetActorWalkBackCoef!");
+		return;
+	}
+	pActor->m_fWalkBackFactor = val;
+}
+
+
 void CScriptGameObject::SetCharacterIcon(LPCSTR iconName)
 {
 	CInventoryOwner* pInventoryOwner = smart_cast<CInventoryOwner*>(&object());
@@ -2503,5 +2552,30 @@ void CScriptGameObject::SetCharacterIcon(LPCSTR iconName)
 	}
 	return pInventoryOwner->SetIcon(iconName);
 }
+
+// demonized: Adjust Lookout factor
+float CScriptGameObject::GetActorLookoutCoef() const
+{
+	CActor* pActor = smart_cast<CActor*>(&object());
+	if (!pActor)
+	{
+		ai().script_engine().script_log(ScriptStorage::eLuaMessageTypeError,
+			"CActor : cannot access class member GetActorLookoutCoef!");
+		return (false);
+	}
+	return (pActor->m_fLookoutFactor);
+}
+void CScriptGameObject::SetActorLookoutCoef(float val)
+{
+	CActor* pActor = smart_cast<CActor*>(&object());
+	if (!pActor)
+	{
+		ai().script_engine().script_log(ScriptStorage::eLuaMessageTypeError,
+			"CActor : cannot access class member SetActorLookoutCoef!");
+		return;
+	}
+	pActor->m_fLookoutFactor = val;
+}
+
 #endif
 //Alundaio: END
diff --git a/src/xrGame/script_game_object_script2.cpp b/src/xrGame/script_game_object_script2.cpp
index 8f7ed82..e1c6a50 100644
--- a/src/xrGame/script_game_object_script2.cpp
+++ b/src/xrGame/script_game_object_script2.cpp
@@ -27,6 +27,8 @@
 #include "relation_registry.h"
 #include "danger_object.h"
 #include "smart_cover_object.h"
+#include "detail_path_manager_space.h"
+#include "patrol_path_manager_space.h"
 
 using namespace luabind;
 
diff --git a/src/xrGame/script_game_object_script3.cpp b/src/xrGame/script_game_object_script3.cpp
index aeeaf8f..2aec5f0 100644
--- a/src/xrGame/script_game_object_script3.cpp
+++ b/src/xrGame/script_game_object_script3.cpp
@@ -32,6 +32,7 @@
 #include "ZoneCampfire.h"
 #include "physicobject.h"
 #include "artefact.h"
+#include "sight_manager_space.h"
 
 using namespace luabind;
 
@@ -114,11 +115,43 @@ class_<CScriptGameObject>& script_register_game_object2(class_<CScriptGameObject
 		     (void (CScriptGameObject::*)(MonsterSpace::EObjectAction, CScriptGameObject*, u32, u32))(&CScriptGameObject
 			     ::set_item))
 
-		.def("bone_position", &CScriptGameObject::bone_position)
-
-		.def("bone_name", &CScriptGameObject::bone_name)
 		.def("is_body_turning", &CScriptGameObject::is_body_turning)
 
+		// Backwards compatibility
+		.def("get_bone_id", (u16(CScriptGameObject::*)(LPCSTR))(&CScriptGameObject::bone_id))
+		.def("get_bone_id", (u16(CScriptGameObject::*)(LPCSTR, bool))(&CScriptGameObject::bone_id))
+
+		.def("bone_id", (u16(CScriptGameObject::*)(LPCSTR))(&CScriptGameObject::bone_id))
+		.def("bone_id", (u16(CScriptGameObject::*)(LPCSTR, bool))(&CScriptGameObject::bone_id))
+
+		.def("bone_name", (LPCSTR(CScriptGameObject::*)(u16))(&CScriptGameObject::bone_name))
+		.def("bone_name", (LPCSTR(CScriptGameObject::*)(u16, bool))(&CScriptGameObject::bone_name))
+
+		.def("bone_position", (Fvector(CScriptGameObject::*)(u16))(&CScriptGameObject::bone_position))
+		.def("bone_position", (Fvector(CScriptGameObject::*)(u16, bool))(&CScriptGameObject::bone_position))
+		.def("bone_position", (Fvector(CScriptGameObject::*)(LPCSTR))(&CScriptGameObject::bone_position))
+		.def("bone_position", (Fvector(CScriptGameObject::*)(LPCSTR, bool))(&CScriptGameObject::bone_position))
+
+		.def("bone_direction", (Fvector(CScriptGameObject::*)(u16))(&CScriptGameObject::bone_direction))
+		.def("bone_direction", (Fvector(CScriptGameObject::*)(u16, bool))(&CScriptGameObject::bone_direction))
+		.def("bone_direction", (Fvector(CScriptGameObject::*)(LPCSTR))(&CScriptGameObject::bone_direction))
+		.def("bone_direction", (Fvector(CScriptGameObject::*)(LPCSTR, bool))(&CScriptGameObject::bone_direction))
+
+		.def("bone_parent", (u16(CScriptGameObject::*)(u16))(&CScriptGameObject::bone_parent))
+		.def("bone_parent", (u16(CScriptGameObject::*)(u16, bool))(&CScriptGameObject::bone_parent))
+		.def("bone_parent", (u16(CScriptGameObject::*)(LPCSTR))(&CScriptGameObject::bone_parent))
+		.def("bone_parent", (u16(CScriptGameObject::*)(LPCSTR, bool))(&CScriptGameObject::bone_parent))
+
+		.def("bone_visible", (bool (CScriptGameObject::*)(u16))(&CScriptGameObject::is_bone_visible))
+		.def("bone_visible", (bool (CScriptGameObject::*)(u16, bool))(&CScriptGameObject::is_bone_visible))
+		.def("bone_visible", (bool (CScriptGameObject::*)(LPCSTR))(&CScriptGameObject::is_bone_visible))
+		.def("bone_visible", (bool (CScriptGameObject::*)(LPCSTR, bool))(&CScriptGameObject::is_bone_visible))
+
+		.def("set_bone_visible", (void (CScriptGameObject::*)(u16, bool, bool))(&CScriptGameObject::set_bone_visible))
+		.def("set_bone_visible", (void (CScriptGameObject::*)(u16, bool, bool, bool))(&CScriptGameObject::set_bone_visible))
+		.def("set_bone_visible", (void (CScriptGameObject::*)(LPCSTR, bool, bool))(&CScriptGameObject::set_bone_visible))
+		.def("set_bone_visible", (void (CScriptGameObject::*)(LPCSTR, bool, bool, bool))(&CScriptGameObject::set_bone_visible))
+
 		//////////////////////////////////////////////////////////////////////////
 		// Space restrictions
 		//////////////////////////////////////////////////////////////////////////
@@ -304,6 +337,7 @@ class_<CScriptGameObject>& script_register_game_object2(class_<CScriptGameObject
 		.def("get_artefact_power", &CScriptGameObject::GetArtefactPowerRestoreSpeed)
 		.def("get_artefact_bleeding", &CScriptGameObject::GetArtefactBleedingRestoreSpeed)
 		.def("get_artefact_immunity", &CScriptGameObject::GetArtefactImmunity)
+		.def("get_artefact_additional_inventory_weight", &CScriptGameObject::GetArtefactAdditionalInventoryWeight)
 
 		.def("set_artefact_health", &CScriptGameObject::SetArtefactHealthRestoreSpeed)
 		.def("set_artefact_radiation", &CScriptGameObject::SetArtefactRadiationRestoreSpeed)
@@ -311,12 +345,12 @@ class_<CScriptGameObject>& script_register_game_object2(class_<CScriptGameObject
 		.def("set_artefact_power", &CScriptGameObject::SetArtefactPowerRestoreSpeed)
 		.def("set_artefact_bleeding", &CScriptGameObject::SetArtefactBleedingRestoreSpeed)
 		.def("set_artefact_immunity", &CScriptGameObject::SetArtefactImmunity)
+		.def("set_artefact_additional_inventory_weight", &CScriptGameObject::SetArtefactAdditionalInventoryWeight)
 
 		//HELICOPTER
 		.def("get_helicopter", &CScriptGameObject::get_helicopter)
 		.def("get_car", &CScriptGameObject::get_car)
 		.def("get_hanging_lamp", &CScriptGameObject::get_hanging_lamp)
-		.def("get_bone_id", &CScriptGameObject::get_bone_id)
 		.def("get_physics_shell", &CScriptGameObject::get_physics_shell)
 		.def("get_holder_class", &CScriptGameObject::get_custom_holder)
 		.def("get_current_holder", &CScriptGameObject::get_current_holder)
@@ -415,8 +449,6 @@ class_<CScriptGameObject>& script_register_game_object2(class_<CScriptGameObject
 		.def("iterate_feel_touch", &CScriptGameObject::IterateFeelTouch)
 		.def("get_luminocity_hemi", &CScriptGameObject::GetLuminocityHemi)
 		.def("get_luminocity", &CScriptGameObject::GetLuminocity)
-		.def("bone_visible", &CScriptGameObject::IsBoneVisible)
-		.def("set_bone_visible", &CScriptGameObject::SetBoneVisible)
 		.def("set_health_ex", &CScriptGameObject::SetHealthEx)
 		.def("force_set_position", &CScriptGameObject::ForceSetPosition)
 		.def("set_spatial_type", &CScriptGameObject::SetSpatialType)
@@ -536,6 +568,22 @@ class_<CScriptGameObject>& script_register_game_object2(class_<CScriptGameObject
 		.def("get_actor_runback_coef", &CScriptGameObject::GetActorRunBackCoef)
 		.def("set_actor_runback_coef", &CScriptGameObject::SetActorRunBackCoef)
 		//end AVO
+
+		// demonized: Additional exports
+		.def("get_actor_walk_accel", &CScriptGameObject::GetActorWalkAccel)
+		.def("set_actor_walk_accel", &CScriptGameObject::SetActorWalkAccel)
+		.def("get_actor_walk_back_coef", &CScriptGameObject::GetActorWalkBackCoef)
+		.def("set_actor_walk_back_coef", &CScriptGameObject::SetActorWalkBackCoef)
+
+		// demonized: Adjust Lookout factor
+		.def("get_actor_lookout_coef", &CScriptGameObject::GetActorLookoutCoef)
+		.def("set_actor_lookout_coef", &CScriptGameObject::SetActorLookoutCoef)
+
+		// demonized: add getters and setters for pathfinding for npcs around anomalies and damage for npcs
+		.def("get_enable_anomalies_pathfinding", &CScriptGameObject::get_enable_anomalies_pathfinding)
+		.def("set_enable_anomalies_pathfinding", &CScriptGameObject::set_enable_anomalies_pathfinding)
+		.def("get_enable_anomalies_damage", &CScriptGameObject::get_enable_anomalies_damage)
+		.def("set_enable_anomalies_damage", &CScriptGameObject::set_enable_anomalies_damage)
 #endif
 
 		.def("set_can_be_harmed", &CScriptGameObject::SetCanBeHarmed)
diff --git a/src/xrGame/script_particles.cpp b/src/xrGame/script_particles.cpp
index cf6759d..8c96c79 100644
--- a/src/xrGame/script_particles.cpp
+++ b/src/xrGame/script_particles.cpp
@@ -113,19 +113,19 @@ CScriptParticles::~CScriptParticles()
 	}
 }
 
-void CScriptParticles::Play()
+void CScriptParticles::Play(bool bHudMode)
 {
 	VERIFY(m_particles);
-	m_particles->Play(false);
+	m_particles->Play(bHudMode);
 }
 
-void CScriptParticles::PlayAtPos(const Fvector& position)
+void CScriptParticles::PlayAtPos(const Fvector& position, bool bHudMode)
 {
 	VERIFY(m_particles);
 	//m_particles->play_at_pos	(position);
 	m_transform.translate_over(position);
 	m_particles->UpdateParent(m_transform, zero_vel);
-	m_particles->Play(false);
+	m_particles->Play(bHudMode);
 	m_particles->UpdateParent(m_transform, zero_vel);
 }
 
diff --git a/src/xrGame/script_particles.h b/src/xrGame/script_particles.h
index 52db459..4ab1e45 100644
--- a/src/xrGame/script_particles.h
+++ b/src/xrGame/script_particles.h
@@ -42,8 +42,8 @@ public:
 	CScriptParticles(LPCSTR caParticlesName);
 	virtual ~CScriptParticles();
 
-	void Play();
-	void PlayAtPos(const Fvector& pos);
+	void Play(bool bHudMode = false);
+	void PlayAtPos(const Fvector& pos, bool bHudMode = false);
 	void Stop();
 	void StopDeffered();
 
diff --git a/src/xrGame/script_wallmarks_manager.cpp b/src/xrGame/script_wallmarks_manager.cpp
index 640a9c8..fdc67d5 100644
--- a/src/xrGame/script_wallmarks_manager.cpp
+++ b/src/xrGame/script_wallmarks_manager.cpp
@@ -52,9 +52,17 @@ void ScriptWallmarksManager::PlaceWallmark(Fvector dir, Fvector start_pos,
 	PlaceWallmark(dir, start_pos, trace_dist, wallmark_size, section, ignore_obj, ttl, true);
 }
 
+// demonized: add user defined rotation to wallmark
 void ScriptWallmarksManager::PlaceWallmark(Fvector dir, Fvector start_pos,
 	float trace_dist, float wallmark_size, LPCSTR section,
 	CScriptGameObject* ignore_obj, float ttl, bool random_rotation)
+{
+	PlaceWallmark(dir, start_pos, trace_dist, wallmark_size, section, ignore_obj, ttl, random_rotation ? ::Random.randF(-20.f, 20.f) : 0.f);
+}
+
+void ScriptWallmarksManager::PlaceWallmark(Fvector dir, Fvector start_pos,
+	float trace_dist, float wallmark_size, LPCSTR section,
+	CScriptGameObject* ignore_obj, float ttl, float rotation)
 {
 	collide::rq_result result;
 	BOOL reach_wall =
@@ -81,7 +89,7 @@ void ScriptWallmarksManager::PlaceWallmark(Fvector dir, Fvector start_pos,
 			end_point.set(0, 0, 0);
 			end_point.mad(start_pos, dir, result.range);
 
-			::Render->add_StaticWallmark(FindSection(section), end_point, wallmark_size, pTri, pVerts, ttl, true, random_rotation);
+			::Render->add_StaticWallmark(FindSection(section), end_point, wallmark_size, pTri, pVerts, ttl, true, rotation);
 		}
 	}
 }
diff --git a/src/xrGame/script_wallmarks_manager.h b/src/xrGame/script_wallmarks_manager.h
index 54158cf..cb45b7e 100644
--- a/src/xrGame/script_wallmarks_manager.h
+++ b/src/xrGame/script_wallmarks_manager.h
@@ -26,6 +26,9 @@ public:
 	void PlaceWallmark(Fvector dir, Fvector start_pos,
 		float trace_dist, float wallmark_size, LPCSTR section,
 		CScriptGameObject* ignore_obj, float ttl, bool random_rotation = true);
+	void PlaceWallmark(Fvector dir, Fvector start_pos,
+		float trace_dist, float wallmark_size, LPCSTR section,
+		CScriptGameObject* ignore_obj, float ttl, float rotation);
 	void PlaceSkeletonWallmark(CScriptGameObject* obj, LPCSTR section, Fvector start,
 		Fvector dir, float size, float ttl);
 };
diff --git a/src/xrGame/script_wallmarks_script.cpp b/src/xrGame/script_wallmarks_script.cpp
index 85b8bbc..bd8925e 100644
--- a/src/xrGame/script_wallmarks_script.cpp
+++ b/src/xrGame/script_wallmarks_script.cpp
@@ -17,6 +17,10 @@ void CScriptWallmarksManager::script_register(lua_State *L)
 		.def(constructor<>())
 		.def("place", (void (ScriptWallmarksManager::*)(Fvector, Fvector, float, float, LPCSTR, CScriptGameObject*, float))(&ScriptWallmarksManager::PlaceWallmark))
 		.def("place", (void (ScriptWallmarksManager::*)(Fvector, Fvector, float, float, LPCSTR, CScriptGameObject*, float, bool))(&ScriptWallmarksManager::PlaceWallmark))
+
+		// demonized: add user defined rotation to wallmark
+		.def("place", (void (ScriptWallmarksManager::*)(Fvector, Fvector, float, float, LPCSTR, CScriptGameObject*, float, float))(&ScriptWallmarksManager::PlaceWallmark))
+
 		.def("place_skeleton", &ScriptWallmarksManager::PlaceSkeletonWallmark),
 
 		def("wallmarks_manager", &GetManager)
diff --git a/src/xrGame/smart_cover.h b/src/xrGame/smart_cover.h
index 99f0a21..70c1aac 100644
--- a/src/xrGame/smart_cover.h
+++ b/src/xrGame/smart_cover.h
@@ -94,6 +94,21 @@ private:
 	};
 } // namespace smart_cover
 
+struct loophole_id_predicate
+{
+	shared_str m_id;
+
+	IC loophole_id_predicate(shared_str const& id) :
+		m_id(id)
+	{
+	}
+
+	IC bool operator()(smart_cover::loophole* loophole) const
+	{
+		return (loophole->id()._get() == m_id._get());
+	}
+};
+
 #include "smart_cover_inline.h"
 
 #endif // SMART_COVER_H_INCLUDED
diff --git a/src/xrGame/space_restriction_bridge.h b/src/xrGame/space_restriction_bridge.h
index 6353689..42000ba 100644
--- a/src/xrGame/space_restriction_bridge.h
+++ b/src/xrGame/space_restriction_bridge.h
@@ -39,7 +39,7 @@ public:
 	Fsphere sphere() const;
 
 	template <typename T>
-	IC u32 accessible_nearest(T& restriction, const Fvector& position, Fvector& result, bool out_restriction);
+	IC u32 accessible_nearest(T restriction, const Fvector& position, Fvector& result, bool out_restriction);
 	template <typename T>
 	IC const xr_vector<u32>& accessible_neighbour_border(T& restriction, bool out_restriction);
 };
diff --git a/src/xrGame/space_restriction_bridge_inline.h b/src/xrGame/space_restriction_bridge_inline.h
index 0bcc8f4..eff1c01 100644
--- a/src/xrGame/space_restriction_bridge_inline.h
+++ b/src/xrGame/space_restriction_bridge_inline.h
@@ -21,7 +21,7 @@ IC CSpaceRestrictionBase& CSpaceRestrictionBridge::object() const
 }
 
 template <typename T>
-IC u32 CSpaceRestrictionBridge::accessible_nearest(T& restriction, const Fvector& position, Fvector& result,
+IC u32 CSpaceRestrictionBridge::accessible_nearest(T restriction, const Fvector& position, Fvector& result,
                                                    bool out_restriction)
 {
 #pragma todo("Dima to Dima : _Warning : this place can be optimized in case of a slowdown")
diff --git a/src/xrGame/space_restriction_manager.cpp b/src/xrGame/space_restriction_manager.cpp
index 51691c8..338d6f6 100644
--- a/src/xrGame/space_restriction_manager.cpp
+++ b/src/xrGame/space_restriction_manager.cpp
@@ -198,7 +198,7 @@ u32 CSpaceRestrictionManager::accessible_nearest(ALife::_OBJECT_ID id, const Fve
 	return (client_restriction->accessible_nearest(position, result));
 }
 
-IC bool CSpaceRestrictionManager::restriction_presented(shared_str restrictions, shared_str restriction) const
+bool CSpaceRestrictionManager::restriction_presented(shared_str restrictions, shared_str restriction) const
 {
 	string4096 m_temp;
 	for (u32 i = 0, n = _GetItemCount(*restrictions); i < n; ++i)
diff --git a/src/xrGame/space_restriction_manager.h b/src/xrGame/space_restriction_manager.h
index 5b39716..e3b99b0 100644
--- a/src/xrGame/space_restriction_manager.h
+++ b/src/xrGame/space_restriction_manager.h
@@ -75,7 +75,7 @@ public:
 	bool accessible(ALife::_OBJECT_ID id, u32 level_vertex_id, float radius);
 	u32 accessible_nearest(ALife::_OBJECT_ID id, const Fvector& position, Fvector& result);
 
-	IC bool restriction_presented(shared_str restrictions, shared_str restriction) const;
+	bool restriction_presented(shared_str restrictions, shared_str restriction) const;
 
 #ifdef DEBUG
 	IC		const SPACE_RESTRICTIONS &restrictions				() const;
diff --git a/src/xrGame/space_restrictor.cpp b/src/xrGame/space_restrictor.cpp
index 6448d01..3b50ea4 100644
--- a/src/xrGame/space_restrictor.cpp
+++ b/src/xrGame/space_restrictor.cpp
@@ -79,7 +79,8 @@ BOOL CSpaceRestrictor::net_Spawn(CSE_Abstract* data)
 
 	//Alundaio: zone visible for ai if g_ai_die_in_anomaly = 1 unless it's Radioactive Zone or Campfire
 	CCustomZone* zone = smart_cast<CCustomZone*>(this);
-	if (g_ai_die_in_anomaly == 0 || !zone || smart_cast<CRadioactiveZone*>(zone) || smart_cast<CZoneCampfire*>(zone))
+	//if (g_ai_die_in_anomaly == 0 || !zone || smart_cast<CRadioactiveZone*>(zone) || smart_cast<CZoneCampfire*>(zone))
+	if (!zone || smart_cast<CRadioactiveZone*>(zone) || smart_cast<CZoneCampfire*>(zone))
 		spatial.type &= ~STYPE_VISIBLEFORAI;
 
 	setEnabled(FALSE);
diff --git a/src/xrGame/stalker_animation_manager_update.cpp b/src/xrGame/stalker_animation_manager_update.cpp
index 8622190..1944cb9 100644
--- a/src/xrGame/stalker_animation_manager_update.cpp
+++ b/src/xrGame/stalker_animation_manager_update.cpp
@@ -14,7 +14,7 @@
 #include "profiler.h"
 #include "stalker_movement_manager_smart_cover.h"
 
-IC void CStalkerAnimationManager::play_delayed_callbacks()
+void CStalkerAnimationManager::play_delayed_callbacks()
 {
 	if (m_call_script_callback)
 	{
diff --git a/src/xrGame/stalker_movement_manager_smart_cover_loopholes.cpp b/src/xrGame/stalker_movement_manager_smart_cover_loopholes.cpp
index 6189361..ac059e2 100644
--- a/src/xrGame/stalker_movement_manager_smart_cover_loopholes.cpp
+++ b/src/xrGame/stalker_movement_manager_smart_cover_loopholes.cpp
@@ -684,21 +684,6 @@ void stalker_movement_manager_smart_cover::setup_movement_params()
 	m_current.desired_position(&position);
 }
 
-struct loophole_id_predicate
-{
-	shared_str m_id;
-
-	IC loophole_id_predicate(shared_str const& id) :
-		m_id(id)
-	{
-	}
-
-	IC bool operator()(smart_cover::loophole* loophole) const
-	{
-		return (loophole->id()._get() == m_id._get());
-	}
-};
-
 loophole const& stalker_movement_manager_smart_cover::loophole(smart_cover::cover const& cover,
                                                                shared_str const& loophole_id) const
 {
diff --git a/src/xrGame/stalker_movement_params.cpp b/src/xrGame/stalker_movement_params.cpp
index d5c7aff..b2bbf45 100644
--- a/src/xrGame/stalker_movement_params.cpp
+++ b/src/xrGame/stalker_movement_params.cpp
@@ -144,62 +144,6 @@ void stalker_movement_params::cover_id(shared_str const& cover_id)
 	m_cover = ai().cover_manager().smart_cover(cover_id);
 }
 
-struct loophole_id_predicate
-{
-	shared_str m_id;
-
-	IC loophole_id_predicate(shared_str const& id) :
-		m_id(id)
-	{
-	}
-
-	IC bool operator()(smart_cover::loophole* loophole) const
-	{
-		return (loophole->id()._get() == m_id._get());
-	}
-}; // struct loophole_id_predicate
-
-void stalker_movement_params::cover_loophole_id(shared_str const& loophole_id)
-{
-	cover_fire_object(0);
-	cover_fire_position(0);
-
-	if (m_cover_loophole_id == loophole_id)
-		return;
-
-	m_cover_loophole_id = loophole_id;
-	m_selected_loophole_actual = false;
-	m_cover_selected_loophole = 0;
-
-	if (!loophole_id.size())
-	{
-		m_cover_loophole = 0;
-		return;
-	}
-
-	VERIFY(m_cover);
-
-	typedef smart_cover::cover::Loopholes Loopholes;
-	Loopholes const& loopholes = m_cover->description()->loopholes();
-	Loopholes::const_iterator i =
-		std::find_if(
-			loopholes.begin(),
-			loopholes.end(),
-			loophole_id_predicate(loophole_id)
-		);
-
-	VERIFY2(
-		i != loopholes.end(),
-		make_string (
-			"loophole [%s] not present in smart_cover [%s]",
-			loophole_id.c_str(),
-			m_cover_id.c_str()
-		)
-	);
-
-	m_cover_loophole = *i;
-}
-
 void stalker_movement_params::actualize_loophole() const
 {
 	if (m_selected_loophole_actual)
diff --git a/src/xrGame/stalker_movement_params_inline.h b/src/xrGame/stalker_movement_params_inline.h
index 216d604..5c4ea41 100644
--- a/src/xrGame/stalker_movement_params_inline.h
+++ b/src/xrGame/stalker_movement_params_inline.h
@@ -9,6 +9,8 @@
 #ifndef STALKER_MOVEMENT_PARAMS_INLINE_H_INCLUDED
 #define STALKER_MOVEMENT_PARAMS_INLINE_H_INCLUDED
 
+#include "smart_cover.h"
+
 IC void stalker_movement_params::construct(stalker_movement_manager_smart_cover* manager)
 {
 	VERIFY(!m_manager);
@@ -101,4 +103,45 @@ IC Fvector const* stalker_movement_params::cover_fire_position() const
 	return (m_cover_fire_position);
 }
 
+IC void stalker_movement_params::cover_loophole_id(shared_str const& loophole_id)
+{
+	cover_fire_object(0);
+	cover_fire_position(0);
+
+	if (m_cover_loophole_id == loophole_id)
+		return;
+
+	m_cover_loophole_id = loophole_id;
+	m_selected_loophole_actual = false;
+	m_cover_selected_loophole = 0;
+
+	if (!loophole_id.size())
+	{
+		m_cover_loophole = 0;
+		return;
+	}
+
+	VERIFY(m_cover);
+
+	typedef smart_cover::cover::Loopholes Loopholes;
+	Loopholes const& loopholes = m_cover->description()->loopholes();
+	Loopholes::const_iterator i =
+		std::find_if(
+			loopholes.begin(),
+			loopholes.end(),
+			loophole_id_predicate(loophole_id)
+		);
+
+	VERIFY2(
+		i != loopholes.end(),
+		make_string(
+			"loophole [%s] not present in smart_cover [%s]",
+			loophole_id.c_str(),
+			m_cover_id.c_str()
+		)
+	);
+
+	m_cover_loophole = *i;
+}
+
 #endif // #ifndef STALKER_MOVEMENT_PARAMS_INLINE_H_INCLUDED
diff --git a/src/xrGame/string_table.cpp b/src/xrGame/string_table.cpp
index bc29288..effdce9 100644
--- a/src/xrGame/string_table.cpp
+++ b/src/xrGame/string_table.cpp
@@ -30,6 +30,8 @@ void CStringTable::rescan()
 
 extern void refresh_npc_names();
 
+// demonized: use english text if locale text string is missing
+BOOL use_english_text_for_missing_translations = TRUE;
 void CStringTable::Init()
 {
 	if (NULL != pData) return;
@@ -39,6 +41,24 @@ void CStringTable::Init()
 	//èìÿ ÿçûêà, åñëè íå çàäàíî (NULL), òî ïåðâûé <text> â <string> â XML
 	pData->m_sLanguage = READ_IF_EXISTS(pSettings, r_string, "string_table", "language", "eng");
 
+	// demonized: parse english files first, then they will be replaced by current locale
+	if (use_english_text_for_missing_translations && xr_strcmp(pData->m_sLanguage, "eng") != 0) {
+		FS_FileSet fset;
+		string_path files_mask;
+		xr_sprintf(files_mask, "text\\%s\\*.xml", "eng");
+		FS.file_list(fset, "$game_config$", FS_ListFiles, files_mask);
+		FS_FileSetIt fit = fset.begin();
+		FS_FileSetIt fit_e = fset.end();
+
+		for (; fit != fit_e; ++fit)
+		{
+			string_path fn, ext;
+			_splitpath((*fit).name.c_str(), 0, 0, fn, ext);
+			xr_strcat(fn, ext);
+
+			Load(fn, "eng");
+		}
+	}
 
 	//---
 	FS_FileSet fset;
@@ -77,11 +97,12 @@ void CStringTable::Init()
 	discord_gameinfo.ex_update = true;
 }
 
-void CStringTable::Load(LPCSTR xml_file_full)
+void CStringTable::Load(LPCSTR xml_file_full, LPCSTR lang_in)
 {
+	LPCSTR lang = lang_in ? lang_in : pData->m_sLanguage.c_str();
 	CUIXml uiXml;
 	string_path _s;
-	strconcat(sizeof(_s), _s, "text\\", pData->m_sLanguage.c_str());
+	strconcat(sizeof(_s), _s, "text\\", lang);
 
 	uiXml.Load(CONFIG_PATH, _s, xml_file_full);
 
@@ -98,9 +119,9 @@ void CStringTable::Load(LPCSTR xml_file_full)
 		LPCSTR string_text = uiXml.Read(uiXml.GetRoot(), "string:text", i, NULL);
 
 		if (m_bWriteErrorsToLog && string_text)
-			Msg("[string table] '%s' no translation in '%s'", string_name, pData->m_sLanguage.c_str());
+			Msg("[string table] '%s' no translation in '%s'", string_name, lang);
 
-		VERIFY3(string_text, "string table entry does not have a text", string_name);
+		R_ASSERT3(string_text, "string table entry does not have a text", string_name);
 
 		STRING_VALUE str_val = ParseLine(string_text, string_name, true);
 
diff --git a/src/xrGame/string_table.h b/src/xrGame/string_table.h
index 1f0faea..0132c16 100644
--- a/src/xrGame/string_table.h
+++ b/src/xrGame/string_table.h
@@ -33,7 +33,7 @@ public:
 	void ReloadLanguage();
 private:
 	void Init();
-	void Load(LPCSTR xml_file);
+	void Load(LPCSTR xml_file, LPCSTR lang = 0);
 	static STRING_VALUE ParseLine(LPCSTR str, LPCSTR key, bool bFirst);
 	static STRING_TABLE_DATA* pData;
 };
diff --git a/src/xrGame/ui/UILines.cpp b/src/xrGame/ui/UILines.cpp
index d639789..44b48a1 100644
--- a/src/xrGame/ui/UILines.cpp
+++ b/src/xrGame/ui/UILines.cpp
@@ -7,6 +7,7 @@
 // Copyright 2005 GSC Game World
 
 #include "StdAfx.h"
+#include <cstdio>
 
 #include "UILines.h"
 #include "UIXmlInit.h"
@@ -158,7 +159,12 @@ void CUILines::ParseText(bool force)
 				{
 					bNewLines = TRUE;
 					*pszTemp = '\0';
-					ptmp_line->AddSubLine(pszSearch, tcolor);
+					CUISubLine subline;
+					subline.m_text = pszSearch;
+					subline.m_color = tcolor;
+					subline.m_last_in_line = true;
+					//ptmp_line->AddSubLine(pszSearch, tcolor);
+					ptmp_line->AddSubLine(&subline);
 					pszSearch = pszTemp + 2;
 				}
 				ptmp_line->AddSubLine(pszSearch, tcolor);
@@ -201,8 +207,9 @@ void CUILines::ParseText(bool force)
 		{
 			for (int i = 0; i < vsz; i++)
 			{
-				const char* pszText = line->m_subLines[i].m_text.c_str();
-				const u32 tcolor = line->m_subLines[i].m_color;
+				CUISubLine* pSubLine = &line->m_subLines[i];
+				const char* pszText = pSubLine->m_text.c_str();
+				const u32 tcolor = pSubLine->m_color;
 				u16 uFrom = 0, uPartLen = 0;
 				VERIFY(pszText);
 				u16 nMarkers = m_pFont->SplitByWidth(aMarkers, UBUFFER_SIZE, fTargetWidth, pszText);
@@ -222,8 +229,11 @@ void CUILines::ParseText(bool force)
 				}
 				strncpy_s(szTempLine, pszText + uFrom, MAX_MB_CHARS);
 				tmp_line.AddSubLine(szTempLine, tcolor);
-				m_lines.push_back(tmp_line);
-				tmp_line.Clear();
+				if (pSubLine->m_last_in_line || i == (vsz -1))
+				{
+					m_lines.push_back(tmp_line);
+					tmp_line.Clear();
+				}
 			}
 		}
 	}
diff --git a/src/xrGame/ui/UILogsWnd.cpp b/src/xrGame/ui/UILogsWnd.cpp
index cda3adc..6d1fad1 100644
--- a/src/xrGame/ui/UILogsWnd.cpp
+++ b/src/xrGame/ui/UILogsWnd.cpp
@@ -76,6 +76,16 @@ void CUILogsWnd::Update()
 
 	if (!m_items_ready.empty())
 	{
+		// Sort news by date correctly
+		struct {
+			bool operator()(CUIWindow* x, CUIWindow* y) {
+				CUINewsItemWnd* a = smart_cast<CUINewsItemWnd*>(x);
+				CUINewsItemWnd* b = smart_cast<CUINewsItemWnd*>(y);
+				return a->receive_time > b->receive_time;
+			}
+		} sortNewsDesc;
+		std::sort(m_items_ready.begin(), m_items_ready.end(), sortNewsDesc);
+
 		WINDOW_LIST::iterator it = m_items_ready.begin();
 		WINDOW_LIST::iterator it_e = m_items_ready.end();
 		for (; it != it_e; ++it)
@@ -178,6 +188,14 @@ void CUILogsWnd::ReLoadNews()
 	VERIFY(m_filter_news && m_filter_talk);
 	GAME_NEWS_VECTOR& news_vector = Actor()->game_news_registry->registry().objects();
 
+	// Sort news by date correctly
+	struct {
+		bool operator()(GAME_NEWS_DATA& a, GAME_NEWS_DATA& b) {
+			return a.receive_time < b.receive_time;
+		}
+	} sortNewsDesc;
+	std::sort(news_vector.begin(), news_vector.end(), sortNewsDesc);
+
 	//	u32 currentNews = 0;
 
 	bool filter_news = m_filter_news->GetCheck();
diff --git a/src/xrGame/ui/UINewsItemWnd.cpp b/src/xrGame/ui/UINewsItemWnd.cpp
index 86180d2..2d8eac6 100644
--- a/src/xrGame/ui/UINewsItemWnd.cpp
+++ b/src/xrGame/ui/UINewsItemWnd.cpp
@@ -33,6 +33,7 @@ void CUINewsItemWnd::Init(CUIXml& uiXml, LPCSTR start_from)
 
 void CUINewsItemWnd::Setup(GAME_NEWS_DATA& news_data)
 {
+	receive_time = news_data.receive_time;
 	shared_str time_str = InventoryUtilities::GetTimeAndDateAsString(news_data.receive_time);
 	u32 sz = (time_str.size() + 5) * sizeof(char);
 	PSTR str = (PSTR)_alloca(sz);
diff --git a/src/xrGame/ui/UINewsItemWnd.h b/src/xrGame/ui/UINewsItemWnd.h
index 464c410..e7f0642 100644
--- a/src/xrGame/ui/UINewsItemWnd.h
+++ b/src/xrGame/ui/UINewsItemWnd.h
@@ -2,6 +2,7 @@
 
 #include "UIWindow.h"
 #include "xrUIXmlParser.h"
+#include "../alife_time_manager.h"
 class CUIStatic;
 class CUITextWnd;
 struct GAME_NEWS_DATA;
@@ -15,6 +16,10 @@ class CUINewsItemWnd : public CUIWindow
 	CUITextWnd* m_UIText;
 	CUIStatic* m_UIImage;
 
+	// Store GAME_NEWS_DATA time
+public:
+	ALife::_TIME_ID receive_time = 0;
+
 public:
 	CUINewsItemWnd();
 	virtual ~CUINewsItemWnd();
diff --git a/src/xrGame/ui_base.cpp b/src/xrGame/ui_base.cpp
index 0bb175a..92bbd5e 100644
--- a/src/xrGame/ui_base.cpp
+++ b/src/xrGame/ui_base.cpp
@@ -60,7 +60,7 @@ sPoly2D* C2DFrustum::ClipPoly(sPoly2D& S, sPoly2D& D) const
 		src->push_back((*src)[0]);
 		Fvector2 dir_pt, dir_uv;
 		float denum, t;
-		for (j = 0; j < src->size() - 1; j++)
+		for (u32 j = 0; j < src->size() - 1; j++)
 		{
 			if ((*src)[j].pt.similar((*src)[j + 1].pt, EPS_S)) continue;
 			if (negative(cls[j]))
diff --git a/src/xrGame/vertex_path_inline.h b/src/xrGame/vertex_path_inline.h
index f130914..a92d17e 100644
--- a/src/xrGame/vertex_path_inline.h
+++ b/src/xrGame/vertex_path_inline.h
@@ -53,7 +53,8 @@ TEMPLATE_SPECIALIZATION
 IC void CVertexPathBuilder::get_node_path(xr_vector<_index_type>& path, CGraphVertex* best)
 {
 	CGraphVertex *t1 = best, *t2 = best->back();
-	for (u32 i = 1; t2; t1 = t2, t2 = t2->back(), ++i);
+	u32 i = 1;
+	for (; t2; t1 = t2, t2 = t2->back(), ++i);
 
 	path.resize(i);
 
diff --git a/src/xrGame/vs2022/xrGame.vcxproj b/src/xrGame/vs2022/xrGame.vcxproj
new file mode 100644
index 0000000..17da34a
--- /dev/null
+++ b/src/xrGame/vs2022/xrGame.vcxproj
@@ -0,0 +1,4193 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{200652A6-043E-4634-8837-87983B3BD5E0}</ProjectGuid>
+    <RootNamespace>xrGame</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <UseOfMfc>false</UseOfMfc>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>vs2022;..;$(SolutionDir);$(SolutionDir)xrServerEntities;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(SolutionDir)3rd party\CxImage;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRGAME_EXPORTS;dSINGLE;MSVC;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <DisableSpecificWarnings>4995;4005;4237;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0419</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries;$(xrLibDir);$(XRAY_16X_LIBS)OpenAutomate\libraries;$(XRAY_16X_LIBS)jpeg\libraries\Release;$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>vs2022;..;$(SolutionDir);$(SolutionDir)xrServerEntities;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(SolutionDir)3rd party\CxImage;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRGAME_EXPORTS;dSINGLE;MSVC;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <DisableSpecificWarnings>4995;4005;4237;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0419</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries;$(xrLibDir);$(XRAY_16X_LIBS)OpenAutomate\libraries;$(XRAY_16X_LIBS)jpeg\libraries\Release;$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>vs2022;..;$(SolutionDir);$(SolutionDir)xrServerEntities;$(SolutionDir)3rd party\luajit-2\src\;$(SolutionDir)3rd party\luabind\;$(xrSdkDir)include;$(XRAY_16X_LIBS)OpenAutomate\inc;$(SolutionDir)3rd party\CxImage;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRGAME_EXPORTS;dSINGLE;MSVC;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
+      <BrowseInformation>
+      </BrowseInformation>
+      <DisableSpecificWarnings>4995;4005;4237;%(DisableSpecificWarnings)</DisableSpecificWarnings>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0419</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(SolutionDir)3rd party\luajit-2\src\;$(xrSdkDir)libraries;$(xrLibDir);$(XRAY_16X_LIBS)OpenAutomate\libraries;$(XRAY_16X_LIBS)jpeg\libraries\Release;$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\xrCore\ChooseTypes.H" />
+    <ClInclude Include="..\..\xrServerEntities\ai_sounds.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_human_brain.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_human_brain_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_monster_brain.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_monster_brain_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_movement_manager_holder.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\associative_vector.h" />
+    <ClInclude Include="..\..\xrServerEntities\associative_vector_compare_predicate.h" />
+    <ClInclude Include="..\..\xrServerEntities\associative_vector_compare_predicate_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\associative_vector_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\character_info.h" />
+    <ClInclude Include="..\..\xrServerEntities\character_info_defs.h" />
+    <ClInclude Include="..\..\xrServerEntities\clsid_game.h" />
+    <ClInclude Include="..\..\Include\xrRender\DrawUtils.h" />
+    <ClInclude Include="..\..\xrCore\FastDelegate.h" />
+    <ClInclude Include="..\..\xrServerEntities\gametype_chooser.h" />
+    <ClInclude Include="..\..\xrServerEntities\game_base_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\game_graph_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\InfoPortionDefs.h" />
+    <ClInclude Include="..\..\xrServerEntities\inventory_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\ItemListTypes.h" />
+    <ClInclude Include="..\..\xrServerEntities\LevelGameDef.h" />
+    <ClInclude Include="..\..\xrServerEntities\lua_studio.h" />
+    <ClInclude Include="..\..\xrServerEntities\mslotutils.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_broker.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_cloner.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_comparer.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_destroyer.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_factory.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_factory_impl.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_factory_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_factory_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_interfaces.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_abstract.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_abstract_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_client_server.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_client_server_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_script.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_single.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_single_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_loader.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_saver.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_type_traits.h" />
+    <ClInclude Include="..\..\xrServerEntities\pch_script.h" />
+    <ClInclude Include="..\..\xrServerEntities\PHNetState.h" />
+    <ClInclude Include="..\..\xrServerEntities\PHSynchronize.h" />
+    <ClInclude Include="..\..\xrServerEntities\PropertiesListTypes.h" />
+    <ClInclude Include="..\..\xrServerEntities\restriction_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_callStack.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_debugger.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_debugger_messages.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_debugger_threads.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_engine.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_engine_export.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_engine_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_engine_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_export_macroses.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_export_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_fcolor.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_flags.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_fmatrix.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_fvector.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_ini_file.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_ini_file_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_lua_helper.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_net_packet.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_process.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_process_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_reader.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_rtoken_list.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_rtoken_list_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_sound_type.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_space_forward.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_stack_tracker.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_stack_tracker_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_storage.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_storage_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_storage_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_thread.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_thread_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_token_list.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_token_list_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_value_container.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_value_container_impl.h" />
+    <ClInclude Include="..\..\xrServerEntities\ShapeData.h" />
+    <ClInclude Include="..\..\xrServerEntities\shared_data.h" />
+    <ClInclude Include="..\..\xrServerEntities\smart_cast.h" />
+    <ClInclude Include="..\..\xrServerEntities\smart_cast_impl0.h" />
+    <ClInclude Include="..\..\xrServerEntities\smart_cast_impl1.h" />
+    <ClInclude Include="..\..\xrServerEntities\smart_cast_impl2.h" />
+    <ClInclude Include="..\..\xrServerEntities\specific_character.h" />
+    <ClInclude Include="..\..\xrServerEntities\WaveForm.h" />
+    <ClInclude Include="..\..\xrServerEntities\xml_str_id_loader.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrEProps.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrMessages.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_Abstract.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_ALife.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_ALife_All.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_ALife_Items.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_ALife_Monsters.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_Alife_Smartcovers.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Object_Base.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_script_macroses.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Space.h" />
+    <ClInclude Include="..\abstract_location_selector.h" />
+    <ClInclude Include="..\abstract_location_selector_inline.h" />
+    <ClInclude Include="..\abstract_path_manager.h" />
+    <ClInclude Include="..\abstract_path_manager_inline.h" />
+    <ClInclude Include="..\account_manager.h" />
+    <ClInclude Include="..\account_manager_console.h" />
+    <ClInclude Include="..\accumulative_states.h" />
+    <ClInclude Include="..\action_base.h" />
+    <ClInclude Include="..\action_base_inline.h" />
+    <ClInclude Include="..\action_management_config.h" />
+    <ClInclude Include="..\action_planner.h" />
+    <ClInclude Include="..\action_planner_action.h" />
+    <ClInclude Include="..\action_planner_action_inline.h" />
+    <ClInclude Include="..\action_planner_action_script.h" />
+    <ClInclude Include="..\action_planner_action_script_inline.h" />
+    <ClInclude Include="..\action_planner_inline.h" />
+    <ClInclude Include="..\action_planner_script.h" />
+    <ClInclude Include="..\action_planner_script_inline.h" />
+    <ClInclude Include="..\action_script_base.h" />
+    <ClInclude Include="..\action_script_base_inline.h" />
+    <ClInclude Include="..\ActivatingCharCollisionDelay.h" />
+    <ClInclude Include="..\Actor.h" />
+    <ClInclude Include="..\ActorAnimation.h" />
+    <ClInclude Include="..\ActorBackpack.h" />
+    <ClInclude Include="..\ActorCondition.h" />
+    <ClInclude Include="..\ActorEffector.h" />
+    <ClInclude Include="..\ActorHelmet.h" />
+    <ClInclude Include="..\ActorNightVision.h" />
+    <ClInclude Include="..\actor_anim_defs.h" />
+    <ClInclude Include="..\actor_defs.h" />
+    <ClInclude Include="..\Actor_Flags.h" />
+    <ClInclude Include="..\actor_input_handler.h" />
+    <ClInclude Include="..\actor_memory.h" />
+    <ClInclude Include="..\actor_mp_client.h" />
+    <ClInclude Include="..\actor_mp_server.h" />
+    <ClInclude Include="..\actor_mp_state.h" />
+    <ClInclude Include="..\actor_mp_state_inline.h" />
+    <ClInclude Include="..\actor_statistic_defs.h" />
+    <ClInclude Include="..\actor_statistic_mgr.h" />
+    <ClInclude Include="..\AdvancedDetector.h" />
+    <ClInclude Include="..\agent_corpse_manager.h" />
+    <ClInclude Include="..\agent_corpse_manager_inline.h" />
+    <ClInclude Include="..\agent_enemy_manager.h" />
+    <ClInclude Include="..\agent_enemy_manager_inline.h" />
+    <ClInclude Include="..\agent_explosive_manager.h" />
+    <ClInclude Include="..\agent_explosive_manager_inline.h" />
+    <ClInclude Include="..\agent_location_manager.h" />
+    <ClInclude Include="..\agent_location_manager_inline.h" />
+    <ClInclude Include="..\agent_manager.h" />
+    <ClInclude Include="..\agent_manager_actions.h" />
+    <ClInclude Include="..\agent_manager_inline.h" />
+    <ClInclude Include="..\agent_manager_planner.h" />
+    <ClInclude Include="..\agent_manager_properties.h" />
+    <ClInclude Include="..\agent_manager_properties_inline.h" />
+    <ClInclude Include="..\agent_manager_space.h" />
+    <ClInclude Include="..\agent_member_manager.h" />
+    <ClInclude Include="..\agent_member_manager_inline.h" />
+    <ClInclude Include="..\agent_memory_manager.h" />
+    <ClInclude Include="..\agent_memory_manager_inline.h" />
+    <ClInclude Include="..\aimers_base.h" />
+    <ClInclude Include="..\aimers_base_inline.h" />
+    <ClInclude Include="..\aimers_bone.h" />
+    <ClInclude Include="..\aimers_bone_inline.h" />
+    <ClInclude Include="..\aimers_weapon.h" />
+    <ClInclude Include="..\aimers_weapon_inline.h" />
+    <ClInclude Include="..\AI\ai_monsters_anims.h" />
+    <ClInclude Include="..\AI\ai_monsters_misc.h" />
+    <ClInclude Include="..\AI\Crow\ai_crow.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_bones.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_defs.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_effector.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_motion_stats.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_shared_data.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_squad.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_squad_manager.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_squad_manager_inline.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_utils.h" />
+    <ClInclude Include="..\ai\Monsters\anim_triple.h" />
+    <ClInclude Include="..\ai\Monsters\anomaly_detector.h" />
+    <ClInclude Include="..\ai\monsters\anti_aim_ability.h" />
+    <ClInclude Include="..\ai\Monsters\BaseMonster\base_monster.h" />
+    <ClInclude Include="..\ai\Monsters\BaseMonster\base_monster_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_alien.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_attack_state.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_attack_state_hide.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_attack_state_hide_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_attack_state_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_predator.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_predator_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_predator_lite.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_predator_lite_inline.h" />
+    <ClInclude Include="..\ai\monsters\bloodsucker\bloodsucker_state_capture_jump.h" />
+    <ClInclude Include="..\ai\monsters\bloodsucker\bloodsucker_state_capture_jump_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_approach.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_approach_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_effector.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_execute.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_execute_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_hide.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_hide_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Boar\boar.h" />
+    <ClInclude Include="..\ai\Monsters\Boar\boar_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_fast_gravi.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack.h" />
+    <ClInclude Include="..\ai\monsters\burer\burer_state_attack_antiaim.h" />
+    <ClInclude Include="..\ai\monsters\burer\burer_state_attack_antiaim_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_gravi.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_gravi_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_melee.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_melee_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_run_around.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_run_around_inline.h" />
+    <ClInclude Include="..\ai\monsters\burer\burer_state_attack_shield.h" />
+    <ClInclude Include="..\ai\monsters\burer\burer_state_attack_shield_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_tele.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_tele_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Cat\cat.h" />
+    <ClInclude Include="..\ai\Monsters\Cat\cat_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera.h" />
+    <CustomBuild Include="..\ai\monsters\chimera\chimera_attack_state.h" />
+    <CustomBuild Include="..\ai\monsters\chimera\chimera_attack_state_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting_come_out.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting_come_out_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting_move_to_cover.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting_move_to_cover_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_roar.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_roar_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_steal.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_steal_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_walk.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_walk_inline.h" />
+    <ClInclude Include="..\ai\Monsters\controlled_actor.h" />
+    <ClInclude Include="..\ai\Monsters\controlled_entity.h" />
+    <ClInclude Include="..\ai\Monsters\controlled_entity_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_animation.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_direction.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_psy_hit.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_psy_hit_effector.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_camp.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_camp_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_fast_move.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_fast_move_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_fire.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_fire_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_hide.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_hide_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_hide_lite.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_hide_lite_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_moveout.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_moveout_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_control_hit.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_control_hit_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_panic.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_tube.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_tube_inline.h" />
+    <ClInclude Include="..\ai\Monsters\control_animation.h" />
+    <ClInclude Include="..\ai\Monsters\control_animation_base.h" />
+    <ClInclude Include="..\ai\Monsters\control_combase.h" />
+    <ClInclude Include="..\ai\Monsters\control_com_defs.h" />
+    <ClInclude Include="..\ai\Monsters\control_critical_wound.h" />
+    <ClInclude Include="..\ai\Monsters\control_direction.h" />
+    <ClInclude Include="..\ai\Monsters\control_direction_base.h" />
+    <ClInclude Include="..\ai\Monsters\control_jump.h" />
+    <ClInclude Include="..\ai\Monsters\control_manager.h" />
+    <ClInclude Include="..\ai\Monsters\control_manager_custom.h" />
+    <ClInclude Include="..\ai\Monsters\control_melee_jump.h" />
+    <ClInclude Include="..\ai\Monsters\control_movement.h" />
+    <ClInclude Include="..\ai\Monsters\control_movement_base.h" />
+    <ClInclude Include="..\ai\Monsters\control_path_builder.h" />
+    <ClInclude Include="..\ai\Monsters\control_path_builder_base.h" />
+    <ClInclude Include="..\ai\Monsters\control_path_builder_base_inline.h" />
+    <ClInclude Include="..\ai\Monsters\control_rotation_jump.h" />
+    <ClInclude Include="..\ai\Monsters\control_run_attack.h" />
+    <ClInclude Include="..\ai\Monsters\control_sequencer.h" />
+    <ClInclude Include="..\ai\Monsters\control_threaten.h" />
+    <ClInclude Include="..\ai\Monsters\corpse_cover.h" />
+    <ClInclude Include="..\ai\Monsters\custom_events.h" />
+    <ClInclude Include="..\ai\Monsters\Dog\dog.h" />
+    <ClInclude Include="..\ai\Monsters\Dog\dog_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\energy_holder.h" />
+    <ClInclude Include="..\ai\Monsters\Flesh\flesh.h" />
+    <ClInclude Include="..\ai\Monsters\Flesh\flesh_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Fracture\fracture.h" />
+    <ClInclude Include="..\ai\Monsters\Fracture\fracture_state_manager.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_attack.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_attack_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_attack_run.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_attack_run_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_custom.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_custom_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat_drag.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat_drag_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat_eat.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat_eat_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_hear_danger_sound.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_hear_danger_sound_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_home_point_attack.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_home_point_attack_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_panic.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_panic_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_panic_run.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_panic_run_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_rest.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_rest_idle.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_rest_idle_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_rest_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_squad_move_to_radius.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_squad_move_to_radius_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\state_adapter.h" />
+    <ClInclude Include="..\ai\Monsters\invisibility.h" />
+    <ClInclude Include="..\ai\Monsters\melee_checker.h" />
+    <ClInclude Include="..\ai\Monsters\melee_checker_inline.h" />
+    <ClInclude Include="..\ai\monsters\monster_aura.h" />
+    <ClInclude Include="..\ai\Monsters\monster_corpse_manager.h" />
+    <ClInclude Include="..\ai\Monsters\monster_corpse_memory.h" />
+    <ClInclude Include="..\ai\Monsters\monster_cover_manager.h" />
+    <ClInclude Include="..\ai\Monsters\monster_enemy_manager.h" />
+    <ClInclude Include="..\ai\Monsters\monster_enemy_memory.h" />
+    <ClInclude Include="..\ai\Monsters\monster_event_manager.h" />
+    <ClInclude Include="..\ai\Monsters\monster_event_manager_defs.h" />
+    <ClInclude Include="..\ai\Monsters\monster_hit_memory.h" />
+    <ClInclude Include="..\ai\Monsters\monster_home.h" />
+    <ClInclude Include="..\ai\Monsters\monster_morale.h" />
+    <ClInclude Include="..\ai\Monsters\monster_morale_inline.h" />
+    <ClInclude Include="..\ai\Monsters\monster_sound_defs.h" />
+    <ClInclude Include="..\ai\Monsters\monster_sound_memory.h" />
+    <ClInclude Include="..\ai\Monsters\monster_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\monster_state_manager_inline.h" />
+    <ClInclude Include="..\ai\Monsters\monster_velocity_space.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist_movement.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist_state_attack_hidden.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist_state_attack_hidden_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist_state_rest.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\pseudodog.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\pseudodog_psi_effector.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\pseudodog_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_aura.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_state_psy_attack.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_state_psy_attack_hide.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_state_psy_attack_hide_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_state_psy_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\PseudoGigant\pseudogigant_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\PseudoGigant\pseudo_gigant.h" />
+    <ClInclude Include="..\ai\Monsters\PseudoGigant\pseudo_gigant_step_effector.h" />
+    <ClInclude Include="..\ai\Monsters\psy_aura.h" />
+    <ClInclude Include="..\ai\monsters\rats\ai_rat.h" />
+    <ClInclude Include="..\ai\monsters\rats\ai_rat_impl.h" />
+    <ClInclude Include="..\ai\monsters\rats\ai_rat_inline.h" />
+    <ClInclude Include="..\ai\monsters\rats\ai_rat_space.h" />
+    <ClInclude Include="..\ai\Monsters\scanning_ability.h" />
+    <ClInclude Include="..\ai\Monsters\scanning_ability_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Snork\snork.h" />
+    <ClInclude Include="..\ai\Monsters\Snork\snork_jump.h" />
+    <ClInclude Include="..\ai\Monsters\Snork\snork_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\state.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_camp.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_camp_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_camp_stealout.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_camp_stealout_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_melee.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_melee_inline.h" />
+    <ClInclude Include="..\ai\monsters\states\monster_state_attack_on_run.h" />
+    <ClInclude Include="..\ai\monsters\states\monster_state_attack_on_run_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_run.h" />
+    <ClInclude Include="..\ai\monsters\states\monster_state_attack_run_attack.h" />
+    <ClInclude Include="..\ai\monsters\states\monster_state_attack_run_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_run_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled_attack.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled_follow.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled_follow_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat_drag.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat_drag_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat_eat.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat_eat_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_angry.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_angry_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_look.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_look_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_run.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_run_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_walk.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_walk_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hear_danger_sound.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hear_danger_sound_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hear_int_sound.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hear_int_sound_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_help_sound.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_help_sound_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted_hide.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted_hide_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted_moveout.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted_moveout_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_attack.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_danger.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_danger_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_rest.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_rest_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_panic.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_panic_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_panic_run.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_panic_run_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_fun.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_fun_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_idle.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_idle_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_sleep.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_sleep_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_walk_graph.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_walk_graph_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_smart_terrain_task.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_smart_terrain_task_graph_walk.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_smart_terrain_task_graph_walk_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_smart_terrain_task_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_squad_rest.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_squad_rest_follow.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_squad_rest_follow_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_squad_rest_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_steal.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_steal_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_custom_action.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_custom_action_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_custom_action_look.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_custom_action_look_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_data.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_hide_from_point.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_hide_from_point_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_hit_object.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_hit_object_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_look_point.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_look_point_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_look_unprotected_area.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_look_unprotected_area_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_around_point.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_around_point_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_to_point.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_to_point_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_to_restrictor.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_to_restrictor_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_test_look_actor.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_test_look_actor_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_test_state.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_test_state_inline.h" />
+    <ClInclude Include="..\ai\Monsters\state_defs.h" />
+    <ClInclude Include="..\ai\Monsters\state_inline.h" />
+    <ClInclude Include="..\ai\Monsters\state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\telekinesis.h" />
+    <ClInclude Include="..\ai\Monsters\telekinesis_inline.h" />
+    <ClInclude Include="..\ai\Monsters\telekinetic_object.h" />
+    <ClInclude Include="..\ai\Monsters\Tushkano\tushkano.h" />
+    <ClInclude Include="..\ai\Monsters\Tushkano\tushkano_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Zombie\zombie.h" />
+    <ClInclude Include="..\ai\Monsters\Zombie\zombie_state_attack_run.h" />
+    <ClInclude Include="..\ai\Monsters\Zombie\zombie_state_attack_run_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Zombie\zombie_state_manager.h" />
+    <ClInclude Include="..\ai\phantom\phantom.h" />
+    <ClInclude Include="..\ai\position_prediction.h" />
+    <ClInclude Include="..\Ai\Stalker\ai_stalker.h" />
+    <ClInclude Include="..\ai\stalker\ai_stalker_impl.h" />
+    <ClInclude Include="..\ai\stalker\ai_stalker_inline.h" />
+    <ClInclude Include="..\Ai\Stalker\ai_stalker_space.h" />
+    <ClInclude Include="..\Ai\Trader\ai_trader.h" />
+    <ClInclude Include="..\ai\trader\trader_animation.h" />
+    <ClInclude Include="..\ai\weighted_random.h" />
+    <ClInclude Include="..\ai_debug.h" />
+    <ClInclude Include="..\ai_debug_variables.h" />
+    <ClInclude Include="..\ai_monster_space.h" />
+    <ClInclude Include="..\ai_object_location.h" />
+    <ClInclude Include="..\ai_object_location_impl.h" />
+    <ClInclude Include="..\ai_object_location_inline.h" />
+    <ClInclude Include="..\ai_obstacle.h" />
+    <ClInclude Include="..\ai_obstacle_inline.h" />
+    <ClInclude Include="..\AI_PhraseDialogManager.h" />
+    <ClInclude Include="..\ai_space.h" />
+    <ClInclude Include="..\ai_space_inline.h" />
+    <ClInclude Include="..\alife_abstract_registry.h" />
+    <ClInclude Include="..\alife_abstract_registry_inline.h" />
+    <ClInclude Include="..\alife_combat_manager.h" />
+    <ClInclude Include="..\alife_combat_manager_inline.h" />
+    <ClInclude Include="..\alife_communication_manager.h" />
+    <ClInclude Include="..\alife_communication_manager_inline.h" />
+    <ClInclude Include="..\alife_communication_space.h" />
+    <ClInclude Include="..\alife_graph_registry.h" />
+    <ClInclude Include="..\alife_graph_registry_inline.h" />
+    <ClInclude Include="..\alife_group_registry.h" />
+    <ClInclude Include="..\alife_group_registry_inline.h" />
+    <ClInclude Include="..\alife_human_brain_save.h" />
+    <ClInclude Include="..\alife_human_object_handler.h" />
+    <ClInclude Include="..\alife_human_object_handler_inline.h" />
+    <ClInclude Include="..\alife_human_object_handler_save.h" />
+    <ClInclude Include="..\alife_interaction_manager.h" />
+    <ClInclude Include="..\alife_interaction_manager_inline.h" />
+    <ClInclude Include="..\alife_level_registry.h" />
+    <ClInclude Include="..\alife_level_registry_inline.h" />
+    <ClInclude Include="..\alife_monster_detail_path_manager.h" />
+    <ClInclude Include="..\alife_monster_detail_path_manager_inline.h" />
+    <ClInclude Include="..\alife_monster_movement_manager.h" />
+    <ClInclude Include="..\alife_monster_movement_manager_inline.h" />
+    <ClInclude Include="..\alife_monster_patrol_path_manager.h" />
+    <ClInclude Include="..\alife_monster_patrol_path_manager_inline.h" />
+    <ClInclude Include="..\alife_object_registry.h" />
+    <ClInclude Include="..\alife_object_registry_inline.h" />
+    <ClInclude Include="..\alife_online_offline_group_brain.h" />
+    <ClInclude Include="..\alife_online_offline_group_brain_inline.h" />
+    <ClInclude Include="..\alife_registry_container.h" />
+    <ClInclude Include="..\alife_registry_container_composition.h" />
+    <ClInclude Include="..\alife_registry_container_inline.h" />
+    <ClInclude Include="..\alife_registry_container_space.h" />
+    <ClInclude Include="..\alife_registry_wrapper.h" />
+    <ClInclude Include="..\alife_registry_wrappers.h" />
+    <ClInclude Include="..\alife_schedule_registry.h" />
+    <ClInclude Include="..\alife_schedule_registry_inline.h" />
+    <ClInclude Include="..\alife_simulator.h" />
+    <ClInclude Include="..\alife_simulator_base.h" />
+    <ClInclude Include="..\alife_simulator_base_inline.h" />
+    <ClInclude Include="..\alife_simulator_header.h" />
+    <ClInclude Include="..\alife_simulator_header_inline.h" />
+    <ClInclude Include="..\alife_simulator_inline.h" />
+    <ClInclude Include="..\alife_smart_terrain_registry.h" />
+    <ClInclude Include="..\alife_smart_terrain_registry_inline.h" />
+    <ClInclude Include="..\alife_smart_terrain_task.h" />
+    <ClInclude Include="..\alife_smart_terrain_task_inline.h" />
+    <ClInclude Include="..\alife_spawn_registry.h" />
+    <ClInclude Include="..\alife_spawn_registry_header.h" />
+    <ClInclude Include="..\alife_spawn_registry_header_inline.h" />
+    <ClInclude Include="..\alife_spawn_registry_inline.h" />
+    <ClInclude Include="..\alife_storage_manager.h" />
+    <ClInclude Include="..\alife_storage_manager_inline.h" />
+    <ClInclude Include="..\alife_story_registry.h" />
+    <ClInclude Include="..\alife_story_registry_inline.h" />
+    <ClInclude Include="..\alife_surge_manager.h" />
+    <ClInclude Include="..\alife_surge_manager_inline.h" />
+    <ClInclude Include="..\alife_switch_manager.h" />
+    <ClInclude Include="..\alife_switch_manager_inline.h" />
+    <ClInclude Include="..\alife_time_manager.h" />
+    <ClInclude Include="..\alife_time_manager_inline.h" />
+    <ClInclude Include="..\alife_update_manager.h" />
+    <ClInclude Include="..\alife_update_manager_inline.h" />
+    <ClInclude Include="..\AmebaZone.h" />
+    <ClInclude Include="..\ammunition_groups.h" />
+    <ClInclude Include="..\animation_movement_controller.h" />
+    <ClInclude Include="..\animation_script_callback.h" />
+    <ClInclude Include="..\animation_utils.h" />
+    <ClInclude Include="..\anticheat_dumpable_object.h" />
+    <ClInclude Include="..\antirad.h" />
+    <ClInclude Include="..\Artefact.h" />
+    <ClInclude Include="..\artefact_activation.h" />
+    <ClInclude Include="..\atlas_stalkercoppc_v1.h" />
+    <ClInclude Include="..\atlas_submit_queue.h" />
+    <ClInclude Include="..\attachable_item.h" />
+    <ClInclude Include="..\attachable_item_inline.h" />
+    <ClInclude Include="..\attachment_owner.h" />
+    <ClInclude Include="..\attachment_owner_inline.h" />
+    <ClInclude Include="..\autosave_manager.h" />
+    <ClInclude Include="..\autosave_manager_inline.h" />
+    <ClInclude Include="..\awards_store.h" />
+    <ClInclude Include="..\a_star.h" />
+    <ClInclude Include="..\a_star_inline.h" />
+    <ClInclude Include="..\base_client_classes.h" />
+    <ClInclude Include="..\base_client_classes_wrappers.h" />
+    <ClInclude Include="..\BastArtifact.h" />
+    <ClInclude Include="..\best_scores_helper.h" />
+    <ClInclude Include="..\best_scores_store.h" />
+    <ClInclude Include="..\BlackDrops.h" />
+    <ClInclude Include="..\BlackGraviArtifact.h" />
+    <ClInclude Include="..\black_list.h" />
+    <ClInclude Include="..\Bolt.h" />
+    <ClInclude Include="..\BoneProtections.h" />
+    <ClInclude Include="..\bone_groups.h" />
+    <ClInclude Include="..\BottleItem.h" />
+    <ClInclude Include="..\BreakableObject.h" />
+    <ClInclude Include="..\builder_allocator_constructor.h" />
+    <ClInclude Include="..\builder_allocator_constructor_inline.h" />
+    <ClInclude Include="..\callback_info.h" />
+    <ClInclude Include="..\CameraEffector.h" />
+    <ClInclude Include="..\CameraFirstEye.h" />
+    <ClInclude Include="..\cameralook.h" />
+    <ClInclude Include="..\CameraRecoil.h" />
+    <ClInclude Include="..\CaptureBoneCallback.h" />
+    <ClInclude Include="..\Car.h" />
+    <ClInclude Include="..\CarDamageParticles.h" />
+    <ClInclude Include="..\CarLights.h" />
+    <ClInclude Include="..\CarWeapon.h" />
+    <ClInclude Include="..\car_memory.h" />
+    <ClInclude Include="..\cdkey_ban_list.h" />
+    <ClInclude Include="..\CharacterPhysicsSupport.h" />
+    <ClInclude Include="..\character_community.h" />
+    <ClInclude Include="..\character_hit_animations.h" />
+    <ClInclude Include="..\character_hit_animations_params.h" />
+    <ClInclude Include="..\character_rank.h" />
+    <ClInclude Include="..\character_reputation.h" />
+    <ClInclude Include="..\character_shell_control.h" />
+    <ClInclude Include="..\client_spawn_manager.h" />
+    <ClInclude Include="..\client_spawn_manager_inline.h" />
+    <ClInclude Include="..\ClimableObject.h" />
+    <ClInclude Include="..\command_switch_counter.h" />
+    <ClInclude Include="..\condition_state.h" />
+    <ClInclude Include="..\condition_state_inline.h" />
+    <ClInclude Include="..\configs_common.h" />
+    <ClInclude Include="..\configs_dumper.h" />
+    <ClInclude Include="..\configs_dump_verifyer.h" />
+    <ClInclude Include="..\console_registrator.h" />
+    <ClInclude Include="..\controller_state_panic_inline.h" />
+    <ClInclude Include="..\control_action.h" />
+    <ClInclude Include="..\control_action_inline.h" />
+    <ClInclude Include="..\cover_evaluators.h" />
+    <ClInclude Include="..\cover_evaluators_inline.h" />
+    <ClInclude Include="..\cover_manager.h" />
+    <ClInclude Include="..\cover_manager_inline.h" />
+    <ClInclude Include="..\cover_point.h" />
+    <ClInclude Include="..\cover_point_inline.h" />
+    <ClInclude Include="..\cta_game_artefact.h" />
+    <ClInclude Include="..\cta_game_artefact_activation.h" />
+    <ClInclude Include="..\CustomDetector.h" />
+    <ClInclude Include="..\CustomDevice.h" />
+    <ClInclude Include="..\CustomMonster.h" />
+    <ClInclude Include="..\CustomMonster_inline.h" />
+    <ClInclude Include="..\CustomOutfit.h" />
+    <ClInclude Include="..\CustomRocket.h" />
+    <ClInclude Include="..\CustomZone.h" />
+    <ClInclude Include="..\DamagableItem.h" />
+    <ClInclude Include="..\DamageSource.h" />
+    <ClInclude Include="..\damage_manager.h" />
+    <ClInclude Include="..\damage_manager_inline.h" />
+    <ClInclude Include="..\danger_cover_location.h" />
+    <ClInclude Include="..\danger_cover_location_inline.h" />
+    <ClInclude Include="..\danger_explosive.h" />
+    <ClInclude Include="..\danger_explosive_inline.h" />
+    <ClInclude Include="..\danger_location.h" />
+    <ClInclude Include="..\danger_location_inline.h" />
+    <ClInclude Include="..\danger_manager.h" />
+    <ClInclude Include="..\danger_manager_inline.h" />
+    <ClInclude Include="..\danger_object.h" />
+    <ClInclude Include="..\danger_object_inline.h" />
+    <ClInclude Include="..\danger_object_location.h" />
+    <ClInclude Include="..\danger_object_location_inline.h" />
+    <ClInclude Include="..\data_storage_binary_heap.h" />
+    <ClInclude Include="..\data_storage_binary_heap_inline.h" />
+    <ClInclude Include="..\data_storage_bucket_list.h" />
+    <ClInclude Include="..\data_storage_bucket_list_inline.h" />
+    <ClInclude Include="..\data_storage_constructor.h" />
+    <ClInclude Include="..\data_storage_double_linked_list.h" />
+    <ClInclude Include="..\data_storage_double_linked_list_inline.h" />
+    <ClInclude Include="..\data_storage_single_linked_list.h" />
+    <ClInclude Include="..\data_storage_single_linked_list_inline.h" />
+    <ClInclude Include="..\date_time.h" />
+    <ClInclude Include="..\death_anims.h" />
+    <ClInclude Include="..\debug_make_final.hpp" />
+    <ClInclude Include="..\debug_renderer.h" />
+    <ClInclude Include="..\debug_renderer_inline.h" />
+    <ClInclude Include="..\debug_text_tree.h" />
+    <ClInclude Include="..\debug_text_tree_inline.h" />
+    <ClInclude Include="..\DelayedActionFuse.h" />
+    <ClInclude Include="..\DemoInfo.h" />
+    <ClInclude Include="..\DemoInfo_Loader.h" />
+    <ClInclude Include="..\DemoPlay_Control.h" />
+    <ClInclude Include="..\DestroyablePhysicsObject.h" />
+    <ClInclude Include="..\detail_path_builder.h" />
+    <ClInclude Include="..\detail_path_manager.h" />
+    <ClInclude Include="..\detail_path_manager_inline.h" />
+    <ClInclude Include="..\detail_path_manager_space.h" />
+    <ClInclude Include="..\dijkstra.h" />
+    <ClInclude Include="..\dijkstra_inline.h" />
+    <ClInclude Include="..\doors.h" />
+    <ClInclude Include="..\doors_actor.h" />
+    <ClInclude Include="..\doors_door.h" />
+    <ClInclude Include="..\doors_manager.h" />
+    <ClInclude Include="..\Dosimeter.h" />
+    <ClInclude Include="..\double_shot_double_kill.h" />
+    <ClInclude Include="..\DummyArtifact.h" />
+    <ClInclude Include="..\DynamicHeightMap.h" />
+    <ClInclude Include="..\dynamic_obstacles_avoider.h" />
+    <ClInclude Include="..\dynamic_obstacles_avoider_inline.h" />
+    <ClInclude Include="..\eatable_item.h" />
+    <ClInclude Include="..\eatable_item_object.h" />
+    <ClInclude Include="..\edge_path.h" />
+    <ClInclude Include="..\edge_path_inline.h" />
+    <ClInclude Include="..\EffectorBobbing.h" />
+    <ClInclude Include="..\EffectorFall.h" />
+    <ClInclude Include="..\EffectorShot.h" />
+    <ClInclude Include="..\EffectorShotX.h" />
+    <ClInclude Include="..\EffectorZoomInertion.h" />
+    <ClInclude Include="..\ef_base.h" />
+    <ClInclude Include="..\ef_pattern.h" />
+    <ClInclude Include="..\ef_primary.h" />
+    <ClInclude Include="..\ef_storage.h" />
+    <ClInclude Include="..\ef_storage_inline.h" />
+    <ClInclude Include="..\ElectricBall.h" />
+    <ClInclude Include="..\EliteDetector.h" />
+    <ClInclude Include="..\encyclopedia_article.h" />
+    <ClInclude Include="..\encyclopedia_article_defs.h" />
+    <ClInclude Include="..\enemy_manager.h" />
+    <ClInclude Include="..\enemy_manager_inline.h" />
+    <ClInclude Include="..\Entity.h" />
+    <ClInclude Include="..\EntityCondition.h" />
+    <ClInclude Include="..\entity_alive.h" />
+    <ClInclude Include="..\entity_alive_inline.h" />
+    <ClInclude Include="..\event_conditions_collection.h" />
+    <ClInclude Include="..\ExoOutfit.h" />
+    <CustomBuild Include="..\Explosive.h">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">true</ExcludedFromBuild>
+    </CustomBuild>
+    <ClInclude Include="..\ExplosiveItem.h" />
+    <ClInclude Include="..\ExplosiveRocket.h" />
+    <ClInclude Include="..\F1.h" />
+    <ClInclude Include="..\FadedBall.h" />
+    <ClInclude Include="..\faster_than_bullets_time.h" />
+    <ClInclude Include="..\filereceiver_node.h" />
+    <ClInclude Include="..\filetransfer_common.h" />
+    <ClInclude Include="..\filetransfer_node.h" />
+    <ClInclude Include="..\file_transfer.h" />
+    <ClInclude Include="..\firedeps.h" />
+    <ClInclude Include="..\fire_disp_controller.h" />
+    <ClInclude Include="..\first_bullet_controller.h" />
+    <ClInclude Include="..\flare.h" />
+    <ClInclude Include="..\Flashlight.h" />
+    <ClInclude Include="..\FoodItem.h" />
+    <ClInclude Include="..\FryupZone.h" />
+    <ClInclude Include="..\fs_registrator.h" />
+    <ClInclude Include="..\GalantineArtifact.h" />
+    <ClInclude Include="..\GameObject.h" />
+    <ClInclude Include="..\GamePersistent.h" />
+    <ClInclude Include="..\gamespy\CdkeyDecode\base32.h" />
+    <ClInclude Include="..\gamespy\CdkeyDecode\cdkeydecode.h" />
+    <ClInclude Include="..\GameTask.h" />
+    <ClInclude Include="..\GameTaskDefs.h" />
+    <ClInclude Include="..\GametaskManager.h" />
+    <ClInclude Include="..\game_base.h" />
+    <ClInclude Include="..\game_base_kill_type.h" />
+    <ClInclude Include="..\game_base_menu_events.h" />
+    <ClInclude Include="..\game_cl_artefacthunt.h" />
+    <ClInclude Include="..\game_cl_artefacthunt_snd_msg.h" />
+    <ClInclude Include="..\game_cl_base.h" />
+    <ClInclude Include="..\game_cl_base_weapon_usage_statistic.h" />
+    <ClInclude Include="..\game_cl_capturetheartefact_snd_msg.h" />
+    <ClInclude Include="..\game_cl_capture_the_artefact.h" />
+    <ClInclude Include="..\game_cl_capture_the_artefact_captions_manager.h" />
+    <ClInclude Include="..\game_cl_deathmatch.h" />
+    <ClInclude Include="..\game_cl_deathmatch_snd_messages.h" />
+    <ClInclude Include="..\game_cl_mp.h" />
+    <ClInclude Include="..\game_cl_mp_messages_menu.h" />
+    <ClInclude Include="..\game_cl_mp_snd_messages.h" />
+    <ClInclude Include="..\game_cl_single.h" />
+    <ClInclude Include="..\game_cl_teamdeathmatch.h" />
+    <ClInclude Include="..\game_cl_teamdeathmatch_snd_messages.h" />
+    <ClInclude Include="..\game_events_handler.h" />
+    <ClInclude Include="..\game_graph.h" />
+    <ClInclude Include="..\game_graph_inline.h" />
+    <ClInclude Include="..\game_level_cross_table.h" />
+    <ClInclude Include="..\game_level_cross_table_inline.h" />
+    <ClInclude Include="..\game_location_selector.h" />
+    <ClInclude Include="..\game_location_selector_inline.h" />
+    <ClInclude Include="..\game_news.h" />
+    <ClInclude Include="..\game_object_space.h" />
+    <ClInclude Include="..\game_path_manager.h" />
+    <ClInclude Include="..\game_path_manager_inline.h" />
+    <ClInclude Include="..\game_state_accumulator.h" />
+    <ClInclude Include="..\game_state_accumulator_inline.h" />
+    <ClInclude Include="..\game_sv_artefacthunt.h" />
+    <ClInclude Include="..\game_sv_base.h" />
+    <ClInclude Include="..\game_sv_base_console_vars.h" />
+    <ClInclude Include="..\game_sv_capture_the_artefact.h" />
+    <ClInclude Include="..\game_sv_deathmatch.h" />
+    <ClInclude Include="..\game_sv_event_queue.h" />
+    <ClInclude Include="..\game_sv_item_respawner.h" />
+    <ClInclude Include="..\game_sv_mp.h" />
+    <ClInclude Include="..\game_sv_mp_team.h" />
+    <ClInclude Include="..\game_sv_mp_vote_flags.h" />
+    <ClInclude Include="..\game_sv_single.h" />
+    <ClInclude Include="..\game_sv_teamdeathmatch.h" />
+    <ClInclude Include="..\GlobalFeelTouch.hpp" />
+    <CustomBuild Include="..\graph_abstract.h" />
+    <CustomBuild Include="..\graph_abstract_inline.h" />
+    <ClInclude Include="..\graph_edge.h" />
+    <ClInclude Include="..\graph_edge_inline.h" />
+    <ClInclude Include="..\graph_engine.h" />
+    <ClInclude Include="..\graph_engine_inline.h" />
+    <ClInclude Include="..\graph_engine_space.h" />
+    <ClInclude Include="..\graph_vertex.h" />
+    <ClInclude Include="..\graph_vertex_inline.h" />
+    <ClInclude Include="..\GraviArtifact.h" />
+    <ClInclude Include="..\GraviZone.h" />
+    <ClInclude Include="..\Grenade.h" />
+    <ClInclude Include="..\GrenadeLauncher.h" />
+    <ClInclude Include="..\group_hierarchy_holder.h" />
+    <ClInclude Include="..\group_hierarchy_holder_inline.h" />
+    <ClInclude Include="..\gsc_dsigned_ltx.h" />
+    <ClInclude Include="..\HairsZone.h" />
+    <ClInclude Include="..\HangingLamp.h" />
+    <ClInclude Include="..\harvest_time.h" />
+    <ClInclude Include="..\helicopter.h" />
+    <ClInclude Include="..\Hit.h" />
+    <ClInclude Include="..\HitMarker.h" />
+    <ClInclude Include="..\hits_store.h" />
+    <ClInclude Include="..\hits_store_inline.h" />
+    <ClInclude Include="..\hit_immunity.h" />
+    <ClInclude Include="..\hit_immunity_space.h" />
+    <ClInclude Include="..\hit_memory_manager.h" />
+    <ClInclude Include="..\hit_memory_manager_inline.h" />
+    <ClInclude Include="..\holder_custom.h" />
+    <ClInclude Include="..\HUDCrosshair.h" />
+    <ClInclude Include="..\HudItem.h" />
+    <ClInclude Include="..\HUDManager.h" />
+    <ClInclude Include="..\HudSound.h" />
+    <ClInclude Include="..\HUDTarget.h" />
+    <ClInclude Include="..\hud_item_object.h" />
+    <ClInclude Include="..\id_generator.h" />
+    <ClInclude Include="..\IKFoot.h" />
+    <ClInclude Include="..\IKFoot_inl.h" />
+    <ClInclude Include="..\IKLimbsController.h" />
+    <ClInclude Include="..\Ik\aint.h" />
+    <ClInclude Include="..\Ik\Dof7control.h" />
+    <ClInclude Include="..\Ik\eqn.h" />
+    <ClInclude Include="..\Ik\eulersolver.h" />
+    <ClInclude Include="..\Ik\IKLimb.h" />
+    <ClInclude Include="..\Ik\jtlimits.h" />
+    <ClInclude Include="..\Ik\limb.h" />
+    <ClInclude Include="..\Ik\math3d.h" />
+    <ClInclude Include="..\Ik\mathTrig.h" />
+    <ClInclude Include="..\ik_anim_state.h" />
+    <ClInclude Include="..\ik_calculate_data.h" />
+    <ClInclude Include="..\ik_calculate_state.h" />
+    <ClInclude Include="..\ik_collide_data.h" />
+    <ClInclude Include="..\ik_dbg_matrix.h" />
+    <ClInclude Include="..\ik_foot_collider.h" />
+    <ClInclude Include="..\ik_limb_state.h" />
+    <ClInclude Include="..\ik_limb_state_predict.h" />
+    <ClInclude Include="..\ik_object_shift.h" />
+    <ClInclude Include="..\imotion_position.h" />
+    <ClInclude Include="..\imotion_velocity.h" />
+    <ClInclude Include="..\InfoDocument.h" />
+    <ClInclude Include="..\InfoPortion.h" />
+    <ClInclude Include="..\ini_id_loader.h" />
+    <ClInclude Include="..\ini_table_loader.h" />
+    <ClInclude Include="..\interactive_animation.h" />
+    <ClInclude Include="..\interactive_motion.h" />
+    <ClInclude Include="..\Inventory.h" />
+    <ClInclude Include="..\InventoryBox.h" />
+    <ClInclude Include="..\InventoryOwner.h" />
+    <ClInclude Include="..\inventory_item.h" />
+    <ClInclude Include="..\inventory_item_impl.h" />
+    <ClInclude Include="..\inventory_item_inline.h" />
+    <ClInclude Include="..\inventory_item_object.h" />
+    <ClInclude Include="..\inventory_item_object_inline.h" />
+    <ClInclude Include="..\inventory_owner_inline.h" />
+    <ClInclude Include="..\inventory_upgrade.h" />
+    <ClInclude Include="..\inventory_upgrade_base.h" />
+    <ClInclude Include="..\inventory_upgrade_base_inline.h" />
+    <ClInclude Include="..\inventory_upgrade_group.h" />
+    <ClInclude Include="..\inventory_upgrade_group_inline.h" />
+    <ClInclude Include="..\inventory_upgrade_inline.h" />
+    <ClInclude Include="..\inventory_upgrade_manager.h" />
+    <ClInclude Include="..\inventory_upgrade_manager_inline.h" />
+    <ClInclude Include="..\inventory_upgrade_property.h" />
+    <ClInclude Include="..\inventory_upgrade_property_inline.h" />
+    <ClInclude Include="..\inventory_upgrade_root.h" />
+    <ClInclude Include="..\inventory_upgrade_root_inline.h" />
+    <ClInclude Include="..\invincible_fury.h" />
+    <ClInclude Include="..\item_manager.h" />
+    <ClInclude Include="..\key_binding_registrator.h" />
+    <ClInclude Include="..\killer_victim_velocity_angle.h" />
+    <ClInclude Include="..\kills_store.h" />
+    <ClInclude Include="..\kills_store_inline.h" />
+    <ClInclude Include="..\Level.h" />
+    <ClInclude Include="..\LevelDebugScript.h" />
+    <ClInclude Include="..\Level_Bullet_Manager.h" />
+    <ClInclude Include="..\level_changer.h" />
+    <ClInclude Include="..\level_debug.h" />
+    <ClInclude Include="..\level_graph.h" />
+    <ClInclude Include="..\level_graph_inline.h" />
+    <ClInclude Include="..\level_graph_space.h" />
+    <ClInclude Include="..\level_graph_vertex_inline.h" />
+    <ClInclude Include="..\level_location_selector.h" />
+    <ClInclude Include="..\level_location_selector_inline.h" />
+    <ClInclude Include="..\Level_network_Demo.h" />
+    <ClInclude Include="..\Level_network_map_sync.h" />
+    <ClInclude Include="..\level_path_builder.h" />
+    <ClInclude Include="..\level_path_manager.h" />
+    <ClInclude Include="..\level_path_manager_inline.h" />
+    <ClInclude Include="..\level_sounds.h" />
+    <ClInclude Include="..\location_manager.h" />
+    <ClInclude Include="..\location_manager_inline.h" />
+    <ClInclude Include="..\login_manager.h" />
+    <ClInclude Include="..\magic_box3.h" />
+    <ClInclude Include="..\magic_box3_inline.h" />
+    <ClInclude Include="..\magic_minimize_1d.h" />
+    <ClInclude Include="..\magic_minimize_1d_inline.h" />
+    <ClInclude Include="..\magic_minimize_nd.h" />
+    <ClInclude Include="..\magic_minimize_nd_inline.h" />
+    <ClInclude Include="..\MainMenu.h" />
+    <ClInclude Include="..\manager_builder_allocator_constructor.h" />
+    <ClInclude Include="..\manager_builder_allocator_constructor_inline.h" />
+    <ClInclude Include="..\map_location.h" />
+    <ClInclude Include="..\map_location_defs.h" />
+    <ClInclude Include="..\map_manager.h" />
+    <ClInclude Include="..\map_spot.h" />
+    <ClInclude Include="..\material_manager.h" />
+    <ClInclude Include="..\material_manager_inline.h" />
+    <ClInclude Include="..\medkit.h" />
+    <ClInclude Include="..\member_corpse.h" />
+    <ClInclude Include="..\member_corpse_inline.h" />
+    <ClInclude Include="..\member_enemy.h" />
+    <ClInclude Include="..\member_enemy_inline.h" />
+    <ClInclude Include="..\member_order.h" />
+    <ClInclude Include="..\member_order_inline.h" />
+    <ClInclude Include="..\memory_manager.h" />
+    <ClInclude Include="..\memory_manager_inline.h" />
+    <ClInclude Include="..\memory_space.h" />
+    <ClInclude Include="..\memory_space_impl.h" />
+    <ClInclude Include="..\MercuryBall.h" />
+    <ClInclude Include="..\Message_Filter.h" />
+    <ClInclude Include="..\MilitaryOutfit.h" />
+    <ClInclude Include="..\Mincer.h" />
+    <ClInclude Include="..\Missile.h" />
+    <ClInclude Include="..\mixed_delegate.h" />
+    <ClInclude Include="..\mixed_delegate_unique_tags.h" />
+    <ClInclude Include="..\monster_community.h" />
+    <ClInclude Include="..\MosquitoBald.h" />
+    <ClInclude Include="..\movement_manager.h" />
+    <ClInclude Include="..\movement_manager_impl.h" />
+    <ClInclude Include="..\movement_manager_inline.h" />
+    <ClInclude Include="..\movement_manager_space.h" />
+    <ClInclude Include="..\moving_bones_snd_player.h" />
+    <ClInclude Include="..\moving_object.h" />
+    <ClInclude Include="..\moving_objects.h" />
+    <ClInclude Include="..\moving_objects_impl.h" />
+    <ClInclude Include="..\moving_objects_inline.h" />
+    <ClInclude Include="..\moving_object_inline.h" />
+    <ClInclude Include="..\MPPlayersBag.h" />
+    <ClInclude Include="..\mp_config_sections.h" />
+    <ClInclude Include="..\mt_config.h" />
+    <ClInclude Include="..\Needles.h" />
+    <ClInclude Include="..\NET_Queue.h" />
+    <ClInclude Include="..\NewZoomFlag.h" />
+    <ClInclude Include="..\new_sds.h" />
+    <ClInclude Include="..\NoGravityZone.h" />
+    <ClInclude Include="..\object_actions.h" />
+    <ClInclude Include="..\object_actions_inline.h" />
+    <ClInclude Include="..\object_handler.h" />
+    <ClInclude Include="..\object_handler_inline.h" />
+    <ClInclude Include="..\object_handler_planner.h" />
+    <ClInclude Include="..\object_handler_planner_impl.h" />
+    <ClInclude Include="..\object_handler_planner_inline.h" />
+    <ClInclude Include="..\object_handler_space.h" />
+    <ClInclude Include="..\object_manager.h" />
+    <ClInclude Include="..\object_manager_inline.h" />
+    <ClInclude Include="..\object_property_evaluators.h" />
+    <ClInclude Include="..\object_property_evaluators_inline.h" />
+    <ClInclude Include="..\obsolete_queue.h" />
+    <ClInclude Include="..\obsolete_queue_inline.h" />
+    <ClInclude Include="..\obstacles_query.h" />
+    <ClInclude Include="..\obstacles_query_inline.h" />
+    <ClInclude Include="..\operator_abstract.h" />
+    <ClInclude Include="..\operator_abstract_inline.h" />
+    <ClInclude Include="..\operator_condition.h" />
+    <ClInclude Include="..\operator_condition_inline.h" />
+    <ClInclude Include="..\ParticlesObject.h" />
+    <ClInclude Include="..\ParticlesPlayer.h" />
+    <ClInclude Include="..\particle_params.h" />
+    <ClInclude Include="..\particle_params_inline.h" />
+    <ClInclude Include="..\path_manager.h" />
+    <ClInclude Include="..\path_manager_game.h" />
+    <ClInclude Include="..\path_manager_game_inline.h" />
+    <ClInclude Include="..\path_manager_game_level.h" />
+    <ClInclude Include="..\path_manager_game_level_inline.h" />
+    <ClInclude Include="..\path_manager_game_vertex.h" />
+    <ClInclude Include="..\path_manager_game_vertex_inline.h" />
+    <ClInclude Include="..\path_manager_generic.h" />
+    <ClInclude Include="..\path_manager_generic_inline.h" />
+    <ClInclude Include="..\path_manager_level.h" />
+    <ClInclude Include="..\path_manager_level_flooder.h" />
+    <ClInclude Include="..\path_manager_level_flooder_inline.h" />
+    <ClInclude Include="..\path_manager_level_inline.h" />
+    <ClInclude Include="..\path_manager_level_nearest_vertex.h" />
+    <ClInclude Include="..\path_manager_level_nearest_vertex_inline.h" />
+    <ClInclude Include="..\path_manager_level_straight_line.h" />
+    <ClInclude Include="..\path_manager_level_straight_line_inline.h" />
+    <ClInclude Include="..\path_manager_params.h" />
+    <ClInclude Include="..\path_manager_params_flooder.h" />
+    <ClInclude Include="..\path_manager_params_game_level.h" />
+    <ClInclude Include="..\path_manager_params_game_vertex.h" />
+    <ClInclude Include="..\path_manager_params_nearest_vertex.h" />
+    <ClInclude Include="..\path_manager_params_straight_line.h" />
+    <ClInclude Include="..\path_manager_solver.h" />
+    <ClInclude Include="..\path_manager_solver_inline.h" />
+    <ClInclude Include="..\patrol_path.h" />
+    <ClInclude Include="..\patrol_path_inline.h" />
+    <ClInclude Include="..\patrol_path_manager.h" />
+    <ClInclude Include="..\patrol_path_manager_inline.h" />
+    <ClInclude Include="..\patrol_path_manager_space.h" />
+    <ClInclude Include="..\patrol_path_params.h" />
+    <ClInclude Include="..\patrol_path_params_inline.h" />
+    <ClInclude Include="..\patrol_path_storage.h" />
+    <ClInclude Include="..\patrol_path_storage_inline.h" />
+    <ClInclude Include="..\patrol_point.h" />
+    <ClInclude Include="..\patrol_point_inline.h" />
+    <ClInclude Include="..\PDA.h" />
+    <ClInclude Include="..\PdaMsg.h" />
+    <ClInclude Include="..\pda_space.h" />
+    <ClInclude Include="..\PHCollisionDamageReceiver.h" />
+    <ClInclude Include="..\PHCommander.h" />
+    <ClInclude Include="..\PHDebug.h" />
+    <ClInclude Include="..\PHDestroyable.h" />
+    <ClInclude Include="..\PHDestroyableNotificate.h" />
+    <ClInclude Include="..\PHMovementControl.h" />
+    <ClInclude Include="..\Phrase.h" />
+    <ClInclude Include="..\PhraseDialog.h" />
+    <ClInclude Include="..\PhraseDialogDefs.h" />
+    <ClInclude Include="..\PhraseDialogManager.h" />
+    <ClInclude Include="..\PhraseDialog_script.h" />
+    <ClInclude Include="..\PhraseScript.h" />
+    <ClInclude Include="..\PHReqComparer.h" />
+    <ClInclude Include="..\PHScriptCall.h" />
+    <ClInclude Include="..\PHShellCreator.h" />
+    <ClInclude Include="..\PHSimpleCalls.h" />
+    <ClInclude Include="..\PHSkeleton.h" />
+    <ClInclude Include="..\PHSoundPlayer.h" />
+    <ClInclude Include="..\PhysicObject.h" />
+    <ClInclude Include="..\PhysicsGamePars.h" />
+    <ClInclude Include="..\PhysicsShellHolder.h" />
+    <ClInclude Include="..\PhysicsSkeletonObject.h" />
+    <ClInclude Include="..\physics_element_scripted.h" />
+    <ClInclude Include="..\physics_game.h" />
+    <ClInclude Include="..\physics_joint_scripted.h" />
+    <ClInclude Include="..\physics_shell_animated.h" />
+    <ClInclude Include="..\physics_shell_scripted.h" />
+    <ClInclude Include="..\physics_world_scripted.h" />
+    <ClInclude Include="..\physic_item.h" />
+    <ClInclude Include="..\physic_item_inline.h" />
+    <ClInclude Include="..\ph_shell_interface.h" />
+    <ClInclude Include="..\player_account.h" />
+    <ClInclude Include="..\player_hud.h" />
+    <ClInclude Include="..\player_name_modifyer.h" />
+    <ClInclude Include="..\player_spot_params.h" />
+    <ClInclude Include="..\player_state_achilles_heel.h" />
+    <ClInclude Include="..\player_state_ambassador.h" />
+    <ClInclude Include="..\player_state_ammo_elapsed.h" />
+    <ClInclude Include="..\player_state_avenger.h" />
+    <ClInclude Include="..\player_state_blitzkrieg.h" />
+    <ClInclude Include="..\player_state_cherub.h" />
+    <ClInclude Include="..\player_state_climber.h" />
+    <ClInclude Include="..\player_state_mad.h" />
+    <ClInclude Include="..\player_state_marksman.h" />
+    <ClInclude Include="..\player_state_multichampion.h" />
+    <ClInclude Include="..\player_state_opener.h" />
+    <ClInclude Include="..\player_state_param.h" />
+    <ClInclude Include="..\player_state_params.h" />
+    <ClInclude Include="..\player_state_remembrance.h" />
+    <ClInclude Include="..\player_state_skewer.h" />
+    <ClInclude Include="..\player_state_toughy.h" />
+    <ClInclude Include="..\player_team_win_score.h" />
+    <ClInclude Include="..\poses_blending.h" />
+    <ClInclude Include="..\pose_extrapolation.h" />
+    <ClInclude Include="..\PostprocessAnimator.h" />
+    <ClInclude Include="..\pp_effector_custom.h" />
+    <ClInclude Include="..\pp_effector_distance.h" />
+    <ClInclude Include="..\problem_solver.h" />
+    <ClInclude Include="..\problem_solver_inline.h" />
+    <ClInclude Include="..\profiler.h" />
+    <ClInclude Include="..\profiler_inline.h" />
+    <ClInclude Include="..\profile_data_types.h" />
+    <ClInclude Include="..\profile_store.h" />
+    <ClInclude Include="..\property_evaluator.h" />
+    <ClInclude Include="..\property_evaluator_const.h" />
+    <ClInclude Include="..\property_evaluator_const_inline.h" />
+    <ClInclude Include="..\property_evaluator_inline.h" />
+    <ClInclude Include="..\property_evaluator_member.h" />
+    <ClInclude Include="..\property_evaluator_member_inline.h" />
+    <ClInclude Include="..\property_storage.h" />
+    <ClInclude Include="..\property_storage_inline.h" />
+    <ClInclude Include="..\purchase_list.h" />
+    <ClInclude Include="..\purchase_list_inline.h" />
+    <ClInclude Include="..\quadtree.h" />
+    <ClInclude Include="..\quadtree_inline.h" />
+    <ClInclude Include="..\queued_async_method.h" />
+    <ClInclude Include="..\RadioactiveZone.h" />
+    <ClInclude Include="..\random32.h" />
+    <ClInclude Include="..\rat_states.h" />
+    <ClInclude Include="..\rat_state_base.h" />
+    <ClInclude Include="..\rat_state_base_inline.h" />
+    <ClInclude Include="..\rat_state_manager.h" />
+    <ClInclude Include="..\rat_state_manager_inline.h" />
+    <ClInclude Include="..\raypick.h" />
+    <ClInclude Include="..\refreshable_obstacles_query.h" />
+    <ClInclude Include="..\refreshable_obstacles_query_inline.h" />
+    <ClInclude Include="..\RegistryFuncs.h" />
+    <ClInclude Include="..\relation_registry.h" />
+    <ClInclude Include="..\relation_registry_defs.h" />
+    <ClInclude Include="..\relation_registry_inline.h" />
+    <ClInclude Include="..\restricted_object.h" />
+    <ClInclude Include="..\restricted_object_inline.h" />
+    <ClInclude Include="..\restricted_object_obstacle.h" />
+    <ClInclude Include="..\rewarding_events_handlers.h" />
+    <ClInclude Include="..\rewarding_state_events.h" />
+    <ClInclude Include="..\reward_event_generator.h" />
+    <ClInclude Include="..\reward_event_handler.h" />
+    <ClInclude Include="..\reward_manager.h" />
+    <ClInclude Include="..\reward_snd_messages.h" />
+    <ClInclude Include="..\RGD5.h" />
+    <ClInclude Include="..\RocketLauncher.h" />
+    <ClInclude Include="..\RustyHairArtifact.h" />
+    <ClInclude Include="..\safe_map_iterator.h" />
+    <ClInclude Include="..\safe_map_iterator_inline.h" />
+    <ClInclude Include="..\saved_game_wrapper.h" />
+    <ClInclude Include="..\saved_game_wrapper_inline.h" />
+    <ClInclude Include="..\ScientificOutfit.h" />
+    <ClInclude Include="..\Scope.h" />
+    <ClInclude Include="..\screenshots_common.h" />
+    <ClInclude Include="..\screenshots_writer.h" />
+    <ClInclude Include="..\screenshot_manager.h" />
+    <ClInclude Include="..\screenshot_server.h" />
+    <ClInclude Include="..\script_light_inline.h" />
+    <ClInclude Include="..\ScriptXMLInit.h" />
+    <ClInclude Include="..\script_abstract_action.h" />
+    <ClInclude Include="..\script_abstract_action_inline.h" />
+    <ClInclude Include="..\script_action_condition.h" />
+    <ClInclude Include="..\script_action_condition_inline.h" />
+    <ClInclude Include="..\script_action_planner_action_wrapper.h" />
+    <ClInclude Include="..\script_action_planner_action_wrapper_inline.h" />
+    <ClInclude Include="..\script_action_planner_wrapper.h" />
+    <ClInclude Include="..\script_action_planner_wrapper_inline.h" />
+    <ClInclude Include="..\script_action_wrapper.h" />
+    <ClInclude Include="..\script_action_wrapper_inline.h" />
+    <ClInclude Include="..\script_animation_action.h" />
+    <ClInclude Include="..\script_animation_action_inline.h" />
+    <ClInclude Include="..\script_binder.h" />
+    <ClInclude Include="..\script_binder_inline.h" />
+    <ClInclude Include="..\script_binder_object.h" />
+    <ClInclude Include="..\script_binder_object_wrapper.h" />
+    <ClInclude Include="..\script_bind_macroses.h" />
+    <ClInclude Include="..\script_callback_ex.h" />
+    <ClInclude Include="..\script_callback_ex_generators.h" />
+    <ClInclude Include="..\script_callback_ex_inline.h" />
+    <ClInclude Include="..\script_callback_ex_nonvoid.h" />
+    <ClInclude Include="..\script_callback_ex_void.h" />
+    <ClInclude Include="..\script_effector.h" />
+    <ClInclude Include="..\script_effector_inline.h" />
+    <ClInclude Include="..\script_effector_wrapper.h" />
+    <ClInclude Include="..\script_effector_wrapper_inline.h" />
+    <ClInclude Include="..\script_entity.h" />
+    <ClInclude Include="..\script_entity_action.h" />
+    <ClInclude Include="..\script_entity_action_inline.h" />
+    <ClInclude Include="..\script_entity_inline.h" />
+    <ClInclude Include="..\script_entity_space.h" />
+    <ClInclude Include="..\script_game_object.h" />
+    <ClInclude Include="..\script_game_object_impl.h" />
+    <ClInclude Include="..\script_hit.h" />
+    <ClInclude Include="..\script_hit_inline.h" />
+    <ClInclude Include="..\script_lanim.h" />
+    <ClInclude Include="..\script_light.h" />
+    <ClInclude Include="..\script_monster_action.h" />
+    <ClInclude Include="..\script_monster_action_inline.h" />
+    <ClInclude Include="..\script_monster_hit_info.h" />
+    <ClInclude Include="..\script_movement_action.h" />
+    <ClInclude Include="..\script_movement_action_inline.h" />
+    <ClInclude Include="..\script_object.h" />
+    <ClInclude Include="..\script_object_action.h" />
+    <ClInclude Include="..\script_object_action_inline.h" />
+    <ClInclude Include="..\script_particles.h" />
+    <ClInclude Include="..\script_particles_inline.h" />
+    <ClInclude Include="..\script_particle_action.h" />
+    <ClInclude Include="..\script_particle_action_inline.h" />
+    <ClInclude Include="..\script_property_evaluator_wrapper.h" />
+    <ClInclude Include="..\script_property_evaluator_wrapper_inline.h" />
+    <ClInclude Include="..\script_render_device.h" />
+    <ClInclude Include="..\script_sound.h" />
+    <ClInclude Include="..\script_sound_action.h" />
+    <ClInclude Include="..\script_sound_action_inline.h" />
+    <ClInclude Include="..\script_sound_info.h" />
+    <ClInclude Include="..\script_sound_inline.h" />
+    <ClInclude Include="..\script_ui_registrator.h" />
+    <ClInclude Include="..\script_wallmarks_manager.h" />
+    <ClInclude Include="..\script_watch_action.h" />
+    <ClInclude Include="..\script_watch_action_inline.h" />
+    <ClInclude Include="..\script_world_property.h" />
+    <ClInclude Include="..\script_world_property_inline.h" />
+    <ClInclude Include="..\script_world_state.h" />
+    <ClInclude Include="..\script_zone.h" />
+    <ClInclude Include="..\searchlight.h" />
+    <ClInclude Include="..\secure_messaging.h" />
+    <ClInclude Include="..\seniority_hierarchy_holder.h" />
+    <ClInclude Include="..\seniority_hierarchy_holder_inline.h" />
+    <ClInclude Include="..\seniority_hierarchy_space.h" />
+    <ClInclude Include="..\server_entity_wrapper.h" />
+    <ClInclude Include="..\server_entity_wrapper_inline.h" />
+    <ClInclude Include="..\setup_manager.h" />
+    <ClInclude Include="..\setup_manager_inline.h" />
+    <ClInclude Include="..\ShootingObject.h" />
+    <ClInclude Include="..\sight_action.h" />
+    <ClInclude Include="..\sight_action_inline.h" />
+    <ClInclude Include="..\sight_control_action.h" />
+    <ClInclude Include="..\sight_control_action_inline.h" />
+    <ClInclude Include="..\sight_manager.h" />
+    <ClInclude Include="..\sight_manager_inline.h" />
+    <ClInclude Include="..\sight_manager_space.h" />
+    <ClInclude Include="..\Silencer.h" />
+    <ClInclude Include="..\silent_shots.h" />
+    <ClInclude Include="..\SimpleDetector.h" />
+    <ClInclude Include="..\smart_cover.h" />
+    <ClInclude Include="..\smart_cover_action.h" />
+    <ClInclude Include="..\smart_cover_action_inline.h" />
+    <ClInclude Include="..\smart_cover_animation_planner.h" />
+    <ClInclude Include="..\smart_cover_animation_planner_inline.h" />
+    <ClInclude Include="..\smart_cover_animation_selector.h" />
+    <ClInclude Include="..\smart_cover_animation_selector_inline.h" />
+    <ClInclude Include="..\smart_cover_default_behaviour_planner.hpp" />
+    <ClInclude Include="..\smart_cover_default_behaviour_planner_inline.hpp" />
+    <ClInclude Include="..\smart_cover_description.h" />
+    <ClInclude Include="..\smart_cover_description_inline.h" />
+    <ClInclude Include="..\smart_cover_detail.h" />
+    <ClInclude Include="..\smart_cover_evaluators.h" />
+    <ClInclude Include="..\smart_cover_inline.h" />
+    <ClInclude Include="..\smart_cover_loophole.h" />
+    <ClInclude Include="..\smart_cover_loophole_inline.h" />
+    <ClInclude Include="..\smart_cover_loophole_planner_actions.h" />
+    <ClInclude Include="..\smart_cover_loophole_planner_actions_inline.h" />
+    <ClInclude Include="..\smart_cover_object.h" />
+    <ClInclude Include="..\smart_cover_object_inline.h" />
+    <ClInclude Include="..\smart_cover_planner_actions.h" />
+    <ClInclude Include="..\smart_cover_planner_actions_inline.h" />
+    <ClInclude Include="..\smart_cover_planner_target_provider.h" />
+    <ClInclude Include="..\smart_cover_planner_target_selector.h" />
+    <ClInclude Include="..\smart_cover_planner_target_selector_inline.h" />
+    <ClInclude Include="..\smart_cover_storage.h" />
+    <ClInclude Include="..\smart_cover_transition.hpp" />
+    <ClInclude Include="..\smart_cover_transition_animation.hpp" />
+    <ClInclude Include="..\smart_cover_transition_animation_inline.hpp" />
+    <ClInclude Include="..\smart_zone.h" />
+    <ClInclude Include="..\sound_collection_storage.h" />
+    <ClInclude Include="..\sound_collection_storage_inline.h" />
+    <ClInclude Include="..\sound_memory_manager.h" />
+    <ClInclude Include="..\sound_memory_manager_inline.h" />
+    <ClInclude Include="..\sound_player.h" />
+    <ClInclude Include="..\sound_player_inline.h" />
+    <ClInclude Include="..\sound_user_data_visitor.h" />
+    <ClInclude Include="..\space_restriction.h" />
+    <ClInclude Include="..\space_restriction_abstract.h" />
+    <ClInclude Include="..\space_restriction_abstract_inline.h" />
+    <ClInclude Include="..\space_restriction_base.h" />
+    <ClInclude Include="..\space_restriction_base_inline.h" />
+    <ClInclude Include="..\space_restriction_bridge.h" />
+    <ClInclude Include="..\space_restriction_bridge_inline.h" />
+    <ClInclude Include="..\space_restriction_composition.h" />
+    <ClInclude Include="..\space_restriction_composition_inline.h" />
+    <ClInclude Include="..\space_restriction_holder.h" />
+    <ClInclude Include="..\space_restriction_holder_inline.h" />
+    <ClInclude Include="..\space_restriction_inline.h" />
+    <ClInclude Include="..\space_restriction_manager.h" />
+    <ClInclude Include="..\space_restriction_manager_inline.h" />
+    <ClInclude Include="..\space_restriction_shape.h" />
+    <ClInclude Include="..\space_restriction_shape_inline.h" />
+    <ClInclude Include="..\space_restrictor.h" />
+    <ClInclude Include="..\space_restrictor_inline.h" />
+    <ClInclude Include="..\Spectator.h" />
+    <ClInclude Include="..\spectator_camera_first_eye.h" />
+    <ClInclude Include="..\sprinter_stopper.h" />
+    <ClInclude Include="..\squad_hierarchy_holder.h" />
+    <ClInclude Include="..\squad_hierarchy_holder_inline.h" />
+    <ClInclude Include="..\StalkerOutfit.h" />
+    <ClInclude Include="..\stalker_alife_actions.h" />
+    <ClInclude Include="..\stalker_alife_planner.h" />
+    <ClInclude Include="..\stalker_alife_task_actions.h" />
+    <ClInclude Include="..\stalker_animation_data.h" />
+    <ClInclude Include="..\stalker_animation_data_storage.h" />
+    <ClInclude Include="..\stalker_animation_data_storage_inline.h" />
+    <ClInclude Include="..\stalker_animation_manager.h" />
+    <ClInclude Include="..\stalker_animation_manager_impl.h" />
+    <ClInclude Include="..\stalker_animation_manager_inline.h" />
+    <ClInclude Include="..\stalker_animation_names.h" />
+    <ClInclude Include="..\stalker_animation_pair.h" />
+    <ClInclude Include="..\stalker_animation_pair_inline.h" />
+    <ClInclude Include="..\stalker_animation_script.h" />
+    <ClInclude Include="..\stalker_animation_script_inline.h" />
+    <ClInclude Include="..\stalker_animation_state.h" />
+    <ClInclude Include="..\stalker_animation_state_inline.h" />
+    <ClInclude Include="..\stalker_anomaly_actions.h" />
+    <ClInclude Include="..\stalker_anomaly_planner.h" />
+    <ClInclude Include="..\stalker_base_action.h" />
+    <ClInclude Include="..\stalker_combat_actions.h" />
+    <ClInclude Include="..\stalker_combat_action_base.h" />
+    <ClInclude Include="..\stalker_combat_planner.h" />
+    <ClInclude Include="..\stalker_danger_by_sound_actions.h" />
+    <ClInclude Include="..\stalker_danger_by_sound_planner.h" />
+    <ClInclude Include="..\stalker_danger_grenade_actions.h" />
+    <ClInclude Include="..\stalker_danger_grenade_planner.h" />
+    <ClInclude Include="..\stalker_danger_in_direction_actions.h" />
+    <ClInclude Include="..\stalker_danger_in_direction_planner.h" />
+    <ClInclude Include="..\stalker_danger_planner.h" />
+    <ClInclude Include="..\stalker_danger_planner_inline.h" />
+    <ClInclude Include="..\stalker_danger_property_evaluators.h" />
+    <ClInclude Include="..\stalker_danger_unknown_actions.h" />
+    <ClInclude Include="..\stalker_danger_unknown_planner.h" />
+    <ClInclude Include="..\stalker_death_actions.h" />
+    <ClInclude Include="..\stalker_death_planner.h" />
+    <ClInclude Include="..\stalker_decision_space.h" />
+    <ClInclude Include="..\stalker_flair.h" />
+    <ClInclude Include="..\stalker_get_distance_actions.h" />
+    <ClInclude Include="..\stalker_get_distance_planner.h" />
+    <ClInclude Include="..\stalker_kill_wounded_actions.h" />
+    <ClInclude Include="..\stalker_kill_wounded_planner.h" />
+    <ClInclude Include="..\stalker_low_cover_actions.h" />
+    <ClInclude Include="..\stalker_low_cover_planner.h" />
+    <ClInclude Include="..\stalker_movement_manager_base.h" />
+    <ClInclude Include="..\stalker_movement_manager_base_inline.h" />
+    <ClInclude Include="..\stalker_movement_manager_obstacles.h" />
+    <ClInclude Include="..\stalker_movement_manager_obstacles_inline.h" />
+    <ClInclude Include="..\stalker_movement_manager_smart_cover.h" />
+    <ClInclude Include="..\stalker_movement_manager_smart_cover_inline.h" />
+    <ClInclude Include="..\stalker_movement_manager_space.h" />
+    <ClInclude Include="..\stalker_movement_params.h" />
+    <ClInclude Include="..\stalker_movement_params_inline.h" />
+    <ClInclude Include="..\stalker_movement_restriction.h" />
+    <ClInclude Include="..\stalker_movement_restriction_inline.h" />
+    <ClInclude Include="..\stalker_planner.h" />
+    <ClInclude Include="..\stalker_planner_inline.h" />
+    <ClInclude Include="..\stalker_property_evaluators.h" />
+    <ClInclude Include="..\stalker_property_evaluators_inline.h" />
+    <ClInclude Include="..\stalker_search_actions.h" />
+    <ClInclude Include="..\stalker_search_planner.h" />
+    <ClInclude Include="..\stalker_sound_data.h" />
+    <ClInclude Include="..\stalker_sound_data_inline.h" />
+    <ClInclude Include="..\stalker_sound_data_visitor.h" />
+    <ClInclude Include="..\stalker_sound_data_visitor_inline.h" />
+    <ClInclude Include="..\stalker_velocity_collection.h" />
+    <ClInclude Include="..\stalker_velocity_collection_inline.h" />
+    <ClInclude Include="..\stalker_velocity_holder.h" />
+    <ClInclude Include="..\stalker_velocity_holder_inline.h" />
+    <ClInclude Include="..\state_arguments_functions.h" />
+    <ClInclude Include="..\static_cast_checked.hpp" />
+    <ClInclude Include="..\static_obstacles_avoider.h" />
+    <ClInclude Include="..\static_obstacles_avoider_inline.h" />
+    <ClInclude Include="..\stats_submitter.h" />
+    <ClInclude Include="..\StdAfx.h" />
+    <ClInclude Include="..\steering_behaviour.h" />
+    <ClInclude Include="..\steering_behaviour_alignment.h" />
+    <ClInclude Include="..\steering_behaviour_base.h" />
+    <ClInclude Include="..\steering_behaviour_base_inline.h" />
+    <ClInclude Include="..\steering_behaviour_cohesion.h" />
+    <ClInclude Include="..\steering_behaviour_manager.h" />
+    <ClInclude Include="..\steering_behaviour_separation.h" />
+    <ClInclude Include="..\step_manager.h" />
+    <ClInclude Include="..\step_manager_defs.h" />
+    <ClInclude Include="..\string_table.h" />
+    <ClInclude Include="..\string_table_defs.h" />
+    <ClInclude Include="..\team_base_zone.h" />
+    <ClInclude Include="..\team_hierarchy_holder.h" />
+    <ClInclude Include="..\team_hierarchy_holder_inline.h" />
+    <ClInclude Include="..\TeleWhirlwind.h" />
+    <ClInclude Include="..\ThornArtifact.h" />
+    <ClInclude Include="..\Torch.h" />
+    <ClInclude Include="..\TorridZone.h" />
+    <ClInclude Include="..\Tracer.h" />
+    <ClInclude Include="..\trade.h" />
+    <ClInclude Include="..\trade_action_parameters.h" />
+    <ClInclude Include="..\trade_action_parameters_inline.h" />
+    <ClInclude Include="..\trade_bool_parameters.h" />
+    <ClInclude Include="..\trade_bool_parameters_inline.h" />
+    <ClInclude Include="..\trade_factors.h" />
+    <ClInclude Include="..\trade_factors_inline.h" />
+    <ClInclude Include="..\trade_factor_parameters.h" />
+    <ClInclude Include="..\trade_factor_parameters_inline.h" />
+    <ClInclude Include="..\trade_parameters.h" />
+    <ClInclude Include="..\trade_parameters_inline.h" />
+    <ClInclude Include="..\traffic_optimization.h" />
+    <ClInclude Include="..\trajectories.h" />
+    <ClInclude Include="..\UIAchivementsIndicator.h" />
+    <ClInclude Include="..\UICursor.h" />
+    <ClInclude Include="..\UIDialogHolder.h" />
+    <ClInclude Include="..\UIDosimeter.h" />
+    <ClInclude Include="..\UIGameAHunt.h" />
+    <ClInclude Include="..\UIGameCTA.h" />
+    <ClInclude Include="..\UIGameCustom.h" />
+    <ClInclude Include="..\UIGameDM.h" />
+    <ClInclude Include="..\UIGameMP.h" />
+    <ClInclude Include="..\UIGameSP.h" />
+    <ClInclude Include="..\UIGameTDM.h" />
+    <ClInclude Include="..\UIPanelsClassFactory.h" />
+    <ClInclude Include="..\UIPlayerItem.h" />
+    <ClInclude Include="..\UIStaticItem.h" />
+    <ClInclude Include="..\UITeamHeader.h" />
+    <ClInclude Include="..\UITeamPanels.h" />
+    <ClInclude Include="..\UITeamState.h" />
+    <ClInclude Include="..\UIZoneMap.h" />
+    <ClInclude Include="..\ui\ArtefactDetectorUI.h" />
+    <ClInclude Include="..\ui\KillMessageStruct.h" />
+    <ClInclude Include="..\ui\map_hint.h" />
+    <ClInclude Include="..\ui\MMSound.h" />
+    <ClInclude Include="..\ui\Restrictions.h" />
+    <ClInclude Include="..\ui\ServerList.h" />
+    <ClInclude Include="..\ui\TeamInfo.h" />
+    <ClInclude Include="..\ui\UI3tButton.h" />
+    <ClInclude Include="..\ui\uiabstract.h" />
+    <ClInclude Include="..\ui\UIAchievements.h" />
+    <ClInclude Include="..\ui\UIRankingsCoC.h" />
+    <ClInclude Include="..\ui\UIActorMenu.h" />
+    <ClInclude Include="..\ui\UIActorStateInfo.h" />
+    <ClInclude Include="..\ui\UIAnimatedStatic.h" />
+    <ClInclude Include="..\ui\UIBoosterInfo.h" />
+    <ClInclude Include="..\ui\UIBtnHint.h" />
+    <ClInclude Include="..\ui\UIButton.h" />
+    <ClInclude Include="..\ui\UIBuyWeaponTab.h" />
+    <ClInclude Include="..\ui\UIBuyWndBase.h" />
+    <ClInclude Include="..\ui\UIBuyWndShared.h" />
+    <ClInclude Include="..\ui\UICarPanel.h" />
+    <ClInclude Include="..\ui\UICDkey.h" />
+    <ClInclude Include="..\ui\UICellCustomItems.h" />
+    <ClInclude Include="..\ui\UICellItem.h" />
+    <ClInclude Include="..\ui\UICellItemFactory.h" />
+    <ClInclude Include="..\ui\UIChangeMap.h" />
+    <ClInclude Include="..\ui\ChangeWeatherDialog.hpp" />
+    <ClInclude Include="..\ui\UICharacterInfo.h" />
+    <ClInclude Include="..\ui\UIChatWnd.h" />
+    <ClInclude Include="..\ui\UICheckButton.h" />
+    <ClInclude Include="..\ui\UIComboBox.h" />
+    <ClInclude Include="..\ui\UICustomEdit.h" />
+    <ClInclude Include="..\ui\UICustomSpin.h" />
+    <ClInclude Include="..\ui\UIDebugFonts.h" />
+    <ClInclude Include="..\ui\UIDemoPlayControl.h" />
+    <ClInclude Include="..\ui\UIDialogWnd.h" />
+    <ClInclude Include="..\ui\UIDoubleProgressBar.h" />
+    <ClInclude Include="..\ui\UIDragDropListEx.h" />
+    <ClInclude Include="..\ui\UIDragDropReferenceList.h" />
+    <ClInclude Include="..\ui\UIEditBox.h" />
+    <ClInclude Include="..\ui\UIEditBoxEx.h" />
+    <ClInclude Include="..\ui\UIEditKeyBind.h" />
+    <ClInclude Include="..\ui\UIFixedScrollBar.h" />
+    <ClInclude Include="..\ui\UIFrameLineWnd.h" />
+    <ClInclude Include="..\ui\UIFrameWindow.h" />
+    <ClInclude Include="..\ui\UIGameLog.h" />
+    <ClInclude Include="..\ui\UIGameTutorial.h" />
+    <ClInclude Include="..\ui\UIHelper.h" />
+    <ClInclude Include="..\ui\UIHint.h" />
+    <ClInclude Include="..\ui\UIHudStatesWnd.h" />
+    <ClInclude Include="..\ui\UIInteractiveBackground.h" />
+    <ClInclude Include="..\ui\UIInventoryUpgradeWnd.h" />
+    <ClInclude Include="..\ui\UIInventoryUtilities.h" />
+    <ClInclude Include="..\ui\UIInvUpgrade.h" />
+    <ClInclude Include="..\ui\UIInvUpgradeInfo.h" />
+    <ClInclude Include="..\ui\UIInvUpgradeProperty.h" />
+    <ClInclude Include="..\ui\UIItemInfo.h" />
+    <ClInclude Include="..\ui\UIKeyBinding.h" />
+    <ClInclude Include="..\ui\UIKickPlayer.h" />
+    <ClInclude Include="..\ui\UILanimController.h" />
+    <ClInclude Include="..\ui\UILine.h" />
+    <ClInclude Include="..\ui\UILines.h" />
+    <ClInclude Include="..\ui\uilinestd.h" />
+    <ClInclude Include="..\ui\UIListBox.h" />
+    <ClInclude Include="..\ui\UIListBoxItem.h" />
+    <ClInclude Include="..\ui\UIListBoxItemMsgChain.h" />
+    <ClInclude Include="..\ui\UIListItemServer.h" />
+    <ClInclude Include="..\ui\UILogsWnd.h" />
+    <ClInclude Include="..\ui\UIMainIngameWnd.h" />
+    <ClInclude Include="..\ui\UIMap.h" />
+    <ClInclude Include="..\ui\UIMapDesc.h" />
+    <ClInclude Include="..\ui\UIMapInfo.h" />
+    <ClInclude Include="..\ui\UIMapLegend.h" />
+    <ClInclude Include="..\ui\UIMapList.h" />
+    <ClInclude Include="..\ui\UIMapWnd.h" />
+    <ClInclude Include="..\ui\UIMapWndActions.h" />
+    <ClInclude Include="..\ui\UIMapWndActionsSpace.h" />
+    <ClInclude Include="..\ui\UIMessageBox.h" />
+    <ClInclude Include="..\ui\UIMessageBoxEx.h" />
+    <ClInclude Include="..\ui\UIMessages.h" />
+    <ClInclude Include="..\ui\UIMessagesWindow.h" />
+    <ClInclude Include="..\ui\UIMMShniaga.h" />
+    <ClInclude Include="..\ui\UIMoneyIndicator.h" />
+    <ClInclude Include="..\ui\UIMotionIcon.h" />
+    <ClInclude Include="..\ui\UIMPAdminMenu.h" />
+    <ClInclude Include="..\ui\UIMPChangeMapAdm.h" />
+    <ClInclude Include="..\ui\UIMpItemsStoreWnd.h" />
+    <ClInclude Include="..\ui\UIMPPlayersAdm.h" />
+    <ClInclude Include="..\ui\UIMPServerAdm.h" />
+    <ClInclude Include="..\ui\UIMpTradeWnd.h" />
+    <ClInclude Include="..\ui\UINewsItemWnd.h" />
+    <ClInclude Include="..\ui\UIOptConCom.h" />
+    <ClInclude Include="..\ui\UIOptionsItem.h" />
+    <ClInclude Include="..\ui\UIOptionsManager.h" />
+    <ClInclude Include="..\ui\UIOptionsManagerScript.h" />
+    <ClInclude Include="..\ui\UIOutfitInfo.h" />
+    <ClInclude Include="..\ui\UIPdaKillMessage.h" />
+    <ClInclude Include="..\ui\UIPdaMsgListItem.h" />
+    <ClInclude Include="..\ui\UIPdaWnd.h" />
+    <ClInclude Include="..\ui\UIProgressBar.h" />
+    <ClInclude Include="..\ui\UIProgressShape.h" />
+    <ClInclude Include="..\ui\UIPropertiesBox.h" />
+    <ClInclude Include="..\ui\UIRadioButton.h" />
+    <ClInclude Include="..\ui\UIRankIndicator.h" />
+    <ClInclude Include="..\ui\UIRankingWnd.h" />
+    <ClInclude Include="..\ui\UIScriptWnd.h" />
+    <ClInclude Include="..\ui\uiscriptwnd_script.h" />
+    <ClInclude Include="..\ui\UIScrollBar.h" />
+    <ClInclude Include="..\ui\UIScrollBox.h" />
+    <ClInclude Include="..\ui\UIScrollView.h" />
+    <ClInclude Include="..\ui\UISecondTaskWnd.h" />
+    <ClInclude Include="..\ui\UIServerInfo.h" />
+    <ClInclude Include="..\ui\UISkinSelector.h" />
+    <ClInclude Include="..\ui\UISpawnWnd.h" />
+    <ClInclude Include="..\ui\UISpeechMenu.h" />
+    <ClInclude Include="..\ui\UISpinNum.h" />
+    <ClInclude Include="..\ui\UISpinText.h" />
+    <ClInclude Include="..\ui\UIStatic.h" />
+    <ClInclude Include="..\ui\UIStatix.h" />
+    <ClInclude Include="..\ui\UIStats.h" />
+    <ClInclude Include="..\ui\UIStatsIcon.h" />
+    <ClInclude Include="..\ui\UIStatsPlayerInfo.h" />
+    <ClInclude Include="..\ui\UIStatsPlayerList.h" />
+    <ClInclude Include="..\ui\UISubLine.h" />
+    <ClInclude Include="..\ui\UITabButton.h" />
+    <ClInclude Include="..\ui\UITabButtonMP.h" />
+    <ClInclude Include="..\ui\UITabControl.h" />
+    <ClInclude Include="..\ui\UITalkDialogWnd.h" />
+    <ClInclude Include="..\ui\UITalkWnd.h" />
+    <ClInclude Include="..\ui\UITaskWnd.h" />
+    <ClInclude Include="..\ui\UITextureMaster.h" />
+    <ClInclude Include="..\ui\UITextVote.h" />
+    <ClInclude Include="..\ui\UITrackBar.h" />
+    <ClInclude Include="..\ui\UITrackButton.h" />
+    <ClInclude Include="..\ui\UIVote.h" />
+    <ClInclude Include="..\ui\UIVoteStatusWnd.h" />
+    <ClInclude Include="..\ui\UIVotingCategory.h" />
+    <ClInclude Include="..\ui\UIWindow.h" />
+    <ClInclude Include="..\ui\UIWndCallback.h" />
+    <ClInclude Include="..\ui\UIWpnParams.h" />
+    <ClInclude Include="..\ui\UIXmlInit.h" />
+    <ClInclude Include="..\ui\ui_af_params.h" />
+    <ClInclude Include="..\ui\ui_arrow.h" />
+    <ClInclude Include="..\ui\UI_IB_Static.h" />
+    <ClInclude Include="..\ui\xrUIXmlParser.h" />
+    <ClInclude Include="..\ui_base.h" />
+    <ClInclude Include="..\ui_defs.h" />
+    <ClInclude Include="..\UsableScriptObject.h" />
+    <ClInclude Include="..\vertex_allocator_fixed.h" />
+    <ClInclude Include="..\vertex_allocator_fixed_inline.h" />
+    <ClInclude Include="..\vertex_manager_fixed.h" />
+    <ClInclude Include="..\vertex_manager_fixed_inline.h" />
+    <ClInclude Include="..\vertex_manager_hash_fixed.h" />
+    <ClInclude Include="..\vertex_manager_hash_fixed_inline.h" />
+    <ClInclude Include="..\vertex_path.h" />
+    <ClInclude Include="..\vertex_path_inline.h" />
+    <ClInclude Include="..\vision_client.h" />
+    <ClInclude Include="..\vision_client_inline.h" />
+    <ClInclude Include="..\visual_memory_manager.h" />
+    <ClInclude Include="..\visual_memory_manager_inline.h" />
+    <ClInclude Include="..\visual_memory_params.h" />
+    <ClInclude Include="..\wallmark_manager.h" />
+    <ClInclude Include="..\Weapon.h" />
+    <ClInclude Include="..\WeaponAK74.h" />
+    <ClInclude Include="..\WeaponAmmo.h" />
+    <ClInclude Include="..\WeaponAutomaticShotgun.h" />
+    <ClInclude Include="..\WeaponBinoculars.h" />
+    <ClInclude Include="..\WeaponBinocularsVision.h" />
+    <ClInclude Include="..\weaponBM16.h" />
+    <ClInclude Include="..\WeaponCustomAuto.h" />
+    <ClInclude Include="..\WeaponCustomPistol.h" />
+    <ClInclude Include="..\WeaponFN2000.h" />
+    <ClInclude Include="..\WeaponFORT.h" />
+    <ClInclude Include="..\WeaponGroza.h" />
+    <ClInclude Include="..\WeaponHPSA.h" />
+    <ClInclude Include="..\WeaponKnife.h" />
+    <ClInclude Include="..\WeaponLR300.h" />
+    <ClInclude Include="..\WeaponMagazined.h" />
+    <ClInclude Include="..\WeaponMagazinedWGrenade.h" />
+    <ClInclude Include="..\WeaponPistol.h" />
+    <ClInclude Include="..\WeaponPM.h" />
+    <ClInclude Include="..\WeaponRevolver.h" />
+    <ClInclude Include="..\WeaponRG6.h" />
+    <ClInclude Include="..\WeaponRPG7.h" />
+    <ClInclude Include="..\WeaponShotgun.h" />
+    <ClInclude Include="..\WeaponStatMgun.h" />
+    <ClInclude Include="..\HolderEntityObject.h" />
+    <ClInclude Include="..\WeaponSVD.h" />
+    <ClInclude Include="..\WeaponSVU.h" />
+    <ClInclude Include="..\WeaponUSP45.h" />
+    <ClInclude Include="..\WeaponVal.h" />
+    <ClInclude Include="..\WeaponVintorez.h" />
+    <ClInclude Include="..\WeaponWalther.h" />
+    <ClInclude Include="..\Wound.h" />
+    <ClInclude Include="..\wrapper_abstract.h" />
+    <ClInclude Include="..\wrapper_abstract_inline.h" />
+    <ClInclude Include="..\xrClientsPool.h" />
+    <ClInclude Include="..\xrGameSpyServer.h" />
+    <ClInclude Include="..\xrGameSpyServer_callbacks.h" />
+    <ClInclude Include="..\xrServer.h" />
+    <ClInclude Include="..\xrServerMapSync.h" />
+    <ClInclude Include="..\xrServer_info.h" />
+    <ClInclude Include="..\xrServer_svclient_validation.h" />
+    <ClInclude Include="..\xrServer_updates_compressor.h" />
+    <ClInclude Include="..\xr_dsa_signer.h" />
+    <ClInclude Include="..\xr_dsa_verifyer.h" />
+    <ClInclude Include="..\xr_level_controller.h" />
+    <ClInclude Include="..\xr_time.h" />
+    <ClInclude Include="..\ZoneCampfire.h" />
+    <ClInclude Include="..\ZoneVisual.h" />
+    <ClInclude Include="..\zone_effector.h" />
+    <ClInclude Include="..\ZudaArtifact.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\xrServerEntities\alife_human_brain.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\alife_monster_brain.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\alife_space.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\character_info.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\gametype_chooser.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\LevelGameDef.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\lua_studio.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\object_factory.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\object_factory_register.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\object_factory_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\object_item_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\pch_script.cpp">
+      <PrecompiledHeader>Create</PrecompiledHeader>
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\PHNetState.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_callStack.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_debugger.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_debugger_threads.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_engine.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_engine_export.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_engine_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_fcolor_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_flags_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_fmatrix_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_fvector_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_ini_file.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_ini_file_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_lua_helper.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_net_packet_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_process.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_reader_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_rtoken_list_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_sound_type_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_stack_tracker.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_storage.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_thread.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\script_token_list.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_token_list_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\smart_cast.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\smart_cast_stats.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\specific_character.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Factory.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_Abstract.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Items.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Items_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Items_script2.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Items_script3.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Monsters.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Monsters_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Monsters_script2.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrserver_objects_alife_monsters_script3.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Monsters_script4.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_script2.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_script3.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_Alife_Smartcovers.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_Alife_Smartcovers_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_script2.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Object_Base.cpp" />
+    <ClCompile Include="..\account_manager.cpp" />
+    <ClCompile Include="..\account_manager_console.cpp" />
+    <ClCompile Include="..\account_manager_script.cpp" />
+    <ClCompile Include="..\action_base_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\action_planner_action_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\action_planner_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ActivatingCharCollisionDelay.cpp" />
+    <ClCompile Include="..\Actor.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ActorAnimation.cpp" />
+    <ClCompile Include="..\ActorBackpack.cpp" />
+    <ClCompile Include="..\ActorCameras.cpp" />
+    <ClCompile Include="..\ActorCondition.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ActorCondition_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ActorEffector.cpp" />
+    <ClCompile Include="..\ActorEffector_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ActorHelmet.cpp" />
+    <ClCompile Include="..\ActorInput.cpp" />
+    <ClCompile Include="..\ActorNightVision.cpp" />
+    <ClCompile Include="..\actor_communication.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Actor_Events.cpp" />
+    <ClCompile Include="..\Actor_Feel.cpp" />
+    <ClCompile Include="..\actor_input_handler.cpp" />
+    <ClCompile Include="..\actor_memory.cpp" />
+    <ClCompile Include="..\Actor_Movement.cpp" />
+    <ClCompile Include="..\actor_mp_client.cpp" />
+    <ClCompile Include="..\actor_mp_client_export.cpp" />
+    <ClCompile Include="..\actor_mp_client_import.cpp" />
+    <ClCompile Include="..\actor_mp_server.cpp" />
+    <ClCompile Include="..\actor_mp_server_export.cpp" />
+    <ClCompile Include="..\actor_mp_server_import.cpp" />
+    <ClCompile Include="..\actor_mp_state.cpp" />
+    <ClCompile Include="..\Actor_Network.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\actor_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Actor_Sleep.cpp" />
+    <ClCompile Include="..\actor_statistic_mgr.cpp" />
+    <ClCompile Include="..\Actor_Weapon.cpp" />
+    <ClCompile Include="..\AdvancedDetector.cpp" />
+    <ClCompile Include="..\agent_corpse_manager.cpp" />
+    <ClCompile Include="..\agent_enemy_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\agent_explosive_manager.cpp" />
+    <ClCompile Include="..\agent_location_manager.cpp" />
+    <ClCompile Include="..\agent_manager.cpp" />
+    <ClCompile Include="..\agent_manager_actions.cpp" />
+    <ClCompile Include="..\agent_manager_planner.cpp" />
+    <ClCompile Include="..\agent_manager_properties.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\agent_member_manager.cpp" />
+    <ClCompile Include="..\agent_memory_manager.cpp" />
+    <ClCompile Include="..\aimers_base.cpp" />
+    <ClCompile Include="..\aimers_weapon.cpp" />
+    <ClCompile Include="..\AI\ai_monsters_misc.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\AI\Crow\ai_crow.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\ai_monster_bones.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_effector.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_motion_stats.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_squad.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_squad_attack.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_squad_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_squad_rest.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_utils.cpp" />
+    <ClCompile Include="..\ai\Monsters\anim_triple.cpp" />
+    <ClCompile Include="..\ai\Monsters\anomaly_detector.cpp" />
+    <ClCompile Include="..\ai\monsters\anti_aim_ability.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_anim.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_debug.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_feel.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_misc.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_net.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_path.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_startup.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_think.cpp" />
+    <ClCompile Include="..\ai\Monsters\Bloodsucker\bloodsucker.cpp" />
+    <ClCompile Include="..\ai\Monsters\Bloodsucker\bloodsucker_alien.cpp" />
+    <ClCompile Include="..\ai\Monsters\Bloodsucker\bloodsucker_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Bloodsucker\bloodsucker_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_effector.cpp" />
+    <ClCompile Include="..\ai\Monsters\Boar\boar.cpp" />
+    <ClCompile Include="..\ai\Monsters\Boar\boar_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Boar\boar_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Burer\burer.cpp" />
+    <ClCompile Include="..\ai\Monsters\Burer\burer_fast_gravi.cpp" />
+    <ClCompile Include="..\ai\Monsters\Burer\burer_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Burer\burer_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Cat\cat.cpp" />
+    <ClCompile Include="..\ai\Monsters\Cat\cat_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Cat\cat_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Chimera\chimera.cpp" />
+    <ClCompile Include="..\ai\Monsters\Chimera\chimera_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Chimera\chimera_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\controlled_actor.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller_animation.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller_direction.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller_psy_hit.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller_psy_hit_effector.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Controller\controller_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_animation.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_animation_base.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_animation_base_accel.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_animation_base_load.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_animation_base_update.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_critical_wound.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_direction.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_direction_base.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_jump.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_manager_custom.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_melee_jump.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_movement.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_movement_base.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_path_builder.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_path_builder_base.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_path_builder_base_path.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_path_builder_base_set.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_path_builder_base_update.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_rotation_jump.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_run_attack.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_sequencer.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_threaten.cpp" />
+    <ClCompile Include="..\ai\Monsters\corpse_cover.cpp" />
+    <ClCompile Include="..\ai\Monsters\Dog\dog.cpp" />
+    <ClCompile Include="..\ai\Monsters\Dog\dog_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Dog\dog_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\energy_holder.cpp" />
+    <ClCompile Include="..\ai\Monsters\Flesh\flesh.cpp" />
+    <ClCompile Include="..\ai\Monsters\Flesh\flesh_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Flesh\flesh_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Fracture\fracture.cpp" />
+    <ClCompile Include="..\ai\Monsters\Fracture\fracture_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Fracture\fracture_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\invisibility.cpp" />
+    <ClCompile Include="..\ai\Monsters\melee_checker.cpp" />
+    <ClCompile Include="..\ai\monsters\monster_aura.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_corpse_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_corpse_memory.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_cover_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_enemy_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_enemy_memory.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\monster_event_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_hit_memory.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_home.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_morale.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_sound_memory.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_ability.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_flame_thrower.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_movement.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_telekinesis.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\pseudodog.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\pseudodog_psi_effector.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\pseudodog_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Pseudodog\pseudodog_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\psy_dog.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\psy_dog_aura.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\psy_dog_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\PseudoGigant\pseudogigant_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\PseudoGigant\pseudogigant_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\PseudoGigant\pseudo_gigant.cpp" />
+    <ClCompile Include="..\ai\Monsters\PseudoGigant\pseudo_gigant_step_effector.cpp" />
+    <ClCompile Include="..\ai\Monsters\psy_aura.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\ai_rat.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_animations.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_behaviour.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_feel.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_fire.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_fsm.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+      <ExcludedFromBuild>true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_templates.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\rat_state_activation.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\monsters\rats\rat_state_initialize.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\monsters\rats\rat_state_switch.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Snork\snork.cpp" />
+    <ClCompile Include="..\ai\Monsters\Snork\snork_jump.cpp" />
+    <ClCompile Include="..\ai\Monsters\Snork\snork_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Snork\snork_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\telekinesis.cpp" />
+    <ClCompile Include="..\ai\Monsters\telekinetic_object.cpp" />
+    <ClCompile Include="..\ai\Monsters\Tushkano\tushkano.cpp" />
+    <ClCompile Include="..\ai\Monsters\Tushkano\tushkano_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Tushkano\tushkano_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Zombie\zombie.cpp" />
+    <ClCompile Include="..\ai\Monsters\Zombie\zombie_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\Monsters\Zombie\zombie_state_manager.cpp" />
+    <ClCompile Include="..\ai\phantom\phantom.cpp" />
+    <ClCompile Include="..\Ai\Stalker\ai_stalker.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\stalker\ai_stalker_cover.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\stalker\ai_stalker_debug.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Ai\Stalker\ai_stalker_events.cpp" />
+    <ClCompile Include="..\Ai\Stalker\ai_stalker_feel.cpp" />
+    <ClCompile Include="..\Ai\Stalker\ai_stalker_fire.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Ai\Stalker\ai_stalker_misc.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Ai\Stalker\ai_stalker_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\stalker\ai_stalker_script_entity.cpp" />
+    <ClCompile Include="..\Ai\Trader\ai_trader.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\trader\ai_trader_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\trader\trader_animation.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai\weighted_random.cpp" />
+    <ClCompile Include="..\ai_crow_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ai_debug_variables.cpp" />
+    <ClCompile Include="..\ai_obstacle.cpp" />
+    <ClCompile Include="..\AI_PhraseDialogManager.cpp" />
+    <ClCompile Include="..\ai_sounds.cpp" />
+    <ClCompile Include="..\ai_space.cpp" />
+    <ClCompile Include="..\ai_stalker_alife.cpp" />
+    <ClCompile Include="..\alife_anomalous_zone.cpp" />
+    <ClCompile Include="..\alife_combat_manager.cpp" />
+    <ClCompile Include="..\alife_communication_manager.cpp" />
+    <ClCompile Include="..\alife_creature_abstract.cpp" />
+    <ClCompile Include="..\alife_dynamic_object.cpp" />
+    <ClCompile Include="..\alife_graph_registry.cpp" />
+    <ClCompile Include="..\alife_group_abstract.cpp" />
+    <ClCompile Include="..\alife_group_registry.cpp" />
+    <ClCompile Include="..\alife_human_abstract.cpp" />
+    <ClCompile Include="..\alife_human_brain_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\alife_human_object_handler.cpp" />
+    <ClCompile Include="..\alife_interaction_manager.cpp" />
+    <ClCompile Include="..\alife_monster_abstract.cpp" />
+    <ClCompile Include="..\alife_monster_base.cpp" />
+    <ClCompile Include="..\alife_monster_brain_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\alife_monster_detail_path_manager.cpp" />
+    <ClCompile Include="..\alife_monster_detail_path_manager_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\alife_monster_movement_manager.cpp" />
+    <ClCompile Include="..\alife_monster_movement_manager_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\alife_monster_patrol_path_manager.cpp" />
+    <ClCompile Include="..\alife_monster_patrol_path_manager_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\alife_object.cpp" />
+    <ClCompile Include="..\alife_object_registry.cpp" />
+    <ClCompile Include="..\alife_online_offline_group.cpp" />
+    <ClCompile Include="..\alife_online_offline_group_brain.cpp" />
+    <ClCompile Include="..\alife_registry_container.cpp" />
+    <ClCompile Include="..\alife_schedule_registry.cpp" />
+    <ClCompile Include="..\alife_simulator.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\alife_simulator_base.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\alife_simulator_base2.cpp" />
+    <ClCompile Include="..\alife_simulator_header.cpp" />
+    <ClCompile Include="..\alife_simulator_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\alife_smart_terrain_registry.cpp" />
+    <ClCompile Include="..\alife_smart_terrain_task.cpp" />
+    <ClCompile Include="..\alife_smart_terrain_task_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\alife_smart_zone.cpp" />
+    <ClCompile Include="..\alife_spawn_registry.cpp" />
+    <ClCompile Include="..\alife_spawn_registry_header.cpp" />
+    <ClCompile Include="..\alife_spawn_registry_spawn.cpp" />
+    <ClCompile Include="..\alife_storage_manager.cpp" />
+    <ClCompile Include="..\alife_story_registry.cpp" />
+    <ClCompile Include="..\alife_surge_manager.cpp" />
+    <ClCompile Include="..\alife_switch_manager.cpp" />
+    <ClCompile Include="..\alife_time_manager.cpp" />
+    <ClCompile Include="..\alife_trader.cpp" />
+    <ClCompile Include="..\alife_trader_abstract.cpp" />
+    <ClCompile Include="..\alife_update_manager.cpp" />
+    <ClCompile Include="..\AmebaZone.cpp" />
+    <ClCompile Include="..\ammunition_groups.cpp" />
+    <ClCompile Include="..\animation_movement_controller.cpp" />
+    <ClCompile Include="..\animation_script_callback.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\animation_utils.cpp" />
+    <ClCompile Include="..\antirad.cpp" />
+    <ClCompile Include="..\antirad_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Artefact.cpp" />
+    <ClCompile Include="..\artefact_activation.cpp" />
+    <ClCompile Include="..\artefact_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\atlas_stalkercoppc_v1.c">
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\atlas_submit_queue.cpp" />
+    <ClCompile Include="..\attachable_item.cpp" />
+    <ClCompile Include="..\attachment_owner.cpp" />
+    <ClCompile Include="..\autosave_manager.cpp" />
+    <ClCompile Include="..\awards_store.cpp" />
+    <ClCompile Include="..\base_client_classes_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\BastArtifact.cpp" />
+    <ClCompile Include="..\best_scores_helper.cpp" />
+    <ClCompile Include="..\best_scores_store.cpp" />
+    <ClCompile Include="..\BlackDrops.cpp" />
+    <ClCompile Include="..\BlackGraviArtifact.cpp" />
+    <ClCompile Include="..\black_list.cpp" />
+    <ClCompile Include="..\Bolt.cpp" />
+    <ClCompile Include="..\BoneProtections.cpp" />
+    <ClCompile Include="..\bone_groups.cpp" />
+    <ClCompile Include="..\BottleItem.cpp" />
+    <ClCompile Include="..\BottleItem_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\BreakableObject.cpp" />
+    <ClCompile Include="..\CameraEffector.cpp" />
+    <ClCompile Include="..\CameraFirstEye.cpp" />
+    <ClCompile Include="..\cameralook.cpp" />
+    <ClCompile Include="..\Car.cpp" />
+    <ClCompile Include="..\CarCameras.cpp" />
+    <ClCompile Include="..\CarDamageParticles.cpp" />
+    <ClCompile Include="..\CarDoors.cpp" />
+    <ClCompile Include="..\CarExhaust.cpp" />
+    <ClCompile Include="..\CarInput.cpp" />
+    <ClCompile Include="..\CarLights.cpp" />
+    <ClCompile Include="..\CarScript.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\CarSound.cpp" />
+    <ClCompile Include="..\CarWeapon.cpp" />
+    <ClCompile Include="..\CarWheels.cpp" />
+    <ClCompile Include="..\car_memory.cpp" />
+    <ClCompile Include="..\cdkey_ban_list.cpp" />
+    <ClCompile Include="..\CharacterPhysicsSupport.cpp" />
+    <ClCompile Include="..\character_community.cpp" />
+    <ClCompile Include="..\character_hit_animations.cpp" />
+    <ClCompile Include="..\character_rank.cpp" />
+    <ClCompile Include="..\character_reputation.cpp" />
+    <ClCompile Include="..\character_shell_control.cpp" />
+    <ClCompile Include="..\client_spawn_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\client_spawn_manager_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ClimableObject.cpp" />
+    <ClCompile Include="..\configs_common.cpp" />
+    <ClCompile Include="..\configs_dumper.cpp" />
+    <ClCompile Include="..\configs_dump_verifyer.cpp" />
+    <ClCompile Include="..\console_commands.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\console_commands_mp.cpp" />
+    <ClCompile Include="..\console_registrator_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\cover_evaluators.cpp" />
+    <ClCompile Include="..\cover_manager.cpp" />
+    <ClCompile Include="..\cover_point_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\cta_game_artefact.cpp" />
+    <ClCompile Include="..\cta_game_artefact_activation.cpp" />
+    <ClCompile Include="..\CustomDetector.cpp" />
+    <ClCompile Include="..\CustomDevice.cpp" />
+    <ClCompile Include="..\CustomMonster.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\CustomMonster_VCPU.cpp" />
+    <ClCompile Include="..\CustomOutfit.cpp" />
+    <ClCompile Include="..\CustomOutfit_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\CustomRocket.cpp" />
+    <ClCompile Include="..\CustomZone.cpp" />
+    <ClCompile Include="..\CustomZone_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\DamagableItem.cpp" />
+    <ClCompile Include="..\damage_manager.cpp" />
+    <ClCompile Include="..\danger_cover_location.cpp" />
+    <ClCompile Include="..\danger_explosive.cpp" />
+    <ClCompile Include="..\danger_location.cpp" />
+    <ClCompile Include="..\danger_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\danger_object.cpp" />
+    <ClCompile Include="..\danger_object_location.cpp" />
+    <ClCompile Include="..\date_time.cpp" />
+    <ClCompile Include="..\DBG_Car.cpp" />
+    <ClCompile Include="..\dbg_draw_frustum.cpp" />
+    <ClCompile Include="..\death_anims.cpp" />
+    <ClCompile Include="..\death_anims_predicates.cpp" />
+    <ClCompile Include="..\debug_make_final_test.cpp">
+      <ExcludedFromBuild>true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\debug_renderer.cpp" />
+    <ClCompile Include="..\debug_text_tree.cpp" />
+    <ClCompile Include="..\DelayedActionFuse.cpp" />
+    <ClCompile Include="..\DemoInfo.cpp" />
+    <ClCompile Include="..\DemoInfo_Loader.cpp" />
+    <ClCompile Include="..\DemoPLay_Control.cpp" />
+    <ClCompile Include="..\DestroyablePhysicsObject.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\detail_path_manager.cpp" />
+    <ClCompile Include="..\detail_path_manager_smooth.cpp" />
+    <ClCompile Include="..\doors_actor.cpp" />
+    <ClCompile Include="..\doors_door.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\doors_manager.cpp" />
+    <ClCompile Include="..\Dosimeter.cpp" />
+    <ClCompile Include="..\double_shot_double_kill.cpp" />
+    <ClCompile Include="..\DummyArtifact.cpp" />
+    <ClCompile Include="..\DynamicHeightMap.cpp">
+      <ExcludedFromBuild>true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\dynamic_obstacles_avoider.cpp" />
+    <ClCompile Include="..\eatable_item.cpp" />
+    <ClCompile Include="..\eatable_item_object.cpp" />
+    <ClCompile Include="..\eatable_item_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\EffectorBobbing.cpp" />
+    <ClCompile Include="..\EffectorFall.cpp" />
+    <ClCompile Include="..\EffectorShot.cpp" />
+    <ClCompile Include="..\EffectorShotX.cpp" />
+    <ClCompile Include="..\EffectorZoomInertion.cpp" />
+    <ClCompile Include="..\ef_pattern.cpp" />
+    <ClCompile Include="..\ef_primary.cpp" />
+    <ClCompile Include="..\ef_storage.cpp" />
+    <ClCompile Include="..\ef_storage_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ElectricBall.cpp" />
+    <ClCompile Include="..\EliteDetector.cpp" />
+    <ClCompile Include="..\encyclopedia_article.cpp" />
+    <ClCompile Include="..\enemy_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Entity.cpp" />
+    <ClCompile Include="..\EntityCondition.cpp" />
+    <ClCompile Include="..\entity_alive.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\event_conditions_collection.cpp" />
+    <ClCompile Include="..\ExoOutfit.cpp" />
+    <ClCompile Include="..\Explosive.cpp" />
+    <ClCompile Include="..\ExplosiveItem.cpp" />
+    <ClCompile Include="..\ExplosiveRocket.cpp" />
+    <ClCompile Include="..\ExplosiveScript.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\F1.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\FadedBall.cpp" />
+    <ClCompile Include="..\faster_than_bullets_time.cpp" />
+    <ClCompile Include="..\filereceiver_node.cpp" />
+    <ClCompile Include="..\filetransfer_node.cpp" />
+    <ClCompile Include="..\file_transfer.cpp" />
+    <ClCompile Include="..\fire_disp_controller.cpp" />
+    <ClCompile Include="..\first_bullet_controller.cpp" />
+    <ClCompile Include="..\flare.cpp" />
+    <ClCompile Include="..\Flashlight.cpp" />
+    <ClCompile Include="..\FoodItem.cpp" />
+    <ClCompile Include="..\FoodItem_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\FryupZone.cpp" />
+    <ClCompile Include="..\fs_registrator_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\GalantineArtifact.cpp" />
+    <ClCompile Include="..\GameObject.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\GamePersistent.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\gamespy\CdkeyDecode\base32.c">
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\gamespy\CdkeyDecode\cdkeydecode.c">
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\GameTask.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\GametaskManager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\GameTask_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\game_base.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\game_cl_artefacthunt.cpp" />
+    <ClCompile Include="..\game_cl_base.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\game_cl_base_weapon_usage_statistic.cpp" />
+    <ClCompile Include="..\game_cl_base_weapon_usage_statistic_save.cpp" />
+    <ClCompile Include="..\game_cl_capturetheartefact_buywnd.cpp" />
+    <ClCompile Include="..\game_cl_capture_the_artefact.cpp" />
+    <ClCompile Include="..\game_cl_capture_the_artefact_captions_manager.cpp" />
+    <ClCompile Include="..\game_cl_capture_the_artefact_messages_menu.cpp" />
+    <ClCompile Include="..\game_cl_deathmatch.cpp" />
+    <ClCompile Include="..\game_cl_deathmatch_buywnd.cpp" />
+    <ClCompile Include="..\game_cl_mp.cpp" />
+    <ClCompile Include="..\game_cl_mp_messages_menu.cpp" />
+    <ClCompile Include="..\game_cl_mp_snd_messages.cpp" />
+    <ClCompile Include="..\game_cl_single.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\game_cl_teamdeathmatch.cpp" />
+    <ClCompile Include="..\game_graph_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\game_news.cpp" />
+    <ClCompile Include="..\game_state_accumulator.cpp" />
+    <ClCompile Include="..\game_state_accumulator_state_register.cpp" />
+    <ClCompile Include="..\game_sv_artefacthunt.cpp" />
+    <ClCompile Include="..\game_sv_artefacthunt_process_event.cpp" />
+    <ClCompile Include="..\game_sv_base.cpp" />
+    <ClCompile Include="..\game_sv_base_console_vars.cpp" />
+    <ClCompile Include="..\game_sv_capture_the_artefact.cpp" />
+    <ClCompile Include="..\game_sv_capture_the_artefact_buy_event.cpp" />
+    <ClCompile Include="..\game_sv_capture_the_artefact_myteam_impl.cpp" />
+    <ClCompile Include="..\game_sv_capture_the_artefact_process_event.cpp" />
+    <ClCompile Include="..\game_sv_deathmatch.cpp" />
+    <ClCompile Include="..\game_sv_deathmatch_process_event.cpp" />
+    <ClCompile Include="..\game_sv_event_queue.cpp" />
+    <ClCompile Include="..\game_sv_item_respawner.cpp" />
+    <ClCompile Include="..\game_sv_mp.cpp" />
+    <ClCompile Include="..\game_sv_single.cpp" />
+    <ClCompile Include="..\game_sv_teamdeathmatch.cpp" />
+    <ClCompile Include="..\game_sv_teamdeathmatch_process_event.cpp" />
+    <ClCompile Include="..\GlobalFeelTouch.cpp" />
+    <ClCompile Include="..\GraviArtifact.cpp" />
+    <ClCompile Include="..\GraviZone.cpp" />
+    <ClCompile Include="..\Grenade.cpp" />
+    <ClCompile Include="..\GrenadeLauncher.cpp" />
+    <ClCompile Include="..\group_hierarchy_holder.cpp" />
+    <ClCompile Include="..\gsc_dsigned_ltx.cpp" />
+    <ClCompile Include="..\HairsZone.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\HairsZone_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\HangingLamp.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\harvest_time.cpp" />
+    <ClCompile Include="..\Helicopter.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Helicopter2.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\HelicopterMovementManager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\HelicopterWeapon.cpp" />
+    <ClCompile Include="..\helicopter_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Hit.cpp" />
+    <ClCompile Include="..\HitMarker.cpp" />
+    <ClCompile Include="..\hits_store.cpp" />
+    <ClCompile Include="..\hit_immunity.cpp" />
+    <ClCompile Include="..\hit_memory_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\holder_custom.cpp" />
+    <ClCompile Include="..\holder_custom_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\HUDCrosshair.cpp" />
+    <ClCompile Include="..\HudItem.cpp" />
+    <ClCompile Include="..\HUDManager.cpp" />
+    <ClCompile Include="..\HudSound.cpp" />
+    <ClCompile Include="..\HUDTarget.cpp" />
+    <ClCompile Include="..\hud_item_object.cpp" />
+    <ClCompile Include="..\IKFoot.cpp" />
+    <ClCompile Include="..\IKLimbsController.cpp" />
+    <ClCompile Include="..\Ik\aint.cxx" />
+    <ClCompile Include="..\Ik\Dof7control.cpp" />
+    <ClCompile Include="..\Ik\eqn.cxx" />
+    <ClCompile Include="..\Ik\eulersolver.cxx" />
+    <ClCompile Include="..\Ik\IKLimb.cpp" />
+    <ClCompile Include="..\Ik\jtlimits.cxx" />
+    <ClCompile Include="..\Ik\limb.cxx" />
+    <ClCompile Include="..\Ik\math3d.cpp" />
+    <ClCompile Include="..\Ik\mathTrig.cpp" />
+    <ClCompile Include="..\ik_anim_state.cpp" />
+    <ClCompile Include="..\ik_calculate_data.cpp" />
+    <ClCompile Include="..\ik_dbg_matrix.cpp" />
+    <ClCompile Include="..\ik_foot_collider.cpp" />
+    <ClCompile Include="..\ik_limb_state.cpp" />
+    <ClCompile Include="..\ik_object_shift.cpp" />
+    <ClCompile Include="..\imotion_position.cpp" />
+    <ClCompile Include="..\imotion_velocity.cpp" />
+    <ClCompile Include="..\InfoDocument.cpp" />
+    <ClCompile Include="..\InfoPortion.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\interactive_animation.cpp" />
+    <ClCompile Include="..\interactive_motion.cpp" />
+    <ClCompile Include="..\Inventory.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\InventoryBox.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\InventoryBox_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\InventoryOwner.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\InventoryOwner_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\inventory_item.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\inventory_item_object.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\inventory_item_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\inventory_item_upgrade.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\inventory_owner_info.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\inventory_quickswitch.cpp" />
+    <ClCompile Include="..\inventory_upgrade.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\inventory_upgrade_base.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\inventory_upgrade_group.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\inventory_upgrade_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\inventory_upgrade_property.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\inventory_upgrade_root.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\invincible_fury.cpp" />
+    <ClCompile Include="..\item_manager.cpp" />
+    <ClCompile Include="..\key_binding_registrator_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\killer_victim_velocity_angle.cpp" />
+    <ClCompile Include="..\kills_store.cpp" />
+    <ClCompile Include="..\Level.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\LevelDebugScript.cpp" />
+    <ClCompile Include="..\Level_Bullet_Manager.cpp" />
+    <ClCompile Include="..\Level_bullet_manager_firetrace.cpp" />
+    <ClCompile Include="..\level_changer.cpp" />
+    <ClCompile Include="..\level_debug.cpp" />
+    <ClCompile Include="..\Level_GameSpy_Funcs.cpp" />
+    <ClCompile Include="..\level_graph.cpp" />
+    <ClCompile Include="..\level_graph_debug.cpp" />
+    <ClCompile Include="..\level_graph_debug2.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\level_graph_vertex.cpp" />
+    <ClCompile Include="..\Level_input.cpp" />
+    <ClCompile Include="..\Level_load.cpp" />
+    <ClCompile Include="..\level_map_locations.cpp" />
+    <ClCompile Include="..\Level_network.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Level_network_compressed_updates.cpp" />
+    <ClCompile Include="..\Level_network_Demo.cpp" />
+    <ClCompile Include="..\Level_network_digest_computer.cpp" />
+    <ClCompile Include="..\Level_network_map_sync.cpp" />
+    <ClCompile Include="..\Level_network_messages.cpp" />
+    <ClCompile Include="..\Level_network_spawn.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Level_network_start_client.cpp" />
+    <ClCompile Include="..\level_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Level_secure_messaging.cpp" />
+    <ClCompile Include="..\Level_SLS_Default.cpp" />
+    <ClCompile Include="..\Level_SLS_Load.cpp" />
+    <ClCompile Include="..\Level_SLS_Save.cpp" />
+    <ClCompile Include="..\level_sounds.cpp" />
+    <ClCompile Include="..\Level_start.cpp" />
+    <ClCompile Include="..\location_manager.cpp" />
+    <ClCompile Include="..\login_manager.cpp" />
+    <ClCompile Include="..\login_manager_script.cpp" />
+    <ClCompile Include="..\magic_box3.cpp" />
+    <ClCompile Include="..\magic_minimize_1d.cpp" />
+    <ClCompile Include="..\MainMenu.cpp" />
+    <ClCompile Include="..\map_location.cpp" />
+    <ClCompile Include="..\map_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\map_spot.cpp" />
+    <ClCompile Include="..\material_manager.cpp" />
+    <ClCompile Include="..\medkit.cpp" />
+    <ClCompile Include="..\medkit_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\memory_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\memory_space_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\MercuryBall.cpp" />
+    <ClCompile Include="..\Message_Filter.cpp" />
+    <ClCompile Include="..\MilitaryOutfit.cpp" />
+    <ClCompile Include="..\Mincer.cpp" />
+    <ClCompile Include="..\mincer_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\min_obb.cpp" />
+    <ClCompile Include="..\Missile.cpp" />
+    <ClCompile Include="..\monster_community.cpp" />
+    <ClCompile Include="..\MosquitoBald.cpp" />
+    <ClCompile Include="..\MosquitoBald_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\movement_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\movement_manager_game.cpp" />
+    <ClCompile Include="..\movement_manager_level.cpp" />
+    <ClCompile Include="..\movement_manager_patrol.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\movement_manager_physic.cpp" />
+    <ClCompile Include="..\moving_bones_snd_player.cpp" />
+    <ClCompile Include="..\moving_object.cpp" />
+    <ClCompile Include="..\moving_objects.cpp" />
+    <ClCompile Include="..\moving_objects_dynamic.cpp" />
+    <ClCompile Include="..\moving_objects_dynamic_collision.cpp" />
+    <ClCompile Include="..\moving_objects_static.cpp" />
+    <ClCompile Include="..\mpactor_dump_impl.cpp" />
+    <ClCompile Include="..\MPPlayersBag.cpp" />
+    <ClCompile Include="..\mp_config_sections.cpp" />
+    <ClCompile Include="..\Needles.cpp" />
+    <ClCompile Include="..\NoGravityZone.cpp" />
+    <ClCompile Include="..\object_actions.cpp" />
+    <ClCompile Include="..\object_handler.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\object_handler_planner.cpp" />
+    <ClCompile Include="..\object_handler_planner_missile.cpp" />
+    <ClCompile Include="..\object_handler_planner_weapon.cpp" />
+    <ClCompile Include="..\object_property_evaluators.cpp" />
+    <ClCompile Include="..\obstacles_query.cpp" />
+    <ClCompile Include="..\ParticlesObject.cpp" />
+    <ClCompile Include="..\ParticlesPlayer.cpp" />
+    <ClCompile Include="..\particle_params.cpp" />
+    <ClCompile Include="..\particle_params_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\patrol_path.cpp" />
+    <ClCompile Include="..\patrol_path_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\patrol_path_params.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\patrol_path_params_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\patrol_path_storage.cpp" />
+    <ClCompile Include="..\patrol_point.cpp" />
+    <ClCompile Include="..\PDA.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\PHCollisionDamageReceiver.cpp" />
+    <ClCompile Include="..\PHCommander.cpp" />
+    <ClCompile Include="..\PHDebug.cpp" />
+    <ClCompile Include="..\PHDestroyable.cpp" />
+    <ClCompile Include="..\PHDestroyableNotificate.cpp" />
+    <ClCompile Include="..\PHMovementControl.cpp" />
+    <ClCompile Include="..\PHMovementDynamicActivate.cpp" />
+    <ClCompile Include="..\Phrase.cpp" />
+    <ClCompile Include="..\PhraseDialog.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\PhraseDialogManager.cpp" />
+    <ClCompile Include="..\PhraseDialog_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\PhraseScript.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\PHScriptCall.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\PHShellCreator.cpp" />
+    <ClCompile Include="..\PHSimpleCalls.cpp" />
+    <ClCompile Include="..\PHSimpleCallsScript.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\PHSkeleton.cpp" />
+    <ClCompile Include="..\PHSoundPlayer.cpp" />
+    <ClCompile Include="..\PhysicObject.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\PhysicObject_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\PhysicsGamePars.cpp" />
+    <ClCompile Include="..\PhysicsShellHolder.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\PhysicsSkeletonObject.cpp" />
+    <ClCompile Include="..\physics_element_scripted.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\physics_game.cpp" />
+    <ClCompile Include="..\physics_joint_scripted.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\physics_shell_animated.cpp" />
+    <ClCompile Include="..\physics_shell_scripted.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\physics_world_scripted.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\physic_item.cpp" />
+    <ClCompile Include="..\player_account.cpp" />
+    <ClCompile Include="..\player_hud.cpp" />
+    <ClCompile Include="..\player_hud_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\player_hud_tune.cpp" />
+    <ClCompile Include="..\player_name_modifyer.cpp" />
+    <ClCompile Include="..\player_spot_params.cpp" />
+    <ClCompile Include="..\player_state_achilles_heel.cpp" />
+    <ClCompile Include="..\player_state_ambassador.cpp" />
+    <ClCompile Include="..\player_state_ammo_elapsed.cpp" />
+    <ClCompile Include="..\player_state_avenger.cpp" />
+    <ClCompile Include="..\player_state_blitzkrieg.cpp" />
+    <ClCompile Include="..\player_state_cherub.cpp" />
+    <ClCompile Include="..\player_state_climber.cpp" />
+    <ClCompile Include="..\player_state_mad.cpp" />
+    <ClCompile Include="..\player_state_marksman.cpp" />
+    <ClCompile Include="..\player_state_multichampion.cpp" />
+    <ClCompile Include="..\player_state_opener.cpp" />
+    <ClCompile Include="..\player_state_params.cpp" />
+    <ClCompile Include="..\player_state_remembrance.cpp" />
+    <ClCompile Include="..\player_state_skewer.cpp" />
+    <ClCompile Include="..\player_state_toughy.cpp" />
+    <ClCompile Include="..\player_team_win_score.cpp" />
+    <ClCompile Include="..\poses_blending.cpp" />
+    <ClCompile Include="..\pose_extrapolation.cpp" />
+    <ClCompile Include="..\PostprocessAnimator.cpp" />
+    <ClCompile Include="..\pp_effector_custom.cpp" />
+    <ClCompile Include="..\pp_effector_distance.cpp" />
+    <ClCompile Include="..\profiler.cpp">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\profile_data_types.cpp" />
+    <ClCompile Include="..\profile_data_types_script.cpp" />
+    <ClCompile Include="..\profile_store.cpp" />
+    <ClCompile Include="..\profile_store_script.cpp" />
+    <ClCompile Include="..\property_evaluator_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\property_storage_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\purchase_list.cpp" />
+    <ClCompile Include="..\RadioactiveZone.cpp" />
+    <ClCompile Include="..\random32.cpp" />
+    <ClCompile Include="..\rat_states.cpp" />
+    <ClCompile Include="..\rat_state_base.cpp" />
+    <ClCompile Include="..\rat_state_manager.cpp" />
+    <ClCompile Include="..\raypick.cpp" />
+    <ClCompile Include="..\RegistryFuncs.cpp" />
+    <ClCompile Include="..\relation_registry.cpp" />
+    <ClCompile Include="..\relation_registry_actions.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\relation_registry_fights.cpp" />
+    <ClCompile Include="..\restricted_object.cpp" />
+    <ClCompile Include="..\restricted_object_obstacle.cpp" />
+    <ClCompile Include="..\rewarding_events_handlers.cpp" />
+    <ClCompile Include="..\rewarding_state_events.cpp" />
+    <ClCompile Include="..\reward_event_generator.cpp" />
+    <ClCompile Include="..\reward_manager.cpp" />
+    <ClCompile Include="..\RGD5.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\RocketLauncher.cpp" />
+    <ClCompile Include="..\RustyHairArtifact.cpp" />
+    <ClCompile Include="..\saved_game_wrapper.cpp" />
+    <ClCompile Include="..\saved_game_wrapper_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ScientificOutfit.cpp" />
+    <ClCompile Include="..\Scope.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\screenshots_common.cpp" />
+    <ClCompile Include="..\screenshots_writer.cpp" />
+    <ClCompile Include="..\screenshot_manager.cpp" />
+    <ClCompile Include="..\screenshot_server.cpp" />
+    <ClCompile Include="..\ScriptXMLInit.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_abstract_action.cpp" />
+    <ClCompile Include="..\script_action_condition.cpp" />
+    <ClCompile Include="..\script_action_condition_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_action_planner_action_wrapper.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_action_planner_wrapper.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_action_wrapper.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_animation_action.cpp" />
+    <ClCompile Include="..\script_animation_action_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_binder.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_binder_object.cpp" />
+    <ClCompile Include="..\script_binder_object_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_binder_object_wrapper.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_effector.cpp" />
+    <ClCompile Include="..\script_effector_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_effector_wrapper.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_engine_help.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_entity.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_entity_action.cpp" />
+    <ClCompile Include="..\script_entity_action_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object2.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object3.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object4.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object_inventory_owner.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object_script2.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object_script3.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object_script_trader.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object_smart_covers.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object_trader.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object_use.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_game_object_use2.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_hit.cpp" />
+    <ClCompile Include="..\script_hit_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_lanim.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_monster_action.cpp" />
+    <ClCompile Include="..\script_monster_action_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_monster_hit_info_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_movement_action.cpp" />
+    <ClCompile Include="..\script_movement_action_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_object.cpp" />
+    <ClCompile Include="..\script_object_action.cpp" />
+    <ClCompile Include="..\script_object_action_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_particles.cpp" />
+    <ClCompile Include="..\script_particles_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_particle_action.cpp" />
+    <ClCompile Include="..\script_particle_action_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_property_evaluator_wrapper.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_render_device_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_sound.cpp" />
+    <ClCompile Include="..\script_sound_action.cpp" />
+    <ClCompile Include="..\script_sound_action_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_sound_info_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_sound_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_wallmarks_manager.cpp" />
+    <ClCompile Include="..\script_wallmarks_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_watch_action.cpp" />
+    <ClCompile Include="..\script_watch_action_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_world_property_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_world_state_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_zone.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\script_zone_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\searchlight.cpp" />
+    <ClCompile Include="..\secure_messaging.cpp" />
+    <ClCompile Include="..\seniority_hierarchy_holder.cpp" />
+    <ClCompile Include="..\server_entity_wrapper.cpp" />
+    <ClCompile Include="..\script_light_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ShootingObject.cpp" />
+    <ClCompile Include="..\shootingObject_dump_impl.cpp" />
+    <ClCompile Include="..\sight_action.cpp" />
+    <ClCompile Include="..\sight_manager.cpp" />
+    <ClCompile Include="..\sight_manager_target.cpp" />
+    <ClCompile Include="..\Silencer.cpp" />
+    <ClCompile Include="..\silent_shots.cpp" />
+    <ClCompile Include="..\SimpleDetector.cpp" />
+    <ClCompile Include="..\smart_cover.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_action.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_animation_planner.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_animation_selector.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_default_behaviour_planner.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_description.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_detail.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_evaluators.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_loophole.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_loophole_planner_actions.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_object.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_object_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_planner_actions.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_planner_target_provider.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_planner_target_selector.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_storage.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_transition.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\smart_cover_transition_animation.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\sound_collection_storage.cpp" />
+    <ClCompile Include="..\sound_memory_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\sound_player.cpp" />
+    <ClCompile Include="..\space_restriction.cpp" />
+    <ClCompile Include="..\space_restriction_base.cpp" />
+    <ClCompile Include="..\space_restriction_bridge.cpp" />
+    <ClCompile Include="..\space_restriction_composition.cpp" />
+    <ClCompile Include="..\space_restriction_holder.cpp" />
+    <ClCompile Include="..\space_restriction_manager.cpp" />
+    <ClCompile Include="..\space_restriction_shape.cpp" />
+    <ClCompile Include="..\space_restrictor.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\space_restrictor_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\Spectator.cpp" />
+    <ClCompile Include="..\spectator_camera_first_eye.cpp" />
+    <ClCompile Include="..\sprinter_stopper.cpp" />
+    <ClCompile Include="..\squad_hierarchy_holder.cpp" />
+    <ClCompile Include="..\StalkerOutfit.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_alife_actions.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_alife_planner.cpp" />
+    <ClCompile Include="..\stalker_alife_task_actions.cpp" />
+    <ClCompile Include="..\stalker_animation_callbacks.cpp" />
+    <ClCompile Include="..\stalker_animation_data.cpp" />
+    <ClCompile Include="..\stalker_animation_data_storage.cpp" />
+    <ClCompile Include="..\stalker_animation_global.cpp" />
+    <ClCompile Include="..\stalker_animation_head.cpp" />
+    <ClCompile Include="..\stalker_animation_legs.cpp" />
+    <ClCompile Include="..\stalker_animation_manager.cpp" />
+    <ClCompile Include="..\stalker_animation_manager_debug.cpp" />
+    <ClCompile Include="..\stalker_animation_manager_update.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_animation_names.cpp" />
+    <ClCompile Include="..\stalker_animation_pair.cpp" />
+    <ClCompile Include="..\stalker_animation_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_animation_state.cpp" />
+    <ClCompile Include="..\stalker_animation_torso.cpp" />
+    <ClCompile Include="..\stalker_anomaly_actions.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_anomaly_planner.cpp" />
+    <ClCompile Include="..\stalker_base_action.cpp" />
+    <ClCompile Include="..\stalker_combat_actions.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_combat_action_base.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_combat_planner.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_danger_by_sound_actions.cpp" />
+    <ClCompile Include="..\stalker_danger_by_sound_planner.cpp" />
+    <ClCompile Include="..\stalker_danger_grenade_actions.cpp" />
+    <ClCompile Include="..\stalker_danger_grenade_planner.cpp" />
+    <ClCompile Include="..\stalker_danger_in_direction_actions.cpp" />
+    <ClCompile Include="..\stalker_danger_in_direction_planner.cpp" />
+    <ClCompile Include="..\stalker_danger_planner.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_danger_property_evaluators.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_danger_unknown_actions.cpp" />
+    <ClCompile Include="..\stalker_danger_unknown_planner.cpp" />
+    <ClCompile Include="..\stalker_death_actions.cpp" />
+    <ClCompile Include="..\stalker_death_planner.cpp" />
+    <ClCompile Include="..\stalker_flair.cpp" />
+    <ClCompile Include="..\stalker_get_distance_actions.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_get_distance_planner.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_kill_wounded_actions.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_kill_wounded_planner.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_low_cover_actions.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_low_cover_planner.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_movement_manager_base.cpp" />
+    <ClCompile Include="..\stalker_movement_manager_obstacles.cpp" />
+    <ClCompile Include="..\stalker_movement_manager_obstacles_path.cpp" />
+    <ClCompile Include="..\stalker_movement_manager_smart_cover.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_movement_manager_smart_cover_fov_range.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_movement_manager_smart_cover_loopholes.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_movement_params.cpp" />
+    <ClCompile Include="..\stalker_planner.cpp" />
+    <ClCompile Include="..\stalker_property_evaluators.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_search_actions.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_search_planner.cpp" />
+    <ClCompile Include="..\stalker_sound_data.cpp" />
+    <ClCompile Include="..\stalker_sound_data_visitor.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\stalker_velocity_collection.cpp" />
+    <ClCompile Include="..\stalker_velocity_holder.cpp" />
+    <ClCompile Include="..\state_arguments_functions.cpp" />
+    <ClCompile Include="..\static_cast_checked_test.cpp">
+      <ExcludedFromBuild>true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\static_obstacles_avoider.cpp" />
+    <ClCompile Include="..\stats_submitter.cpp" />
+    <ClCompile Include="..\stats_submitter_dsa_params.cpp" />
+    <ClCompile Include="..\StdAfx.cpp">
+      <PrecompiledHeader>Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\steering_behaviour.cpp" />
+    <ClCompile Include="..\step_manager.cpp" />
+    <ClCompile Include="..\string_table.cpp" />
+    <ClCompile Include="..\team_base_zone.cpp" />
+    <ClCompile Include="..\team_hierarchy_holder.cpp" />
+    <ClCompile Include="..\TeleWhirlwind.cpp" />
+    <ClCompile Include="..\ThornArtifact.cpp" />
+    <ClCompile Include="..\Torch.cpp" />
+    <ClCompile Include="..\torch_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\TorridZone.cpp" />
+    <ClCompile Include="..\Tracer.cpp" />
+    <ClCompile Include="..\trade.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\trade2.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\trade_parameters.cpp" />
+    <ClCompile Include="..\traffic_optimization.cpp" />
+    <ClCompile Include="..\trajectories.cpp" />
+    <ClCompile Include="..\UIAchivementsIndicator.cpp" />
+    <ClCompile Include="..\UICursor.cpp" />
+    <ClCompile Include="..\UIDialogHolder.cpp" />
+    <ClCompile Include="..\UIDosimeter.cpp" />
+    <ClCompile Include="..\UIGameAHunt.cpp" />
+    <ClCompile Include="..\UIGameCTA.cpp" />
+    <ClCompile Include="..\UIGameCustom.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\UIGameCustom_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\UIGameDM.cpp" />
+    <ClCompile Include="..\UIGameMP.cpp" />
+    <ClCompile Include="..\UIGameSP.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\UIGameTDM.cpp" />
+    <ClCompile Include="..\UIPanelsClassFactory.cpp" />
+    <ClCompile Include="..\UIPlayerItem.cpp" />
+    <ClCompile Include="..\UIStaticItem.cpp" />
+    <ClCompile Include="..\UITeamHeader.cpp" />
+    <ClCompile Include="..\UITeamPanels.cpp" />
+    <ClCompile Include="..\UITeamState.cpp" />
+    <ClCompile Include="..\UIZoneMap.cpp" />
+    <ClCompile Include="..\ui\ArtefactDetectorUI.cpp" />
+    <ClCompile Include="..\ui\map_hint.cpp" />
+    <ClCompile Include="..\ui\MMSound.cpp" />
+    <ClCompile Include="..\ui\Restrictions.cpp" />
+    <ClCompile Include="..\ui\ServerList.cpp" />
+    <ClCompile Include="..\ui\ServerList_GameSpy_func.cpp" />
+    <ClCompile Include="..\ui\TeamInfo.cpp" />
+    <ClCompile Include="..\ui\UI3tButton.cpp" />
+    <ClCompile Include="..\ui\UIAchievements.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIRankingsCoC.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIActorMenu.cpp" />
+    <ClCompile Include="..\ui\UIActorMenuDeadBodySearch.cpp" />
+    <ClCompile Include="..\ui\UIActorMenuInitialize.cpp" />
+    <ClCompile Include="..\ui\UIActorMenuInventory.cpp" />
+    <ClCompile Include="..\ui\UIActorMenuTrade.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIActorMenuUpgrade.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIActorMenu_action.cpp" />
+    <ClCompile Include="..\ui\UIActorMenu_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIActorStateInfo.cpp" />
+    <ClCompile Include="..\ui\UIAnimatedStatic.cpp" />
+    <ClCompile Include="..\ui\UIBoosterInfo.cpp" />
+    <ClCompile Include="..\ui\UIBtnHint.cpp" />
+    <ClCompile Include="..\ui\UIButton.cpp" />
+    <ClCompile Include="..\ui\UIButton_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIBuyWeaponTab.cpp" />
+    <ClCompile Include="..\ui\UIBuyWndShared.cpp" />
+    <ClCompile Include="..\ui\UICarPanel.cpp" />
+    <ClCompile Include="..\ui\UICDkey.cpp" />
+    <ClCompile Include="..\ui\UICellCustomItems.cpp" />
+    <ClCompile Include="..\ui\UICellItem.cpp" />
+    <ClCompile Include="..\ui\UICellItemFactory.cpp" />
+    <ClCompile Include="..\ui\UIChangeMap.cpp" />
+    <ClCompile Include="..\ui\ChangeWeatherDialog.cpp" />
+    <ClCompile Include="..\ui\UICharacterInfo.cpp" />
+    <ClCompile Include="..\ui\UIChatWnd.cpp" />
+    <ClCompile Include="..\ui\UICheckButton.cpp" />
+    <ClCompile Include="..\ui\UIComboBox.cpp" />
+    <ClCompile Include="..\ui\UIComboBox_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UICustomEdit.cpp" />
+    <ClCompile Include="..\ui\UICustomSpin.cpp" />
+    <ClCompile Include="..\ui\UIDebugFonts.cpp">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIDemoPlayControl.cpp" />
+    <ClCompile Include="..\ui\UIDialogWnd.cpp" />
+    <ClCompile Include="..\ui\UIDoubleProgressBar.cpp" />
+    <ClCompile Include="..\ui\UIDragDropListEx.cpp" />
+    <ClCompile Include="..\ui\UIDragDropReferenceList.cpp" />
+    <ClCompile Include="..\ui\UIEditBox.cpp" />
+    <ClCompile Include="..\ui\UIEditBoxEx.cpp" />
+    <ClCompile Include="..\ui\UIEditBox_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIEditKeyBind.cpp" />
+    <ClCompile Include="..\ui\UIFixedScrollBar.cpp" />
+    <ClCompile Include="..\ui\UIFrameLineWnd.cpp" />
+    <ClCompile Include="..\ui\UIFrameWindow.cpp" />
+    <ClCompile Include="..\ui\UIGameLog.cpp" />
+    <ClCompile Include="..\ui\UIGameTutorial.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIGameTutorialSimpleItem.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIGameTutorialVideoItem.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIHelper.cpp" />
+    <ClCompile Include="..\ui\UIHint.cpp" />
+    <ClCompile Include="..\ui\UIHudStatesWnd.cpp" />
+    <ClCompile Include="..\ui\UIInventoryUpgradeWnd.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIInventoryUpgradeWnd_add.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIInventoryUtilities.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIInvUpgrade.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIInvUpgradeInfo.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIInvUpgradeProperty.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIItemInfo.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIKeyBinding.cpp" />
+    <ClCompile Include="..\ui\UIKickPlayer.cpp" />
+    <ClCompile Include="..\ui\UILanimController.cpp" />
+    <ClCompile Include="..\ui\UILine.cpp" />
+    <ClCompile Include="..\ui\UILines.cpp" />
+    <ClCompile Include="..\ui\UIListBox.cpp" />
+    <ClCompile Include="..\ui\UIListBoxItem.cpp" />
+    <ClCompile Include="..\ui\UIListBoxItemMsgChain.cpp" />
+    <ClCompile Include="..\ui\UIListBox_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIListItemServer.cpp" />
+    <ClCompile Include="..\ui\UILogsWnd.cpp" />
+    <ClCompile Include="..\ui\UIMainIngameWnd.cpp" />
+    <ClCompile Include="..\ui\UIMap.cpp" />
+    <ClCompile Include="..\ui\UIMapDesc.cpp" />
+    <ClCompile Include="..\ui\UIMapInfo.cpp" />
+    <ClCompile Include="..\ui\UIMapInfo_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIMapLegend.cpp" />
+    <ClCompile Include="..\ui\UIMapList.cpp" />
+    <ClCompile Include="..\ui\UIMapWnd.cpp" />
+    <ClCompile Include="..\ui\UIMapWnd2.cpp" />
+    <ClCompile Include="..\ui\UIMapWndActions.cpp" />
+    <ClCompile Include="..\ui\UIMessageBox.cpp" />
+    <ClCompile Include="..\ui\UIMessageBoxEx.cpp" />
+    <ClCompile Include="..\ui\UIMessageBox_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIMessagesWindow.cpp" />
+    <ClCompile Include="..\ui\UIMMShniaga.cpp" />
+    <ClCompile Include="..\ui\UIMoneyIndicator.cpp" />
+    <ClCompile Include="..\ui\UIMotionIcon.cpp" />
+    <ClCompile Include="..\ui\UIMPAdminMenu.cpp" />
+    <ClCompile Include="..\ui\UIMPChangeMapAdm.cpp" />
+    <ClCompile Include="..\ui\UIMpItemsStoreWnd.cpp" />
+    <ClCompile Include="..\ui\UIMPPlayersAdm.cpp" />
+    <ClCompile Include="..\ui\UIMPServerAdm.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd_init.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd_items.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd_misc.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd_trade.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd_wpn.cpp" />
+    <ClCompile Include="..\ui\UINewsItemWnd.cpp" />
+    <ClCompile Include="..\ui\UIOptConCom.cpp" />
+    <ClCompile Include="..\ui\UIOptionsItem.cpp" />
+    <ClCompile Include="..\ui\UIOptionsManager.cpp" />
+    <ClCompile Include="..\ui\UIOptionsManagerScript.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIOutfitInfo.cpp" />
+    <ClCompile Include="..\ui\UIPdaKillMessage.cpp" />
+    <ClCompile Include="..\ui\UIPdaMsgListItem.cpp" />
+    <ClCompile Include="..\ui\UIPdaWnd.cpp" />
+    <ClCompile Include="..\ui\UIProgressBar.cpp" />
+    <ClCompile Include="..\ui\UIProgressBar_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIProgressShape.cpp" />
+    <ClCompile Include="..\ui\UIPropertiesBox.cpp" />
+    <ClCompile Include="..\ui\UIPropertiesBox_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIRadioButton.cpp" />
+    <ClCompile Include="..\ui\UIRankIndicator.cpp" />
+    <ClCompile Include="..\ui\UIRankingWnd.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIScriptWnd.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIScriptWnd_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\uiscriptwnd_script2.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIScrollBar.cpp" />
+    <ClCompile Include="..\ui\UIScrollBox.cpp" />
+    <ClCompile Include="..\ui\UIScrollView.cpp" />
+    <ClCompile Include="..\ui\UISecondTaskWnd.cpp" />
+    <ClCompile Include="..\ui\UIServerInfo.cpp" />
+    <ClCompile Include="..\ui\UISkinSelector.cpp" />
+    <ClCompile Include="..\ui\UISpawnWnd.cpp" />
+    <ClCompile Include="..\ui\UISpeechMenu.cpp" />
+    <ClCompile Include="..\ui\UISpinNum.cpp" />
+    <ClCompile Include="..\ui\UISpinText.cpp" />
+    <ClCompile Include="..\ui\UIStatic.cpp" />
+    <ClCompile Include="..\ui\UIStatic_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIStatix.cpp" />
+    <ClCompile Include="..\ui\UIStats.cpp" />
+    <ClCompile Include="..\ui\UIStatsIcon.cpp" />
+    <ClCompile Include="..\ui\UIStatsPlayerInfo.cpp" />
+    <ClCompile Include="..\ui\UIStatsPlayerList.cpp" />
+    <ClCompile Include="..\ui\UISubLine.cpp" />
+    <ClCompile Include="..\ui\UITabButton.cpp" />
+    <ClCompile Include="..\ui\UITabButtonMP.cpp" />
+    <ClCompile Include="..\ui\UITabControl.cpp" />
+    <ClCompile Include="..\ui\UITabControl_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UITalkDialogWnd.cpp" />
+    <ClCompile Include="..\ui\UITalkWnd.cpp" />
+    <ClCompile Include="..\ui\UITaskWnd.cpp" />
+    <ClCompile Include="..\ui\UITextureMaster.cpp" />
+    <ClCompile Include="..\ui\UITextVote.cpp" />
+    <ClCompile Include="..\ui\UITrackBar.cpp" />
+    <ClCompile Include="..\ui\UITrackButton.cpp" />
+    <ClCompile Include="..\ui\UIVote.cpp" />
+    <ClCompile Include="..\ui\UIVoteStatusWnd.cpp" />
+    <ClCompile Include="..\ui\UIVotingCategory.cpp" />
+    <ClCompile Include="..\ui\UIWindow.cpp" />
+    <ClCompile Include="..\ui\UIWindow_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIWndCallback.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIWpnParams.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\ui\UIXmlInit.cpp" />
+    <ClCompile Include="..\ui\ui_af_params.cpp" />
+    <ClCompile Include="..\ui\ui_arrow.cpp" />
+    <ClCompile Include="..\ui\UI_IB_Static.cpp" />
+    <ClCompile Include="..\ui\xrUIXmlParser.cpp" />
+    <ClCompile Include="..\ui_base.cpp" />
+    <ClCompile Include="..\ui_export_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\UsableScriptObject.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\vision_client.cpp" />
+    <ClCompile Include="..\visual_memory_manager.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\visual_memory_params.cpp" />
+    <ClCompile Include="..\wallmark_manager.cpp" />
+    <ClCompile Include="..\Weapon.cpp" />
+    <ClCompile Include="..\WeaponAK74.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponAmmo.cpp" />
+    <ClCompile Include="..\WeaponAmmo_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponAutomaticShotgun.cpp" />
+    <ClCompile Include="..\WeaponBinoculars.cpp" />
+    <ClCompile Include="..\WeaponBinocularsVision.cpp" />
+    <ClCompile Include="..\WeaponBinoculars_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\weaponBM16.cpp" />
+    <ClCompile Include="..\weaponBM16_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponCustomAuto.cpp" />
+    <ClCompile Include="..\WeaponCustomPistol.cpp" />
+    <ClCompile Include="..\WeaponDispersion.cpp" />
+    <ClCompile Include="..\WeaponFire.cpp" />
+    <ClCompile Include="..\WeaponFN2000.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponFORT.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponGroza.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponHPSA.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponHPSA_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponKnife.cpp" />
+    <ClCompile Include="..\WeaponKnife_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponLR300.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponMagazined.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponMagazinedWGrenade.cpp" />
+    <ClCompile Include="..\WeaponMagazineExtended.cpp" />
+    <ClCompile Include="..\WeaponPistol.cpp" />
+    <ClCompile Include="..\WeaponPM.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponRevolver.cpp" />
+    <ClCompile Include="..\WeaponRG6.cpp" />
+    <ClCompile Include="..\WeaponRG6_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponRPG7.cpp" />
+    <ClCompile Include="..\WeaponRPG7_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponShotgun.cpp" />
+    <ClCompile Include="..\weaponshotgun_script.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponStatMgun.cpp" />
+    <ClCompile Include="..\HolderEntityObject.cpp" />
+    <ClCompile Include="..\WeaponStatMgunFire.cpp" />
+    <ClCompile Include="..\WeaponStatMgunIR.cpp" />
+    <ClCompile Include="..\WeaponSVD.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponSVU.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponUpgrade.cpp" />
+    <ClCompile Include="..\WeaponUSP45.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponVal.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponVintorez.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\WeaponWalther.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\weapon_ammo_dump_impl.cpp" />
+    <ClCompile Include="..\weapon_dump_impl.cpp" />
+    <ClCompile Include="..\Wound.cpp" />
+    <ClCompile Include="..\xrClientsPool.cpp" />
+    <ClCompile Include="..\xrGame.cpp" />
+    <ClCompile Include="..\xrGameSpyServer.cpp" />
+    <ClCompile Include="..\xrGameSpyServer_callbacks.cpp" />
+    <ClCompile Include="..\xrGameSpy_GameSpyFuncs.cpp" />
+    <ClCompile Include="..\xrgame_dll_detach.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\xrServer.cpp">
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
+    <ClCompile Include="..\xrServerMapSync.cpp" />
+    <ClCompile Include="..\xrServer_balance.cpp" />
+    <ClCompile Include="..\xrServer_CL_connect.cpp" />
+    <ClCompile Include="..\xrServer_CL_disconnect.cpp" />
+    <ClCompile Include="..\xrServer_Connect.cpp" />
+    <ClCompile Include="..\xrServer_Disconnect.cpp" />
+    <ClCompile Include="..\xrServer_info.cpp" />
+    <ClCompile Include="..\xrServer_perform_GameExport.cpp" />
+    <ClCompile Include="..\xrServer_perform_migration.cpp" />
+    <ClCompile Include="..\xrServer_perform_RPgen.cpp" />
+    <ClCompile Include="..\xrServer_perform_sls_default.cpp" />
+    <ClCompile Include="..\xrServer_perform_sls_load.cpp" />
+    <ClCompile Include="..\xrServer_perform_sls_save.cpp" />
+    <ClCompile Include="..\xrServer_perform_transfer.cpp" />
+    <ClCompile Include="..\xrServer_process_event.cpp" />
+    <ClCompile Include="..\xrServer_process_event_activate.cpp" />
+    <ClCompile Include="..\xrServer_process_event_destroy.cpp" />
+    <ClCompile Include="..\xrServer_process_event_ownership.cpp" />
+    <ClCompile Include="..\xrServer_process_event_reject.cpp" />
+    <ClCompile Include="..\xrServer_process_spawn.cpp" />
+    <ClCompile Include="..\xrServer_process_update.cpp" />
+    <ClCompile Include="..\xrServer_secure_messaging.cpp" />
+    <ClCompile Include="..\xrServer_sls_clear.cpp" />
+    <ClCompile Include="..\xrServer_svclient_validation.cpp" />
+    <ClCompile Include="..\xrServer_updates_compressor.cpp" />
+    <ClCompile Include="..\xr_dsa_signer.cpp" />
+    <ClCompile Include="..\xr_dsa_verifyer.cpp" />
+    <ClCompile Include="..\xr_level_controller.cpp" />
+    <ClCompile Include="..\xr_time.cpp" />
+    <ClCompile Include="..\ZoneCampfire.cpp" />
+    <ClCompile Include="..\ZoneVisual.cpp" />
+    <ClCompile Include="..\zone_effector.cpp" />
+    <ClCompile Include="..\ZudaArtifact.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)3rd party\crypto\vs2022\crypto.vcxproj">
+      <Project>{fa169092-ea3e-40c1-8e5a-a2b575700fe8}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)3rd party\luabind\vs2022\luabind.beta7-devel.rc4.vcxproj">
+      <Project>{cc52e0b3-cc35-4934-9302-035b748f3f2c}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)3rd party\ode\contrib\msvc7\ode_default\vs2022\default.vcxproj">
+      <Project>{1bf75feb-87dd-486c-880b-227987d191c2}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)Layers\xrAPI\vs2022\xrAPI.vcxproj">
+      <Project>{1daec516-e52c-4a3c-a4da-ae3553e6e0f8}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrNetServer\vs2022\xrNetServer.vcxproj">
+      <Project>{435bac9a-b225-457d-ab40-c9bd0cc8838c}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrPhysics\vs2022\xrPhysics.vcxproj">
+      <Project>{98d24a3d-7666-4c11-9d6e-b10393ce8cba}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrXMLParser\vs2022\xrXMLParser.vcxproj">
+      <Project>{94a1c366-3d19-48e6-8170-4adc2e70df98}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCDB\vs2022\xrCDB.vcxproj">
+      <Project>{a19b1df2-82ec-4364-8bdf-85d13a1c89b5}</Project>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCore\vs2022\xrCore.vcxproj">
+      <Project>{a0f7d1fb-59a7-4717-a7e4-96f37e91998e}</Project>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="1" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/xrGame/vs2022/xrGame.vcxproj.filters b/src/xrGame/vs2022/xrGame.vcxproj.filters
new file mode 100644
index 0000000..4f95a5b
--- /dev/null
+++ b/src/xrGame/vs2022/xrGame.vcxproj.filters
@@ -0,0 +1,5362 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="AI">
+      <UniqueIdentifier>{f34c5d00-338a-43c5-a944-caabce922e2b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents">
+      <UniqueIdentifier>{4ad6209e-add1-4deb-8a8d-c0d31f2130f4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DamageManager">
+      <UniqueIdentifier>{6c63fe1f-c4b8-483a-a487-fb764ab6118a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement">
+      <UniqueIdentifier>{8cbc0b29-3daa-4661-8fed-a54c40481db9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement">
+      <UniqueIdentifier>{efa720b0-e080-4992-8857-7d196a371a22}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\ActionBase">
+      <UniqueIdentifier>{9e8b2226-f1ee-430b-a7ae-a6a1e176d276}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\ActionBase\ActionScriptBase">
+      <UniqueIdentifier>{a3742d67-03be-424b-8c76-3fffdf41067c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\ActionBase\ScriptActionWrapper">
+      <UniqueIdentifier>{b2e49772-0055-41ee-b2e4-6d658e15d5f8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\ActionPlanner">
+      <UniqueIdentifier>{028cfba8-f90e-4c18-b10c-83b67bcfd6df}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\ActionPlanner\ScriptActionPlannerWrapper">
+      <UniqueIdentifier>{20856ed4-84a9-40ac-bb0b-3abd23974c6f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\ActionPlanner\ActionPlannerScript">
+      <UniqueIdentifier>{f5f75b4b-9e18-4e83-b37d-616cf014b122}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\ActionPlannerAction">
+      <UniqueIdentifier>{69f5ac3b-6216-429d-8f3c-0c905237b226}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\ActionPlannerAction\ActionPlannerActionScript">
+      <UniqueIdentifier>{f371f841-7736-4fa7-bcf2-7443c8fa02fc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\ActionPlannerAction\ScriptActionPlannerActionWrapper">
+      <UniqueIdentifier>{91dbf252-6beb-428f-ac72-3b580c9b7640}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\PropertyStorage">
+      <UniqueIdentifier>{da593687-10ce-4c7b-9941-9d66b9ca6742}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\WorldPropertyEvaluator">
+      <UniqueIdentifier>{facd3f2a-86fe-453f-9afe-189db144265f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\WorldPropertyEvaluator\const">
+      <UniqueIdentifier>{9e406a81-6670-4d7a-a21c-44536e84d9a8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\WorldPropertyEvaluator\member">
+      <UniqueIdentifier>{3dff0aba-2f10-4178-9d1b-ed8196904f31}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\DecisionManagement\ActionManagement\WorldPropertyEvaluator\ScriptPropertyEvaluatorWrapper">
+      <UniqueIdentifier>{2579f903-5aaf-4b87-a5be-8d49c5df628f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MaterialManager">
+      <UniqueIdentifier>{db54263d-cbbb-4f4b-8c2c-8697b2b437ba}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager">
+      <UniqueIdentifier>{6438a48f-5ad5-451d-ab20-158c7fa0e0ea}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\clsuterized_data_managers">
+      <UniqueIdentifier>{66d8f340-7c96-4971-9bd7-c1373a25d284}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\clsuterized_data_managers\ObjectManager">
+      <UniqueIdentifier>{9bd4daba-3e88-421a-8909-523c9cfc0509}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\clsuterized_data_managers\ItemManager">
+      <UniqueIdentifier>{acac3ce0-f1df-4af3-bf1e-e10f8221303d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\clsuterized_data_managers\DangerManager">
+      <UniqueIdentifier>{b2f45a6e-9b1a-48dd-ab74-1b0b4eddf3da}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\clsuterized_data_managers\DangerManager\danger_object">
+      <UniqueIdentifier>{5719192f-accb-4704-9fb6-2d25fc83bf9a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\clsuterized_data_managers\EnemyManager">
+      <UniqueIdentifier>{b6af6f15-4bd9-459d-a714-8f498f439e5e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\raw_data_managers">
+      <UniqueIdentifier>{76f1cc1c-fb07-4217-931b-47cb3a2a6150}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\raw_data_managers\HitMemoryManager">
+      <UniqueIdentifier>{16242858-b49d-4a99-9ecb-832347cf99eb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\raw_data_managers\SoundMemoryManager">
+      <UniqueIdentifier>{8c2063da-f76f-4bf1-9c11-a09cd92e831e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\raw_data_managers\SoundMemoryManager\SoundUserDataVisitor">
+      <UniqueIdentifier>{a433e521-f7e8-42d1-a03f-78c99d2546f5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\raw_data_managers\VisualMemoryManager">
+      <UniqueIdentifier>{f9ab5c39-0d65-4b57-aca7-f6239df4c495}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\raw_data_managers\VisualMemoryManager\visual_memory_params">
+      <UniqueIdentifier>{f0ea01c7-2843-42a9-b97c-b4c7f0faefc6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MemoryManager\raw_data_managers\VisualMemoryManager\vision_client">
+      <UniqueIdentifier>{a038daf3-b039-429f-80f1-d839ef008544}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager">
+      <UniqueIdentifier>{849f4b83-9a57-4a95-ab24-3e68fbf6477f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\LocationManager">
+      <UniqueIdentifier>{3f19d8ac-f7a4-4711-acfa-8f091350d26e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\LocationSelectors">
+      <UniqueIdentifier>{6ba98b93-e321-46c6-ba0b-78eb4bc5f361}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\LocationSelectors\AbstractLocationSelector">
+      <UniqueIdentifier>{dcc8e5b1-d47a-458a-a851-5981406ea302}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\LocationSelectors\GameLocationSelector">
+      <UniqueIdentifier>{36bfb409-1adf-4bb9-9408-b078dff8365d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\LocationSelectors\LevelLocationSelector">
+      <UniqueIdentifier>{278d2e3c-808d-4810-9d08-d67166ca842d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\PathManagers">
+      <UniqueIdentifier>{1e417e69-deb9-4ef2-ac42-06e241602cf5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\PathManagers\AbstractPathManager">
+      <UniqueIdentifier>{5f570346-c1da-4207-91a9-a72169d0ac58}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\PathManagers\DetailPathManager">
+      <UniqueIdentifier>{b5f7d03e-20b4-4159-8d50-f7cd319f1832}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\PathManagers\GamePathManager">
+      <UniqueIdentifier>{96b7a26b-7d60-4683-85f1-fa0c91144ac4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\PathManagers\LevelPathManager">
+      <UniqueIdentifier>{50b3af4e-eaf7-409e-8f08-5a1f5b3438d8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\PathManagers\PatrolPathManager">
+      <UniqueIdentifier>{0fea08e7-d30e-4c9f-bdf8-6c6138d86a8f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\MovementManager\RestrictedObject">
+      <UniqueIdentifier>{d280ff1c-dcfb-4a56-8f2c-68be831d0dea}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\ObjectHandler">
+      <UniqueIdentifier>{3ab5572b-1236-4555-a376-04c85cf441db}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\ObjectHandler\planner">
+      <UniqueIdentifier>{264544ae-dffb-4e51-8e5a-752a8528a26b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\ObjectHandler\planner\actions">
+      <UniqueIdentifier>{4a1ba86c-5901-4494-afbc-0ace882320b8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\ObjectHandler\planner\properties">
+      <UniqueIdentifier>{fcd6c07b-a9f4-4b5a-a733-07a086ac37cb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\ProblemSolver">
+      <UniqueIdentifier>{1708bf96-3248-4ab8-8ff4-dfcc9f312dc0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\ProblemSolver\condition_state">
+      <UniqueIdentifier>{a5d29258-3a35-427f-9b90-9700a31c7313}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\ProblemSolver\condition_state\ScriptWorldState">
+      <UniqueIdentifier>{f40a0a54-74d0-49ee-8a4d-1df98adb65d1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\ProblemSolver\operator_abstract">
+      <UniqueIdentifier>{4d7a6542-5e38-4010-a9e3-e32b2856bc39}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\ProblemSolver\operator_condition">
+      <UniqueIdentifier>{84c4875a-2bc0-4829-a50a-9b0687e724cb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\ProblemSolver\operator_condition\ScriptWorldProperty">
+      <UniqueIdentifier>{8c698550-4801-42e8-90d0-d9f4bf6de1ae}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SetupManager">
+      <UniqueIdentifier>{623c74d9-fae0-4845-a9b6-d2933cdc51ed}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SightManager">
+      <UniqueIdentifier>{b24bcfa7-6737-4b29-846f-733f4cb70890}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SightManager\control_action">
+      <UniqueIdentifier>{2095d239-e453-4055-9813-dcd9abdbe92b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SightManager\sight_action">
+      <UniqueIdentifier>{3084e8a9-b257-4c55-b13e-d5f143d97c51}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SightManager\sight_control_action">
+      <UniqueIdentifier>{4e3ac0ba-32b6-4946-b3ac-b94eda75dbfb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SightManager\aimers">
+      <UniqueIdentifier>{d4233385-56b6-4f22-b65e-d8d8a2cb933a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SightManager\aimers\weapon">
+      <UniqueIdentifier>{3a3f0c08-47f9-4008-b801-5ca7b3ccb850}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SightManager\aimers\bone">
+      <UniqueIdentifier>{ebca4c47-156b-4091-8a4e-bcaa7a747aa0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SightManager\aimers\base">
+      <UniqueIdentifier>{a5207b4e-d8eb-48ac-9def-0e9e7b0c4ade}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SoundPlayer">
+      <UniqueIdentifier>{3634cb98-ea91-4109-b79b-ea5748a703e7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SoundPlayer\sound_collection_storage">
+      <UniqueIdentifier>{53104758-7b52-4729-b760-dde5f82bcfbe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SpaceRestrictionManager">
+      <UniqueIdentifier>{6db374af-48c9-48db-b465-865f98a3430f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SpaceRestrictionManager\SpaceRestriction">
+      <UniqueIdentifier>{ab500509-6462-4050-bfdf-8fd12caeb84b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SpaceRestrictionManager\SpaceRestrictionHolder">
+      <UniqueIdentifier>{142906d8-13e8-43b5-ad0d-9563fa06b1d7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SpaceRestrictionManager\SpaceRestrictionHolder\SpaceRestrictionAbstract">
+      <UniqueIdentifier>{929e5ad1-02f4-4e8e-8278-bf13dd377d39}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SpaceRestrictionManager\SpaceRestrictionHolder\SpaceRestrictionBase">
+      <UniqueIdentifier>{62af8c6e-7bc2-48a7-b7c1-58f83a036302}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SpaceRestrictionManager\SpaceRestrictionHolder\SpaceRestrictionBridge">
+      <UniqueIdentifier>{105ced4e-4ac6-469a-b3a5-95f83ca8f613}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SpaceRestrictionManager\SpaceRestrictionHolder\SpaceRestrictionComposition">
+      <UniqueIdentifier>{41f3fb64-00e4-41c1-91ba-54403d381d58}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\SpaceRestrictionManager\SpaceRestrictionHolder\SpaceRestrictionShape">
+      <UniqueIdentifier>{b14f8e13-0f76-443e-a213-90e97a25c700}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\Step Manager">
+      <UniqueIdentifier>{1557f8e1-f876-49b7-86b1-de93ea03f718}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\moving_objects">
+      <UniqueIdentifier>{70333423-ad5a-4a26-9162-af601a447815}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\moving_objects\moving_object">
+      <UniqueIdentifier>{113be2e1-262a-4899-8691-607706076fbf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\moving_objects\obstacles_query">
+      <UniqueIdentifier>{18f6c13a-170c-4af0-a9b9-246ad289e003}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\doors_manager">
+      <UniqueIdentifier>{7e2ed7cb-e902-45b4-85fc-5351e45ec41f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\doors_manager\door">
+      <UniqueIdentifier>{150f766f-3936-4788-8e11-ecf1dcbd1b36}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\doors_manager\actor">
+      <UniqueIdentifier>{ecf8fbed-1ce2-497c-80ef-44230d05473d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AComponents\doors_manager\manager">
+      <UniqueIdentifier>{0be7e450-d065-423b-a7db-bf5b115c05c1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover">
+      <UniqueIdentifier>{6fd90ac2-1444-4769-8209-95e816c5d89e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\cover_point">
+      <UniqueIdentifier>{043b3ec1-b108-467b-94e7-15166de0d9b2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\smart_cover">
+      <UniqueIdentifier>{6aa12a13-0bdf-4d04-bd37-c2c938062dce}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\smart_cover\storage">
+      <UniqueIdentifier>{41a5206c-5d52-46fd-b9c8-1b45b6f24ff9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\smart_cover\storage\description">
+      <UniqueIdentifier>{ca5103bb-9a8b-4707-a4eb-f95ea1570bdf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\smart_cover\storage\description\loophole">
+      <UniqueIdentifier>{2da5e29c-5ce1-44f0-b3b5-0d92c80c7350}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\smart_cover\storage\description\loophole\action">
+      <UniqueIdentifier>{4512827d-65b3-4995-ab42-5b951b312cd0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\smart_cover\storage\description\transitions">
+      <UniqueIdentifier>{e943f1d8-7be7-409e-9e59-a3dcba075457}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\smart_cover\storage\description\transitions\transition">
+      <UniqueIdentifier>{a58b3e8c-f72d-4054-84cc-f77b66b24b3a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\smart_cover\storage\description\transitions\animation">
+      <UniqueIdentifier>{43009883-371c-4292-b390-2399d870e008}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\smart_cover\cover">
+      <UniqueIdentifier>{cd185404-64db-4911-a920-4e66a323c7fa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\smart_cover\detail">
+      <UniqueIdentifier>{cedea654-dbfa-43ee-8ada-bf069f3c1c99}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ACover\smart_cover\object">
+      <UniqueIdentifier>{81b2348f-07c8-42ef-bc3d-e2812a6c7dfe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ADebug">
+      <UniqueIdentifier>{d8d16ee4-0d7a-4364-b686-35f56ef19dd0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AEval">
+      <UniqueIdentifier>{7b12b51d-fd90-435f-8688-a4dfd0ccad63}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AEval\functions">
+      <UniqueIdentifier>{dd8c0d88-9007-48aa-9065-bfb97a67e110}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AEval\functions\base">
+      <UniqueIdentifier>{7b9c916c-5354-4e51-85b7-cdc915838473}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AEval\functions\primary">
+      <UniqueIdentifier>{966c85bc-9d8f-4290-a0dc-b976ef7e2cf5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AEval\functions\patterns">
+      <UniqueIdentifier>{a83c7e20-37bf-4d13-979d-f05249501e0d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AEval\storage">
+      <UniqueIdentifier>{7a1a9ddf-3674-40ff-89a4-d63688e26b6d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup">
+      <UniqueIdentifier>{c9d22bfc-7e86-48b5-8cdd-b6b01745a70e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager">
+      <UniqueIdentifier>{03019c23-d13d-4842-9f7f-fa5b02fec63b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_corpse_manager">
+      <UniqueIdentifier>{9dade589-0b2b-464a-ba9b-543369fb6136}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_corpse_manager\member_corpse">
+      <UniqueIdentifier>{bf1a6d5e-0d34-4824-8ca0-997832f07b3e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_enemy_manager">
+      <UniqueIdentifier>{7a87f60e-20b7-468c-9607-b421eb07fbd4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_enemy_manager\member_enemy">
+      <UniqueIdentifier>{db62ca04-c954-42d1-963a-516d0b31bf6c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_explosive_manager">
+      <UniqueIdentifier>{d0134f0e-e9df-4e6f-9ee1-f5b701c93fb5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_explosive_manager\danger_explosive">
+      <UniqueIdentifier>{ee029e39-be54-4097-b1ca-8496f114a354}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_location_manager">
+      <UniqueIdentifier>{a4e4d1f6-6c91-46f1-9e28-2f5b5f58d81f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_location_manager\danger_location">
+      <UniqueIdentifier>{c49c4c30-6842-459e-8479-6a0fbec99872}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_location_manager\danger_cover_location">
+      <UniqueIdentifier>{a8faf708-c3a9-4dbe-9df8-35bd27cd2a31}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_location_manager\danger_object_location">
+      <UniqueIdentifier>{452fa896-8bdb-4c3e-8d65-674254f309d9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_member_manager">
+      <UniqueIdentifier>{9db12ad9-92af-4676-9988-c2e55a27eb68}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_member_manager\member_order">
+      <UniqueIdentifier>{0c59f070-d287-4de8-a08f-46fd498f908f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_memory_manager">
+      <UniqueIdentifier>{461ba1fa-3fdf-498b-a49b-fbc0cb73b465}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_planner">
+      <UniqueIdentifier>{ca5e68ae-561a-4baa-816b-2379fa41d5b5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_planner\actions">
+      <UniqueIdentifier>{6ce84896-cb8e-4019-ad95-2cf66018e5d9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AGroup\agent_manager\agent_planner\properties">
+      <UniqueIdentifier>{c0de4142-496d-40a0-8cde-96ecfda08a79}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife">
+      <UniqueIdentifier>{0f4ad5a3-497b-4a6a-b0af-a5a64bad8a2d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\interaction_manager">
+      <UniqueIdentifier>{b7cc99eb-c7bf-4733-a937-11a284dd5082}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\interaction_manager\communication_manager">
+      <UniqueIdentifier>{422007f7-9737-44a7-88cb-492d094843b7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\interaction_manager\combat_manager">
+      <UniqueIdentifier>{25f5bb8e-15a5-444b-a27e-b07400207e51}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base">
+      <UniqueIdentifier>{bd6777eb-8459-4f12-9c16-ec2bd54619dd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\header">
+      <UniqueIdentifier>{45f859e7-642e-4231-987d-36ae06ef0ec5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries">
+      <UniqueIdentifier>{1d112957-ea53-4186-af03-d1419fde255d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\abstract_registry">
+      <UniqueIdentifier>{391c528a-659d-404f-932f-2bce47a5b4c2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\graph_registry">
+      <UniqueIdentifier>{84bf9ab8-c1c2-48cd-9401-1dae87ba88fc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\graph_registry\level_registry">
+      <UniqueIdentifier>{9f875b3b-ecd0-4049-96ca-4d40d6a61ae0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\group_registry">
+      <UniqueIdentifier>{bf38f1d3-f6c9-4588-846b-0fdd35fe0611}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\object_registry">
+      <UniqueIdentifier>{8126eabc-1f2b-438f-92ab-f0a769b0f170}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\safe_map_iterator">
+      <UniqueIdentifier>{ad65812c-9e12-48d0-9d26-0e9afd32ba5b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\schedule_registry">
+      <UniqueIdentifier>{f097040d-9e21-4dc7-9d68-dc34a26e8870}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\smart_terrain_registry">
+      <UniqueIdentifier>{67334a84-25d7-4c60-9c2c-3ec521f7fc08}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\spawn_registry">
+      <UniqueIdentifier>{045353b9-b4b0-43f8-a413-f2e2ef514664}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\spawn_registry\header">
+      <UniqueIdentifier>{60f9d27a-bd27-408d-a197-39c5b8b4fc6a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\spawn_registry\server_entity_wrapper">
+      <UniqueIdentifier>{46435b3b-ec26-4c0e-b864-f519ab595a76}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registries\story_registry">
+      <UniqueIdentifier>{b7974df0-43f4-41e2-ab5e-aa765b59d3d0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\registry_container">
+      <UniqueIdentifier>{6838cc47-e048-4f8c-aa29-afbaa1dfb72b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\smart_terrain_task">
+      <UniqueIdentifier>{42710f2c-6b42-42a4-b106-bbf1b5bf62f8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\simulator_base\time_manager">
+      <UniqueIdentifier>{1de5d310-2562-4055-8e09-63dcb806231a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\update_manager">
+      <UniqueIdentifier>{bdaa7d95-49af-4af2-aff1-ee89603f1d2f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\update_manager\storage_manager">
+      <UniqueIdentifier>{a8c7e25e-b568-4d8f-97ac-e42cdbbbec50}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\update_manager\surge_manager">
+      <UniqueIdentifier>{9bd1c7ad-1947-495c-bfed-3a63fc8c2a4f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\update_manager\switch_manager">
+      <UniqueIdentifier>{9fc469cf-f7b3-4030-8133-47e27528c0b0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\saved_game_wrapper">
+      <UniqueIdentifier>{e5a8f445-ff8f-47e2-9e2d-c28806d52faf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\inventory_upgrade">
+      <UniqueIdentifier>{b1c7f8f2-d26f-4e02-9206-c3eaa8012b80}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\inventory_upgrade\upgrade_base">
+      <UniqueIdentifier>{0cc5040e-8e94-4e16-b214-43a17c98ea43}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\inventory_upgrade\upgrade_group">
+      <UniqueIdentifier>{0d8e333d-25ec-4408-8386-f54b5baf67b6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\inventory_upgrade\upgrade">
+      <UniqueIdentifier>{68073fe1-0309-4497-bffd-3359e2a4c3e0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\inventory_upgrade\upgrade_root">
+      <UniqueIdentifier>{d9604077-c969-4cd9-ba67-e33e267a9bfe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\inventory_upgrade\property">
+      <UniqueIdentifier>{7092cc50-b2a2-4ce5-bf90-94d54de7c964}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities">
+      <UniqueIdentifier>{42d7c321-717b-4ccf-9ddb-6d86271afce4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\anomalous_zone">
+      <UniqueIdentifier>{603bf45b-64dd-4f6e-a49b-919303ad818a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\creature_abstract">
+      <UniqueIdentifier>{4342056e-2d0f-41ae-a186-a2fae6335c12}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\dynamic_object">
+      <UniqueIdentifier>{bb458ad3-e100-4d2e-9700-f80e6e02593d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\human">
+      <UniqueIdentifier>{97be0a50-18c2-4c0e-bcdc-05827e58fdd8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\human\brain">
+      <UniqueIdentifier>{3069d79c-92e5-4639-b91c-37e3f34a0a4f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\human\object_handler">
+      <UniqueIdentifier>{315e8b6d-e417-443e-a77b-39e92739cc59}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\group_abstract">
+      <UniqueIdentifier>{eb78f1f3-f223-4349-b11b-2cc5c31b062c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\monster_abstract">
+      <UniqueIdentifier>{c07aa1d8-9773-412a-8e1c-51941ac870d8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\monster_abstract\brain">
+      <UniqueIdentifier>{2f45bda0-3182-4109-8663-e8ba8c915d35}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\monster_abstract\movement_manager">
+      <UniqueIdentifier>{bda9a3c9-f811-43e8-841c-fb496299debb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\monster_abstract\movement_manager\detail_path_manager">
+      <UniqueIdentifier>{c435ca80-18fc-4c4f-aa7f-e310dc082a28}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\monster_abstract\movement_manager\patrol_path_manager">
+      <UniqueIdentifier>{2ae122ae-0325-40f9-9437-7658d3644e4d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\monster_abstract\movement_manager\movement_manager_holder">
+      <UniqueIdentifier>{01d504c3-86bf-498e-9558-7c4e80d609ba}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\object">
+      <UniqueIdentifier>{b943f365-8367-476c-a2a4-c12e475bc5d1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\online_offline_group">
+      <UniqueIdentifier>{d2a7c30d-9ae4-46b7-b7fb-0116e1f03376}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\online_offline_group\brain">
+      <UniqueIdentifier>{472624a2-01fa-415a-af5f-61c21d999df0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\smart_zone">
+      <UniqueIdentifier>{401e1b31-176d-4f94-a8b3-e4e1f489be3f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\trader">
+      <UniqueIdentifier>{93936f8e-52ac-4726-a4f7-177476cdf573}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ALife\server_entities\trader_abstract">
+      <UniqueIdentifier>{e853edce-1d54-438d-9b67-3e024392edb9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters">
+      <UniqueIdentifier>{305a37b0-4bd4-423d-8104-e0aced5820aa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common">
+      <UniqueIdentifier>{a386757d-8ee4-4ac4-a6ad-21bdcad66794}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\custom">
+      <UniqueIdentifier>{97670dd3-b0be-41dd-b57e-c51799e73bf9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\miscellaneous">
+      <UniqueIdentifier>{a4a1998f-2a5d-4ee6-a13d-b93ff2b2f83d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script">
+      <UniqueIdentifier>{ffbf7bcf-e4ac-4210-aa58-b0b57a325d4b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\script_binder">
+      <UniqueIdentifier>{3e181284-bf90-4b44-818e-c2d1c83e9c1f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\script_entity">
+      <UniqueIdentifier>{440f9c48-598f-4f31-903c-dfd69cb43fcf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\script_object">
+      <UniqueIdentifier>{cc6bbc3d-8335-46c2-a777-43874d3e7375}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\base monster">
+      <UniqueIdentifier>{cd542964-a88c-4d41-85bb-f549766ac70f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components">
+      <UniqueIdentifier>{3c35eeec-8bc5-4153-8485-122dfcdb7e25}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Bones">
+      <UniqueIdentifier>{5d9be1ce-9227-4dc1-9b5a-7c001c238fc6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Memory">
+      <UniqueIdentifier>{98a9655a-8675-4923-8fdc-61578513c8d4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\State">
+      <UniqueIdentifier>{941bb91d-8895-4d0a-ae79-8e38b2faebf9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Squad">
+      <UniqueIdentifier>{f84cf9f2-8fa9-4bc5-87df-598acc304698}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Squad\Squad Manager">
+      <UniqueIdentifier>{63b44d30-9282-4225-9ed2-3310eaec9e8c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Motion Stats">
+      <UniqueIdentifier>{db4513a6-869d-4ffe-b75d-aedb05eeaa4c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Cover">
+      <UniqueIdentifier>{8ab16d67-e24f-406f-a24a-0f11695876de}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Abilities">
+      <UniqueIdentifier>{969a2732-0d8f-4763-b653-161ae00bb6db}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Abilities\Telekinesis">
+      <UniqueIdentifier>{ea23f660-b771-4499-9a1e-df87ccf875e1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Abilities\Invisibility">
+      <UniqueIdentifier>{576ffa66-79e9-4909-98c8-21b130f98a7e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Abilities\Scan">
+      <UniqueIdentifier>{8c679b1b-a041-4795-82c5-e9e531a5de29}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Abilities\Controlled">
+      <UniqueIdentifier>{f52e3274-9d39-4fb0-8d29-9708992cdbb8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Abilities\Psy Aura">
+      <UniqueIdentifier>{fbae7c90-76e6-4807-9368-9ab5f6e6f4a8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Abilities\Energy Holder">
+      <UniqueIdentifier>{2eb07d7c-d98d-4848-ac94-0e252d74ffa4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Event Handler">
+      <UniqueIdentifier>{f373603b-f0c7-4dd2-8894-9956fa2e3464}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Event Handler\Custom Events">
+      <UniqueIdentifier>{ff20543b-72dd-4ba5-be12-73b0112cf835}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Debug">
+      <UniqueIdentifier>{f0478da3-6b72-47d4-8b85-076091e89840}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Melee Checker">
+      <UniqueIdentifier>{002128a0-5d5d-4b7d-85ac-fe2f77c65b4c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Morale">
+      <UniqueIdentifier>{9618bcfd-686c-4d05-8087-406056e6a16e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Actor Controller">
+      <UniqueIdentifier>{5bcf6488-7eee-4fed-be51-ef5d4d888f66}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager">
+      <UniqueIdentifier>{5174c7c1-3c8e-4785-b7e4-dfe4b42496dc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Pure Coms">
+      <UniqueIdentifier>{aff166ab-fc39-4c7a-8ed8-135a7cc39b9b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Pure Coms\Animation">
+      <UniqueIdentifier>{d0067920-b90f-4549-8ac0-2641266d94dd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Pure Coms\Direction">
+      <UniqueIdentifier>{64a7d59b-ec7a-4815-bca0-aea6af8205ab}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Pure Coms\Path Builder">
+      <UniqueIdentifier>{aeb23c3b-8b98-459d-8a60-623905dc96f6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Pure Coms\Movement">
+      <UniqueIdentifier>{70f34b9e-6eea-45eb-aae3-01de8faa3ef4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Base Controllers">
+      <UniqueIdentifier>{95079c72-2931-40a1-a250-51403cda8d74}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Base Controllers\Animation">
+      <UniqueIdentifier>{54a393ad-cb97-4cf4-a6aa-131588d3cac4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Base Controllers\Direction">
+      <UniqueIdentifier>{9e014066-906b-4d55-9f93-750dc911371e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Base Controllers\Path Builder">
+      <UniqueIdentifier>{e1f5ed0c-8d5b-4b05-9ad8-905fda041dda}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Base Controllers\Movement">
+      <UniqueIdentifier>{186e74df-265f-447c-b98f-c6732814f6ea}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Custom">
+      <UniqueIdentifier>{5a4efe0c-d0f8-4f06-a920-0344b1e521f6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Custom\Sequencer">
+      <UniqueIdentifier>{dfda03e2-a58e-4dee-abe7-eada9ced8c20}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Custom\Rotation Jump">
+      <UniqueIdentifier>{d81406f9-f474-4629-9e99-b2a173d02d71}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Custom\Triple Animation">
+      <UniqueIdentifier>{7bdfd858-4686-4e2d-a987-bd1368988cfc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Custom\Jump">
+      <UniqueIdentifier>{cc1b2fd4-bb63-4425-9213-dc01707a59f0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Custom\Run Attack">
+      <UniqueIdentifier>{1dae7974-38fa-477b-a9e9-54757819555f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Custom\Threaten">
+      <UniqueIdentifier>{9b6c6cb2-4054-48d5-9f53-5cfcd15d599c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Control Manager\Custom\CriticalWound">
+      <UniqueIdentifier>{c78dd4f0-464c-4f66-8f17-335555365336}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Anomaly Detector">
+      <UniqueIdentifier>{3978cbff-efdd-4a17-8fd8-0fe07dbdaa8a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Cover Manager">
+      <UniqueIdentifier>{491db9fc-4874-4951-8efe-4b3f965b8258}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\components\Home">
+      <UniqueIdentifier>{62c317ab-a56a-4c9b-a786-def1bcd13072}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\steering behaviours">
+      <UniqueIdentifier>{612f3020-f142-4b6c-ab30-417551fbd6fa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\steering behaviours\components">
+      <UniqueIdentifier>{2ddfc150-fdb7-4bdb-9e43-24f0513ae6fc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\steering behaviours\components\cohesion">
+      <UniqueIdentifier>{95a7f4bd-3e8c-4a4f-a6d6-1b6eb59f25ac}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\steering behaviours\components\alignment">
+      <UniqueIdentifier>{eaee9451-d271-4f4c-91a1-1c9fd2e488c5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\steering behaviours\components\separation">
+      <UniqueIdentifier>{7c7a00d6-4879-4e18-8f52-9632f08273ce}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\steering behaviours\base">
+      <UniqueIdentifier>{301a34c3-2fb1-49c0-92e7-18396274dbc9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\steering behaviours\manager">
+      <UniqueIdentifier>{401e2db1-0faf-4038-9320-2206154859b7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\trajectories">
+      <UniqueIdentifier>{ffafbef6-6ee7-4ebd-b54a-da4336e92842}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters">
+      <UniqueIdentifier>{1fb2ae47-39c4-433b-b703-95d06e749abe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Bloodsucker">
+      <UniqueIdentifier>{89859c80-ad55-41fc-90b8-439873439207}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Bloodsucker\Vampire State">
+      <UniqueIdentifier>{a6a4a630-af29-4f0b-86f3-4bf62ea543fd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Bloodsucker\Script">
+      <UniqueIdentifier>{af0df016-fe59-4327-9a9d-e417d4af0c44}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Bloodsucker\Predator State">
+      <UniqueIdentifier>{3d4207a8-633d-4381-95ef-9a183eb50c51}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Bloodsucker\Attack">
+      <UniqueIdentifier>{e5e2f253-a15b-4128-bf1e-bf27adada4a4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Bloodsucker\Capture Jump">
+      <UniqueIdentifier>{dda98da5-18b4-45d3-972b-547c0393f434}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Bloodsucker\Alien Feature">
+      <UniqueIdentifier>{604a599d-c0d7-492a-881a-c41ab3d3d4ea}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Boar">
+      <UniqueIdentifier>{3387d1c8-3ee8-45eb-ba7f-b35828a7e6f0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Boar\Script">
+      <UniqueIdentifier>{dff8421b-dd37-42d4-abdb-331c4d8ccde8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Crow">
+      <UniqueIdentifier>{8d9832b3-4c8e-438c-99b8-9aabc897e434}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Burer">
+      <UniqueIdentifier>{a080b1ff-f8ba-40ab-b768-14b7b69a492a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Burer\Script">
+      <UniqueIdentifier>{a1c33576-7289-4432-a4e1-133e01fa1002}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Burer\Attack">
+      <UniqueIdentifier>{e6eee127-3b42-48e4-b2f7-cbbe436fb15c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Burer\Fast Gravi">
+      <UniqueIdentifier>{e89d6463-92a7-462e-b7f7-5b486742861e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Chimera">
+      <UniqueIdentifier>{f9fd2d0f-ce89-4e64-aece-aa59b8e72bb1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Chimera\state threaten">
+      <UniqueIdentifier>{c027367f-d461-4d2e-894e-0f37610af676}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Chimera\state hunting">
+      <UniqueIdentifier>{b09f7bd7-7bf3-4cc0-9a9a-9bbe02d7b131}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Chimera\Script">
+      <UniqueIdentifier>{7ce139e5-922b-4707-a14e-2ad0f6111065}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Chimera\states">
+      <UniqueIdentifier>{8d6475ec-c185-4ebb-9ba6-e7dc1644c4c1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\PseudoGigant">
+      <UniqueIdentifier>{b63ebd95-6d63-4b98-b8a8-3587f5b69dbb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\PseudoGigant\Script">
+      <UniqueIdentifier>{5b01e2b7-a8e3-4a2f-a2d2-ff8aea5c1ab6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Poltergeist">
+      <UniqueIdentifier>{af50598f-db2f-4151-89b1-2100e2843894}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Poltergeist\Script">
+      <UniqueIdentifier>{f4c16e04-474d-48bd-a5dd-ff38c23bd983}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Poltergeist\Hidden Attack">
+      <UniqueIdentifier>{a3358a33-880e-445e-9cba-5d7cb4b9db0b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Poltergeist\Abilities">
+      <UniqueIdentifier>{c8cffc20-4b96-4e96-9eff-868c6f8f7d72}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Zombie">
+      <UniqueIdentifier>{41d0fd68-dd22-4f31-a236-6ebf5692cc9b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Zombie\States">
+      <UniqueIdentifier>{605f44ab-fee0-4b26-8f58-d060220aee01}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Zombie\Script">
+      <UniqueIdentifier>{244a386c-4d98-4ba4-885f-8f0a4500b840}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Fracture">
+      <UniqueIdentifier>{cb1396d7-300f-4791-9af9-35832b3c9a29}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Fracture\Script">
+      <UniqueIdentifier>{095ae7ca-0958-4fea-8ce4-d17af1ae3071}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Snork">
+      <UniqueIdentifier>{2e095859-ac71-4e4c-9bf3-145fd573f5be}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Snork\Special Jump">
+      <UniqueIdentifier>{d2509b5f-b039-4403-92a7-7a4eeec145e1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Snork\Script">
+      <UniqueIdentifier>{ea415953-eef0-45d5-9e96-bae5dfacd211}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Controller">
+      <UniqueIdentifier>{a8e904bd-f2f1-44e0-9dbc-a14e7abc3259}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Controller\State Attack">
+      <UniqueIdentifier>{af574b30-444e-4a0d-98c5-b764d643e0f3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Controller\State Attack\Cover">
+      <UniqueIdentifier>{6ca132a5-e9a7-4b68-81b9-5204f74333fd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Controller\State Panic">
+      <UniqueIdentifier>{e41bda80-172b-437a-8b53-b3d4372e051c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Controller\Script">
+      <UniqueIdentifier>{84ec8a17-d892-4fd8-a7a4-6fe08561866d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Controller\Base Controllers">
+      <UniqueIdentifier>{79b7e79a-4821-496a-b720-5fbca0c66bbc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Controller\Base Controllers\Animation">
+      <UniqueIdentifier>{ad35a145-bbf3-4ea6-a5e2-04d033c95a40}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Controller\Base Controllers\Direction">
+      <UniqueIdentifier>{b1e730b8-c916-4e27-8f3f-43e8f661aef4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Controller\Psy hit">
+      <UniqueIdentifier>{2601984b-2b76-4fbc-840c-37d0380e1b12}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Cat">
+      <UniqueIdentifier>{200fdbb6-d390-41b7-8fe4-22b76ee26ca7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Cat\Script">
+      <UniqueIdentifier>{4eed3f99-7eb7-4136-b1f0-89f6b67c25c4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Tushkano">
+      <UniqueIdentifier>{ddbaffbb-4f31-4039-a3b1-7afe67efb599}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Tushkano\Script">
+      <UniqueIdentifier>{840acde8-9b2e-4498-8e8f-d0ef887a0a39}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Phantom">
+      <UniqueIdentifier>{315e4277-bd93-4c2e-9bb0-28c92c60c62a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Dog">
+      <UniqueIdentifier>{4f457e84-16eb-4a6e-a8bc-811232138897}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Dog\Script">
+      <UniqueIdentifier>{d959227f-d88e-467a-8f7b-b2265ac24d51}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Rats">
+      <UniqueIdentifier>{bf23cb55-2e31-4894-863b-9b3787d8c271}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Rats\state_manager">
+      <UniqueIdentifier>{12bea024-475c-4b4f-88a7-3e7cd124ac73}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Rats\states">
+      <UniqueIdentifier>{c762ef14-b0dc-4e21-aa6a-451506e94b7c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Rats\states\base">
+      <UniqueIdentifier>{f6c2d319-c3c0-4bb8-8baf-176a05084605}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Flesh">
+      <UniqueIdentifier>{ad755256-b131-4fe9-870b-ef6197ea7c51}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\Flesh\Script">
+      <UniqueIdentifier>{1c91e7d0-60e8-4a52-b22f-c245039222e9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\PseudoDog">
+      <UniqueIdentifier>{f896fd15-e4cb-4764-a644-418f1321d29f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\PseudoDog\Script">
+      <UniqueIdentifier>{c66b49dd-5107-4081-834d-24fe22bdf15e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\DogPsy">
+      <UniqueIdentifier>{f84a39d3-5b90-46da-bfb2-61ac45bfd8c0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\monsters\DogPsy\Psy Attack Hide">
+      <UniqueIdentifier>{f6589916-a9f0-4986-b5bd-aaccf21dab9c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans">
+      <UniqueIdentifier>{3a6795c1-bf4b-4152-a160-ba220a519fa6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\trader">
+      <UniqueIdentifier>{7076ad4e-87b3-4b6d-a02a-faec4166b2a9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker">
+      <UniqueIdentifier>{93e4390d-9937-4407-8a4c-0a4348782ec0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\AnimationManager">
+      <UniqueIdentifier>{44a55110-998c-4061-bf67-4679873b5226}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\AnimationManager\data_storage">
+      <UniqueIdentifier>{a55cc3af-374c-4a2a-9903-40a40c8482b8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\AnimationManager\data_storage\data">
+      <UniqueIdentifier>{9cd46b95-e4ba-4040-b5a5-0363c92b9693}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\AnimationManager\names">
+      <UniqueIdentifier>{b465c2a3-ca7e-44b9-9080-17a68ad6077b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\AnimationManager\pair">
+      <UniqueIdentifier>{1d6b0add-f84b-4271-a256-81b4df2a09ec}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\AnimationManager\script">
+      <UniqueIdentifier>{fbff3c28-f8c9-47ef-819f-63428cf785c7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\AnimationManager\state">
+      <UniqueIdentifier>{7c19871f-3290-46ea-aab1-330323fe1494}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\CoverEvaluators">
+      <UniqueIdentifier>{8f03a94f-421e-40ef-aeff-72e0bf716694}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker">
+      <UniqueIdentifier>{51c3922a-ee99-46e7-8ff0-7897db9aafc4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions">
+      <UniqueIdentifier>{4f88a29c-12b1-4b67-9bd1-06c3cc31e6ef}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\alife">
+      <UniqueIdentifier>{4897f373-cc15-4510-9d4b-5a9372c766cf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\alife\actions">
+      <UniqueIdentifier>{e3ee8990-8aa3-45f6-8a69-8fff5abef58f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\alife\task_actions">
+      <UniqueIdentifier>{b0fc9c82-3447-4c60-8b8d-648862f79457}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\anomaly">
+      <UniqueIdentifier>{10469441-b3c5-47cc-ac15-26c270921aa1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\anomaly\actions">
+      <UniqueIdentifier>{eb09b441-b92f-4e11-b263-bd298f1127a8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\combat">
+      <UniqueIdentifier>{ba927361-2618-4c95-b732-ea26fc7514d6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\combat\actions">
+      <UniqueIdentifier>{02366d86-a7d0-422d-8275-fd79bbbc4063}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\combat\actions\base">
+      <UniqueIdentifier>{3bb096f3-28be-46b4-827a-6d3759ed1d54}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\combat\kill_wounded">
+      <UniqueIdentifier>{008fd09c-d15a-426c-9362-3a46ee820a60}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\combat\kill_wounded\actions">
+      <UniqueIdentifier>{e4507edc-3ea3-4d31-9eba-9127de881069}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\combat\get_distance">
+      <UniqueIdentifier>{5ee89289-ba90-4087-8260-0fb96886353a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\combat\get_distance\actions">
+      <UniqueIdentifier>{d057ca5b-0fb3-44c9-ba40-ea5edd9747d4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\combat\low_cover_planner">
+      <UniqueIdentifier>{cacc5952-8a42-4321-a606-302b7d290ddf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\combat\low_cover_planner\actions">
+      <UniqueIdentifier>{7aadf8c8-079c-42bd-b915-36d1a572dba6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\combat\search_planner">
+      <UniqueIdentifier>{892f8ec2-b38f-48c1-a756-87b4701a728b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\combat\search_planner\actions">
+      <UniqueIdentifier>{504d7690-88c8-4985-a956-b89235912990}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\danger">
+      <UniqueIdentifier>{aa125b2d-da86-40d4-9d17-ca9a4d5c8e37}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\danger\actions">
+      <UniqueIdentifier>{20295534-29af-4137-80f5-7002d2340f1e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\danger\actions\unknown">
+      <UniqueIdentifier>{adb6cc41-572a-4b44-a241-b661d90b8fa9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\danger\actions\unknown\actions">
+      <UniqueIdentifier>{21ba7a50-5e7b-4bbe-8a01-16955babd7e6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\danger\actions\in_direction">
+      <UniqueIdentifier>{7d824736-44a3-4f07-a8d7-fbd6f69bada4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\danger\actions\in_direction\actions">
+      <UniqueIdentifier>{c3c2de3f-ab49-4d43-997a-a5c3e3eff156}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\danger\actions\grenade">
+      <UniqueIdentifier>{0f188f6e-3c7a-4357-80a0-50d367bb4fe6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\danger\actions\grenade\actions">
+      <UniqueIdentifier>{02904510-1024-4ad6-b385-444e69e3ea38}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\danger\actions\by_sound">
+      <UniqueIdentifier>{7445bc75-c6e5-49b9-aa80-1cac74b8b189}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\danger\actions\by_sound\actions">
+      <UniqueIdentifier>{6432cedf-d3e6-4e2a-93fa-19177e5656e2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\danger\properties">
+      <UniqueIdentifier>{54f736ee-df19-4126-a296-69e5b850adcb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\death">
+      <UniqueIdentifier>{92727313-5c52-4b79-b835-669633bb5df9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\actions\death\actions">
+      <UniqueIdentifier>{fcc419f8-f60d-448e-8023-82404e3c94f9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\DecisionMaker\properties">
+      <UniqueIdentifier>{9d9141cd-4469-4da6-a536-d694b7ebcd48}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager">
+      <UniqueIdentifier>{38e24e14-5bf4-4cab-8799-e3014c83970c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\obstacles">
+      <UniqueIdentifier>{c675a52b-3398-42b0-a63c-411eb13cc55c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\obstacles\obstacle_avoiders">
+      <UniqueIdentifier>{a36a6914-761d-4598-8258-0e102bd6ec0a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\obstacles\obstacle_avoiders\dynamic">
+      <UniqueIdentifier>{c3c7eb12-8d92-4489-b652-0c12fc2aa2bc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\obstacles\obstacle_avoiders\static">
+      <UniqueIdentifier>{77852765-48c4-4315-85f4-fff108f49f38}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\obstacles\restricted_object_obstacle">
+      <UniqueIdentifier>{320ff1e3-ebd8-4916-893c-7b7e68939604}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\obstacles\refreshable_obstacles_query">
+      <UniqueIdentifier>{a965c51e-5627-4f82-be8f-0b60879fb1a5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\smart_covers">
+      <UniqueIdentifier>{bd9ec693-685c-4277-adb5-a1acf8f12152}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\smart_covers\animation_selector">
+      <UniqueIdentifier>{98664d9f-6d61-4928-bfc1-df6766b98cea}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\smart_covers\animation_selector\animation_planner">
+      <UniqueIdentifier>{429252e7-8034-4e4b-9c7c-62f616f35a97}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\smart_covers\animation_selector\animation_planner\cover_actions">
+      <UniqueIdentifier>{070e048e-26ad-438d-8fe5-d94bc480ee06}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\smart_covers\animation_selector\animation_planner\loophole_actions">
+      <UniqueIdentifier>{b980bf02-d192-45e4-8b36-e0436129085f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\smart_covers\animation_selector\animation_planner\target_selector">
+      <UniqueIdentifier>{a1a74e70-f62b-4bbe-9f1e-56747277fc8e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\smart_covers\animation_selector\animation_planner\target_selector\target_provider">
+      <UniqueIdentifier>{61f6149f-4f53-43e5-8e15-e016f901f34c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\smart_covers\animation_selector\animation_planner\target_selector\default_behaviour">
+      <UniqueIdentifier>{49a648e0-c085-4d9f-843c-315b2d0bf3b2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\smart_covers\evaluators">
+      <UniqueIdentifier>{ca6927dd-c503-49dc-94ea-6092d069b5fa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\base">
+      <UniqueIdentifier>{dce1708f-b859-42ae-907b-bc771d1ebcb3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\base\velocity_collection">
+      <UniqueIdentifier>{0c82428a-a0a0-40cb-b16c-237fb5bd2aa2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\base\velocity_holder">
+      <UniqueIdentifier>{074601d3-02e1-4bf6-9552-8f8022057df3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\base\restriction">
+      <UniqueIdentifier>{c9d77c45-7f15-43aa-8b24-6eb9e882f64a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\MovementManager\base\params">
+      <UniqueIdentifier>{61facccb-f7ab-41d7-80f1-ff97269dae58}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\SoundDataVisitor">
+      <UniqueIdentifier>{97e844a9-174a-4c04-b0f9-8d2b2b920a9f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\SoundUserData">
+      <UniqueIdentifier>{ae08954b-6d15-44fb-bcfd-77ea1cfa2698}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\humans\stalker\Miscellaneous">
+      <UniqueIdentifier>{1b70f0e7-f20a-4a9a-af1d-89f1d060214a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation">
+      <UniqueIdentifier>{2aecd674-f3e2-4e3e-ba4e-c918516d2bd8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\GameGraph">
+      <UniqueIdentifier>{f2b410ba-d81c-48fa-b862-cfe2c473e724}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\GameLevelCrossTable">
+      <UniqueIdentifier>{ce4e0809-7dca-41d9-8971-495071b25e26}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\GraphAbstract">
+      <UniqueIdentifier>{e95f4619-c8e9-4188-8a58-ef421892ce1b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\GraphAbstract\GraphEdge">
+      <UniqueIdentifier>{33ebbf43-d09e-4a8f-b3aa-85c253c2fa03}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\GraphAbstract\GraphVertex">
+      <UniqueIdentifier>{5ff96cd3-ad86-45ce-9b45-024b73cb7043}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\LevelGraph">
+      <UniqueIdentifier>{2f4464ba-6ad8-4b97-b9c7-a1ca8b8bdc77}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\ObjectLocation">
+      <UniqueIdentifier>{b2b43ff2-c913-428c-accb-30a95093bd65}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding">
+      <UniqueIdentifier>{8d11e01e-8568-4c66-acf8-490b3195cd73}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\Algorithms">
+      <UniqueIdentifier>{0631be18-9508-40b6-9013-5bb4e86ffeaa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\Algorithms\A%2a">
+      <UniqueIdentifier>{2f0f7dd8-d637-467b-9aa7-da90f25c6015}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\Algorithms\Dijkstra">
+      <UniqueIdentifier>{85bbf5f7-6e44-4cf1-9939-85b1a5469e19}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages">
+      <UniqueIdentifier>{ee35322f-db75-4601-b910-249cde14cc5a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\constructors">
+      <UniqueIdentifier>{b72cdeca-4829-4407-af66-9615542b9fe8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\constructors\builder_allocator">
+      <UniqueIdentifier>{76067fb4-d431-4250-88c0-9d68272f132d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\constructors\manager_builder_allocator">
+      <UniqueIdentifier>{b0d560f8-67b0-46df-bfaa-99c2178dcd0b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\path_builders">
+      <UniqueIdentifier>{0982b0a6-315c-4da7-b0b3-e6e5f9c11eba}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\path_builders\edge_path">
+      <UniqueIdentifier>{e558f6dd-aa2c-4d95-b297-206a05ed1e86}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\path_builders\vertex_path">
+      <UniqueIdentifier>{6d4bf8c4-fad4-46ef-ad89-3ea3dc2da896}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\priority_queues">
+      <UniqueIdentifier>{f340ab8c-364d-4936-abd0-86288ca3a2e1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\priority_queues\binary_heap">
+      <UniqueIdentifier>{23fdf309-4262-4f54-83d3-25bd645fffb4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\priority_queues\bucket_list">
+      <UniqueIdentifier>{a578572d-704d-4562-b9e0-e83cb371a95f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\vertex_allocators">
+      <UniqueIdentifier>{208d2b83-b05d-436b-a1f6-3a1b71262cc9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\vertex_allocators\fixed">
+      <UniqueIdentifier>{83a869fe-a9a6-470d-97bc-97883664d8fd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\vertex_managers">
+      <UniqueIdentifier>{0884f70a-29b9-4a03-89ff-66f72d0904ac}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\vertex_managers\fixed">
+      <UniqueIdentifier>{45bb38a5-f433-49ec-949c-15331dbe1024}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\DataStorages\vertex_managers\hash_fixed">
+      <UniqueIdentifier>{be249c0a-e8cf-4bf3-82d1-7d6cfd01ad9d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\GraphEngine">
+      <UniqueIdentifier>{712f21a1-c1a6-4066-980d-139cb5ec3d41}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\PathManagers">
+      <UniqueIdentifier>{a217ece8-89d2-4ff6-afd9-2aaa59106f97}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\PathManagers\path_manager_game">
+      <UniqueIdentifier>{02581922-d3d1-4e76-9375-bf7f6ffbb86d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\PathManagers\path_manager_game\level">
+      <UniqueIdentifier>{7ad5cff9-2303-4d9c-ae6a-0b0fdc07acc1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\PathManagers\path_manager_game\vertex">
+      <UniqueIdentifier>{cb171ece-2b1e-4b16-aea9-a0f4d7fc07c9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\PathManagers\path_manager_generic">
+      <UniqueIdentifier>{6727d68d-0e6e-442d-831a-604afa0e9956}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\PathManagers\path_manager_level">
+      <UniqueIdentifier>{117b7602-6b03-47c5-b18d-d9ca4dc39a7b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\PathManagers\path_manager_level\nearest_vertex">
+      <UniqueIdentifier>{6c4fcfbd-e6e5-45d5-9e23-0156e01dcc6f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\PathManagers\path_manager_level\flooder">
+      <UniqueIdentifier>{a54c14f4-3e60-4246-952e-9de400b57335}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\PathManagers\path_manager_level\straight_line">
+      <UniqueIdentifier>{47e7fd18-6830-4278-9b23-35b5fd54ddbf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\PathManagers\path_manager_params">
+      <UniqueIdentifier>{b2bcaf14-586c-4a24-8765-fc6c83b77233}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\Pathfinding\PathManagers\path_manager_solver">
+      <UniqueIdentifier>{bebdaa35-9d2c-48be-90d5-1d8ea031ed10}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\PatrolPaths">
+      <UniqueIdentifier>{e2f41b61-5586-4f27-9025-9ace9d459bb1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\PatrolPaths\PatrolPath">
+      <UniqueIdentifier>{c0ab9432-db9a-43fb-a058-c9b14d31180d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\PatrolPaths\PatrolPathStorage">
+      <UniqueIdentifier>{32a8134a-7ddd-4b95-84cc-f8015312e395}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ANavigation\PatrolPaths\PatrolPoint">
+      <UniqueIdentifier>{91c62445-f1c7-433c-8357-601bb648a304}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript">
+      <UniqueIdentifier>{a9b8b2df-53f4-44fe-9d2e-53437a47ef06}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses">
+      <UniqueIdentifier>{ab1b2732-d901-4a34-ba14-eaf215d9bd6d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions">
+      <UniqueIdentifier>{3d8308a5-ac58-4e08-a1cc-ca0e763e9921}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\script_abstract_action">
+      <UniqueIdentifier>{251d0077-fc45-4557-a17b-b1cba147d3bb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\script_movement_action">
+      <UniqueIdentifier>{3bfcef06-2951-4770-b8f8-7da939e04774}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\script_movement_action\patrol_path_params">
+      <UniqueIdentifier>{e68bd57b-aa85-46ce-bfd2-d782d0a85fd9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\script_watch_action">
+      <UniqueIdentifier>{48d2be0b-ebb9-4323-9345-3f4a70275b99}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\acript_animation_action">
+      <UniqueIdentifier>{7d83d161-06b3-456b-bb50-be44b9915168}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\script_sound_action">
+      <UniqueIdentifier>{1be6d4c4-0e6e-4e1a-b1c7-7ed4e68384fa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\script_particle_action">
+      <UniqueIdentifier>{5c04816f-e505-4d16-b184-c819c17099d7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\script_particle_action\particle_params">
+      <UniqueIdentifier>{47d0f137-4162-45a8-9763-802300c2410d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\script_object_action">
+      <UniqueIdentifier>{5dec8d37-3b81-41a4-b7bf-7bdd51b628a8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\script_action_condition">
+      <UniqueIdentifier>{16a51dd6-f34f-4255-95e2-d0958dca3e6b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\script_monster_action">
+      <UniqueIdentifier>{bd3b4c03-1af1-4699-bce3-1dab9065ec0e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptActions\script_entity_action">
+      <UniqueIdentifier>{9e2b3df0-6d4d-4c6f-8a59-6ea0efd53476}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptBinderObject">
+      <UniqueIdentifier>{cdc0951f-8ea4-4a9e-8526-182827c7b4a6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptBinderObject\ScriptBinderObjectWrapper">
+      <UniqueIdentifier>{d17ebdb5-acc6-40ae-b7cb-b505ec822251}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptEffector">
+      <UniqueIdentifier>{76509089-e819-4d12-958e-e740b52eb252}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptEffector\ScriptEffectorWrapper">
+      <UniqueIdentifier>{5c85889d-fcd3-473d-9eb5-47278d9718fb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptFlags">
+      <UniqueIdentifier>{dc9f3113-e23a-4976-b485-0aba1ade4607}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptFmatrix">
+      <UniqueIdentifier>{3aa7c66b-8e42-4282-af28-2c736fd8ad6a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptFvector">
+      <UniqueIdentifier>{086230ee-3b5b-4ce0-824e-c6ce63f31cb2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptGameObject">
+      <UniqueIdentifier>{92dc1221-f98f-4173-892d-018be5f4ec47}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptHit">
+      <UniqueIdentifier>{b849c527-cb4b-4bb2-b5fc-b589ee6dcfc9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptIniFile">
+      <UniqueIdentifier>{fba7eff3-e4f4-4af7-af9c-60606e4cc739}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptIniFile\ScriptTokenList">
+      <UniqueIdentifier>{495a8b4a-47ea-4f9d-81a6-0011827bad9d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptIniFile\ScriptRTokenList">
+      <UniqueIdentifier>{46422650-536c-4c7b-8b32-74c6dff4cf2f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptMonsterHitInfo">
+      <UniqueIdentifier>{8141ae6c-a732-4695-b119-4b7a6b786ce9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptNetPacket">
+      <UniqueIdentifier>{809e504b-a9aa-414d-9340-974bf409d048}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptRenderDevice">
+      <UniqueIdentifier>{078eb1f4-96f0-4ca0-b580-a649b7d8ecdb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptSoundInfo">
+      <UniqueIdentifier>{0db7dc10-e1ad-4a8d-a173-8831662a2508}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptSoundType">
+      <UniqueIdentifier>{246a7da2-6c1f-4bb8-9583-284e9ab2bf5a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\UI">
+      <UniqueIdentifier>{b08ee833-e28c-4687-b6b5-0907349836ab}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\KeyBindings">
+      <UniqueIdentifier>{2be23629-93c7-4bb0-997f-7c681c5a0f1d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptReader">
+      <UniqueIdentifier>{cfbfa419-543b-48f1-80e6-2082a84c6ecf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptFS">
+      <UniqueIdentifier>{ef5a4212-e157-425e-b5d5-87e90474397d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\Console">
+      <UniqueIdentifier>{e256099f-7f69-49b3-900a-087c7fde9645}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\BaseClientClasses">
+      <UniqueIdentifier>{9902c3e6-be5f-44b6-b539-cca3243e5e07}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptCallbackEx">
+      <UniqueIdentifier>{c030db0f-190c-4415-a003-bf69d21c43cc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptLAnim">
+      <UniqueIdentifier>{0b7f91ec-8546-438f-9598-b42cc9f39725}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptFcolor">
+      <UniqueIdentifier>{735fa48e-0a26-4a28-993c-166e47ac4a79}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptParticles">
+      <UniqueIdentifier>{968203fb-dd38-4db7-9ccd-db4d09ac9b72}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptClasses\ScriptSound">
+      <UniqueIdentifier>{7461340c-f13a-4ba4-a432-e8aeca7393cf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptDebugger">
+      <UniqueIdentifier>{a1df39ed-f84f-4b5e-9aa6-7310378e3614}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptEngine">
+      <UniqueIdentifier>{c64d88d0-2cc0-440e-bed2-367ebd29671c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptProcess">
+      <UniqueIdentifier>{2bfb6ae4-1fec-4054-bc45-5a6ed56f73ed}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptStorage">
+      <UniqueIdentifier>{8ce0ad22-cee7-419e-b54c-65da67769b68}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptThread">
+      <UniqueIdentifier>{0126fd57-f558-4910-ad5e-f63e20a12940}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\ScriptThread\ScriptStackTracker">
+      <UniqueIdentifier>{2f517721-a4fd-4e92-aee2-7c703d7b2abe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AScript\lua_studio">
+      <UniqueIdentifier>{91189d3e-089f-4e5c-a9f4-b41fb1136e69}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ASound">
+      <UniqueIdentifier>{a568c889-96b8-41c7-9bee-0d4f24d1a47e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\ASpace">
+      <UniqueIdentifier>{9e0e161a-5613-4e3b-b067-0abcc52684ad}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core">
+      <UniqueIdentifier>{ec297d0e-d910-4791-b70d-324efb19ea10}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client">
+      <UniqueIdentifier>{4ceaa070-d3df-4e17-9c2e-b1c60f35a1dc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Cameras">
+      <UniqueIdentifier>{aa99f248-c701-4bae-bacf-0db2daa03139}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Effectors">
+      <UniqueIdentifier>{dfc00bce-2ce7-42ce-b2cb-b0799c6658b6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Effectors\Actor">
+      <UniqueIdentifier>{12f342da-66e7-4344-8f92-c9d581ee17f1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Effectors\Postprocess">
+      <UniqueIdentifier>{e7370ca0-28cb-4b0c-9cee-2056fb4635c8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Effectors\Weapon">
+      <UniqueIdentifier>{1fb0da03-ce87-4aa9-a055-e63353e4ac1a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Effects">
+      <UniqueIdentifier>{7c23e466-f166-402d-a64b-3692a45cf869}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Effects\Core">
+      <UniqueIdentifier>{dbbddae8-6e91-4800-a025-d87939e1dedf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Game Persistent">
+      <UniqueIdentifier>{d4f18cdc-4d9b-4b5a-a9bd-541ec477a446}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level">
+      <UniqueIdentifier>{65b88145-9794-4769-b40c-a8e97f1ad9f2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\Bullet Manager">
+      <UniqueIdentifier>{8b307269-358e-4125-b29c-40cd35a44384}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\SeniorityHierarchyHolder">
+      <UniqueIdentifier>{efef8c58-6f16-4015-aa37-3783a92c6bd9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\SeniorityHierarchyHolder\TeamHierarchyHolder">
+      <UniqueIdentifier>{76fb2101-289d-4152-89ad-f3d93b16b294}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\SeniorityHierarchyHolder\SquadHierarchyHolder">
+      <UniqueIdentifier>{7767be2c-e672-4ec6-83b3-1fcbfa446fa5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\SeniorityHierarchyHolder\GroupHierarchyHolder">
+      <UniqueIdentifier>{bb644bf5-7043-4eeb-a117-022e1362f9cd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\ClientSpawnManager">
+      <UniqueIdentifier>{5c1adb90-99c8-4f99-a211-e26898b05129}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\AutosaveManager">
+      <UniqueIdentifier>{5889e8ad-da65-43c3-abbb-12466901a8fa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\Level Sounds">
+      <UniqueIdentifier>{f54c47e7-aaab-4c98-9d1e-6e665e55b7c4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\Debug Renderer">
+      <UniqueIdentifier>{bf03dbd1-f22f-46a1-904f-24d51e1a8859}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\GlobalFeelTouch">
+      <UniqueIdentifier>{173b9363-17b4-40f8-b4a0-5a09ba43884a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\LevelMapSync">
+      <UniqueIdentifier>{45fa313e-9184-406f-a85e-a01b06f7d47b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\ClientDigestComputer">
+      <UniqueIdentifier>{b78be59d-2199-4b10-abbb-7396a2762429}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level\LevelNetworkDemo">
+      <UniqueIdentifier>{d79d3201-de20-4eb4-88ed-e76454a00fde}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level Controller">
+      <UniqueIdentifier>{488043bb-30c6-4821-b111-b31aabf92136}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Level Debug">
+      <UniqueIdentifier>{dd7f6a82-3b47-4884-831a-9a03b196b28c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects">
+      <UniqueIdentifier>{d9b2c549-dfdd-44fc-b2d3-8b1517c8b74b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\actor">
+      <UniqueIdentifier>{d6d7054c-3df6-4b91-9402-243a507583b2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\actor\mp">
+      <UniqueIdentifier>{808bb23a-aafc-400a-873d-9985e971e970}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\actor\mp\client">
+      <UniqueIdentifier>{953db74f-ba3d-4c0b-8f30-42f25e1079f2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\actor\mp\server">
+      <UniqueIdentifier>{dc4e94a9-0d60-45bc-adf3-4ba9505d2018}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\actor\mp\state">
+      <UniqueIdentifier>{61b863ae-4a38-4747-a4e4-a3eb277943bb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\actor\base">
+      <UniqueIdentifier>{1bac2bd2-55b0-4f90-825a-e0d5035a5c6e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\actor\base\memory">
+      <UniqueIdentifier>{57409636-2e3d-496b-9644-152df522c1c6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base">
+      <UniqueIdentifier>{f1e88057-f194-44ef-974b-0c25545fd838}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\Entity">
+      <UniqueIdentifier>{e46b87b6-72bd-4940-b3d6-cf1f9f87626e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\EntityAlive">
+      <UniqueIdentifier>{65662b9b-0cad-4552-adfa-ef4f325b5ab1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\EntityCondition">
+      <UniqueIdentifier>{1707ff4b-0e42-45ca-ae2e-21c7d1db7576}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\GameObject">
+      <UniqueIdentifier>{8811fccc-36bb-4c2f-9bec-fd70c2355bc5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\GameObject\Holder">
+      <UniqueIdentifier>{0c2acb70-2f25-4e0a-adf0-a7912b44651e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\GameObject\Holder\ParticlesPlayer">
+      <UniqueIdentifier>{fe77cab1-498a-4cb1-9eed-df25ef24483a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\GameObject\ai_obstacle">
+      <UniqueIdentifier>{05ad24c1-c9e3-4f06-9ca1-7a99ab88dec3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\GameObject\ai_obstacle\min_obb">
+      <UniqueIdentifier>{b14cbb8e-6a25-431b-9fa0-faec538c201f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\GameObject\ai_obstacle\min_obb\magic_box">
+      <UniqueIdentifier>{40307d12-40a4-4584-bd3e-0fa230c3d5e2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\GameObject\ai_obstacle\min_obb\magic_minimize_nd">
+      <UniqueIdentifier>{e53f66c7-2c77-481c-b243-5e95931a92b6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\GameObject\ai_obstacle\min_obb\minimize_1d">
+      <UniqueIdentifier>{6e738219-6120-4544-9960-51e6ab859a31}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\base\UsableScriptObject">
+      <UniqueIdentifier>{8a502c49-2bbc-471c-ba4a-cbcfbfef0abc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\physics">
+      <UniqueIdentifier>{421c3654-638f-4303-81fe-9613dca1a8c7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\physics\PHSkeleton">
+      <UniqueIdentifier>{dabbc85c-41cc-4085-8cea-b802d4b378e5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\physics\PHDestroyable">
+      <UniqueIdentifier>{ce5cc3cb-bebe-4010-bc99-2d98fa25ff94}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\physics\PhysicsSkeletonObject">
+      <UniqueIdentifier>{21ffb9ba-76da-443b-ba7d-ad49632e1309}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\physics\PhysicsShellHolder">
+      <UniqueIdentifier>{79cb77d1-f399-459e-874a-10fff2e3898e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\physics\Climable">
+      <UniqueIdentifier>{04e3187d-3d2f-411f-90de-d7cc707679a4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\physics\Breakable">
+      <UniqueIdentifier>{cc1ae1fb-7771-48e5-b5d0-05a37a9e5eb3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\physics\CollisionDamageReceiver">
+      <UniqueIdentifier>{85e4ce1d-b144-4b92-861f-a6c56c7c9a0a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\physics\DestroyablePhysicsObject">
+      <UniqueIdentifier>{885acf00-2f57-4e74-bd3f-e172a5db070d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\physics\PhysicObject">
+      <UniqueIdentifier>{09604c69-adb7-4b72-b3b1-4cada96d45cc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\hanging_lamp">
+      <UniqueIdentifier>{12b38589-b16f-44cf-9384-31866e1d32d7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\tasks_info_dialogs">
+      <UniqueIdentifier>{3f87cb05-c8c1-4463-b0be-a306f16209da}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\tasks_info_dialogs\game tasks">
+      <UniqueIdentifier>{13a0fa2f-50e1-4ebf-ba9a-cf537094de8c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\tasks_info_dialogs\encyclopedia">
+      <UniqueIdentifier>{38543cda-8470-4d4d-835c-8e98f0889e3e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\tasks_info_dialogs\dialogs">
+      <UniqueIdentifier>{ec5c1e50-1de4-4437-87a0-f90e6eb8eb87}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\tasks_info_dialogs\news">
+      <UniqueIdentifier>{afa99156-2939-447a-9327-608c816168dd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\tasks_info_dialogs\statistics">
+      <UniqueIdentifier>{d42c7b27-2e60-4e3a-a36a-702cdb4ccadd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\tasks_info_dialogs\map">
+      <UniqueIdentifier>{98561de2-c7b1-48eb-83c8-8f2244fc77a9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory">
+      <UniqueIdentifier>{3be3ce31-508c-4504-a41a-81ddef105e83}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\AttachableItem">
+      <UniqueIdentifier>{71800d97-6d21-4e6d-ad35-e6433fc6dcce}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\AttachmentOwner">
+      <UniqueIdentifier>{19d2255b-e1cd-4b8b-92d5-510ac9b43c6b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\EatableItem">
+      <UniqueIdentifier>{2f2b6dff-3e8e-4897-9661-57c22b46abe5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\EatableItemObject">
+      <UniqueIdentifier>{a5bcec34-a466-4966-98cb-fdd42cfc160e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryItem">
+      <UniqueIdentifier>{40d9024e-549a-4c4e-b72c-a3bf46abd4e9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryItemObject">
+      <UniqueIdentifier>{846c3ced-280b-4539-ada6-122fea8bbd28}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryOwner">
+      <UniqueIdentifier>{27d1714a-79b4-4eaa-9713-d5e776c7ad31}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryOwner\character_info">
+      <UniqueIdentifier>{c3f5ce82-b2ef-4d57-96c4-9db4d5942186}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryOwner\relation registry">
+      <UniqueIdentifier>{3f2ba6f6-d834-4418-a9e8-6dcae67136d8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryOwner\trade_parameters">
+      <UniqueIdentifier>{8c123efa-0a8c-4446-9180-ac81eeea469a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryOwner\trade_parameters\trade_bool_parameters">
+      <UniqueIdentifier>{4fadd3ac-6e92-4a5d-8fa0-556379d837d7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryOwner\trade_parameters\trade_factors">
+      <UniqueIdentifier>{24412387-70c5-41be-b143-5c99115987cf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryOwner\trade_parameters\trade_factor_parameters">
+      <UniqueIdentifier>{ef1f8e90-d967-4629-9942-ad129b5c0950}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryOwner\trade_parameters\trade_action_parameters">
+      <UniqueIdentifier>{162be2b3-3300-4702-8164-8bfa37e9e52a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryOwner\trade_parameters\trade_parameters">
+      <UniqueIdentifier>{e63eb7ce-ffe7-4450-bbba-344f97f61dcb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\InventoryOwner\trade_parameters\purchase_list">
+      <UniqueIdentifier>{5fe07cf5-4674-42f4-b7f7-dc35fca62e3a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory\PhysicItem">
+      <UniqueIdentifier>{6211cec6-8fde-4279-a56d-67ff529f2745}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons">
+      <UniqueIdentifier>{eef9d232-29db-4da7-90e1-1c7d0bf23a9f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons">
+      <UniqueIdentifier>{cd1df224-c855-49ea-9b07-c42030384072}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon">
+      <UniqueIdentifier>{2a79ca9a-404b-45d5-a3c3-637ab6913e8a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon\Weapon Generic">
+      <UniqueIdentifier>{1c873d16-c881-4ac4-8e2c-1c9f78b8e2a1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon\Ammo">
+      <UniqueIdentifier>{a33e2e9f-b526-47dc-90a0-4b0b58d8a2d9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon\Pistol">
+      <UniqueIdentifier>{d3feec24-213e-4a7d-9eb8-60525afa8ccf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon\Grenades &amp; Missiles">
+      <UniqueIdentifier>{f72e5fea-20ef-40aa-b8de-17d2de64b6e1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon\Addons">
+      <UniqueIdentifier>{ad9e0a24-ad31-4a36-9469-760437360328}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon\Addons\Scope">
+      <UniqueIdentifier>{a4e51b3d-c277-4e00-82aa-49f606c34244}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon\Addons\Silencer">
+      <UniqueIdentifier>{c5cfe185-30e2-4dfc-b06c-6f9e223031bd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon\Addons\GrenadeLauncher">
+      <UniqueIdentifier>{157bd767-d685-4a54-b7ca-969b19afbd07}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon\RocketLauncher">
+      <UniqueIdentifier>{18cd9d95-5912-47cd-b150-e12a82913947}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon\Automatic">
+      <UniqueIdentifier>{7d3dca62-cf55-4bfe-ae20-8bd958bcde4e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons">
+      <UniqueIdentifier>{329ffa5b-0f34-4973-8c46-f63740e3db23}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Weapon Walther 99">
+      <UniqueIdentifier>{c52691b9-2478-40ce-a069-76948fce26c6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Weapon Vintorez">
+      <UniqueIdentifier>{6678044b-d478-4e9d-824d-a8e4912af6a2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Knife">
+      <UniqueIdentifier>{c549fa50-94f5-4124-b42f-f501335efea1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Weapon Groza">
+      <UniqueIdentifier>{69116879-7ff2-479b-a8bb-42fa47ee737f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\RGD5">
+      <UniqueIdentifier>{86ae4967-4010-47f7-8bb6-3b585d646970}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Weapon Val">
+      <UniqueIdentifier>{e6c2cbfc-f9d0-4931-ad5a-6df8bd09f00c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Weapon USP45">
+      <UniqueIdentifier>{56b5f5cd-bc12-4203-8ea2-99a40975e019}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Bolt">
+      <UniqueIdentifier>{9e1fb8e8-55ff-4b24-820e-0e0303457800}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\SVU">
+      <UniqueIdentifier>{6354a7a2-9afd-4757-8468-54928c426a5f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\RPG7">
+      <UniqueIdentifier>{af3b220c-b14a-4254-876b-2d430491371c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Grenade F1">
+      <UniqueIdentifier>{6d3fc7d7-1218-47de-b86c-3bd858e902c5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\SVD">
+      <UniqueIdentifier>{e69c3aa2-c0df-456d-8bda-8ba02c2bbc35}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Weapon AK74">
+      <UniqueIdentifier>{074898b1-9906-4030-b267-926da7709dbb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\LR300">
+      <UniqueIdentifier>{066d6090-d9e7-446c-a892-0633bd92fd7c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\FN2000">
+      <UniqueIdentifier>{f540f059-14b4-4672-baa3-e3d6484ec4f4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\HPSA">
+      <UniqueIdentifier>{e5f0a01f-497c-44f5-bf8a-f5ab3b344206}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\PM">
+      <UniqueIdentifier>{d5ca7305-9bf1-4df9-b923-b93ec87f8876}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Binocular">
+      <UniqueIdentifier>{796515d9-0128-43e7-a50f-2240ea2ead68}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Weapon Shotgun">
+      <UniqueIdentifier>{56543b70-9f23-4592-8a9b-355ca9260866}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\FORT">
+      <UniqueIdentifier>{2bc95030-8551-4d1f-bbfa-97cfd87a0635}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Weapon RG6">
+      <UniqueIdentifier>{cf33c910-173e-4627-8ad9-985137e46f87}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\BM-16">
+      <UniqueIdentifier>{3447a1ba-4b97-420f-a11a-311e3d666259}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\Various weapons\Weapon AutomaticShotgun">
+      <UniqueIdentifier>{ca071514-7ece-4e7e-a772-5133dcd27ad4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Weapons\StationaryMgun">
+      <UniqueIdentifier>{173e9ab3-d94e-4c4f-84fe-b184cd7ca303}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts">
+      <UniqueIdentifier>{3bfa2201-ca0e-4421-ab81-d1e7ef651482}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\GraviArtifact">
+      <UniqueIdentifier>{e45dc06f-93d1-47aa-a255-b35a909c5a5b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\BlackDrops">
+      <UniqueIdentifier>{d68178ef-1498-4691-8d41-8f09b2adc858}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\Needles">
+      <UniqueIdentifier>{07c37032-aed5-4de8-a20e-f5a8b36b9e53}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\BastArtifact">
+      <UniqueIdentifier>{ab233f62-2c6a-4a06-8272-2886b5d6821f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\BlackGraviArtifact">
+      <UniqueIdentifier>{db5d124a-8131-477c-8f61-0fbac1c027a4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\DummyArtifact">
+      <UniqueIdentifier>{28dfb71d-13e2-4cfe-8d00-f0a9e4585a91}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\ZudaArtifact">
+      <UniqueIdentifier>{ccf79896-7f47-4cd4-ad59-c72dd62deea3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\ThornArtifact">
+      <UniqueIdentifier>{f14b57db-9249-415e-b183-e84bf0d36d9e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\Faded Ball">
+      <UniqueIdentifier>{f1fddab1-4ff4-4b30-be58-3e04cb87bd95}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\Faded Ball\Mercury Ball">
+      <UniqueIdentifier>{cb40f56e-509a-4649-adb1-9561869f44b9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\Electric Ball">
+      <UniqueIdentifier>{9f953015-30a8-4b93-9378-d5b9da8f90a2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\RustyHairArtifact">
+      <UniqueIdentifier>{a3d091d5-b0c6-4741-b3d2-553a246ccffe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\GalantineArtifact">
+      <UniqueIdentifier>{1fdfd13c-486a-44c9-b3da-d29e77fd4554}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Artifacts\CtaGameArtefact">
+      <UniqueIdentifier>{5af1279d-308d-4b6f-b1ee-20d767d083eb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Devices">
+      <UniqueIdentifier>{6f76f9ff-1c07-4de1-bd05-19e7760a9c14}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Devices\Detectors">
+      <UniqueIdentifier>{6b140b2c-e753-42ec-ae0e-f1944a0f5c5a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Devices\Detectors\Simple Detector">
+      <UniqueIdentifier>{e0ba38cd-4aee-4f2b-ba9f-73c8655f9e10}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Devices\Detectors\AdvancedDetector">
+      <UniqueIdentifier>{1fe9ba53-ad03-4503-8140-d07da81d40d5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Devices\Detectors\EliteDetector">
+      <UniqueIdentifier>{71738804-5834-46ed-a34c-0a53735ba36b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Devices\Torch">
+      <UniqueIdentifier>{aba5d59b-9d45-48d4-824e-ac2e133ad875}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Devices\flare">
+      <UniqueIdentifier>{8b5e7495-9945-41d5-92ad-ee33ee7900f9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\PDA &amp; information">
+      <UniqueIdentifier>{18753230-e688-46c5-9d53-9b4845eca8a6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Food &amp; Drugs">
+      <UniqueIdentifier>{d283d527-8cc4-45a1-b766-daeb8d629f88}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Outfit">
+      <UniqueIdentifier>{119df0b8-e68c-4442-aff0-044bb2fc9d5b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Documents">
+      <UniqueIdentifier>{3155ea5b-b4de-47ac-b0ed-d05a52cfba4a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\HudItem">
+      <UniqueIdentifier>{643d3e6b-b4bb-47b4-a002-3b99e2b18bc5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\Explosives">
+      <UniqueIdentifier>{b7688ab2-2055-4da9-bb6c-d249ae0911bd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\MPPlayersBag">
+      <UniqueIdentifier>{f67b84c1-a3e6-44b2-b1b1-b8659b40006d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\items &amp; weapons\MPAnticheat">
+      <UniqueIdentifier>{1fdfed8b-07ff-4a81-971c-69867c8087b9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\searchlight">
+      <UniqueIdentifier>{232c37a1-c0f1-4197-8170-2f8571d519ac}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\searchlight\Trade">
+      <UniqueIdentifier>{a497b953-205f-49de-bf60-d92f94d4738d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones">
+      <UniqueIdentifier>{f61ecab5-1339-44b6-a0f9-3cb665966ff2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\CustomZone">
+      <UniqueIdentifier>{064445fe-a816-415d-ae46-fe14c1b6b78e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\FryUpZone">
+      <UniqueIdentifier>{a0725229-dc3b-4039-8f30-0dc4ee41bc37}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\GraviZone">
+      <UniqueIdentifier>{5aafac69-f1b1-4411-a8e3-706d1627c5f9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\LevelChanger">
+      <UniqueIdentifier>{4120635b-0be9-4a96-8d03-cb1598ed478e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\Mincer">
+      <UniqueIdentifier>{63deb685-6e6c-4f60-880b-36c9519f0078}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\MosquitoBald">
+      <UniqueIdentifier>{48c333a7-c368-4d6a-93aa-3238f091b372}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\RadioactiveZone">
+      <UniqueIdentifier>{2ef55313-8a22-44fa-a31d-58c0ba627868}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\ScriptZone">
+      <UniqueIdentifier>{7a237c3f-7ca2-4dc7-844f-0928be1848ff}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\TeamBaseZone">
+      <UniqueIdentifier>{2c1927e0-4d35-480c-a656-19a7114163cd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\TorridZone">
+      <UniqueIdentifier>{482cfc75-8689-4af7-ac85-7fb1215aaa8b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\SpaceRestrictor">
+      <UniqueIdentifier>{5fe3f74e-3a2e-4012-b957-33650010171b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\HairsZone">
+      <UniqueIdentifier>{4613e6fd-aca1-43c1-aaef-b508fa99dd55}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\NoGravityZone">
+      <UniqueIdentifier>{e7186ef4-d075-4c5f-b4f8-7ddfbf860fe8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\SmartZone">
+      <UniqueIdentifier>{f6e4c680-a596-46c5-b0ef-626334019948}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\ZoneVisual">
+      <UniqueIdentifier>{3e6d80bf-869b-4fd5-816d-95b85f73c4d8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\campfire">
+      <UniqueIdentifier>{2f249914-77ba-4f93-bb46-ea833f37ab6d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\vehicles">
+      <UniqueIdentifier>{648ba974-6501-47a2-9650-a210f1843d61}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\vehicles\Car">
+      <UniqueIdentifier>{353421ba-3b3a-4df3-adff-f87750ac52d2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\vehicles\Car\CarWeapon">
+      <UniqueIdentifier>{a0412681-8d6b-4788-ae2c-62a0bf28cf2d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\vehicles\Car\car_memory">
+      <UniqueIdentifier>{865ba5b9-6e63-4fcc-97a9-9dd00d304f69}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\vehicles\heli">
+      <UniqueIdentifier>{3e3b789b-0136-4477-b158-87f9a1c9b559}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\DelayedActionFuse">
+      <UniqueIdentifier>{041a8f13-6ef0-4f0c-b02d-f8b14a637b8b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\inventory_box">
+      <UniqueIdentifier>{9054a88b-8af5-45c8-85c8-259ff58b0179}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Particles">
+      <UniqueIdentifier>{63cdfe35-ce42-4b4a-a114-6488fbcfdfc5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Spectator">
+      <UniqueIdentifier>{00648882-1250-4ade-b893-27055b6d57ea}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Spectator\Cameras">
+      <UniqueIdentifier>{0ac178c9-6f29-48e3-8ce5-7bf8a399318d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common">
+      <UniqueIdentifier>{f5555d92-4e46-4fe0-a196-969d339d6c53}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\Console Commands">
+      <UniqueIdentifier>{89f1bed5-cc9b-4120-80a0-2ab10a4a2bd9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\DateTime">
+      <UniqueIdentifier>{dacf82d6-3431-41a3-be9f-274157a901f0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\Dll Process Detach">
+      <UniqueIdentifier>{73e7891a-9280-4508-a463-bdd40533ca2e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\NET Shared">
+      <UniqueIdentifier>{657216da-2b6f-4655-b99e-94f0d8f45b57}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\NET Shared\SecureMessages">
+      <UniqueIdentifier>{8ff2daa1-7b8a-4348-816a-c58970bff531}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\ObjectBroker">
+      <UniqueIdentifier>{602bf42d-2d38-4e35-bb1a-c33344ce782d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\ObjectFactory">
+      <UniqueIdentifier>{7d122c12-20b0-4319-8129-7c26677aedd3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\ObjectFactory\object_item_abstract">
+      <UniqueIdentifier>{301047c0-b8b7-4884-a333-c7ad40f2ce36}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\ObjectFactory\object_item_client_server">
+      <UniqueIdentifier>{eaa2ee8b-b480-409c-b251-2fa0c61ad211}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\ObjectFactory\object_item_script">
+      <UniqueIdentifier>{3f141efc-3946-4eac-9e17-22c322e3eab2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\ObjectFactory\object_item_single">
+      <UniqueIdentifier>{ccb87c67-2113-4332-a153-a09f0c652b35}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\Profiler">
+      <UniqueIdentifier>{b01e2b34-c3d5-4cea-ba97-2fe725e2ec98}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\QuadTree">
+      <UniqueIdentifier>{72169ff6-d11e-4053-ae24-dbe64fd9ffcf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\Random">
+      <UniqueIdentifier>{ea7bc465-93fa-4963-adff-aeb8ff973d0b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\Random\weighted">
+      <UniqueIdentifier>{2dac256d-728c-4b18-9aed-459b7c337f03}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\Random\32bit">
+      <UniqueIdentifier>{98932cee-d304-479e-9443-fbd7a5a8bb34}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\Shared">
+      <UniqueIdentifier>{666d30e9-1e70-4acb-a0af-34763debc983}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\SmartCast">
+      <UniqueIdentifier>{e7bec78e-5e80-44b6-8e48-6b6f965e6dde}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\StringTable">
+      <UniqueIdentifier>{22979b2b-2fb5-4c33-8c62-9462ec6ec171}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\associative_vector">
+      <UniqueIdentifier>{99acbde7-55c7-4c04-9c29-98f1cb2ce85f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\associative_vector\vector">
+      <UniqueIdentifier>{6d170a96-0537-41dd-b233-04c143b48a2f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\associative_vector\compare">
+      <UniqueIdentifier>{fb37b8a3-993a-45e7-b78a-35770f617bbb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\Registry">
+      <UniqueIdentifier>{9465b693-0ca7-42b5-bd72-821076494f14}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\debug">
+      <UniqueIdentifier>{6f0684eb-522c-4fdd-903d-6954b0c0f4d4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\debug\make_final">
+      <UniqueIdentifier>{f3e4fd87-5386-4350-8c0f-fe6f9a823515}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Common\debug\static_cast_checked">
+      <UniqueIdentifier>{7cc45c9b-456f-485f-9228-1538d319dd8c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server">
+      <UniqueIdentifier>{06526b6a-5141-4abf-9fed-cf147b1e837c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Editor">
+      <UniqueIdentifier>{a80f4dcf-fe8c-451f-9559-71b90021c713}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games">
+      <UniqueIdentifier>{a1ee144d-0a94-45a9-a70d-c22400152725}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client">
+      <UniqueIdentifier>{68f65e04-5fcd-4447-9bb0-9a68244f680c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\artefact_hunt">
+      <UniqueIdentifier>{a70b8b2e-33c2-49fa-876f-3f24b0bb040c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\deathmatch">
+      <UniqueIdentifier>{f82a3e07-7dfb-4327-a993-e439a2618e6e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\team_deathmatch">
+      <UniqueIdentifier>{d726208b-8e6d-4e65-bd66-c0bc9a0965c3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\single">
+      <UniqueIdentifier>{72dcfedd-f536-42be-9da5-14f9632f686b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\base">
+      <UniqueIdentifier>{e1be434a-9ca1-4a16-bf7f-afb6f09fe7d2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\mp">
+      <UniqueIdentifier>{0d87a81d-98e6-455c-99bd-e046d405955e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\mp\screenshots">
+      <UniqueIdentifier>{083893c7-5148-4c4f-8b0d-e28d55dc5ef7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\mp\anticheat">
+      <UniqueIdentifier>{05fd45d5-e228-4cf4-b0ba-95c70c241d32}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\mp\award_system">
+      <UniqueIdentifier>{a6c8ba3f-676b-481e-9a66-384adbd86cfb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\mp\award_system\event_handlers">
+      <UniqueIdentifier>{bed9b7e6-790d-4e2b-86ca-09c60a4790cd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\mp\award_system\player_state">
+      <UniqueIdentifier>{c99f1659-c3d6-40e4-9a31-f183fff6edcf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\mp\award_system\player_state\state_parameters">
+      <UniqueIdentifier>{d311624a-97c9-478e-b79e-c683de716d95}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\client\capture_the_artefact">
+      <UniqueIdentifier>{90021637-62c4-48f9-a213-150237749e59}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\server">
+      <UniqueIdentifier>{9ef2d02d-fb00-4fda-935d-21c7431515b6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\server\artefact_hunt">
+      <UniqueIdentifier>{40bea630-22e6-4f29-a99e-d68278aa4da6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\server\deathmatch">
+      <UniqueIdentifier>{4aaab107-b5c5-42c4-9b72-4fdbccfcd2fc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\server\single">
+      <UniqueIdentifier>{0c373093-b388-418b-83f8-b9e9f47ecade}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\server\team_deathmatch">
+      <UniqueIdentifier>{ae16ab0d-3036-4ccc-bc98-5a3f23088f12}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\server\mp">
+      <UniqueIdentifier>{ad276709-218f-48cb-a946-1e3d9a41c87b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\server\capture_the_artefact">
+      <UniqueIdentifier>{2ab2b093-241a-4916-8ca6-e41e2cf762ac}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\Games\PlayerAccounts">
+      <UniqueIdentifier>{eb1a0837-c735-4283-8391-d700cfeeefa3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\GameSpy">
+      <UniqueIdentifier>{0e29aa42-d79c-425a-994b-c18169f076de}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\GameSpy\CdkeyDecode">
+      <UniqueIdentifier>{1e260ced-c32e-4b46-a3cc-a5fd5d7c6109}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\ID_Generator">
+      <UniqueIdentifier>{896c2566-b777-4505-acd6-792e19f54026}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\ServerEntities">
+      <UniqueIdentifier>{b6f241d5-b3c7-49f0-83a6-bdcd274becdc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\ServerEntities\objects">
+      <UniqueIdentifier>{041e3510-5def-48ce-9ef9-5f0d5c4df385}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\ServerEntities\objects_alife">
+      <UniqueIdentifier>{710f4664-a2d0-4363-aa42-09da3a57681c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\ServerEntities\objects_alife_items">
+      <UniqueIdentifier>{68da2291-1e3e-41fc-90fe-34f494d4a0a9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\ServerEntities\objects_alife_monsters">
+      <UniqueIdentifier>{6a99613c-d574-4ebd-ab6e-9b88bd8f7141}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\ServerEntities\script_value_container">
+      <UniqueIdentifier>{74aee90d-4f0c-4bf8-80f0-df89e02371ca}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\ServerEntities\objects_alife_smartcover">
+      <UniqueIdentifier>{0034515f-4f2f-4cce-a711-0d19844fcbb4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\ServerPerform">
+      <UniqueIdentifier>{164b6447-16bd-4178-9906-56c82dd619fe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\ServerProcess">
+      <UniqueIdentifier>{b7dbcdc1-4f07-4c2b-b204-220fe12afc17}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\xrGameSpyServer">
+      <UniqueIdentifier>{963eebca-4495-44e2-8fb5-bee1a28330af}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\filetransfer">
+      <UniqueIdentifier>{bf990cd5-6464-445f-88f1-c3f61d940651}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Server\ServerConnect">
+      <UniqueIdentifier>{7511649f-4c16-42db-9516-70367199c4dd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI">
+      <UniqueIdentifier>{112a49e1-530e-4ec8-988b-8d02abc9d4c7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common">
+      <UniqueIdentifier>{4c362e7d-d33a-445e-929e-cb0d5c12d9ea}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\InventoryWnd">
+      <UniqueIdentifier>{08e827a5-49f1-49b3-97a5-ff3413993b36}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\InventoryWnd\InventoryUpgrade">
+      <UniqueIdentifier>{76bab9d1-1438-407c-829b-154c9329cc09}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\PDA">
+      <UniqueIdentifier>{5a644b47-d0ae-4612-af01-666f45ecdb92}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\PDA\MAP">
+      <UniqueIdentifier>{01666ece-9ae4-4d15-98be-c088778fc542}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\PDA\Statistics &amp; Rankings">
+      <UniqueIdentifier>{7445c741-4e35-402e-9e7b-369b550a8e1a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\PDA\Tasks">
+      <UniqueIdentifier>{ddf96ea9-ef48-422b-9ac9-d1c7aafa5cd6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\PDA\logs">
+      <UniqueIdentifier>{88b2008c-d91b-4387-b903-9223e6800188}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\PDA\logs\News">
+      <UniqueIdentifier>{f21f213a-d49e-4bc4-88eb-c2c3da37b244}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\ui-item-infos">
+      <UniqueIdentifier>{39ccfc67-3565-45a8-a2f8-8580cd504d0e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\ui-item-infos\CharacterInfo">
+      <UniqueIdentifier>{632c7527-8c9c-4cec-82a8-fcbe6ae428c4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\TALK">
+      <UniqueIdentifier>{6219607c-2f9a-4cdb-a116-8dc19268d4fb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\MainIngame">
+      <UniqueIdentifier>{bfd4c1f4-faf7-45fc-855e-1fd70023ad4c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\OptionsItem">
+      <UniqueIdentifier>{fe660738-cb41-4277-9092-9e2d9a2d9731}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\OptionsConsoleCommands">
+      <UniqueIdentifier>{519f65e1-f943-4b85-928f-462419d21ec0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\MainMenu">
+      <UniqueIdentifier>{2211eaea-8796-4f86-a966-05bb3544b718}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\MainMenu\KeyBinding">
+      <UniqueIdentifier>{13ce2745-dd0a-4dbb-a7f8-1d13ffcc57bc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\InventoryUtilities">
+      <UniqueIdentifier>{36b5cbc7-2f24-4963-8c36-3591931f0cde}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\Inventory">
+      <UniqueIdentifier>{80ece86e-d978-4229-9939-d95d802f2a75}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\_Debug Fonts">
+      <UniqueIdentifier>{85db625f-d8c0-4028-8799-0abbb49889ed}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows">
+      <UniqueIdentifier>{460a5f56-2b0d-4743-8205-a7d1bc7c96a6}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\XML">
+      <UniqueIdentifier>{7ca785e7-b3f3-4cec-9aeb-4b5d16848e47}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\MessageBox">
+      <UniqueIdentifier>{ebf2a580-795f-4a30-aedb-2f92cb084382}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\PropertiesBox">
+      <UniqueIdentifier>{31d61eb9-a7c5-4527-b6cc-d890d465a560}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\Static">
+      <UniqueIdentifier>{f929b1ad-769e-456e-804d-5d4776fd3fb4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\EditBox">
+      <UniqueIdentifier>{a143c653-e625-4712-addc-2e246193f299}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\EditBox\customEB">
+      <UniqueIdentifier>{b1e33d94-b247-463d-9508-374a51bc5c3a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\Windows">
+      <UniqueIdentifier>{810cb2af-200b-4ebc-864c-f6fe45f26e00}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\ProgressBar">
+      <UniqueIdentifier>{e84328d8-4117-4060-a5d8-022c0823060c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\TabControl">
+      <UniqueIdentifier>{92ec8b27-4fbc-456c-a642-ad3a302eb6a3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\ScriptWnd">
+      <UniqueIdentifier>{39d38509-7911-4699-a4d7-9c10c8f29206}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\Buttons">
+      <UniqueIdentifier>{6ab408a1-77bc-4a1b-b10d-67275aadf448}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\ComboBox">
+      <UniqueIdentifier>{89add78b-1722-4806-b081-5be13f816451}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\InteractiveBackground">
+      <UniqueIdentifier>{64a7553d-e422-4b9f-84db-e3ec71dcd52f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\TrackBar">
+      <UniqueIdentifier>{52c08b50-a211-4278-a85a-d4e794004347}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\Frames">
+      <UniqueIdentifier>{39a86d7b-6f39-4fd8-8646-5989eac29b47}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\ScrollView">
+      <UniqueIdentifier>{6ac65b85-b69c-4f46-9f6e-97c5cfd37e18}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\Lines">
+      <UniqueIdentifier>{c8b00191-d1aa-43c9-a4ef-11fb0981fcd0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\DragDrop">
+      <UniqueIdentifier>{59ae40a5-3d82-4975-af99-d70e3b756581}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\ScrollBar">
+      <UniqueIdentifier>{a2ba0397-f13a-4bcc-a6d0-a3613ffcbc71}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\SpinBox">
+      <UniqueIdentifier>{84975978-12e8-41fd-a796-954a22fdfd2a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\arrow">
+      <UniqueIdentifier>{7bdb8f05-f548-40f1-8d33-5c79ee1effbf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\Hint">
+      <UniqueIdentifier>{355b0b35-b53e-4e47-935e-67222f25c82a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\UIWindows\ListBox">
+      <UniqueIdentifier>{daaf29c6-feac-4708-8f68-ff1fdfadda75}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\HUD">
+      <UniqueIdentifier>{be2630ed-da7e-40c0-8271-533e359cc040}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\GameTypes">
+      <UniqueIdentifier>{994563e4-eba8-440f-b07a-769091869edf}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\GameTypes\GameCustom">
+      <UniqueIdentifier>{51c46adf-0656-4a15-8982-0ce839d8950c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\GameTypes\Deathmatch">
+      <UniqueIdentifier>{352ce93a-3b3c-4558-a479-971661a0571f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\GameTypes\Single">
+      <UniqueIdentifier>{68773a09-4b98-460d-a335-eafcadd744df}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\GameTypes\TeamDeathmatch">
+      <UniqueIdentifier>{ab283e20-c172-4a03-83e9-887ad10f89f1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\GameTypes\ArtefactHunt">
+      <UniqueIdentifier>{958e11b5-8dc1-4eb7-9371-1d3157e7ccdd}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\GameTypes\CaptureTheArtefact">
+      <UniqueIdentifier>{80a7592d-b5c1-4cac-9900-d610d5f1fc1a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer">
+      <UniqueIdentifier>{952e33e3-c075-4a47-b44f-306bea2f9c7d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\MM_MP">
+      <UniqueIdentifier>{f8f6e885-de32-4ede-8abb-af5a351d44b9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\MM_MP\CDkey">
+      <UniqueIdentifier>{e4cc1b19-64a7-475a-a52a-9b44113e383b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\MM_MP\MapList">
+      <UniqueIdentifier>{992da492-8746-440c-881d-15753bd029cb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\MM_MP\ServerList">
+      <UniqueIdentifier>{01968940-c0d1-4130-ad28-f12cc60583f8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\MM_MP\TeamInfo">
+      <UniqueIdentifier>{5adbdfe0-5f16-4393-a3d5-09ac05e46e9b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\HUD">
+      <UniqueIdentifier>{d944beeb-68a3-47df-8589-361672cc57e1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\HUD\Stats">
+      <UniqueIdentifier>{151aa28a-6ebf-4f42-a2ac-dbb831ef8ce0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\HUD\Stats\icons">
+      <UniqueIdentifier>{8f7635a2-00df-4e1e-bacc-84ce227d272a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\HUD\Stats\TeamStates">
+      <UniqueIdentifier>{8564129d-c379-461b-8180-7de8c8bd0228}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\HUD\Chat">
+      <UniqueIdentifier>{d4810c39-7a5b-4406-acd7-6133786dc06e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\HUD\GameLog">
+      <UniqueIdentifier>{4365c764-bc0d-4dce-bf9e-29fd54e7b427}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\HUD\SpeechMenu">
+      <UniqueIdentifier>{a2a254cc-f5b5-4bbb-8171-cec30822dd41}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\HUD\common">
+      <UniqueIdentifier>{744660d7-b290-4647-ad9f-88247961293c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\BuyWeaponWnd">
+      <UniqueIdentifier>{d253f23f-f973-412c-bd05-bde6e956d64e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\BuyWeaponWnd\rank_restrictions">
+      <UniqueIdentifier>{c5487db8-4093-4be6-b6b2-75af9738b589}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\BuyWeaponWnd\TAB">
+      <UniqueIdentifier>{86ba9603-e70d-4f1f-b5dd-9bb88def18e5}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\team_skin_info">
+      <UniqueIdentifier>{fabc6e12-dda3-49a7-94b8-98f7b0cff48b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\team_skin_info\MapDesc">
+      <UniqueIdentifier>{3854fc6e-819a-453b-9195-71ebeeb12599}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\team_skin_info\MapDesc\MapInfo">
+      <UniqueIdentifier>{bfa2904a-5c5d-498d-be7d-e3238731f03c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\team_skin_info\Spawn">
+      <UniqueIdentifier>{775f1493-564c-49e5-b7b9-d6de5e670b05}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\team_skin_info\SkinSelector">
+      <UniqueIdentifier>{3c8aa419-c63a-433e-a4fb-0eb7aae96bcc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\team_skin_info\ServerInfo">
+      <UniqueIdentifier>{5b96c35c-b5b3-409b-987d-161d10d9ad2c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\Voting">
+      <UniqueIdentifier>{e2241740-7d81-4634-a522-bd9ff597994f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\DemoPlayControl">
+      <UniqueIdentifier>{4d53f414-59e3-42bb-8f3c-038994de1bf9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\Achivements">
+      <UniqueIdentifier>{bd82763e-8bc7-4a97-84e7-7db1211a0560}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Multiplayer\AdminMenu">
+      <UniqueIdentifier>{3dea9773-a080-4168-a028-9d6de40c3840}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Cursor">
+      <UniqueIdentifier>{216d787e-49b7-4dbf-8a61-8a7485172d83}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Tutorial">
+      <UniqueIdentifier>{170d6701-4d01-4f49-a9bd-8318775d48df}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics">
+      <UniqueIdentifier>{459df740-2882-4664-9543-8db0cd55e9eb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\Debug">
+      <UniqueIdentifier>{c2eddf63-3942-495d-b418-4eea04a9d57a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\CharacterSupport">
+      <UniqueIdentifier>{2b7bf396-9653-4aa3-9939-ddabdd5f0301}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\CharacterSupport\interactive_motion">
+      <UniqueIdentifier>{b45c75c9-a6a2-49e9-9d39-d87fd47d8338}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\CharacterSupport\death_anims">
+      <UniqueIdentifier>{6b5d83ec-f803-4603-b754-faf7259f0d45}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\CharacterSupport\hit_anims">
+      <UniqueIdentifier>{393f883f-0114-42ca-95e5-d1dc84bf5511}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\CharacterSupport\interactive_anims">
+      <UniqueIdentifier>{0c046796-e4c9-4297-9421-3ac357864e14}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\PHCommander">
+      <UniqueIdentifier>{d04f4571-bedc-4927-9b28-e0c0e659aafe}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\DamagableItem">
+      <UniqueIdentifier>{c95f3f47-da51-41f0-82c0-7efba6382172}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\PhysicsSoundPlayer">
+      <UniqueIdentifier>{bd16859e-af62-4f7c-9358-1a25ec30da69}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\Hit">
+      <UniqueIdentifier>{70455808-edcb-4011-bb20-57a9530a5466}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\IK">
+      <UniqueIdentifier>{4311653a-b12d-41b7-8b0b-b1c45fc9e042}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\animation_movement_controller">
+      <UniqueIdentifier>{27a7abe4-fe8a-4c1f-81e6-aa25d89ebebb}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\MovementControl">
+      <UniqueIdentifier>{d559c651-5980-4621-8d74-09ea88469ff1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Physics\scripts">
+      <UniqueIdentifier>{66d4d9cb-fbc2-4e9a-8483-4eb5c1738ed9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states">
+      <UniqueIdentifier>{2f5dd1ce-9927-4917-a6fa-6b0113f79b00}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Rest">
+      <UniqueIdentifier>{69fc9311-024d-451f-bcad-8a5b05ba9ba8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Panic">
+      <UniqueIdentifier>{f76b9f11-e049-4117-be33-eb90695baee0}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Interesting Sound">
+      <UniqueIdentifier>{3f0f8bce-f527-47da-86e3-6547a08ff9c9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Attack">
+      <UniqueIdentifier>{917f2215-4fe0-49cd-9710-ad42d4bbf980}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Hitted">
+      <UniqueIdentifier>{d21c6f37-aa25-425f-ab15-dd85562e4dac}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Steal">
+      <UniqueIdentifier>{2fa0f717-0403-4c7e-ad7f-2530a88eb71c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Steal\Squad">
+      <UniqueIdentifier>{fae29cab-3d66-4aba-8a69-75b6d84dc74d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Steal\Squad\Rest">
+      <UniqueIdentifier>{4946196d-1f2b-4e07-9207-f0789b2528fc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Hunt">
+      <UniqueIdentifier>{098ea533-6ac0-45d2-87d0-f7b07721ed96}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Home Point">
+      <UniqueIdentifier>{db21b3a4-109b-4ee8-a49c-f514367ae3a9}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Help Sound">
+      <UniqueIdentifier>{986484e0-dae7-4668-9bac-99821ec28ed8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\ALife">
+      <UniqueIdentifier>{ac2feaf9-e056-41bf-ba53-48ee2f244e10}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Group Monsters Home">
+      <UniqueIdentifier>{a5d2eea2-ff2a-4205-9aa4-662793385c62}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Find Enemy">
+      <UniqueIdentifier>{d8f01b6a-bd7d-4d92-836b-7da8f0719f2e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Eat">
+      <UniqueIdentifier>{d98d5aed-0349-4cd2-a98e-aa8828cae8ab}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Eat\Eating">
+      <UniqueIdentifier>{c71ab8da-df07-42c0-8a59-79de3f0e0be8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Eat\Drag">
+      <UniqueIdentifier>{c0671f30-b395-4aaa-b068-48ad750e6229}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\General">
+      <UniqueIdentifier>{786a1168-d1fe-400c-94dd-34b3b7c73b07}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\General\Movement">
+      <UniqueIdentifier>{20b3de5c-c8dd-4115-9638-50e8108ffcfa}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\General\Look">
+      <UniqueIdentifier>{da4c1a2f-7fc9-48ac-8335-2fbc70053f19}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\General\Custom Action">
+      <UniqueIdentifier>{509e0ea6-e30e-453c-bf81-20f77ddc1b9a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\General\Test">
+      <UniqueIdentifier>{be8f072a-a4a2-4eb8-b5c0-c33397f263cc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Dangerous Sound">
+      <UniqueIdentifier>{bc35ae2d-65bf-4008-bc50-c26fdad27d6c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Camp">
+      <UniqueIdentifier>{e3f6cc93-c7c7-4f59-b334-e90f6870dd1b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="AI\AMonsters\common\script\monster states\Controlled">
+      <UniqueIdentifier>{71df3723-4ad3-4db1-9eb8-7bf643a66f93}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Objects\zones\Ameba">
+      <UniqueIdentifier>{7111b5cd-588d-46ec-81c2-ccc6c70fa4de}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="UI\Common\PDA\Encylopedia">
+      <UniqueIdentifier>{73dc453e-a9d1-4200-83b7-3564dbf9fc80}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\Client\Effectors\monsters">
+      <UniqueIdentifier>{b1a00ac3-9c32-43d4-a698-33d5f830e0d2}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\xrCore\ChooseTypes.H" />
+    <ClInclude Include="..\..\xrServerEntities\ai_sounds.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_human_brain.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_human_brain_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_monster_brain.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_monster_brain_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_movement_manager_holder.h" />
+    <ClInclude Include="..\..\xrServerEntities\alife_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\associative_vector.h" />
+    <ClInclude Include="..\..\xrServerEntities\associative_vector_compare_predicate.h" />
+    <ClInclude Include="..\..\xrServerEntities\associative_vector_compare_predicate_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\associative_vector_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\character_info.h" />
+    <ClInclude Include="..\..\xrServerEntities\character_info_defs.h" />
+    <ClInclude Include="..\..\xrServerEntities\clsid_game.h" />
+    <ClInclude Include="..\..\Include\xrRender\DrawUtils.h" />
+    <ClInclude Include="..\..\xrCore\FastDelegate.h" />
+    <ClInclude Include="..\..\xrServerEntities\gametype_chooser.h" />
+    <ClInclude Include="..\..\xrServerEntities\game_base_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\game_graph_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\InfoPortionDefs.h" />
+    <ClInclude Include="..\..\xrServerEntities\inventory_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\ItemListTypes.h" />
+    <ClInclude Include="..\..\xrServerEntities\LevelGameDef.h" />
+    <ClInclude Include="..\..\xrServerEntities\lua_studio.h" />
+    <ClInclude Include="..\..\xrServerEntities\mslotutils.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_broker.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_cloner.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_comparer.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_destroyer.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_factory.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_factory_impl.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_factory_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_factory_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_interfaces.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_abstract.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_abstract_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_client_server.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_client_server_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_script.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_single.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_item_single_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_loader.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_saver.h" />
+    <ClInclude Include="..\..\xrServerEntities\object_type_traits.h" />
+    <ClInclude Include="..\..\xrServerEntities\pch_script.h" />
+    <ClInclude Include="..\..\xrServerEntities\PHNetState.h" />
+    <ClInclude Include="..\..\xrServerEntities\PHSynchronize.h" />
+    <ClInclude Include="..\..\xrServerEntities\PropertiesListTypes.h" />
+    <ClInclude Include="..\..\xrServerEntities\restriction_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_callStack.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_debugger.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_debugger_messages.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_debugger_threads.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_engine.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_engine_export.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_engine_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_engine_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_export_macroses.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_export_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_fcolor.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_flags.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_fmatrix.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_fvector.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_ini_file.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_ini_file_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_lua_helper.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_net_packet.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_process.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_process_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_reader.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_rtoken_list.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_rtoken_list_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_sound_type.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_space_forward.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_stack_tracker.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_stack_tracker_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_storage.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_storage_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_storage_space.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_thread.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_thread_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_token_list.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_token_list_inline.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_value_container.h" />
+    <ClInclude Include="..\..\xrServerEntities\script_value_container_impl.h" />
+    <ClInclude Include="..\..\xrServerEntities\ShapeData.h" />
+    <ClInclude Include="..\..\xrServerEntities\shared_data.h" />
+    <ClInclude Include="..\..\xrServerEntities\smart_cast.h" />
+    <ClInclude Include="..\..\xrServerEntities\smart_cast_impl0.h" />
+    <ClInclude Include="..\..\xrServerEntities\smart_cast_impl1.h" />
+    <ClInclude Include="..\..\xrServerEntities\smart_cast_impl2.h" />
+    <ClInclude Include="..\..\xrServerEntities\specific_character.h" />
+    <ClInclude Include="..\..\xrServerEntities\WaveForm.h" />
+    <ClInclude Include="..\..\xrServerEntities\xml_str_id_loader.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrEProps.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrMessages.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_Abstract.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_ALife.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_ALife_All.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_ALife_Items.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_ALife_Monsters.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Objects_Alife_Smartcovers.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Object_Base.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_script_macroses.h" />
+    <ClInclude Include="..\..\xrServerEntities\xrServer_Space.h" />
+    <ClInclude Include="..\abstract_location_selector.h" />
+    <ClInclude Include="..\abstract_location_selector_inline.h" />
+    <ClInclude Include="..\abstract_path_manager.h" />
+    <ClInclude Include="..\abstract_path_manager_inline.h" />
+    <ClInclude Include="..\account_manager.h" />
+    <ClInclude Include="..\account_manager_console.h" />
+    <ClInclude Include="..\accumulative_states.h" />
+    <ClInclude Include="..\action_base.h" />
+    <ClInclude Include="..\action_base_inline.h" />
+    <ClInclude Include="..\action_management_config.h" />
+    <ClInclude Include="..\action_planner.h" />
+    <ClInclude Include="..\action_planner_action.h" />
+    <ClInclude Include="..\action_planner_action_inline.h" />
+    <ClInclude Include="..\action_planner_action_script.h" />
+    <ClInclude Include="..\action_planner_action_script_inline.h" />
+    <ClInclude Include="..\action_planner_inline.h" />
+    <ClInclude Include="..\action_planner_script.h" />
+    <ClInclude Include="..\action_planner_script_inline.h" />
+    <ClInclude Include="..\action_script_base.h" />
+    <ClInclude Include="..\action_script_base_inline.h" />
+    <ClInclude Include="..\ActivatingCharCollisionDelay.h" />
+    <ClInclude Include="..\Actor.h" />
+    <ClInclude Include="..\ActorAnimation.h" />
+    <ClInclude Include="..\ActorBackpack.h" />
+    <ClInclude Include="..\ActorCondition.h" />
+    <ClInclude Include="..\ActorEffector.h" />
+    <ClInclude Include="..\ActorHelmet.h" />
+    <ClInclude Include="..\ActorNightVision.h" />
+    <ClInclude Include="..\actor_anim_defs.h" />
+    <ClInclude Include="..\actor_defs.h" />
+    <ClInclude Include="..\Actor_Flags.h" />
+    <ClInclude Include="..\actor_input_handler.h" />
+    <ClInclude Include="..\actor_memory.h" />
+    <ClInclude Include="..\actor_mp_client.h" />
+    <ClInclude Include="..\actor_mp_server.h" />
+    <ClInclude Include="..\actor_mp_state.h" />
+    <ClInclude Include="..\actor_mp_state_inline.h" />
+    <ClInclude Include="..\actor_statistic_defs.h" />
+    <ClInclude Include="..\actor_statistic_mgr.h" />
+    <ClInclude Include="..\AdvancedDetector.h" />
+    <ClInclude Include="..\agent_corpse_manager.h" />
+    <ClInclude Include="..\agent_corpse_manager_inline.h" />
+    <ClInclude Include="..\agent_enemy_manager.h" />
+    <ClInclude Include="..\agent_enemy_manager_inline.h" />
+    <ClInclude Include="..\agent_explosive_manager.h" />
+    <ClInclude Include="..\agent_explosive_manager_inline.h" />
+    <ClInclude Include="..\agent_location_manager.h" />
+    <ClInclude Include="..\agent_location_manager_inline.h" />
+    <ClInclude Include="..\agent_manager.h" />
+    <ClInclude Include="..\agent_manager_actions.h" />
+    <ClInclude Include="..\agent_manager_inline.h" />
+    <ClInclude Include="..\agent_manager_planner.h" />
+    <ClInclude Include="..\agent_manager_properties.h" />
+    <ClInclude Include="..\agent_manager_properties_inline.h" />
+    <ClInclude Include="..\agent_manager_space.h" />
+    <ClInclude Include="..\agent_member_manager.h" />
+    <ClInclude Include="..\agent_member_manager_inline.h" />
+    <ClInclude Include="..\agent_memory_manager.h" />
+    <ClInclude Include="..\agent_memory_manager_inline.h" />
+    <ClInclude Include="..\aimers_base.h" />
+    <ClInclude Include="..\aimers_base_inline.h" />
+    <ClInclude Include="..\aimers_bone.h" />
+    <ClInclude Include="..\aimers_bone_inline.h" />
+    <ClInclude Include="..\aimers_weapon.h" />
+    <ClInclude Include="..\aimers_weapon_inline.h" />
+    <ClInclude Include="..\AI\ai_monsters_anims.h" />
+    <ClInclude Include="..\AI\ai_monsters_misc.h" />
+    <ClInclude Include="..\AI\Crow\ai_crow.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_bones.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_defs.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_effector.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_motion_stats.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_shared_data.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_squad.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_squad_manager.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_squad_manager_inline.h" />
+    <ClInclude Include="..\ai\Monsters\ai_monster_utils.h" />
+    <ClInclude Include="..\ai\Monsters\anim_triple.h" />
+    <ClInclude Include="..\ai\Monsters\anomaly_detector.h" />
+    <ClInclude Include="..\ai\monsters\anti_aim_ability.h" />
+    <ClInclude Include="..\ai\Monsters\BaseMonster\base_monster.h" />
+    <ClInclude Include="..\ai\Monsters\BaseMonster\base_monster_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_alien.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_attack_state.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_attack_state_hide.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_attack_state_hide_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_attack_state_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_predator.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_predator_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_predator_lite.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_predator_lite_inline.h" />
+    <ClInclude Include="..\ai\monsters\bloodsucker\bloodsucker_state_capture_jump.h" />
+    <ClInclude Include="..\ai\monsters\bloodsucker\bloodsucker_state_capture_jump_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_approach.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_approach_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_effector.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_execute.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_execute_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_hide.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_hide_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Boar\boar.h" />
+    <ClInclude Include="..\ai\Monsters\Boar\boar_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_fast_gravi.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack.h" />
+    <ClInclude Include="..\ai\monsters\burer\burer_state_attack_antiaim.h" />
+    <ClInclude Include="..\ai\monsters\burer\burer_state_attack_antiaim_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_gravi.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_gravi_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_melee.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_melee_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_run_around.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_run_around_inline.h" />
+    <ClInclude Include="..\ai\monsters\burer\burer_state_attack_shield.h" />
+    <ClInclude Include="..\ai\monsters\burer\burer_state_attack_shield_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_tele.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_attack_tele_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Burer\burer_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Cat\cat.h" />
+    <ClInclude Include="..\ai\Monsters\Cat\cat_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting_come_out.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting_come_out_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting_move_to_cover.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_hunting_move_to_cover_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_roar.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_roar_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_steal.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_steal_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_walk.h" />
+    <ClInclude Include="..\ai\Monsters\Chimera\chimera_state_threaten_walk_inline.h" />
+    <ClInclude Include="..\ai\Monsters\controlled_actor.h" />
+    <ClInclude Include="..\ai\Monsters\controlled_entity.h" />
+    <ClInclude Include="..\ai\Monsters\controlled_entity_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_animation.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_direction.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_psy_hit.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_psy_hit_effector.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_camp.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_camp_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_fast_move.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_fast_move_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_fire.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_fire_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_hide.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_hide_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_hide_lite.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_hide_lite_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_moveout.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_attack_moveout_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_control_hit.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_control_hit_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_state_panic.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_tube.h" />
+    <ClInclude Include="..\ai\Monsters\Controller\controller_tube_inline.h" />
+    <ClInclude Include="..\ai\Monsters\control_animation.h" />
+    <ClInclude Include="..\ai\Monsters\control_animation_base.h" />
+    <ClInclude Include="..\ai\Monsters\control_combase.h" />
+    <ClInclude Include="..\ai\Monsters\control_com_defs.h" />
+    <ClInclude Include="..\ai\Monsters\control_critical_wound.h" />
+    <ClInclude Include="..\ai\Monsters\control_direction.h" />
+    <ClInclude Include="..\ai\Monsters\control_direction_base.h" />
+    <ClInclude Include="..\ai\Monsters\control_jump.h" />
+    <ClInclude Include="..\ai\Monsters\control_manager.h" />
+    <ClInclude Include="..\ai\Monsters\control_manager_custom.h" />
+    <ClInclude Include="..\ai\Monsters\control_melee_jump.h" />
+    <ClInclude Include="..\ai\Monsters\control_movement.h" />
+    <ClInclude Include="..\ai\Monsters\control_movement_base.h" />
+    <ClInclude Include="..\ai\Monsters\control_path_builder.h" />
+    <ClInclude Include="..\ai\Monsters\control_path_builder_base.h" />
+    <ClInclude Include="..\ai\Monsters\control_path_builder_base_inline.h" />
+    <ClInclude Include="..\ai\Monsters\control_rotation_jump.h" />
+    <ClInclude Include="..\ai\Monsters\control_run_attack.h" />
+    <ClInclude Include="..\ai\Monsters\control_sequencer.h" />
+    <ClInclude Include="..\ai\Monsters\control_threaten.h" />
+    <ClInclude Include="..\ai\Monsters\corpse_cover.h" />
+    <ClInclude Include="..\ai\Monsters\custom_events.h" />
+    <ClInclude Include="..\ai\Monsters\Dog\dog.h" />
+    <ClInclude Include="..\ai\Monsters\Dog\dog_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\energy_holder.h" />
+    <ClInclude Include="..\ai\Monsters\Flesh\flesh.h" />
+    <ClInclude Include="..\ai\Monsters\Flesh\flesh_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Fracture\fracture.h" />
+    <ClInclude Include="..\ai\Monsters\Fracture\fracture_state_manager.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_attack.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_attack_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_attack_run.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_attack_run_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_custom.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_custom_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat_drag.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat_drag_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat_eat.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat_eat_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_eat_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_hear_danger_sound.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_hear_danger_sound_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_home_point_attack.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_home_point_attack_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_panic.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_panic_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_panic_run.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_panic_run_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_rest.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_rest_idle.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_rest_idle_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_rest_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_squad_move_to_radius.h" />
+    <ClInclude Include="..\ai\monsters\group_states\group_state_squad_move_to_radius_inline.h" />
+    <ClInclude Include="..\ai\monsters\group_states\state_adapter.h" />
+    <ClInclude Include="..\ai\Monsters\invisibility.h" />
+    <ClInclude Include="..\ai\Monsters\melee_checker.h" />
+    <ClInclude Include="..\ai\Monsters\melee_checker_inline.h" />
+    <ClInclude Include="..\ai\monsters\monster_aura.h" />
+    <ClInclude Include="..\ai\Monsters\monster_corpse_manager.h" />
+    <ClInclude Include="..\ai\Monsters\monster_corpse_memory.h" />
+    <ClInclude Include="..\ai\Monsters\monster_cover_manager.h" />
+    <ClInclude Include="..\ai\Monsters\monster_enemy_manager.h" />
+    <ClInclude Include="..\ai\Monsters\monster_enemy_memory.h" />
+    <ClInclude Include="..\ai\Monsters\monster_event_manager.h" />
+    <ClInclude Include="..\ai\Monsters\monster_event_manager_defs.h" />
+    <ClInclude Include="..\ai\Monsters\monster_hit_memory.h" />
+    <ClInclude Include="..\ai\Monsters\monster_home.h" />
+    <ClInclude Include="..\ai\Monsters\monster_morale.h" />
+    <ClInclude Include="..\ai\Monsters\monster_morale_inline.h" />
+    <ClInclude Include="..\ai\Monsters\monster_sound_defs.h" />
+    <ClInclude Include="..\ai\Monsters\monster_sound_memory.h" />
+    <ClInclude Include="..\ai\Monsters\monster_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\monster_state_manager_inline.h" />
+    <ClInclude Include="..\ai\Monsters\monster_velocity_space.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist_movement.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist_state_attack_hidden.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist_state_attack_hidden_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Poltergeist\poltergeist_state_rest.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\pseudodog.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\pseudodog_psi_effector.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\pseudodog_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_aura.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_state_psy_attack.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_state_psy_attack_hide.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_state_psy_attack_hide_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Pseudodog\psy_dog_state_psy_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\PseudoGigant\pseudogigant_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\PseudoGigant\pseudo_gigant.h" />
+    <ClInclude Include="..\ai\Monsters\PseudoGigant\pseudo_gigant_step_effector.h" />
+    <ClInclude Include="..\ai\Monsters\psy_aura.h" />
+    <ClInclude Include="..\ai\monsters\rats\ai_rat.h" />
+    <ClInclude Include="..\ai\monsters\rats\ai_rat_impl.h" />
+    <ClInclude Include="..\ai\monsters\rats\ai_rat_inline.h" />
+    <ClInclude Include="..\ai\monsters\rats\ai_rat_space.h" />
+    <ClInclude Include="..\ai\Monsters\scanning_ability.h" />
+    <ClInclude Include="..\ai\Monsters\scanning_ability_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Snork\snork.h" />
+    <ClInclude Include="..\ai\Monsters\Snork\snork_jump.h" />
+    <ClInclude Include="..\ai\Monsters\Snork\snork_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\state.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_camp.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_camp_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_camp_stealout.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_camp_stealout_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_melee.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_melee_inline.h" />
+    <ClInclude Include="..\ai\monsters\states\monster_state_attack_on_run.h" />
+    <ClInclude Include="..\ai\monsters\states\monster_state_attack_on_run_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_run.h" />
+    <ClInclude Include="..\ai\monsters\states\monster_state_attack_run_attack.h" />
+    <ClInclude Include="..\ai\monsters\states\monster_state_attack_run_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_attack_run_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled_attack.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled_follow.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled_follow_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_controlled_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat_drag.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat_drag_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat_eat.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat_eat_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_eat_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_angry.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_angry_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_look.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_look_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_run.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_run_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_walk.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_find_enemy_walk_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hear_danger_sound.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hear_danger_sound_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hear_int_sound.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hear_int_sound_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_help_sound.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_help_sound_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted_hide.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted_hide_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted_moveout.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_hitted_moveout_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_attack.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_attack_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_danger.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_danger_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_rest.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_home_point_rest_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_panic.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_panic_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_panic_run.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_panic_run_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_fun.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_fun_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_idle.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_idle_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_sleep.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_sleep_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_walk_graph.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_rest_walk_graph_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_smart_terrain_task.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_smart_terrain_task_graph_walk.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_smart_terrain_task_graph_walk_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_smart_terrain_task_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_squad_rest.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_squad_rest_follow.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_squad_rest_follow_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_squad_rest_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_steal.h" />
+    <ClInclude Include="..\ai\Monsters\States\monster_state_steal_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_custom_action.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_custom_action_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_custom_action_look.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_custom_action_look_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_data.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_hide_from_point.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_hide_from_point_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_hit_object.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_hit_object_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_look_point.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_look_point_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_look_unprotected_area.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_look_unprotected_area_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_around_point.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_around_point_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_to_point.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_to_point_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_to_restrictor.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_move_to_restrictor_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_test_look_actor.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_test_look_actor_inline.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_test_state.h" />
+    <ClInclude Include="..\ai\Monsters\States\state_test_state_inline.h" />
+    <ClInclude Include="..\ai\Monsters\state_defs.h" />
+    <ClInclude Include="..\ai\Monsters\state_inline.h" />
+    <ClInclude Include="..\ai\Monsters\state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\telekinesis.h" />
+    <ClInclude Include="..\ai\Monsters\telekinesis_inline.h" />
+    <ClInclude Include="..\ai\Monsters\telekinetic_object.h" />
+    <ClInclude Include="..\ai\Monsters\Tushkano\tushkano.h" />
+    <ClInclude Include="..\ai\Monsters\Tushkano\tushkano_state_manager.h" />
+    <ClInclude Include="..\ai\Monsters\Zombie\zombie.h" />
+    <ClInclude Include="..\ai\Monsters\Zombie\zombie_state_attack_run.h" />
+    <ClInclude Include="..\ai\Monsters\Zombie\zombie_state_attack_run_inline.h" />
+    <ClInclude Include="..\ai\Monsters\Zombie\zombie_state_manager.h" />
+    <ClInclude Include="..\ai\phantom\phantom.h" />
+    <ClInclude Include="..\ai\position_prediction.h" />
+    <ClInclude Include="..\Ai\Stalker\ai_stalker.h" />
+    <ClInclude Include="..\ai\stalker\ai_stalker_impl.h" />
+    <ClInclude Include="..\ai\stalker\ai_stalker_inline.h" />
+    <ClInclude Include="..\Ai\Stalker\ai_stalker_space.h" />
+    <ClInclude Include="..\Ai\Trader\ai_trader.h" />
+    <ClInclude Include="..\ai\trader\trader_animation.h" />
+    <ClInclude Include="..\ai\weighted_random.h" />
+    <ClInclude Include="..\ai_debug.h" />
+    <ClInclude Include="..\ai_debug_variables.h" />
+    <ClInclude Include="..\ai_monster_space.h" />
+    <ClInclude Include="..\ai_object_location.h" />
+    <ClInclude Include="..\ai_object_location_impl.h" />
+    <ClInclude Include="..\ai_object_location_inline.h" />
+    <ClInclude Include="..\ai_obstacle.h" />
+    <ClInclude Include="..\ai_obstacle_inline.h" />
+    <ClInclude Include="..\AI_PhraseDialogManager.h" />
+    <ClInclude Include="..\ai_space.h" />
+    <ClInclude Include="..\ai_space_inline.h" />
+    <ClInclude Include="..\alife_abstract_registry.h" />
+    <ClInclude Include="..\alife_abstract_registry_inline.h" />
+    <ClInclude Include="..\alife_combat_manager.h" />
+    <ClInclude Include="..\alife_combat_manager_inline.h" />
+    <ClInclude Include="..\alife_communication_manager.h" />
+    <ClInclude Include="..\alife_communication_manager_inline.h" />
+    <ClInclude Include="..\alife_communication_space.h" />
+    <ClInclude Include="..\alife_graph_registry.h" />
+    <ClInclude Include="..\alife_graph_registry_inline.h" />
+    <ClInclude Include="..\alife_group_registry.h" />
+    <ClInclude Include="..\alife_group_registry_inline.h" />
+    <ClInclude Include="..\alife_human_brain_save.h" />
+    <ClInclude Include="..\alife_human_object_handler.h" />
+    <ClInclude Include="..\alife_human_object_handler_inline.h" />
+    <ClInclude Include="..\alife_human_object_handler_save.h" />
+    <ClInclude Include="..\alife_interaction_manager.h" />
+    <ClInclude Include="..\alife_interaction_manager_inline.h" />
+    <ClInclude Include="..\alife_level_registry.h" />
+    <ClInclude Include="..\alife_level_registry_inline.h" />
+    <ClInclude Include="..\alife_monster_detail_path_manager.h" />
+    <ClInclude Include="..\alife_monster_detail_path_manager_inline.h" />
+    <ClInclude Include="..\alife_monster_movement_manager.h" />
+    <ClInclude Include="..\alife_monster_movement_manager_inline.h" />
+    <ClInclude Include="..\alife_monster_patrol_path_manager.h" />
+    <ClInclude Include="..\alife_monster_patrol_path_manager_inline.h" />
+    <ClInclude Include="..\alife_object_registry.h" />
+    <ClInclude Include="..\alife_object_registry_inline.h" />
+    <ClInclude Include="..\alife_online_offline_group_brain.h" />
+    <ClInclude Include="..\alife_online_offline_group_brain_inline.h" />
+    <ClInclude Include="..\alife_registry_container.h" />
+    <ClInclude Include="..\alife_registry_container_composition.h" />
+    <ClInclude Include="..\alife_registry_container_inline.h" />
+    <ClInclude Include="..\alife_registry_container_space.h" />
+    <ClInclude Include="..\alife_registry_wrapper.h" />
+    <ClInclude Include="..\alife_registry_wrappers.h" />
+    <ClInclude Include="..\alife_schedule_registry.h" />
+    <ClInclude Include="..\alife_schedule_registry_inline.h" />
+    <ClInclude Include="..\alife_simulator.h" />
+    <ClInclude Include="..\alife_simulator_base.h" />
+    <ClInclude Include="..\alife_simulator_base_inline.h" />
+    <ClInclude Include="..\alife_simulator_header.h" />
+    <ClInclude Include="..\alife_simulator_header_inline.h" />
+    <ClInclude Include="..\alife_simulator_inline.h" />
+    <ClInclude Include="..\alife_smart_terrain_registry.h" />
+    <ClInclude Include="..\alife_smart_terrain_registry_inline.h" />
+    <ClInclude Include="..\alife_smart_terrain_task.h" />
+    <ClInclude Include="..\alife_smart_terrain_task_inline.h" />
+    <ClInclude Include="..\alife_spawn_registry.h" />
+    <ClInclude Include="..\alife_spawn_registry_header.h" />
+    <ClInclude Include="..\alife_spawn_registry_header_inline.h" />
+    <ClInclude Include="..\alife_spawn_registry_inline.h" />
+    <ClInclude Include="..\alife_storage_manager.h" />
+    <ClInclude Include="..\alife_storage_manager_inline.h" />
+    <ClInclude Include="..\alife_story_registry.h" />
+    <ClInclude Include="..\alife_story_registry_inline.h" />
+    <ClInclude Include="..\alife_surge_manager.h" />
+    <ClInclude Include="..\alife_surge_manager_inline.h" />
+    <ClInclude Include="..\alife_switch_manager.h" />
+    <ClInclude Include="..\alife_switch_manager_inline.h" />
+    <ClInclude Include="..\alife_time_manager.h" />
+    <ClInclude Include="..\alife_time_manager_inline.h" />
+    <ClInclude Include="..\alife_update_manager.h" />
+    <ClInclude Include="..\alife_update_manager_inline.h" />
+    <ClInclude Include="..\AmebaZone.h" />
+    <ClInclude Include="..\ammunition_groups.h" />
+    <ClInclude Include="..\animation_movement_controller.h" />
+    <ClInclude Include="..\animation_script_callback.h" />
+    <ClInclude Include="..\animation_utils.h" />
+    <ClInclude Include="..\anticheat_dumpable_object.h" />
+    <ClInclude Include="..\antirad.h" />
+    <ClInclude Include="..\Artefact.h" />
+    <ClInclude Include="..\artefact_activation.h" />
+    <ClInclude Include="..\atlas_stalkercoppc_v1.h" />
+    <ClInclude Include="..\atlas_submit_queue.h" />
+    <ClInclude Include="..\attachable_item.h" />
+    <ClInclude Include="..\attachable_item_inline.h" />
+    <ClInclude Include="..\attachment_owner.h" />
+    <ClInclude Include="..\attachment_owner_inline.h" />
+    <ClInclude Include="..\autosave_manager.h" />
+    <ClInclude Include="..\autosave_manager_inline.h" />
+    <ClInclude Include="..\awards_store.h" />
+    <ClInclude Include="..\a_star.h" />
+    <ClInclude Include="..\a_star_inline.h" />
+    <ClInclude Include="..\base_client_classes.h" />
+    <ClInclude Include="..\base_client_classes_wrappers.h" />
+    <ClInclude Include="..\BastArtifact.h" />
+    <ClInclude Include="..\best_scores_helper.h" />
+    <ClInclude Include="..\best_scores_store.h" />
+    <ClInclude Include="..\BlackDrops.h" />
+    <ClInclude Include="..\BlackGraviArtifact.h" />
+    <ClInclude Include="..\black_list.h" />
+    <ClInclude Include="..\Bolt.h" />
+    <ClInclude Include="..\BoneProtections.h" />
+    <ClInclude Include="..\bone_groups.h" />
+    <ClInclude Include="..\BottleItem.h" />
+    <ClInclude Include="..\BreakableObject.h" />
+    <ClInclude Include="..\builder_allocator_constructor.h" />
+    <ClInclude Include="..\builder_allocator_constructor_inline.h" />
+    <ClInclude Include="..\callback_info.h" />
+    <ClInclude Include="..\CameraEffector.h" />
+    <ClInclude Include="..\CameraFirstEye.h" />
+    <ClInclude Include="..\cameralook.h" />
+    <ClInclude Include="..\CameraRecoil.h" />
+    <ClInclude Include="..\CaptureBoneCallback.h" />
+    <ClInclude Include="..\Car.h" />
+    <ClInclude Include="..\CarDamageParticles.h" />
+    <ClInclude Include="..\CarLights.h" />
+    <ClInclude Include="..\CarWeapon.h" />
+    <ClInclude Include="..\car_memory.h" />
+    <ClInclude Include="..\cdkey_ban_list.h" />
+    <ClInclude Include="..\CharacterPhysicsSupport.h" />
+    <ClInclude Include="..\character_community.h" />
+    <ClInclude Include="..\character_hit_animations.h" />
+    <ClInclude Include="..\character_hit_animations_params.h" />
+    <ClInclude Include="..\character_rank.h" />
+    <ClInclude Include="..\character_reputation.h" />
+    <ClInclude Include="..\character_shell_control.h" />
+    <ClInclude Include="..\client_spawn_manager.h" />
+    <ClInclude Include="..\client_spawn_manager_inline.h" />
+    <ClInclude Include="..\ClimableObject.h" />
+    <ClInclude Include="..\command_switch_counter.h" />
+    <ClInclude Include="..\condition_state.h" />
+    <ClInclude Include="..\condition_state_inline.h" />
+    <ClInclude Include="..\configs_common.h" />
+    <ClInclude Include="..\configs_dumper.h" />
+    <ClInclude Include="..\configs_dump_verifyer.h" />
+    <ClInclude Include="..\console_registrator.h" />
+    <ClInclude Include="..\controller_state_panic_inline.h" />
+    <ClInclude Include="..\control_action.h" />
+    <ClInclude Include="..\control_action_inline.h" />
+    <ClInclude Include="..\cover_evaluators.h" />
+    <ClInclude Include="..\cover_evaluators_inline.h" />
+    <ClInclude Include="..\cover_manager.h" />
+    <ClInclude Include="..\cover_manager_inline.h" />
+    <ClInclude Include="..\cover_point.h" />
+    <ClInclude Include="..\cover_point_inline.h" />
+    <ClInclude Include="..\cta_game_artefact.h" />
+    <ClInclude Include="..\cta_game_artefact_activation.h" />
+    <ClInclude Include="..\CustomDetector.h" />
+    <ClInclude Include="..\CustomDevice.h" />
+    <ClInclude Include="..\CustomMonster.h" />
+    <ClInclude Include="..\CustomMonster_inline.h" />
+    <ClInclude Include="..\CustomOutfit.h" />
+    <ClInclude Include="..\CustomRocket.h" />
+    <ClInclude Include="..\CustomZone.h" />
+    <ClInclude Include="..\DamagableItem.h" />
+    <ClInclude Include="..\DamageSource.h" />
+    <ClInclude Include="..\damage_manager.h" />
+    <ClInclude Include="..\damage_manager_inline.h" />
+    <ClInclude Include="..\danger_cover_location.h" />
+    <ClInclude Include="..\danger_cover_location_inline.h" />
+    <ClInclude Include="..\danger_explosive.h" />
+    <ClInclude Include="..\danger_explosive_inline.h" />
+    <ClInclude Include="..\danger_location.h" />
+    <ClInclude Include="..\danger_location_inline.h" />
+    <ClInclude Include="..\danger_manager.h" />
+    <ClInclude Include="..\danger_manager_inline.h" />
+    <ClInclude Include="..\danger_object.h" />
+    <ClInclude Include="..\danger_object_inline.h" />
+    <ClInclude Include="..\danger_object_location.h" />
+    <ClInclude Include="..\danger_object_location_inline.h" />
+    <ClInclude Include="..\data_storage_binary_heap.h" />
+    <ClInclude Include="..\data_storage_binary_heap_inline.h" />
+    <ClInclude Include="..\data_storage_bucket_list.h" />
+    <ClInclude Include="..\data_storage_bucket_list_inline.h" />
+    <ClInclude Include="..\data_storage_constructor.h" />
+    <ClInclude Include="..\data_storage_double_linked_list.h" />
+    <ClInclude Include="..\data_storage_double_linked_list_inline.h" />
+    <ClInclude Include="..\data_storage_single_linked_list.h" />
+    <ClInclude Include="..\data_storage_single_linked_list_inline.h" />
+    <ClInclude Include="..\date_time.h" />
+    <ClInclude Include="..\death_anims.h" />
+    <ClInclude Include="..\debug_make_final.hpp" />
+    <ClInclude Include="..\debug_renderer.h" />
+    <ClInclude Include="..\debug_renderer_inline.h" />
+    <ClInclude Include="..\debug_text_tree.h" />
+    <ClInclude Include="..\debug_text_tree_inline.h" />
+    <ClInclude Include="..\DelayedActionFuse.h" />
+    <ClInclude Include="..\DemoInfo.h" />
+    <ClInclude Include="..\DemoInfo_Loader.h" />
+    <ClInclude Include="..\DemoPlay_Control.h" />
+    <ClInclude Include="..\DestroyablePhysicsObject.h" />
+    <ClInclude Include="..\detail_path_builder.h" />
+    <ClInclude Include="..\detail_path_manager.h" />
+    <ClInclude Include="..\detail_path_manager_inline.h" />
+    <ClInclude Include="..\detail_path_manager_space.h" />
+    <ClInclude Include="..\dijkstra.h" />
+    <ClInclude Include="..\dijkstra_inline.h" />
+    <ClInclude Include="..\doors.h" />
+    <ClInclude Include="..\doors_actor.h" />
+    <ClInclude Include="..\doors_door.h" />
+    <ClInclude Include="..\doors_manager.h" />
+    <ClInclude Include="..\Dosimeter.h" />
+    <ClInclude Include="..\double_shot_double_kill.h" />
+    <ClInclude Include="..\DummyArtifact.h" />
+    <ClInclude Include="..\DynamicHeightMap.h" />
+    <ClInclude Include="..\dynamic_obstacles_avoider.h" />
+    <ClInclude Include="..\dynamic_obstacles_avoider_inline.h" />
+    <ClInclude Include="..\eatable_item.h" />
+    <ClInclude Include="..\eatable_item_object.h" />
+    <ClInclude Include="..\edge_path.h" />
+    <ClInclude Include="..\edge_path_inline.h" />
+    <ClInclude Include="..\EffectorBobbing.h" />
+    <ClInclude Include="..\EffectorFall.h" />
+    <ClInclude Include="..\EffectorShot.h" />
+    <ClInclude Include="..\EffectorShotX.h" />
+    <ClInclude Include="..\EffectorZoomInertion.h" />
+    <ClInclude Include="..\ef_base.h" />
+    <ClInclude Include="..\ef_pattern.h" />
+    <ClInclude Include="..\ef_primary.h" />
+    <ClInclude Include="..\ef_storage.h" />
+    <ClInclude Include="..\ef_storage_inline.h" />
+    <ClInclude Include="..\ElectricBall.h" />
+    <ClInclude Include="..\EliteDetector.h" />
+    <ClInclude Include="..\encyclopedia_article.h" />
+    <ClInclude Include="..\encyclopedia_article_defs.h" />
+    <ClInclude Include="..\enemy_manager.h" />
+    <ClInclude Include="..\enemy_manager_inline.h" />
+    <ClInclude Include="..\Entity.h" />
+    <ClInclude Include="..\EntityCondition.h" />
+    <ClInclude Include="..\entity_alive.h" />
+    <ClInclude Include="..\entity_alive_inline.h" />
+    <ClInclude Include="..\event_conditions_collection.h" />
+    <ClInclude Include="..\ExoOutfit.h" />
+    <ClInclude Include="..\ExplosiveItem.h" />
+    <ClInclude Include="..\ExplosiveRocket.h" />
+    <ClInclude Include="..\F1.h" />
+    <ClInclude Include="..\FadedBall.h" />
+    <ClInclude Include="..\faster_than_bullets_time.h" />
+    <ClInclude Include="..\filereceiver_node.h" />
+    <ClInclude Include="..\filetransfer_common.h" />
+    <ClInclude Include="..\filetransfer_node.h" />
+    <ClInclude Include="..\file_transfer.h" />
+    <ClInclude Include="..\firedeps.h" />
+    <ClInclude Include="..\fire_disp_controller.h" />
+    <ClInclude Include="..\first_bullet_controller.h" />
+    <ClInclude Include="..\flare.h" />
+    <ClInclude Include="..\Flashlight.h" />
+    <ClInclude Include="..\FoodItem.h" />
+    <ClInclude Include="..\FryupZone.h" />
+    <ClInclude Include="..\fs_registrator.h" />
+    <ClInclude Include="..\GalantineArtifact.h" />
+    <ClInclude Include="..\GameObject.h" />
+    <ClInclude Include="..\GamePersistent.h" />
+    <ClInclude Include="..\gamespy\CdkeyDecode\base32.h" />
+    <ClInclude Include="..\gamespy\CdkeyDecode\cdkeydecode.h" />
+    <ClInclude Include="..\GameTask.h" />
+    <ClInclude Include="..\GameTaskDefs.h" />
+    <ClInclude Include="..\GametaskManager.h" />
+    <ClInclude Include="..\game_base.h" />
+    <ClInclude Include="..\game_base_kill_type.h" />
+    <ClInclude Include="..\game_base_menu_events.h" />
+    <ClInclude Include="..\game_cl_artefacthunt.h" />
+    <ClInclude Include="..\game_cl_artefacthunt_snd_msg.h" />
+    <ClInclude Include="..\game_cl_base.h" />
+    <ClInclude Include="..\game_cl_base_weapon_usage_statistic.h" />
+    <ClInclude Include="..\game_cl_capturetheartefact_snd_msg.h" />
+    <ClInclude Include="..\game_cl_capture_the_artefact.h" />
+    <ClInclude Include="..\game_cl_capture_the_artefact_captions_manager.h" />
+    <ClInclude Include="..\game_cl_deathmatch.h" />
+    <ClInclude Include="..\game_cl_deathmatch_snd_messages.h" />
+    <ClInclude Include="..\game_cl_mp.h" />
+    <ClInclude Include="..\game_cl_mp_messages_menu.h" />
+    <ClInclude Include="..\game_cl_mp_snd_messages.h" />
+    <ClInclude Include="..\game_cl_single.h" />
+    <ClInclude Include="..\game_cl_teamdeathmatch.h" />
+    <ClInclude Include="..\game_cl_teamdeathmatch_snd_messages.h" />
+    <ClInclude Include="..\game_events_handler.h" />
+    <ClInclude Include="..\game_graph.h" />
+    <ClInclude Include="..\game_graph_inline.h" />
+    <ClInclude Include="..\game_level_cross_table.h" />
+    <ClInclude Include="..\game_level_cross_table_inline.h" />
+    <ClInclude Include="..\game_location_selector.h" />
+    <ClInclude Include="..\game_location_selector_inline.h" />
+    <ClInclude Include="..\game_news.h" />
+    <ClInclude Include="..\game_object_space.h" />
+    <ClInclude Include="..\game_path_manager.h" />
+    <ClInclude Include="..\game_path_manager_inline.h" />
+    <ClInclude Include="..\game_state_accumulator.h" />
+    <ClInclude Include="..\game_state_accumulator_inline.h" />
+    <ClInclude Include="..\game_sv_artefacthunt.h" />
+    <ClInclude Include="..\game_sv_base.h" />
+    <ClInclude Include="..\game_sv_base_console_vars.h" />
+    <ClInclude Include="..\game_sv_capture_the_artefact.h" />
+    <ClInclude Include="..\game_sv_deathmatch.h" />
+    <ClInclude Include="..\game_sv_event_queue.h" />
+    <ClInclude Include="..\game_sv_item_respawner.h" />
+    <ClInclude Include="..\game_sv_mp.h" />
+    <ClInclude Include="..\game_sv_mp_team.h" />
+    <ClInclude Include="..\game_sv_mp_vote_flags.h" />
+    <ClInclude Include="..\game_sv_single.h" />
+    <ClInclude Include="..\game_sv_teamdeathmatch.h" />
+    <ClInclude Include="..\GlobalFeelTouch.hpp" />
+    <ClInclude Include="..\graph_edge.h" />
+    <ClInclude Include="..\graph_edge_inline.h" />
+    <ClInclude Include="..\graph_engine.h" />
+    <ClInclude Include="..\graph_engine_inline.h" />
+    <ClInclude Include="..\graph_engine_space.h" />
+    <ClInclude Include="..\graph_vertex.h" />
+    <ClInclude Include="..\graph_vertex_inline.h" />
+    <ClInclude Include="..\GraviArtifact.h" />
+    <ClInclude Include="..\GraviZone.h" />
+    <ClInclude Include="..\Grenade.h" />
+    <ClInclude Include="..\GrenadeLauncher.h" />
+    <ClInclude Include="..\group_hierarchy_holder.h" />
+    <ClInclude Include="..\group_hierarchy_holder_inline.h" />
+    <ClInclude Include="..\gsc_dsigned_ltx.h" />
+    <ClInclude Include="..\HairsZone.h" />
+    <ClInclude Include="..\HangingLamp.h" />
+    <ClInclude Include="..\harvest_time.h" />
+    <ClInclude Include="..\helicopter.h" />
+    <ClInclude Include="..\Hit.h" />
+    <ClInclude Include="..\HitMarker.h" />
+    <ClInclude Include="..\hits_store.h" />
+    <ClInclude Include="..\hits_store_inline.h" />
+    <ClInclude Include="..\hit_immunity.h" />
+    <ClInclude Include="..\hit_immunity_space.h" />
+    <ClInclude Include="..\hit_memory_manager.h" />
+    <ClInclude Include="..\hit_memory_manager_inline.h" />
+    <ClInclude Include="..\holder_custom.h" />
+    <ClInclude Include="..\HUDCrosshair.h" />
+    <ClInclude Include="..\HudItem.h" />
+    <ClInclude Include="..\HUDManager.h" />
+    <ClInclude Include="..\HudSound.h" />
+    <ClInclude Include="..\HUDTarget.h" />
+    <ClInclude Include="..\hud_item_object.h" />
+    <ClInclude Include="..\id_generator.h" />
+    <ClInclude Include="..\IKFoot.h" />
+    <ClInclude Include="..\IKFoot_inl.h" />
+    <ClInclude Include="..\IKLimbsController.h" />
+    <ClInclude Include="..\Ik\aint.h" />
+    <ClInclude Include="..\Ik\Dof7control.h" />
+    <ClInclude Include="..\Ik\eqn.h" />
+    <ClInclude Include="..\Ik\eulersolver.h" />
+    <ClInclude Include="..\Ik\IKLimb.h" />
+    <ClInclude Include="..\Ik\jtlimits.h" />
+    <ClInclude Include="..\Ik\limb.h" />
+    <ClInclude Include="..\Ik\math3d.h" />
+    <ClInclude Include="..\Ik\mathTrig.h" />
+    <ClInclude Include="..\ik_anim_state.h" />
+    <ClInclude Include="..\ik_calculate_data.h" />
+    <ClInclude Include="..\ik_calculate_state.h" />
+    <ClInclude Include="..\ik_collide_data.h" />
+    <ClInclude Include="..\ik_dbg_matrix.h" />
+    <ClInclude Include="..\ik_foot_collider.h" />
+    <ClInclude Include="..\ik_limb_state.h" />
+    <ClInclude Include="..\ik_limb_state_predict.h" />
+    <ClInclude Include="..\ik_object_shift.h" />
+    <ClInclude Include="..\imotion_position.h" />
+    <ClInclude Include="..\imotion_velocity.h" />
+    <ClInclude Include="..\InfoDocument.h" />
+    <ClInclude Include="..\InfoPortion.h" />
+    <ClInclude Include="..\ini_id_loader.h" />
+    <ClInclude Include="..\ini_table_loader.h" />
+    <ClInclude Include="..\interactive_animation.h" />
+    <ClInclude Include="..\interactive_motion.h" />
+    <ClInclude Include="..\Inventory.h" />
+    <ClInclude Include="..\InventoryBox.h" />
+    <ClInclude Include="..\InventoryOwner.h" />
+    <ClInclude Include="..\inventory_item.h" />
+    <ClInclude Include="..\inventory_item_impl.h" />
+    <ClInclude Include="..\inventory_item_inline.h" />
+    <ClInclude Include="..\inventory_item_object.h" />
+    <ClInclude Include="..\inventory_item_object_inline.h" />
+    <ClInclude Include="..\inventory_owner_inline.h" />
+    <ClInclude Include="..\inventory_upgrade.h" />
+    <ClInclude Include="..\inventory_upgrade_base.h" />
+    <ClInclude Include="..\inventory_upgrade_base_inline.h" />
+    <ClInclude Include="..\inventory_upgrade_group.h" />
+    <ClInclude Include="..\inventory_upgrade_group_inline.h" />
+    <ClInclude Include="..\inventory_upgrade_inline.h" />
+    <ClInclude Include="..\inventory_upgrade_manager.h" />
+    <ClInclude Include="..\inventory_upgrade_manager_inline.h" />
+    <ClInclude Include="..\inventory_upgrade_property.h" />
+    <ClInclude Include="..\inventory_upgrade_property_inline.h" />
+    <ClInclude Include="..\inventory_upgrade_root.h" />
+    <ClInclude Include="..\inventory_upgrade_root_inline.h" />
+    <ClInclude Include="..\invincible_fury.h" />
+    <ClInclude Include="..\item_manager.h" />
+    <ClInclude Include="..\key_binding_registrator.h" />
+    <ClInclude Include="..\killer_victim_velocity_angle.h" />
+    <ClInclude Include="..\kills_store.h" />
+    <ClInclude Include="..\kills_store_inline.h" />
+    <ClInclude Include="..\Level.h" />
+    <ClInclude Include="..\Level_Bullet_Manager.h" />
+    <ClInclude Include="..\level_changer.h" />
+    <ClInclude Include="..\level_debug.h" />
+    <ClInclude Include="..\level_graph.h" />
+    <ClInclude Include="..\level_graph_inline.h" />
+    <ClInclude Include="..\level_graph_space.h" />
+    <ClInclude Include="..\level_graph_vertex_inline.h" />
+    <ClInclude Include="..\level_location_selector.h" />
+    <ClInclude Include="..\level_location_selector_inline.h" />
+    <ClInclude Include="..\Level_network_Demo.h" />
+    <ClInclude Include="..\Level_network_map_sync.h" />
+    <ClInclude Include="..\level_path_builder.h" />
+    <ClInclude Include="..\level_path_manager.h" />
+    <ClInclude Include="..\level_path_manager_inline.h" />
+    <ClInclude Include="..\level_sounds.h" />
+    <ClInclude Include="..\location_manager.h" />
+    <ClInclude Include="..\location_manager_inline.h" />
+    <ClInclude Include="..\login_manager.h" />
+    <ClInclude Include="..\magic_box3.h" />
+    <ClInclude Include="..\magic_box3_inline.h" />
+    <ClInclude Include="..\magic_minimize_1d.h" />
+    <ClInclude Include="..\magic_minimize_1d_inline.h" />
+    <ClInclude Include="..\magic_minimize_nd.h" />
+    <ClInclude Include="..\magic_minimize_nd_inline.h" />
+    <ClInclude Include="..\MainMenu.h" />
+    <ClInclude Include="..\manager_builder_allocator_constructor.h" />
+    <ClInclude Include="..\manager_builder_allocator_constructor_inline.h" />
+    <ClInclude Include="..\map_location.h" />
+    <ClInclude Include="..\map_location_defs.h" />
+    <ClInclude Include="..\map_manager.h" />
+    <ClInclude Include="..\map_spot.h" />
+    <ClInclude Include="..\material_manager.h" />
+    <ClInclude Include="..\material_manager_inline.h" />
+    <ClInclude Include="..\medkit.h" />
+    <ClInclude Include="..\member_corpse.h" />
+    <ClInclude Include="..\member_corpse_inline.h" />
+    <ClInclude Include="..\member_enemy.h" />
+    <ClInclude Include="..\member_enemy_inline.h" />
+    <ClInclude Include="..\member_order.h" />
+    <ClInclude Include="..\member_order_inline.h" />
+    <ClInclude Include="..\memory_manager.h" />
+    <ClInclude Include="..\memory_manager_inline.h" />
+    <ClInclude Include="..\memory_space.h" />
+    <ClInclude Include="..\memory_space_impl.h" />
+    <ClInclude Include="..\MercuryBall.h" />
+    <ClInclude Include="..\Message_Filter.h" />
+    <ClInclude Include="..\MilitaryOutfit.h" />
+    <ClInclude Include="..\Mincer.h" />
+    <ClInclude Include="..\Missile.h" />
+    <ClInclude Include="..\mixed_delegate.h" />
+    <ClInclude Include="..\mixed_delegate_unique_tags.h" />
+    <ClInclude Include="..\monster_community.h" />
+    <ClInclude Include="..\MosquitoBald.h" />
+    <ClInclude Include="..\movement_manager.h" />
+    <ClInclude Include="..\movement_manager_impl.h" />
+    <ClInclude Include="..\movement_manager_inline.h" />
+    <ClInclude Include="..\movement_manager_space.h" />
+    <ClInclude Include="..\moving_bones_snd_player.h" />
+    <ClInclude Include="..\moving_object.h" />
+    <ClInclude Include="..\moving_objects.h" />
+    <ClInclude Include="..\moving_objects_impl.h" />
+    <ClInclude Include="..\moving_objects_inline.h" />
+    <ClInclude Include="..\moving_object_inline.h" />
+    <ClInclude Include="..\MPPlayersBag.h" />
+    <ClInclude Include="..\mp_config_sections.h" />
+    <ClInclude Include="..\mt_config.h" />
+    <ClInclude Include="..\Needles.h" />
+    <ClInclude Include="..\NET_Queue.h" />
+    <ClInclude Include="..\NoGravityZone.h" />
+    <ClInclude Include="..\object_actions.h" />
+    <ClInclude Include="..\object_actions_inline.h" />
+    <ClInclude Include="..\object_handler.h" />
+    <ClInclude Include="..\object_handler_inline.h" />
+    <ClInclude Include="..\object_handler_planner.h" />
+    <ClInclude Include="..\object_handler_planner_impl.h" />
+    <ClInclude Include="..\object_handler_planner_inline.h" />
+    <ClInclude Include="..\object_handler_space.h" />
+    <ClInclude Include="..\object_manager.h" />
+    <ClInclude Include="..\object_manager_inline.h" />
+    <ClInclude Include="..\object_property_evaluators.h" />
+    <ClInclude Include="..\object_property_evaluators_inline.h" />
+    <ClInclude Include="..\obsolete_queue.h" />
+    <ClInclude Include="..\obsolete_queue_inline.h" />
+    <ClInclude Include="..\obstacles_query.h" />
+    <ClInclude Include="..\obstacles_query_inline.h" />
+    <ClInclude Include="..\operator_abstract.h" />
+    <ClInclude Include="..\operator_abstract_inline.h" />
+    <ClInclude Include="..\operator_condition.h" />
+    <ClInclude Include="..\operator_condition_inline.h" />
+    <ClInclude Include="..\ParticlesObject.h" />
+    <ClInclude Include="..\ParticlesPlayer.h" />
+    <ClInclude Include="..\particle_params.h" />
+    <ClInclude Include="..\particle_params_inline.h" />
+    <ClInclude Include="..\path_manager.h" />
+    <ClInclude Include="..\path_manager_game.h" />
+    <ClInclude Include="..\path_manager_game_inline.h" />
+    <ClInclude Include="..\path_manager_game_level.h" />
+    <ClInclude Include="..\path_manager_game_level_inline.h" />
+    <ClInclude Include="..\path_manager_game_vertex.h" />
+    <ClInclude Include="..\path_manager_game_vertex_inline.h" />
+    <ClInclude Include="..\path_manager_generic.h" />
+    <ClInclude Include="..\path_manager_generic_inline.h" />
+    <ClInclude Include="..\path_manager_level.h" />
+    <ClInclude Include="..\path_manager_level_flooder.h" />
+    <ClInclude Include="..\path_manager_level_flooder_inline.h" />
+    <ClInclude Include="..\path_manager_level_inline.h" />
+    <ClInclude Include="..\path_manager_level_nearest_vertex.h" />
+    <ClInclude Include="..\path_manager_level_nearest_vertex_inline.h" />
+    <ClInclude Include="..\path_manager_level_straight_line.h" />
+    <ClInclude Include="..\path_manager_level_straight_line_inline.h" />
+    <ClInclude Include="..\path_manager_params.h" />
+    <ClInclude Include="..\path_manager_params_flooder.h" />
+    <ClInclude Include="..\path_manager_params_game_level.h" />
+    <ClInclude Include="..\path_manager_params_game_vertex.h" />
+    <ClInclude Include="..\path_manager_params_nearest_vertex.h" />
+    <ClInclude Include="..\path_manager_params_straight_line.h" />
+    <ClInclude Include="..\path_manager_solver.h" />
+    <ClInclude Include="..\path_manager_solver_inline.h" />
+    <ClInclude Include="..\patrol_path.h" />
+    <ClInclude Include="..\patrol_path_inline.h" />
+    <ClInclude Include="..\patrol_path_manager.h" />
+    <ClInclude Include="..\patrol_path_manager_inline.h" />
+    <ClInclude Include="..\patrol_path_manager_space.h" />
+    <ClInclude Include="..\patrol_path_params.h" />
+    <ClInclude Include="..\patrol_path_params_inline.h" />
+    <ClInclude Include="..\patrol_path_storage.h" />
+    <ClInclude Include="..\patrol_path_storage_inline.h" />
+    <ClInclude Include="..\patrol_point.h" />
+    <ClInclude Include="..\patrol_point_inline.h" />
+    <ClInclude Include="..\PDA.h" />
+    <ClInclude Include="..\PdaMsg.h" />
+    <ClInclude Include="..\pda_space.h" />
+    <ClInclude Include="..\PHCollisionDamageReceiver.h" />
+    <ClInclude Include="..\PHCommander.h" />
+    <ClInclude Include="..\PHDebug.h" />
+    <ClInclude Include="..\PHDestroyable.h" />
+    <ClInclude Include="..\PHDestroyableNotificate.h" />
+    <ClInclude Include="..\PHMovementControl.h" />
+    <ClInclude Include="..\Phrase.h" />
+    <ClInclude Include="..\PhraseDialog.h" />
+    <ClInclude Include="..\PhraseDialogDefs.h" />
+    <ClInclude Include="..\PhraseDialogManager.h" />
+    <ClInclude Include="..\PhraseDialog_script.h" />
+    <ClInclude Include="..\PhraseScript.h" />
+    <ClInclude Include="..\PHReqComparer.h" />
+    <ClInclude Include="..\PHScriptCall.h" />
+    <ClInclude Include="..\PHShellCreator.h" />
+    <ClInclude Include="..\PHSimpleCalls.h" />
+    <ClInclude Include="..\PHSkeleton.h" />
+    <ClInclude Include="..\PHSoundPlayer.h" />
+    <ClInclude Include="..\PhysicObject.h" />
+    <ClInclude Include="..\PhysicsGamePars.h" />
+    <ClInclude Include="..\PhysicsShellHolder.h" />
+    <ClInclude Include="..\PhysicsSkeletonObject.h" />
+    <ClInclude Include="..\physics_element_scripted.h" />
+    <ClInclude Include="..\physics_game.h" />
+    <ClInclude Include="..\physics_joint_scripted.h" />
+    <ClInclude Include="..\physics_shell_animated.h" />
+    <ClInclude Include="..\physics_shell_scripted.h" />
+    <ClInclude Include="..\physics_world_scripted.h" />
+    <ClInclude Include="..\physic_item.h" />
+    <ClInclude Include="..\physic_item_inline.h" />
+    <ClInclude Include="..\ph_shell_interface.h" />
+    <ClInclude Include="..\player_account.h" />
+    <ClInclude Include="..\player_hud.h" />
+    <ClInclude Include="..\player_name_modifyer.h" />
+    <ClInclude Include="..\player_spot_params.h" />
+    <ClInclude Include="..\player_state_achilles_heel.h" />
+    <ClInclude Include="..\player_state_ambassador.h" />
+    <ClInclude Include="..\player_state_ammo_elapsed.h" />
+    <ClInclude Include="..\player_state_avenger.h" />
+    <ClInclude Include="..\player_state_blitzkrieg.h" />
+    <ClInclude Include="..\player_state_cherub.h" />
+    <ClInclude Include="..\player_state_climber.h" />
+    <ClInclude Include="..\player_state_mad.h" />
+    <ClInclude Include="..\player_state_marksman.h" />
+    <ClInclude Include="..\player_state_multichampion.h" />
+    <ClInclude Include="..\player_state_opener.h" />
+    <ClInclude Include="..\player_state_param.h" />
+    <ClInclude Include="..\player_state_params.h" />
+    <ClInclude Include="..\player_state_remembrance.h" />
+    <ClInclude Include="..\player_state_skewer.h" />
+    <ClInclude Include="..\player_state_toughy.h" />
+    <ClInclude Include="..\player_team_win_score.h" />
+    <ClInclude Include="..\poses_blending.h" />
+    <ClInclude Include="..\pose_extrapolation.h" />
+    <ClInclude Include="..\PostprocessAnimator.h" />
+    <ClInclude Include="..\pp_effector_custom.h" />
+    <ClInclude Include="..\pp_effector_distance.h" />
+    <ClInclude Include="..\problem_solver.h" />
+    <ClInclude Include="..\problem_solver_inline.h" />
+    <ClInclude Include="..\profiler.h" />
+    <ClInclude Include="..\profiler_inline.h" />
+    <ClInclude Include="..\profile_data_types.h" />
+    <ClInclude Include="..\profile_store.h" />
+    <ClInclude Include="..\property_evaluator.h" />
+    <ClInclude Include="..\property_evaluator_const.h" />
+    <ClInclude Include="..\property_evaluator_const_inline.h" />
+    <ClInclude Include="..\property_evaluator_inline.h" />
+    <ClInclude Include="..\property_evaluator_member.h" />
+    <ClInclude Include="..\property_evaluator_member_inline.h" />
+    <ClInclude Include="..\property_storage.h" />
+    <ClInclude Include="..\property_storage_inline.h" />
+    <ClInclude Include="..\purchase_list.h" />
+    <ClInclude Include="..\purchase_list_inline.h" />
+    <ClInclude Include="..\quadtree.h" />
+    <ClInclude Include="..\quadtree_inline.h" />
+    <ClInclude Include="..\queued_async_method.h" />
+    <ClInclude Include="..\RadioactiveZone.h" />
+    <ClInclude Include="..\random32.h" />
+    <ClInclude Include="..\rat_states.h" />
+    <ClInclude Include="..\rat_state_base.h" />
+    <ClInclude Include="..\rat_state_base_inline.h" />
+    <ClInclude Include="..\rat_state_manager.h" />
+    <ClInclude Include="..\rat_state_manager_inline.h" />
+    <ClInclude Include="..\raypick.h" />
+    <ClInclude Include="..\refreshable_obstacles_query.h" />
+    <ClInclude Include="..\refreshable_obstacles_query_inline.h" />
+    <ClInclude Include="..\RegistryFuncs.h" />
+    <ClInclude Include="..\relation_registry.h" />
+    <ClInclude Include="..\relation_registry_defs.h" />
+    <ClInclude Include="..\relation_registry_inline.h" />
+    <ClInclude Include="..\restricted_object.h" />
+    <ClInclude Include="..\restricted_object_inline.h" />
+    <ClInclude Include="..\restricted_object_obstacle.h" />
+    <ClInclude Include="..\rewarding_events_handlers.h" />
+    <ClInclude Include="..\rewarding_state_events.h" />
+    <ClInclude Include="..\reward_event_generator.h" />
+    <ClInclude Include="..\reward_event_handler.h" />
+    <ClInclude Include="..\reward_manager.h" />
+    <ClInclude Include="..\reward_snd_messages.h" />
+    <ClInclude Include="..\RGD5.h" />
+    <ClInclude Include="..\RocketLauncher.h" />
+    <ClInclude Include="..\RustyHairArtifact.h" />
+    <ClInclude Include="..\safe_map_iterator.h" />
+    <ClInclude Include="..\safe_map_iterator_inline.h" />
+    <ClInclude Include="..\saved_game_wrapper.h" />
+    <ClInclude Include="..\saved_game_wrapper_inline.h" />
+    <ClInclude Include="..\ScientificOutfit.h" />
+    <ClInclude Include="..\Scope.h" />
+    <ClInclude Include="..\screenshots_common.h" />
+    <ClInclude Include="..\screenshots_writer.h" />
+    <ClInclude Include="..\screenshot_manager.h" />
+    <ClInclude Include="..\screenshot_server.h" />
+    <ClInclude Include="..\script_light_inline.h" />
+    <ClInclude Include="..\ScriptXMLInit.h" />
+    <ClInclude Include="..\script_abstract_action.h" />
+    <ClInclude Include="..\script_abstract_action_inline.h" />
+    <ClInclude Include="..\script_action_condition.h" />
+    <ClInclude Include="..\script_action_condition_inline.h" />
+    <ClInclude Include="..\script_action_planner_action_wrapper.h" />
+    <ClInclude Include="..\script_action_planner_action_wrapper_inline.h" />
+    <ClInclude Include="..\script_action_planner_wrapper.h" />
+    <ClInclude Include="..\script_action_planner_wrapper_inline.h" />
+    <ClInclude Include="..\script_action_wrapper.h" />
+    <ClInclude Include="..\script_action_wrapper_inline.h" />
+    <ClInclude Include="..\script_animation_action.h" />
+    <ClInclude Include="..\script_animation_action_inline.h" />
+    <ClInclude Include="..\script_binder.h" />
+    <ClInclude Include="..\script_binder_inline.h" />
+    <ClInclude Include="..\script_binder_object.h" />
+    <ClInclude Include="..\script_binder_object_wrapper.h" />
+    <ClInclude Include="..\script_bind_macroses.h" />
+    <ClInclude Include="..\script_callback_ex.h" />
+    <ClInclude Include="..\script_callback_ex_generators.h" />
+    <ClInclude Include="..\script_callback_ex_inline.h" />
+    <ClInclude Include="..\script_callback_ex_nonvoid.h" />
+    <ClInclude Include="..\script_callback_ex_void.h" />
+    <ClInclude Include="..\script_effector.h" />
+    <ClInclude Include="..\script_effector_inline.h" />
+    <ClInclude Include="..\script_effector_wrapper.h" />
+    <ClInclude Include="..\script_effector_wrapper_inline.h" />
+    <ClInclude Include="..\script_entity.h" />
+    <ClInclude Include="..\script_entity_action.h" />
+    <ClInclude Include="..\script_entity_action_inline.h" />
+    <ClInclude Include="..\script_entity_inline.h" />
+    <ClInclude Include="..\script_entity_space.h" />
+    <ClInclude Include="..\script_game_object.h" />
+    <ClInclude Include="..\script_game_object_impl.h" />
+    <ClInclude Include="..\script_hit.h" />
+    <ClInclude Include="..\script_hit_inline.h" />
+    <ClInclude Include="..\script_lanim.h" />
+    <ClInclude Include="..\script_light.h" />
+    <ClInclude Include="..\script_monster_action.h" />
+    <ClInclude Include="..\script_monster_action_inline.h" />
+    <ClInclude Include="..\script_monster_hit_info.h" />
+    <ClInclude Include="..\script_movement_action.h" />
+    <ClInclude Include="..\script_movement_action_inline.h" />
+    <ClInclude Include="..\script_object.h" />
+    <ClInclude Include="..\script_object_action.h" />
+    <ClInclude Include="..\script_object_action_inline.h" />
+    <ClInclude Include="..\script_particles.h" />
+    <ClInclude Include="..\script_particles_inline.h" />
+    <ClInclude Include="..\script_particle_action.h" />
+    <ClInclude Include="..\script_particle_action_inline.h" />
+    <ClInclude Include="..\script_property_evaluator_wrapper.h" />
+    <ClInclude Include="..\script_property_evaluator_wrapper_inline.h" />
+    <ClInclude Include="..\script_render_device.h" />
+    <ClInclude Include="..\script_sound.h" />
+    <ClInclude Include="..\script_sound_action.h" />
+    <ClInclude Include="..\script_sound_action_inline.h" />
+    <ClInclude Include="..\script_sound_info.h" />
+    <ClInclude Include="..\script_sound_inline.h" />
+    <ClInclude Include="..\script_ui_registrator.h" />
+    <ClInclude Include="..\script_wallmarks_manager.h" />
+    <ClInclude Include="..\script_watch_action.h" />
+    <ClInclude Include="..\script_watch_action_inline.h" />
+    <ClInclude Include="..\script_world_property.h" />
+    <ClInclude Include="..\script_world_property_inline.h" />
+    <ClInclude Include="..\script_world_state.h" />
+    <ClInclude Include="..\script_zone.h" />
+    <ClInclude Include="..\searchlight.h" />
+    <ClInclude Include="..\secure_messaging.h" />
+    <ClInclude Include="..\seniority_hierarchy_holder.h" />
+    <ClInclude Include="..\seniority_hierarchy_holder_inline.h" />
+    <ClInclude Include="..\seniority_hierarchy_space.h" />
+    <ClInclude Include="..\server_entity_wrapper.h" />
+    <ClInclude Include="..\server_entity_wrapper_inline.h" />
+    <ClInclude Include="..\setup_manager.h" />
+    <ClInclude Include="..\setup_manager_inline.h" />
+    <ClInclude Include="..\ShootingObject.h" />
+    <ClInclude Include="..\sight_action.h" />
+    <ClInclude Include="..\sight_action_inline.h" />
+    <ClInclude Include="..\sight_control_action.h" />
+    <ClInclude Include="..\sight_control_action_inline.h" />
+    <ClInclude Include="..\sight_manager.h" />
+    <ClInclude Include="..\sight_manager_inline.h" />
+    <ClInclude Include="..\sight_manager_space.h" />
+    <ClInclude Include="..\Silencer.h" />
+    <ClInclude Include="..\silent_shots.h" />
+    <ClInclude Include="..\SimpleDetector.h" />
+    <ClInclude Include="..\smart_cover.h" />
+    <ClInclude Include="..\smart_cover_action.h" />
+    <ClInclude Include="..\smart_cover_action_inline.h" />
+    <ClInclude Include="..\smart_cover_animation_planner.h" />
+    <ClInclude Include="..\smart_cover_animation_planner_inline.h" />
+    <ClInclude Include="..\smart_cover_animation_selector.h" />
+    <ClInclude Include="..\smart_cover_animation_selector_inline.h" />
+    <ClInclude Include="..\smart_cover_default_behaviour_planner.hpp" />
+    <ClInclude Include="..\smart_cover_default_behaviour_planner_inline.hpp" />
+    <ClInclude Include="..\smart_cover_description.h" />
+    <ClInclude Include="..\smart_cover_description_inline.h" />
+    <ClInclude Include="..\smart_cover_detail.h" />
+    <ClInclude Include="..\smart_cover_evaluators.h" />
+    <ClInclude Include="..\smart_cover_inline.h" />
+    <ClInclude Include="..\smart_cover_loophole.h" />
+    <ClInclude Include="..\smart_cover_loophole_inline.h" />
+    <ClInclude Include="..\smart_cover_loophole_planner_actions.h" />
+    <ClInclude Include="..\smart_cover_loophole_planner_actions_inline.h" />
+    <ClInclude Include="..\smart_cover_object.h" />
+    <ClInclude Include="..\smart_cover_object_inline.h" />
+    <ClInclude Include="..\smart_cover_planner_actions.h" />
+    <ClInclude Include="..\smart_cover_planner_actions_inline.h" />
+    <ClInclude Include="..\smart_cover_planner_target_provider.h" />
+    <ClInclude Include="..\smart_cover_planner_target_selector.h" />
+    <ClInclude Include="..\smart_cover_planner_target_selector_inline.h" />
+    <ClInclude Include="..\smart_cover_storage.h" />
+    <ClInclude Include="..\smart_cover_transition.hpp" />
+    <ClInclude Include="..\smart_cover_transition_animation.hpp" />
+    <ClInclude Include="..\smart_cover_transition_animation_inline.hpp" />
+    <ClInclude Include="..\smart_zone.h" />
+    <ClInclude Include="..\sound_collection_storage.h" />
+    <ClInclude Include="..\sound_collection_storage_inline.h" />
+    <ClInclude Include="..\sound_memory_manager.h" />
+    <ClInclude Include="..\sound_memory_manager_inline.h" />
+    <ClInclude Include="..\sound_player.h" />
+    <ClInclude Include="..\sound_player_inline.h" />
+    <ClInclude Include="..\sound_user_data_visitor.h" />
+    <ClInclude Include="..\space_restriction.h" />
+    <ClInclude Include="..\space_restriction_abstract.h" />
+    <ClInclude Include="..\space_restriction_abstract_inline.h" />
+    <ClInclude Include="..\space_restriction_base.h" />
+    <ClInclude Include="..\space_restriction_base_inline.h" />
+    <ClInclude Include="..\space_restriction_bridge.h" />
+    <ClInclude Include="..\space_restriction_bridge_inline.h" />
+    <ClInclude Include="..\space_restriction_composition.h" />
+    <ClInclude Include="..\space_restriction_composition_inline.h" />
+    <ClInclude Include="..\space_restriction_holder.h" />
+    <ClInclude Include="..\space_restriction_holder_inline.h" />
+    <ClInclude Include="..\space_restriction_inline.h" />
+    <ClInclude Include="..\space_restriction_manager.h" />
+    <ClInclude Include="..\space_restriction_manager_inline.h" />
+    <ClInclude Include="..\space_restriction_shape.h" />
+    <ClInclude Include="..\space_restriction_shape_inline.h" />
+    <ClInclude Include="..\space_restrictor.h" />
+    <ClInclude Include="..\space_restrictor_inline.h" />
+    <ClInclude Include="..\Spectator.h" />
+    <ClInclude Include="..\spectator_camera_first_eye.h" />
+    <ClInclude Include="..\sprinter_stopper.h" />
+    <ClInclude Include="..\squad_hierarchy_holder.h" />
+    <ClInclude Include="..\squad_hierarchy_holder_inline.h" />
+    <ClInclude Include="..\StalkerOutfit.h" />
+    <ClInclude Include="..\stalker_alife_actions.h" />
+    <ClInclude Include="..\stalker_alife_planner.h" />
+    <ClInclude Include="..\stalker_alife_task_actions.h" />
+    <ClInclude Include="..\stalker_animation_data.h" />
+    <ClInclude Include="..\stalker_animation_data_storage.h" />
+    <ClInclude Include="..\stalker_animation_data_storage_inline.h" />
+    <ClInclude Include="..\stalker_animation_manager.h" />
+    <ClInclude Include="..\stalker_animation_manager_impl.h" />
+    <ClInclude Include="..\stalker_animation_manager_inline.h" />
+    <ClInclude Include="..\stalker_animation_names.h" />
+    <ClInclude Include="..\stalker_animation_pair.h" />
+    <ClInclude Include="..\stalker_animation_pair_inline.h" />
+    <ClInclude Include="..\stalker_animation_script.h" />
+    <ClInclude Include="..\stalker_animation_script_inline.h" />
+    <ClInclude Include="..\stalker_animation_state.h" />
+    <ClInclude Include="..\stalker_animation_state_inline.h" />
+    <ClInclude Include="..\stalker_anomaly_actions.h" />
+    <ClInclude Include="..\stalker_anomaly_planner.h" />
+    <ClInclude Include="..\stalker_base_action.h" />
+    <ClInclude Include="..\stalker_combat_actions.h" />
+    <ClInclude Include="..\stalker_combat_action_base.h" />
+    <ClInclude Include="..\stalker_combat_planner.h" />
+    <ClInclude Include="..\stalker_danger_by_sound_actions.h" />
+    <ClInclude Include="..\stalker_danger_by_sound_planner.h" />
+    <ClInclude Include="..\stalker_danger_grenade_actions.h" />
+    <ClInclude Include="..\stalker_danger_grenade_planner.h" />
+    <ClInclude Include="..\stalker_danger_in_direction_actions.h" />
+    <ClInclude Include="..\stalker_danger_in_direction_planner.h" />
+    <ClInclude Include="..\stalker_danger_planner.h" />
+    <ClInclude Include="..\stalker_danger_planner_inline.h" />
+    <ClInclude Include="..\stalker_danger_property_evaluators.h" />
+    <ClInclude Include="..\stalker_danger_unknown_actions.h" />
+    <ClInclude Include="..\stalker_danger_unknown_planner.h" />
+    <ClInclude Include="..\stalker_death_actions.h" />
+    <ClInclude Include="..\stalker_death_planner.h" />
+    <ClInclude Include="..\stalker_decision_space.h" />
+    <ClInclude Include="..\stalker_flair.h" />
+    <ClInclude Include="..\stalker_get_distance_actions.h" />
+    <ClInclude Include="..\stalker_get_distance_planner.h" />
+    <ClInclude Include="..\stalker_kill_wounded_actions.h" />
+    <ClInclude Include="..\stalker_kill_wounded_planner.h" />
+    <ClInclude Include="..\stalker_low_cover_actions.h" />
+    <ClInclude Include="..\stalker_low_cover_planner.h" />
+    <ClInclude Include="..\stalker_movement_manager_base.h" />
+    <ClInclude Include="..\stalker_movement_manager_base_inline.h" />
+    <ClInclude Include="..\stalker_movement_manager_obstacles.h" />
+    <ClInclude Include="..\stalker_movement_manager_obstacles_inline.h" />
+    <ClInclude Include="..\stalker_movement_manager_smart_cover.h" />
+    <ClInclude Include="..\stalker_movement_manager_smart_cover_inline.h" />
+    <ClInclude Include="..\stalker_movement_manager_space.h" />
+    <ClInclude Include="..\stalker_movement_params.h" />
+    <ClInclude Include="..\stalker_movement_params_inline.h" />
+    <ClInclude Include="..\stalker_movement_restriction.h" />
+    <ClInclude Include="..\stalker_movement_restriction_inline.h" />
+    <ClInclude Include="..\stalker_planner.h" />
+    <ClInclude Include="..\stalker_planner_inline.h" />
+    <ClInclude Include="..\stalker_property_evaluators.h" />
+    <ClInclude Include="..\stalker_property_evaluators_inline.h" />
+    <ClInclude Include="..\stalker_search_actions.h" />
+    <ClInclude Include="..\stalker_search_planner.h" />
+    <ClInclude Include="..\stalker_sound_data.h" />
+    <ClInclude Include="..\stalker_sound_data_inline.h" />
+    <ClInclude Include="..\stalker_sound_data_visitor.h" />
+    <ClInclude Include="..\stalker_sound_data_visitor_inline.h" />
+    <ClInclude Include="..\stalker_velocity_collection.h" />
+    <ClInclude Include="..\stalker_velocity_collection_inline.h" />
+    <ClInclude Include="..\stalker_velocity_holder.h" />
+    <ClInclude Include="..\stalker_velocity_holder_inline.h" />
+    <ClInclude Include="..\state_arguments_functions.h" />
+    <ClInclude Include="..\static_cast_checked.hpp" />
+    <ClInclude Include="..\static_obstacles_avoider.h" />
+    <ClInclude Include="..\static_obstacles_avoider_inline.h" />
+    <ClInclude Include="..\stats_submitter.h" />
+    <ClInclude Include="..\StdAfx.h" />
+    <ClInclude Include="..\steering_behaviour.h" />
+    <ClInclude Include="..\steering_behaviour_alignment.h" />
+    <ClInclude Include="..\steering_behaviour_base.h" />
+    <ClInclude Include="..\steering_behaviour_base_inline.h" />
+    <ClInclude Include="..\steering_behaviour_cohesion.h" />
+    <ClInclude Include="..\steering_behaviour_manager.h" />
+    <ClInclude Include="..\steering_behaviour_separation.h" />
+    <ClInclude Include="..\step_manager.h" />
+    <ClInclude Include="..\step_manager_defs.h" />
+    <ClInclude Include="..\string_table.h" />
+    <ClInclude Include="..\string_table_defs.h" />
+    <ClInclude Include="..\team_base_zone.h" />
+    <ClInclude Include="..\team_hierarchy_holder.h" />
+    <ClInclude Include="..\team_hierarchy_holder_inline.h" />
+    <ClInclude Include="..\TeleWhirlwind.h" />
+    <ClInclude Include="..\ThornArtifact.h" />
+    <ClInclude Include="..\Torch.h" />
+    <ClInclude Include="..\TorridZone.h" />
+    <ClInclude Include="..\Tracer.h" />
+    <ClInclude Include="..\trade.h" />
+    <ClInclude Include="..\trade_action_parameters.h" />
+    <ClInclude Include="..\trade_action_parameters_inline.h" />
+    <ClInclude Include="..\trade_bool_parameters.h" />
+    <ClInclude Include="..\trade_bool_parameters_inline.h" />
+    <ClInclude Include="..\trade_factors.h" />
+    <ClInclude Include="..\trade_factors_inline.h" />
+    <ClInclude Include="..\trade_factor_parameters.h" />
+    <ClInclude Include="..\trade_factor_parameters_inline.h" />
+    <ClInclude Include="..\trade_parameters.h" />
+    <ClInclude Include="..\trade_parameters_inline.h" />
+    <ClInclude Include="..\traffic_optimization.h" />
+    <ClInclude Include="..\trajectories.h" />
+    <ClInclude Include="..\UIAchivementsIndicator.h" />
+    <ClInclude Include="..\UICursor.h" />
+    <ClInclude Include="..\UIDialogHolder.h" />
+    <ClInclude Include="..\UIDosimeter.h" />
+    <ClInclude Include="..\UIGameAHunt.h" />
+    <ClInclude Include="..\UIGameCTA.h" />
+    <ClInclude Include="..\UIGameCustom.h" />
+    <ClInclude Include="..\UIGameDM.h" />
+    <ClInclude Include="..\UIGameMP.h" />
+    <ClInclude Include="..\UIGameSP.h" />
+    <ClInclude Include="..\UIGameTDM.h" />
+    <ClInclude Include="..\UIPanelsClassFactory.h" />
+    <ClInclude Include="..\UIPlayerItem.h" />
+    <ClInclude Include="..\UIStaticItem.h" />
+    <ClInclude Include="..\UITeamHeader.h" />
+    <ClInclude Include="..\UITeamPanels.h" />
+    <ClInclude Include="..\UITeamState.h" />
+    <ClInclude Include="..\UIZoneMap.h" />
+    <ClInclude Include="..\ui\ArtefactDetectorUI.h" />
+    <ClInclude Include="..\ui\KillMessageStruct.h" />
+    <ClInclude Include="..\ui\map_hint.h" />
+    <ClInclude Include="..\ui\MMSound.h" />
+    <ClInclude Include="..\ui\Restrictions.h" />
+    <ClInclude Include="..\ui\ServerList.h" />
+    <ClInclude Include="..\ui\TeamInfo.h" />
+    <ClInclude Include="..\ui\UI3tButton.h" />
+    <ClInclude Include="..\ui\uiabstract.h" />
+    <ClInclude Include="..\ui\UIAchievements.h" />
+    <ClInclude Include="..\ui\UIRankingsCoC.h" />
+    <ClInclude Include="..\ui\UIActorMenu.h" />
+    <ClInclude Include="..\ui\UIActorStateInfo.h" />
+    <ClInclude Include="..\ui\UIAnimatedStatic.h" />
+    <ClInclude Include="..\ui\UIBoosterInfo.h" />
+    <ClInclude Include="..\ui\UIBtnHint.h" />
+    <ClInclude Include="..\ui\UIButton.h" />
+    <ClInclude Include="..\ui\UIBuyWeaponTab.h" />
+    <ClInclude Include="..\ui\UIBuyWndBase.h" />
+    <ClInclude Include="..\ui\UIBuyWndShared.h" />
+    <ClInclude Include="..\ui\UICarPanel.h" />
+    <ClInclude Include="..\ui\UICDkey.h" />
+    <ClInclude Include="..\ui\UICellCustomItems.h" />
+    <ClInclude Include="..\ui\UICellItem.h" />
+    <ClInclude Include="..\ui\UICellItemFactory.h" />
+    <ClInclude Include="..\ui\UIChangeMap.h" />
+    <ClInclude Include="..\ui\ChangeWeatherDialog.hpp" />
+    <ClInclude Include="..\ui\UICharacterInfo.h" />
+    <ClInclude Include="..\ui\UIChatWnd.h" />
+    <ClInclude Include="..\ui\UICheckButton.h" />
+    <ClInclude Include="..\ui\UIComboBox.h" />
+    <ClInclude Include="..\ui\UICustomEdit.h" />
+    <ClInclude Include="..\ui\UICustomSpin.h" />
+    <ClInclude Include="..\ui\UIDebugFonts.h" />
+    <ClInclude Include="..\ui\UIDemoPlayControl.h" />
+    <ClInclude Include="..\ui\UIDialogWnd.h" />
+    <ClInclude Include="..\ui\UIDoubleProgressBar.h" />
+    <ClInclude Include="..\ui\UIDragDropListEx.h" />
+    <ClInclude Include="..\ui\UIDragDropReferenceList.h" />
+    <ClInclude Include="..\ui\UIEditBox.h" />
+    <ClInclude Include="..\ui\UIEditBoxEx.h" />
+    <ClInclude Include="..\ui\UIEditKeyBind.h" />
+    <ClInclude Include="..\ui\UIFixedScrollBar.h" />
+    <ClInclude Include="..\ui\UIFrameLineWnd.h" />
+    <ClInclude Include="..\ui\UIFrameWindow.h" />
+    <ClInclude Include="..\ui\UIGameLog.h" />
+    <ClInclude Include="..\ui\UIGameTutorial.h" />
+    <ClInclude Include="..\ui\UIHelper.h" />
+    <ClInclude Include="..\ui\UIHint.h" />
+    <ClInclude Include="..\ui\UIHudStatesWnd.h" />
+    <ClInclude Include="..\ui\UIInteractiveBackground.h" />
+    <ClInclude Include="..\ui\UIInventoryUpgradeWnd.h" />
+    <ClInclude Include="..\ui\UIInventoryUtilities.h" />
+    <ClInclude Include="..\ui\UIInvUpgrade.h" />
+    <ClInclude Include="..\ui\UIInvUpgradeInfo.h" />
+    <ClInclude Include="..\ui\UIInvUpgradeProperty.h" />
+    <ClInclude Include="..\ui\UIItemInfo.h" />
+    <ClInclude Include="..\ui\UIKeyBinding.h" />
+    <ClInclude Include="..\ui\UIKickPlayer.h" />
+    <ClInclude Include="..\ui\UILanimController.h" />
+    <ClInclude Include="..\ui\UILine.h" />
+    <ClInclude Include="..\ui\UILines.h" />
+    <ClInclude Include="..\ui\uilinestd.h" />
+    <ClInclude Include="..\ui\UIListBox.h" />
+    <ClInclude Include="..\ui\UIListBoxItem.h" />
+    <ClInclude Include="..\ui\UIListBoxItemMsgChain.h" />
+    <ClInclude Include="..\ui\UIListItemServer.h" />
+    <ClInclude Include="..\ui\UILogsWnd.h" />
+    <ClInclude Include="..\ui\UIMainIngameWnd.h" />
+    <ClInclude Include="..\ui\UIMap.h" />
+    <ClInclude Include="..\ui\UIMapDesc.h" />
+    <ClInclude Include="..\ui\UIMapInfo.h" />
+    <ClInclude Include="..\ui\UIMapLegend.h" />
+    <ClInclude Include="..\ui\UIMapList.h" />
+    <ClInclude Include="..\ui\UIMapWnd.h" />
+    <ClInclude Include="..\ui\UIMapWndActions.h" />
+    <ClInclude Include="..\ui\UIMapWndActionsSpace.h" />
+    <ClInclude Include="..\ui\UIMessageBox.h" />
+    <ClInclude Include="..\ui\UIMessageBoxEx.h" />
+    <ClInclude Include="..\ui\UIMessages.h" />
+    <ClInclude Include="..\ui\UIMessagesWindow.h" />
+    <ClInclude Include="..\ui\UIMMShniaga.h" />
+    <ClInclude Include="..\ui\UIMoneyIndicator.h" />
+    <ClInclude Include="..\ui\UIMotionIcon.h" />
+    <ClInclude Include="..\ui\UIMPAdminMenu.h" />
+    <ClInclude Include="..\ui\UIMPChangeMapAdm.h" />
+    <ClInclude Include="..\ui\UIMpItemsStoreWnd.h" />
+    <ClInclude Include="..\ui\UIMPPlayersAdm.h" />
+    <ClInclude Include="..\ui\UIMPServerAdm.h" />
+    <ClInclude Include="..\ui\UIMpTradeWnd.h" />
+    <ClInclude Include="..\ui\UINewsItemWnd.h" />
+    <ClInclude Include="..\ui\UIOptConCom.h" />
+    <ClInclude Include="..\ui\UIOptionsItem.h" />
+    <ClInclude Include="..\ui\UIOptionsManager.h" />
+    <ClInclude Include="..\ui\UIOptionsManagerScript.h" />
+    <ClInclude Include="..\ui\UIOutfitInfo.h" />
+    <ClInclude Include="..\ui\UIPdaKillMessage.h" />
+    <ClInclude Include="..\ui\UIPdaMsgListItem.h" />
+    <ClInclude Include="..\ui\UIPdaWnd.h" />
+    <ClInclude Include="..\ui\UIProgressBar.h" />
+    <ClInclude Include="..\ui\UIProgressShape.h" />
+    <ClInclude Include="..\ui\UIPropertiesBox.h" />
+    <ClInclude Include="..\ui\UIRadioButton.h" />
+    <ClInclude Include="..\ui\UIRankIndicator.h" />
+    <ClInclude Include="..\ui\UIRankingWnd.h" />
+    <ClInclude Include="..\ui\UIScriptWnd.h" />
+    <ClInclude Include="..\ui\uiscriptwnd_script.h" />
+    <ClInclude Include="..\ui\UIScrollBar.h" />
+    <ClInclude Include="..\ui\UIScrollBox.h" />
+    <ClInclude Include="..\ui\UIScrollView.h" />
+    <ClInclude Include="..\ui\UISecondTaskWnd.h" />
+    <ClInclude Include="..\ui\UIServerInfo.h" />
+    <ClInclude Include="..\ui\UISkinSelector.h" />
+    <ClInclude Include="..\ui\UISpawnWnd.h" />
+    <ClInclude Include="..\ui\UISpeechMenu.h" />
+    <ClInclude Include="..\ui\UISpinNum.h" />
+    <ClInclude Include="..\ui\UISpinText.h" />
+    <ClInclude Include="..\ui\UIStatic.h" />
+    <ClInclude Include="..\ui\UIStatix.h" />
+    <ClInclude Include="..\ui\UIStats.h" />
+    <ClInclude Include="..\ui\UIStatsIcon.h" />
+    <ClInclude Include="..\ui\UIStatsPlayerInfo.h" />
+    <ClInclude Include="..\ui\UIStatsPlayerList.h" />
+    <ClInclude Include="..\ui\UISubLine.h" />
+    <ClInclude Include="..\ui\UITabButton.h" />
+    <ClInclude Include="..\ui\UITabButtonMP.h" />
+    <ClInclude Include="..\ui\UITabControl.h" />
+    <ClInclude Include="..\ui\UITalkDialogWnd.h" />
+    <ClInclude Include="..\ui\UITalkWnd.h" />
+    <ClInclude Include="..\ui\UITaskWnd.h" />
+    <ClInclude Include="..\ui\UITextureMaster.h" />
+    <ClInclude Include="..\ui\UITextVote.h" />
+    <ClInclude Include="..\ui\UITrackBar.h" />
+    <ClInclude Include="..\ui\UITrackButton.h" />
+    <ClInclude Include="..\ui\UIVote.h" />
+    <ClInclude Include="..\ui\UIVoteStatusWnd.h" />
+    <ClInclude Include="..\ui\UIVotingCategory.h" />
+    <ClInclude Include="..\ui\UIWindow.h" />
+    <ClInclude Include="..\ui\UIWndCallback.h" />
+    <ClInclude Include="..\ui\UIWpnParams.h" />
+    <ClInclude Include="..\ui\UIXmlInit.h" />
+    <ClInclude Include="..\ui\ui_af_params.h" />
+    <ClInclude Include="..\ui\ui_arrow.h" />
+    <ClInclude Include="..\ui\UI_IB_Static.h" />
+    <ClInclude Include="..\ui\xrUIXmlParser.h" />
+    <ClInclude Include="..\ui_base.h" />
+    <ClInclude Include="..\ui_defs.h" />
+    <ClInclude Include="..\UsableScriptObject.h" />
+    <ClInclude Include="..\vertex_allocator_fixed.h" />
+    <ClInclude Include="..\vertex_allocator_fixed_inline.h" />
+    <ClInclude Include="..\vertex_manager_fixed.h" />
+    <ClInclude Include="..\vertex_manager_fixed_inline.h" />
+    <ClInclude Include="..\vertex_manager_hash_fixed.h" />
+    <ClInclude Include="..\vertex_manager_hash_fixed_inline.h" />
+    <ClInclude Include="..\vertex_path.h" />
+    <ClInclude Include="..\vertex_path_inline.h" />
+    <ClInclude Include="..\vision_client.h" />
+    <ClInclude Include="..\vision_client_inline.h" />
+    <ClInclude Include="..\visual_memory_manager.h" />
+    <ClInclude Include="..\visual_memory_manager_inline.h" />
+    <ClInclude Include="..\visual_memory_params.h" />
+    <ClInclude Include="..\wallmark_manager.h" />
+    <ClInclude Include="..\Weapon.h" />
+    <ClInclude Include="..\WeaponAK74.h" />
+    <ClInclude Include="..\WeaponAmmo.h" />
+    <ClInclude Include="..\WeaponAutomaticShotgun.h" />
+    <ClInclude Include="..\WeaponBinoculars.h" />
+    <ClInclude Include="..\WeaponBinocularsVision.h" />
+    <ClInclude Include="..\weaponBM16.h" />
+    <ClInclude Include="..\WeaponCustomAuto.h" />
+    <ClInclude Include="..\WeaponCustomPistol.h" />
+    <ClInclude Include="..\WeaponFN2000.h" />
+    <ClInclude Include="..\WeaponFORT.h" />
+    <ClInclude Include="..\WeaponGroza.h" />
+    <ClInclude Include="..\WeaponHPSA.h" />
+    <ClInclude Include="..\WeaponKnife.h" />
+    <ClInclude Include="..\WeaponLR300.h" />
+    <ClInclude Include="..\WeaponMagazined.h" />
+    <ClInclude Include="..\WeaponMagazinedWGrenade.h" />
+    <ClInclude Include="..\WeaponPistol.h" />
+    <ClInclude Include="..\WeaponPM.h" />
+    <ClInclude Include="..\WeaponRevolver.h" />
+    <ClInclude Include="..\WeaponRG6.h" />
+    <ClInclude Include="..\WeaponRPG7.h" />
+    <ClInclude Include="..\WeaponShotgun.h" />
+    <ClInclude Include="..\WeaponStatMgun.h" />
+    <ClInclude Include="..\HolderEntityObject.h" />
+    <ClInclude Include="..\WeaponSVD.h" />
+    <ClInclude Include="..\WeaponSVU.h" />
+    <ClInclude Include="..\WeaponUSP45.h" />
+    <ClInclude Include="..\WeaponVal.h" />
+    <ClInclude Include="..\WeaponVintorez.h" />
+    <ClInclude Include="..\WeaponWalther.h" />
+    <ClInclude Include="..\Wound.h" />
+    <ClInclude Include="..\wrapper_abstract.h" />
+    <ClInclude Include="..\wrapper_abstract_inline.h" />
+    <ClInclude Include="..\xrClientsPool.h" />
+    <ClInclude Include="..\xrGameSpyServer.h" />
+    <ClInclude Include="..\xrGameSpyServer_callbacks.h" />
+    <ClInclude Include="..\xrServer.h" />
+    <ClInclude Include="..\xrServerMapSync.h" />
+    <ClInclude Include="..\xrServer_info.h" />
+    <ClInclude Include="..\xrServer_svclient_validation.h" />
+    <ClInclude Include="..\xrServer_updates_compressor.h" />
+    <ClInclude Include="..\xr_dsa_signer.h" />
+    <ClInclude Include="..\xr_dsa_verifyer.h" />
+    <ClInclude Include="..\xr_level_controller.h" />
+    <ClInclude Include="..\xr_time.h" />
+    <ClInclude Include="..\ZoneCampfire.h" />
+    <ClInclude Include="..\ZoneVisual.h" />
+    <ClInclude Include="..\zone_effector.h" />
+    <ClInclude Include="..\ZudaArtifact.h" />
+    <ClInclude Include="..\new_sds.h" />
+    <ClInclude Include="..\NewZoomFlag.h" />
+    <ClInclude Include="..\LevelDebugScript.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\xrServerEntities\alife_human_brain.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\alife_monster_brain.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\alife_space.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\character_info.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\gametype_chooser.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\LevelGameDef.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\lua_studio.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\object_factory.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\object_factory_register.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\object_factory_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\object_item_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\pch_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\PHNetState.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_callStack.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_debugger.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_debugger_threads.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_engine.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_engine_export.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_engine_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_fcolor_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_flags_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_fmatrix_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_fvector_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_ini_file.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_ini_file_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_lua_helper.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_net_packet_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_process.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_reader_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_rtoken_list_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_sound_type_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_stack_tracker.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_storage.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_thread.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_token_list.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\script_token_list_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\smart_cast.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\smart_cast_stats.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\specific_character.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Factory.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_Abstract.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Items.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Items_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Items_script2.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Items_script3.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Monsters.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Monsters_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Monsters_script2.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrserver_objects_alife_monsters_script3.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_Monsters_script4.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_script2.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_ALife_script3.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_Alife_Smartcovers.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_Alife_Smartcovers_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_script.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Objects_script2.cpp" />
+    <ClCompile Include="..\..\xrServerEntities\xrServer_Object_Base.cpp" />
+    <ClCompile Include="..\account_manager.cpp" />
+    <ClCompile Include="..\account_manager_console.cpp" />
+    <ClCompile Include="..\account_manager_script.cpp" />
+    <ClCompile Include="..\action_base_script.cpp" />
+    <ClCompile Include="..\action_planner_action_script.cpp" />
+    <ClCompile Include="..\action_planner_script.cpp" />
+    <ClCompile Include="..\ActivatingCharCollisionDelay.cpp" />
+    <ClCompile Include="..\Actor.cpp" />
+    <ClCompile Include="..\ActorAnimation.cpp" />
+    <ClCompile Include="..\ActorBackpack.cpp" />
+    <ClCompile Include="..\ActorCameras.cpp" />
+    <ClCompile Include="..\ActorCondition.cpp" />
+    <ClCompile Include="..\ActorCondition_script.cpp" />
+    <ClCompile Include="..\ActorEffector.cpp" />
+    <ClCompile Include="..\ActorEffector_script.cpp" />
+    <ClCompile Include="..\ActorHelmet.cpp" />
+    <ClCompile Include="..\ActorInput.cpp" />
+    <ClCompile Include="..\ActorNightVision.cpp" />
+    <ClCompile Include="..\actor_communication.cpp" />
+    <ClCompile Include="..\Actor_Events.cpp" />
+    <ClCompile Include="..\Actor_Feel.cpp" />
+    <ClCompile Include="..\actor_input_handler.cpp" />
+    <ClCompile Include="..\actor_memory.cpp" />
+    <ClCompile Include="..\Actor_Movement.cpp" />
+    <ClCompile Include="..\actor_mp_client.cpp" />
+    <ClCompile Include="..\actor_mp_client_export.cpp" />
+    <ClCompile Include="..\actor_mp_client_import.cpp" />
+    <ClCompile Include="..\actor_mp_server.cpp" />
+    <ClCompile Include="..\actor_mp_server_export.cpp" />
+    <ClCompile Include="..\actor_mp_server_import.cpp" />
+    <ClCompile Include="..\actor_mp_state.cpp" />
+    <ClCompile Include="..\Actor_Network.cpp" />
+    <ClCompile Include="..\actor_script.cpp" />
+    <ClCompile Include="..\Actor_Sleep.cpp" />
+    <ClCompile Include="..\actor_statistic_mgr.cpp" />
+    <ClCompile Include="..\Actor_Weapon.cpp" />
+    <ClCompile Include="..\AdvancedDetector.cpp" />
+    <ClCompile Include="..\agent_corpse_manager.cpp" />
+    <ClCompile Include="..\agent_enemy_manager.cpp" />
+    <ClCompile Include="..\agent_explosive_manager.cpp" />
+    <ClCompile Include="..\agent_location_manager.cpp" />
+    <ClCompile Include="..\agent_manager.cpp" />
+    <ClCompile Include="..\agent_manager_actions.cpp" />
+    <ClCompile Include="..\agent_manager_planner.cpp" />
+    <ClCompile Include="..\agent_manager_properties.cpp" />
+    <ClCompile Include="..\agent_member_manager.cpp" />
+    <ClCompile Include="..\agent_memory_manager.cpp" />
+    <ClCompile Include="..\aimers_base.cpp" />
+    <ClCompile Include="..\aimers_weapon.cpp" />
+    <ClCompile Include="..\AI\ai_monsters_misc.cpp" />
+    <ClCompile Include="..\AI\Crow\ai_crow.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_bones.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_effector.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_motion_stats.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_squad.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_squad_attack.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_squad_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_squad_rest.cpp" />
+    <ClCompile Include="..\ai\Monsters\ai_monster_utils.cpp" />
+    <ClCompile Include="..\ai\Monsters\anim_triple.cpp" />
+    <ClCompile Include="..\ai\Monsters\anomaly_detector.cpp" />
+    <ClCompile Include="..\ai\monsters\anti_aim_ability.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_anim.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_debug.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_feel.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_misc.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_net.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_path.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_startup.cpp" />
+    <ClCompile Include="..\ai\Monsters\BaseMonster\base_monster_think.cpp" />
+    <ClCompile Include="..\ai\Monsters\Bloodsucker\bloodsucker.cpp" />
+    <ClCompile Include="..\ai\Monsters\Bloodsucker\bloodsucker_alien.cpp" />
+    <ClCompile Include="..\ai\Monsters\Bloodsucker\bloodsucker_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Bloodsucker\bloodsucker_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Bloodsucker\bloodsucker_vampire_effector.cpp" />
+    <ClCompile Include="..\ai\Monsters\Boar\boar.cpp" />
+    <ClCompile Include="..\ai\Monsters\Boar\boar_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Boar\boar_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Burer\burer.cpp" />
+    <ClCompile Include="..\ai\Monsters\Burer\burer_fast_gravi.cpp" />
+    <ClCompile Include="..\ai\Monsters\Burer\burer_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Burer\burer_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Cat\cat.cpp" />
+    <ClCompile Include="..\ai\Monsters\Cat\cat_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Cat\cat_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Chimera\chimera.cpp" />
+    <ClCompile Include="..\ai\Monsters\Chimera\chimera_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Chimera\chimera_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\controlled_actor.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller_animation.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller_direction.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller_psy_hit.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller_psy_hit_effector.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Controller\controller_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_animation.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_animation_base.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_animation_base_accel.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_animation_base_load.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_animation_base_update.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_critical_wound.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_direction.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_direction_base.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_jump.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_manager_custom.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_melee_jump.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_movement.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_movement_base.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_path_builder.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_path_builder_base.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_path_builder_base_path.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_path_builder_base_set.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_path_builder_base_update.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_rotation_jump.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_run_attack.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_sequencer.cpp" />
+    <ClCompile Include="..\ai\Monsters\control_threaten.cpp" />
+    <ClCompile Include="..\ai\Monsters\corpse_cover.cpp" />
+    <ClCompile Include="..\ai\Monsters\Dog\dog.cpp" />
+    <ClCompile Include="..\ai\Monsters\Dog\dog_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Dog\dog_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\energy_holder.cpp" />
+    <ClCompile Include="..\ai\Monsters\Flesh\flesh.cpp" />
+    <ClCompile Include="..\ai\Monsters\Flesh\flesh_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Flesh\flesh_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Fracture\fracture.cpp" />
+    <ClCompile Include="..\ai\Monsters\Fracture\fracture_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Fracture\fracture_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\invisibility.cpp" />
+    <ClCompile Include="..\ai\Monsters\melee_checker.cpp" />
+    <ClCompile Include="..\ai\monsters\monster_aura.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_corpse_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_corpse_memory.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_cover_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_enemy_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_enemy_memory.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_event_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_hit_memory.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_home.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_morale.cpp" />
+    <ClCompile Include="..\ai\Monsters\monster_sound_memory.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_ability.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_flame_thrower.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_movement.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Poltergeist\poltergeist_telekinesis.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\pseudodog.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\pseudodog_psi_effector.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\pseudodog_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\pseudodog_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\psy_dog.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\psy_dog_aura.cpp" />
+    <ClCompile Include="..\ai\Monsters\Pseudodog\psy_dog_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\PseudoGigant\pseudogigant_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\PseudoGigant\pseudogigant_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\PseudoGigant\pseudo_gigant.cpp" />
+    <ClCompile Include="..\ai\Monsters\PseudoGigant\pseudo_gigant_step_effector.cpp" />
+    <ClCompile Include="..\ai\Monsters\psy_aura.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\ai_rat.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_animations.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_behaviour.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_feel.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_fire.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_fsm.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\ai_rat_templates.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\rat_state_activation.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\rat_state_initialize.cpp" />
+    <ClCompile Include="..\ai\monsters\rats\rat_state_switch.cpp" />
+    <ClCompile Include="..\ai\Monsters\Snork\snork.cpp" />
+    <ClCompile Include="..\ai\Monsters\Snork\snork_jump.cpp" />
+    <ClCompile Include="..\ai\Monsters\Snork\snork_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Snork\snork_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\telekinesis.cpp" />
+    <ClCompile Include="..\ai\Monsters\telekinetic_object.cpp" />
+    <ClCompile Include="..\ai\Monsters\Tushkano\tushkano.cpp" />
+    <ClCompile Include="..\ai\Monsters\Tushkano\tushkano_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Tushkano\tushkano_state_manager.cpp" />
+    <ClCompile Include="..\ai\Monsters\Zombie\zombie.cpp" />
+    <ClCompile Include="..\ai\Monsters\Zombie\zombie_script.cpp" />
+    <ClCompile Include="..\ai\Monsters\Zombie\zombie_state_manager.cpp" />
+    <ClCompile Include="..\ai\phantom\phantom.cpp" />
+    <ClCompile Include="..\Ai\Stalker\ai_stalker.cpp" />
+    <ClCompile Include="..\ai\stalker\ai_stalker_cover.cpp" />
+    <ClCompile Include="..\ai\stalker\ai_stalker_debug.cpp" />
+    <ClCompile Include="..\Ai\Stalker\ai_stalker_events.cpp" />
+    <ClCompile Include="..\Ai\Stalker\ai_stalker_feel.cpp" />
+    <ClCompile Include="..\Ai\Stalker\ai_stalker_fire.cpp" />
+    <ClCompile Include="..\Ai\Stalker\ai_stalker_misc.cpp" />
+    <ClCompile Include="..\Ai\Stalker\ai_stalker_script.cpp" />
+    <ClCompile Include="..\ai\stalker\ai_stalker_script_entity.cpp" />
+    <ClCompile Include="..\Ai\Trader\ai_trader.cpp" />
+    <ClCompile Include="..\ai\trader\ai_trader_script.cpp" />
+    <ClCompile Include="..\ai\trader\trader_animation.cpp" />
+    <ClCompile Include="..\ai\weighted_random.cpp" />
+    <ClCompile Include="..\ai_crow_script.cpp" />
+    <ClCompile Include="..\ai_debug_variables.cpp" />
+    <ClCompile Include="..\ai_obstacle.cpp" />
+    <ClCompile Include="..\AI_PhraseDialogManager.cpp" />
+    <ClCompile Include="..\ai_sounds.cpp" />
+    <ClCompile Include="..\ai_space.cpp" />
+    <ClCompile Include="..\ai_stalker_alife.cpp" />
+    <ClCompile Include="..\alife_anomalous_zone.cpp" />
+    <ClCompile Include="..\alife_combat_manager.cpp" />
+    <ClCompile Include="..\alife_communication_manager.cpp" />
+    <ClCompile Include="..\alife_creature_abstract.cpp" />
+    <ClCompile Include="..\alife_dynamic_object.cpp" />
+    <ClCompile Include="..\alife_graph_registry.cpp" />
+    <ClCompile Include="..\alife_group_abstract.cpp" />
+    <ClCompile Include="..\alife_group_registry.cpp" />
+    <ClCompile Include="..\alife_human_abstract.cpp" />
+    <ClCompile Include="..\alife_human_brain_script.cpp" />
+    <ClCompile Include="..\alife_human_object_handler.cpp" />
+    <ClCompile Include="..\alife_interaction_manager.cpp" />
+    <ClCompile Include="..\alife_monster_abstract.cpp" />
+    <ClCompile Include="..\alife_monster_base.cpp" />
+    <ClCompile Include="..\alife_monster_brain_script.cpp" />
+    <ClCompile Include="..\alife_monster_detail_path_manager.cpp" />
+    <ClCompile Include="..\alife_monster_detail_path_manager_script.cpp" />
+    <ClCompile Include="..\alife_monster_movement_manager.cpp" />
+    <ClCompile Include="..\alife_monster_movement_manager_script.cpp" />
+    <ClCompile Include="..\alife_monster_patrol_path_manager.cpp" />
+    <ClCompile Include="..\alife_monster_patrol_path_manager_script.cpp" />
+    <ClCompile Include="..\alife_object.cpp" />
+    <ClCompile Include="..\alife_object_registry.cpp" />
+    <ClCompile Include="..\alife_online_offline_group.cpp" />
+    <ClCompile Include="..\alife_online_offline_group_brain.cpp" />
+    <ClCompile Include="..\alife_registry_container.cpp" />
+    <ClCompile Include="..\alife_schedule_registry.cpp" />
+    <ClCompile Include="..\alife_simulator.cpp" />
+    <ClCompile Include="..\alife_simulator_base.cpp" />
+    <ClCompile Include="..\alife_simulator_base2.cpp" />
+    <ClCompile Include="..\alife_simulator_header.cpp" />
+    <ClCompile Include="..\alife_simulator_script.cpp" />
+    <ClCompile Include="..\alife_smart_terrain_registry.cpp" />
+    <ClCompile Include="..\alife_smart_terrain_task.cpp" />
+    <ClCompile Include="..\alife_smart_terrain_task_script.cpp" />
+    <ClCompile Include="..\alife_smart_zone.cpp" />
+    <ClCompile Include="..\alife_spawn_registry.cpp" />
+    <ClCompile Include="..\alife_spawn_registry_header.cpp" />
+    <ClCompile Include="..\alife_spawn_registry_spawn.cpp" />
+    <ClCompile Include="..\alife_storage_manager.cpp" />
+    <ClCompile Include="..\alife_story_registry.cpp" />
+    <ClCompile Include="..\alife_surge_manager.cpp" />
+    <ClCompile Include="..\alife_switch_manager.cpp" />
+    <ClCompile Include="..\alife_time_manager.cpp" />
+    <ClCompile Include="..\alife_trader.cpp" />
+    <ClCompile Include="..\alife_trader_abstract.cpp" />
+    <ClCompile Include="..\alife_update_manager.cpp" />
+    <ClCompile Include="..\AmebaZone.cpp" />
+    <ClCompile Include="..\ammunition_groups.cpp" />
+    <ClCompile Include="..\animation_movement_controller.cpp" />
+    <ClCompile Include="..\animation_script_callback.cpp" />
+    <ClCompile Include="..\animation_utils.cpp" />
+    <ClCompile Include="..\antirad.cpp" />
+    <ClCompile Include="..\antirad_script.cpp" />
+    <ClCompile Include="..\Artefact.cpp" />
+    <ClCompile Include="..\artefact_activation.cpp" />
+    <ClCompile Include="..\artefact_script.cpp" />
+    <ClCompile Include="..\atlas_stalkercoppc_v1.c" />
+    <ClCompile Include="..\atlas_submit_queue.cpp" />
+    <ClCompile Include="..\attachable_item.cpp" />
+    <ClCompile Include="..\attachment_owner.cpp" />
+    <ClCompile Include="..\autosave_manager.cpp" />
+    <ClCompile Include="..\awards_store.cpp" />
+    <ClCompile Include="..\base_client_classes_script.cpp" />
+    <ClCompile Include="..\BastArtifact.cpp" />
+    <ClCompile Include="..\best_scores_helper.cpp" />
+    <ClCompile Include="..\best_scores_store.cpp" />
+    <ClCompile Include="..\BlackDrops.cpp" />
+    <ClCompile Include="..\BlackGraviArtifact.cpp" />
+    <ClCompile Include="..\black_list.cpp" />
+    <ClCompile Include="..\Bolt.cpp" />
+    <ClCompile Include="..\BoneProtections.cpp" />
+    <ClCompile Include="..\bone_groups.cpp" />
+    <ClCompile Include="..\BottleItem.cpp" />
+    <ClCompile Include="..\BottleItem_script.cpp" />
+    <ClCompile Include="..\BreakableObject.cpp" />
+    <ClCompile Include="..\CameraEffector.cpp" />
+    <ClCompile Include="..\CameraFirstEye.cpp" />
+    <ClCompile Include="..\cameralook.cpp" />
+    <ClCompile Include="..\Car.cpp" />
+    <ClCompile Include="..\CarCameras.cpp" />
+    <ClCompile Include="..\CarDamageParticles.cpp" />
+    <ClCompile Include="..\CarDoors.cpp" />
+    <ClCompile Include="..\CarExhaust.cpp" />
+    <ClCompile Include="..\CarInput.cpp" />
+    <ClCompile Include="..\CarLights.cpp" />
+    <ClCompile Include="..\CarScript.cpp" />
+    <ClCompile Include="..\CarSound.cpp" />
+    <ClCompile Include="..\CarWeapon.cpp" />
+    <ClCompile Include="..\CarWheels.cpp" />
+    <ClCompile Include="..\car_memory.cpp" />
+    <ClCompile Include="..\cdkey_ban_list.cpp" />
+    <ClCompile Include="..\CharacterPhysicsSupport.cpp" />
+    <ClCompile Include="..\character_community.cpp" />
+    <ClCompile Include="..\character_hit_animations.cpp" />
+    <ClCompile Include="..\character_rank.cpp" />
+    <ClCompile Include="..\character_reputation.cpp" />
+    <ClCompile Include="..\character_shell_control.cpp" />
+    <ClCompile Include="..\client_spawn_manager.cpp" />
+    <ClCompile Include="..\client_spawn_manager_script.cpp" />
+    <ClCompile Include="..\ClimableObject.cpp" />
+    <ClCompile Include="..\configs_common.cpp" />
+    <ClCompile Include="..\configs_dumper.cpp" />
+    <ClCompile Include="..\configs_dump_verifyer.cpp" />
+    <ClCompile Include="..\console_commands.cpp" />
+    <ClCompile Include="..\console_commands_mp.cpp" />
+    <ClCompile Include="..\console_registrator_script.cpp" />
+    <ClCompile Include="..\cover_evaluators.cpp" />
+    <ClCompile Include="..\cover_manager.cpp" />
+    <ClCompile Include="..\cover_point_script.cpp" />
+    <ClCompile Include="..\cta_game_artefact.cpp" />
+    <ClCompile Include="..\cta_game_artefact_activation.cpp" />
+    <ClCompile Include="..\CustomDetector.cpp" />
+    <ClCompile Include="..\CustomDevice.cpp" />
+    <ClCompile Include="..\CustomMonster.cpp" />
+    <ClCompile Include="..\CustomMonster_VCPU.cpp" />
+    <ClCompile Include="..\CustomOutfit.cpp" />
+    <ClCompile Include="..\CustomOutfit_script.cpp" />
+    <ClCompile Include="..\CustomRocket.cpp" />
+    <ClCompile Include="..\CustomZone.cpp" />
+    <ClCompile Include="..\CustomZone_script.cpp" />
+    <ClCompile Include="..\DamagableItem.cpp" />
+    <ClCompile Include="..\damage_manager.cpp" />
+    <ClCompile Include="..\danger_cover_location.cpp" />
+    <ClCompile Include="..\danger_explosive.cpp" />
+    <ClCompile Include="..\danger_location.cpp" />
+    <ClCompile Include="..\danger_manager.cpp" />
+    <ClCompile Include="..\danger_object.cpp" />
+    <ClCompile Include="..\danger_object_location.cpp" />
+    <ClCompile Include="..\date_time.cpp" />
+    <ClCompile Include="..\DBG_Car.cpp" />
+    <ClCompile Include="..\dbg_draw_frustum.cpp" />
+    <ClCompile Include="..\death_anims.cpp" />
+    <ClCompile Include="..\death_anims_predicates.cpp" />
+    <ClCompile Include="..\debug_make_final_test.cpp" />
+    <ClCompile Include="..\debug_renderer.cpp" />
+    <ClCompile Include="..\debug_text_tree.cpp" />
+    <ClCompile Include="..\DelayedActionFuse.cpp" />
+    <ClCompile Include="..\DemoInfo.cpp" />
+    <ClCompile Include="..\DemoInfo_Loader.cpp" />
+    <ClCompile Include="..\DemoPLay_Control.cpp" />
+    <ClCompile Include="..\DestroyablePhysicsObject.cpp" />
+    <ClCompile Include="..\detail_path_manager.cpp" />
+    <ClCompile Include="..\detail_path_manager_smooth.cpp" />
+    <ClCompile Include="..\doors_actor.cpp" />
+    <ClCompile Include="..\doors_door.cpp" />
+    <ClCompile Include="..\doors_manager.cpp" />
+    <ClCompile Include="..\Dosimeter.cpp" />
+    <ClCompile Include="..\double_shot_double_kill.cpp" />
+    <ClCompile Include="..\DummyArtifact.cpp" />
+    <ClCompile Include="..\DynamicHeightMap.cpp" />
+    <ClCompile Include="..\dynamic_obstacles_avoider.cpp" />
+    <ClCompile Include="..\eatable_item.cpp" />
+    <ClCompile Include="..\eatable_item_object.cpp" />
+    <ClCompile Include="..\eatable_item_script.cpp" />
+    <ClCompile Include="..\EffectorBobbing.cpp" />
+    <ClCompile Include="..\EffectorFall.cpp" />
+    <ClCompile Include="..\EffectorShot.cpp" />
+    <ClCompile Include="..\EffectorShotX.cpp" />
+    <ClCompile Include="..\EffectorZoomInertion.cpp" />
+    <ClCompile Include="..\ef_pattern.cpp" />
+    <ClCompile Include="..\ef_primary.cpp" />
+    <ClCompile Include="..\ef_storage.cpp" />
+    <ClCompile Include="..\ef_storage_script.cpp" />
+    <ClCompile Include="..\ElectricBall.cpp" />
+    <ClCompile Include="..\EliteDetector.cpp" />
+    <ClCompile Include="..\encyclopedia_article.cpp" />
+    <ClCompile Include="..\enemy_manager.cpp" />
+    <ClCompile Include="..\Entity.cpp" />
+    <ClCompile Include="..\EntityCondition.cpp" />
+    <ClCompile Include="..\entity_alive.cpp" />
+    <ClCompile Include="..\event_conditions_collection.cpp" />
+    <ClCompile Include="..\ExoOutfit.cpp" />
+    <ClCompile Include="..\Explosive.cpp" />
+    <ClCompile Include="..\ExplosiveItem.cpp" />
+    <ClCompile Include="..\ExplosiveRocket.cpp" />
+    <ClCompile Include="..\ExplosiveScript.cpp" />
+    <ClCompile Include="..\F1.cpp" />
+    <ClCompile Include="..\FadedBall.cpp" />
+    <ClCompile Include="..\faster_than_bullets_time.cpp" />
+    <ClCompile Include="..\filereceiver_node.cpp" />
+    <ClCompile Include="..\filetransfer_node.cpp" />
+    <ClCompile Include="..\file_transfer.cpp" />
+    <ClCompile Include="..\fire_disp_controller.cpp" />
+    <ClCompile Include="..\first_bullet_controller.cpp" />
+    <ClCompile Include="..\flare.cpp" />
+    <ClCompile Include="..\Flashlight.cpp" />
+    <ClCompile Include="..\FoodItem.cpp" />
+    <ClCompile Include="..\FoodItem_script.cpp" />
+    <ClCompile Include="..\FryupZone.cpp" />
+    <ClCompile Include="..\fs_registrator_script.cpp" />
+    <ClCompile Include="..\GalantineArtifact.cpp" />
+    <ClCompile Include="..\GameObject.cpp" />
+    <ClCompile Include="..\GamePersistent.cpp" />
+    <ClCompile Include="..\gamespy\CdkeyDecode\base32.c" />
+    <ClCompile Include="..\gamespy\CdkeyDecode\cdkeydecode.c" />
+    <ClCompile Include="..\GameTask.cpp" />
+    <ClCompile Include="..\GametaskManager.cpp" />
+    <ClCompile Include="..\GameTask_script.cpp" />
+    <ClCompile Include="..\game_base.cpp" />
+    <ClCompile Include="..\game_cl_artefacthunt.cpp" />
+    <ClCompile Include="..\game_cl_base.cpp" />
+    <ClCompile Include="..\game_cl_base_weapon_usage_statistic.cpp" />
+    <ClCompile Include="..\game_cl_base_weapon_usage_statistic_save.cpp" />
+    <ClCompile Include="..\game_cl_capturetheartefact_buywnd.cpp" />
+    <ClCompile Include="..\game_cl_capture_the_artefact.cpp" />
+    <ClCompile Include="..\game_cl_capture_the_artefact_captions_manager.cpp" />
+    <ClCompile Include="..\game_cl_capture_the_artefact_messages_menu.cpp" />
+    <ClCompile Include="..\game_cl_deathmatch.cpp" />
+    <ClCompile Include="..\game_cl_deathmatch_buywnd.cpp" />
+    <ClCompile Include="..\game_cl_mp.cpp" />
+    <ClCompile Include="..\game_cl_mp_messages_menu.cpp" />
+    <ClCompile Include="..\game_cl_mp_snd_messages.cpp" />
+    <ClCompile Include="..\game_cl_single.cpp" />
+    <ClCompile Include="..\game_cl_teamdeathmatch.cpp" />
+    <ClCompile Include="..\game_graph_script.cpp" />
+    <ClCompile Include="..\game_news.cpp" />
+    <ClCompile Include="..\game_state_accumulator.cpp" />
+    <ClCompile Include="..\game_state_accumulator_state_register.cpp" />
+    <ClCompile Include="..\game_sv_artefacthunt.cpp" />
+    <ClCompile Include="..\game_sv_artefacthunt_process_event.cpp" />
+    <ClCompile Include="..\game_sv_base.cpp" />
+    <ClCompile Include="..\game_sv_base_console_vars.cpp" />
+    <ClCompile Include="..\game_sv_capture_the_artefact.cpp" />
+    <ClCompile Include="..\game_sv_capture_the_artefact_buy_event.cpp" />
+    <ClCompile Include="..\game_sv_capture_the_artefact_myteam_impl.cpp" />
+    <ClCompile Include="..\game_sv_capture_the_artefact_process_event.cpp" />
+    <ClCompile Include="..\game_sv_deathmatch.cpp" />
+    <ClCompile Include="..\game_sv_deathmatch_process_event.cpp" />
+    <ClCompile Include="..\game_sv_event_queue.cpp" />
+    <ClCompile Include="..\game_sv_item_respawner.cpp" />
+    <ClCompile Include="..\game_sv_mp.cpp" />
+    <ClCompile Include="..\game_sv_single.cpp" />
+    <ClCompile Include="..\game_sv_teamdeathmatch.cpp" />
+    <ClCompile Include="..\game_sv_teamdeathmatch_process_event.cpp" />
+    <ClCompile Include="..\GlobalFeelTouch.cpp" />
+    <ClCompile Include="..\GraviArtifact.cpp" />
+    <ClCompile Include="..\GraviZone.cpp" />
+    <ClCompile Include="..\Grenade.cpp" />
+    <ClCompile Include="..\GrenadeLauncher.cpp" />
+    <ClCompile Include="..\group_hierarchy_holder.cpp" />
+    <ClCompile Include="..\gsc_dsigned_ltx.cpp" />
+    <ClCompile Include="..\HairsZone.cpp" />
+    <ClCompile Include="..\HairsZone_script.cpp" />
+    <ClCompile Include="..\HangingLamp.cpp" />
+    <ClCompile Include="..\harvest_time.cpp" />
+    <ClCompile Include="..\Helicopter.cpp" />
+    <ClCompile Include="..\Helicopter2.cpp" />
+    <ClCompile Include="..\HelicopterMovementManager.cpp" />
+    <ClCompile Include="..\HelicopterWeapon.cpp" />
+    <ClCompile Include="..\helicopter_script.cpp" />
+    <ClCompile Include="..\Hit.cpp" />
+    <ClCompile Include="..\HitMarker.cpp" />
+    <ClCompile Include="..\hits_store.cpp" />
+    <ClCompile Include="..\hit_immunity.cpp" />
+    <ClCompile Include="..\hit_memory_manager.cpp" />
+    <ClCompile Include="..\holder_custom.cpp" />
+    <ClCompile Include="..\holder_custom_script.cpp" />
+    <ClCompile Include="..\HUDCrosshair.cpp" />
+    <ClCompile Include="..\HudItem.cpp" />
+    <ClCompile Include="..\HUDManager.cpp" />
+    <ClCompile Include="..\HudSound.cpp" />
+    <ClCompile Include="..\HUDTarget.cpp" />
+    <ClCompile Include="..\hud_item_object.cpp" />
+    <ClCompile Include="..\IKFoot.cpp" />
+    <ClCompile Include="..\IKLimbsController.cpp" />
+    <ClCompile Include="..\Ik\aint.cxx" />
+    <ClCompile Include="..\Ik\Dof7control.cpp" />
+    <ClCompile Include="..\Ik\eqn.cxx" />
+    <ClCompile Include="..\Ik\eulersolver.cxx" />
+    <ClCompile Include="..\Ik\IKLimb.cpp" />
+    <ClCompile Include="..\Ik\jtlimits.cxx" />
+    <ClCompile Include="..\Ik\limb.cxx" />
+    <ClCompile Include="..\Ik\math3d.cpp" />
+    <ClCompile Include="..\Ik\mathTrig.cpp" />
+    <ClCompile Include="..\ik_anim_state.cpp" />
+    <ClCompile Include="..\ik_calculate_data.cpp" />
+    <ClCompile Include="..\ik_dbg_matrix.cpp" />
+    <ClCompile Include="..\ik_foot_collider.cpp" />
+    <ClCompile Include="..\ik_limb_state.cpp" />
+    <ClCompile Include="..\ik_object_shift.cpp" />
+    <ClCompile Include="..\imotion_position.cpp" />
+    <ClCompile Include="..\imotion_velocity.cpp" />
+    <ClCompile Include="..\InfoDocument.cpp" />
+    <ClCompile Include="..\InfoPortion.cpp" />
+    <ClCompile Include="..\interactive_animation.cpp" />
+    <ClCompile Include="..\interactive_motion.cpp" />
+    <ClCompile Include="..\Inventory.cpp" />
+    <ClCompile Include="..\InventoryBox.cpp" />
+    <ClCompile Include="..\InventoryBox_script.cpp" />
+    <ClCompile Include="..\InventoryOwner.cpp" />
+    <ClCompile Include="..\InventoryOwner_script.cpp" />
+    <ClCompile Include="..\inventory_item.cpp" />
+    <ClCompile Include="..\inventory_item_object.cpp" />
+    <ClCompile Include="..\inventory_item_script.cpp" />
+    <ClCompile Include="..\inventory_item_upgrade.cpp" />
+    <ClCompile Include="..\inventory_owner_info.cpp" />
+    <ClCompile Include="..\inventory_quickswitch.cpp" />
+    <ClCompile Include="..\inventory_upgrade.cpp" />
+    <ClCompile Include="..\inventory_upgrade_base.cpp" />
+    <ClCompile Include="..\inventory_upgrade_group.cpp" />
+    <ClCompile Include="..\inventory_upgrade_manager.cpp" />
+    <ClCompile Include="..\inventory_upgrade_property.cpp" />
+    <ClCompile Include="..\inventory_upgrade_root.cpp" />
+    <ClCompile Include="..\invincible_fury.cpp" />
+    <ClCompile Include="..\item_manager.cpp" />
+    <ClCompile Include="..\key_binding_registrator_script.cpp" />
+    <ClCompile Include="..\killer_victim_velocity_angle.cpp" />
+    <ClCompile Include="..\kills_store.cpp" />
+    <ClCompile Include="..\Level.cpp" />
+    <ClCompile Include="..\Level_Bullet_Manager.cpp" />
+    <ClCompile Include="..\Level_bullet_manager_firetrace.cpp" />
+    <ClCompile Include="..\level_changer.cpp" />
+    <ClCompile Include="..\level_debug.cpp" />
+    <ClCompile Include="..\Level_GameSpy_Funcs.cpp" />
+    <ClCompile Include="..\level_graph.cpp" />
+    <ClCompile Include="..\level_graph_debug.cpp" />
+    <ClCompile Include="..\level_graph_debug2.cpp" />
+    <ClCompile Include="..\level_graph_vertex.cpp" />
+    <ClCompile Include="..\Level_input.cpp" />
+    <ClCompile Include="..\Level_load.cpp" />
+    <ClCompile Include="..\level_map_locations.cpp" />
+    <ClCompile Include="..\Level_network.cpp" />
+    <ClCompile Include="..\Level_network_compressed_updates.cpp" />
+    <ClCompile Include="..\Level_network_Demo.cpp" />
+    <ClCompile Include="..\Level_network_digest_computer.cpp" />
+    <ClCompile Include="..\Level_network_map_sync.cpp" />
+    <ClCompile Include="..\Level_network_messages.cpp" />
+    <ClCompile Include="..\Level_network_spawn.cpp" />
+    <ClCompile Include="..\Level_network_start_client.cpp" />
+    <ClCompile Include="..\level_script.cpp" />
+    <ClCompile Include="..\Level_secure_messaging.cpp" />
+    <ClCompile Include="..\Level_SLS_Default.cpp" />
+    <ClCompile Include="..\Level_SLS_Load.cpp" />
+    <ClCompile Include="..\Level_SLS_Save.cpp" />
+    <ClCompile Include="..\level_sounds.cpp" />
+    <ClCompile Include="..\Level_start.cpp" />
+    <ClCompile Include="..\location_manager.cpp" />
+    <ClCompile Include="..\login_manager.cpp" />
+    <ClCompile Include="..\login_manager_script.cpp" />
+    <ClCompile Include="..\magic_box3.cpp" />
+    <ClCompile Include="..\magic_minimize_1d.cpp" />
+    <ClCompile Include="..\MainMenu.cpp" />
+    <ClCompile Include="..\map_location.cpp" />
+    <ClCompile Include="..\map_manager.cpp" />
+    <ClCompile Include="..\map_spot.cpp" />
+    <ClCompile Include="..\material_manager.cpp" />
+    <ClCompile Include="..\medkit.cpp" />
+    <ClCompile Include="..\medkit_script.cpp" />
+    <ClCompile Include="..\memory_manager.cpp" />
+    <ClCompile Include="..\memory_space_script.cpp" />
+    <ClCompile Include="..\MercuryBall.cpp" />
+    <ClCompile Include="..\Message_Filter.cpp" />
+    <ClCompile Include="..\MilitaryOutfit.cpp" />
+    <ClCompile Include="..\Mincer.cpp" />
+    <ClCompile Include="..\mincer_script.cpp" />
+    <ClCompile Include="..\min_obb.cpp" />
+    <ClCompile Include="..\Missile.cpp" />
+    <ClCompile Include="..\monster_community.cpp" />
+    <ClCompile Include="..\MosquitoBald.cpp" />
+    <ClCompile Include="..\MosquitoBald_script.cpp" />
+    <ClCompile Include="..\movement_manager.cpp" />
+    <ClCompile Include="..\movement_manager_game.cpp" />
+    <ClCompile Include="..\movement_manager_level.cpp" />
+    <ClCompile Include="..\movement_manager_patrol.cpp" />
+    <ClCompile Include="..\movement_manager_physic.cpp" />
+    <ClCompile Include="..\moving_bones_snd_player.cpp" />
+    <ClCompile Include="..\moving_object.cpp" />
+    <ClCompile Include="..\moving_objects.cpp" />
+    <ClCompile Include="..\moving_objects_dynamic.cpp" />
+    <ClCompile Include="..\moving_objects_dynamic_collision.cpp" />
+    <ClCompile Include="..\moving_objects_static.cpp" />
+    <ClCompile Include="..\mpactor_dump_impl.cpp" />
+    <ClCompile Include="..\MPPlayersBag.cpp" />
+    <ClCompile Include="..\mp_config_sections.cpp" />
+    <ClCompile Include="..\Needles.cpp" />
+    <ClCompile Include="..\NoGravityZone.cpp" />
+    <ClCompile Include="..\object_actions.cpp" />
+    <ClCompile Include="..\object_handler.cpp" />
+    <ClCompile Include="..\object_handler_planner.cpp" />
+    <ClCompile Include="..\object_handler_planner_missile.cpp" />
+    <ClCompile Include="..\object_handler_planner_weapon.cpp" />
+    <ClCompile Include="..\object_property_evaluators.cpp" />
+    <ClCompile Include="..\obstacles_query.cpp" />
+    <ClCompile Include="..\ParticlesObject.cpp" />
+    <ClCompile Include="..\ParticlesPlayer.cpp" />
+    <ClCompile Include="..\particle_params.cpp" />
+    <ClCompile Include="..\particle_params_script.cpp" />
+    <ClCompile Include="..\patrol_path.cpp" />
+    <ClCompile Include="..\patrol_path_manager.cpp" />
+    <ClCompile Include="..\patrol_path_params.cpp" />
+    <ClCompile Include="..\patrol_path_params_script.cpp" />
+    <ClCompile Include="..\patrol_path_storage.cpp" />
+    <ClCompile Include="..\patrol_point.cpp" />
+    <ClCompile Include="..\PDA.cpp" />
+    <ClCompile Include="..\PHCollisionDamageReceiver.cpp" />
+    <ClCompile Include="..\PHCommander.cpp" />
+    <ClCompile Include="..\PHDebug.cpp" />
+    <ClCompile Include="..\PHDestroyable.cpp" />
+    <ClCompile Include="..\PHDestroyableNotificate.cpp" />
+    <ClCompile Include="..\PHMovementControl.cpp" />
+    <ClCompile Include="..\PHMovementDynamicActivate.cpp" />
+    <ClCompile Include="..\Phrase.cpp" />
+    <ClCompile Include="..\PhraseDialog.cpp" />
+    <ClCompile Include="..\PhraseDialogManager.cpp" />
+    <ClCompile Include="..\PhraseDialog_script.cpp" />
+    <ClCompile Include="..\PhraseScript.cpp" />
+    <ClCompile Include="..\PHScriptCall.cpp" />
+    <ClCompile Include="..\PHShellCreator.cpp" />
+    <ClCompile Include="..\PHSimpleCalls.cpp" />
+    <ClCompile Include="..\PHSimpleCallsScript.cpp" />
+    <ClCompile Include="..\PHSkeleton.cpp" />
+    <ClCompile Include="..\PHSoundPlayer.cpp" />
+    <ClCompile Include="..\PhysicObject.cpp" />
+    <ClCompile Include="..\PhysicObject_script.cpp" />
+    <ClCompile Include="..\PhysicsGamePars.cpp" />
+    <ClCompile Include="..\PhysicsShellHolder.cpp" />
+    <ClCompile Include="..\PhysicsSkeletonObject.cpp" />
+    <ClCompile Include="..\physics_element_scripted.cpp" />
+    <ClCompile Include="..\physics_game.cpp" />
+    <ClCompile Include="..\physics_joint_scripted.cpp" />
+    <ClCompile Include="..\physics_shell_animated.cpp" />
+    <ClCompile Include="..\physics_shell_scripted.cpp" />
+    <ClCompile Include="..\physics_world_scripted.cpp" />
+    <ClCompile Include="..\physic_item.cpp" />
+    <ClCompile Include="..\player_account.cpp" />
+    <ClCompile Include="..\player_hud.cpp" />
+    <ClCompile Include="..\player_hud_script.cpp" />
+    <ClCompile Include="..\player_hud_tune.cpp" />
+    <ClCompile Include="..\player_name_modifyer.cpp" />
+    <ClCompile Include="..\player_spot_params.cpp" />
+    <ClCompile Include="..\player_state_achilles_heel.cpp" />
+    <ClCompile Include="..\player_state_ambassador.cpp" />
+    <ClCompile Include="..\player_state_ammo_elapsed.cpp" />
+    <ClCompile Include="..\player_state_avenger.cpp" />
+    <ClCompile Include="..\player_state_blitzkrieg.cpp" />
+    <ClCompile Include="..\player_state_cherub.cpp" />
+    <ClCompile Include="..\player_state_climber.cpp" />
+    <ClCompile Include="..\player_state_mad.cpp" />
+    <ClCompile Include="..\player_state_marksman.cpp" />
+    <ClCompile Include="..\player_state_multichampion.cpp" />
+    <ClCompile Include="..\player_state_opener.cpp" />
+    <ClCompile Include="..\player_state_params.cpp" />
+    <ClCompile Include="..\player_state_remembrance.cpp" />
+    <ClCompile Include="..\player_state_skewer.cpp" />
+    <ClCompile Include="..\player_state_toughy.cpp" />
+    <ClCompile Include="..\player_team_win_score.cpp" />
+    <ClCompile Include="..\poses_blending.cpp" />
+    <ClCompile Include="..\pose_extrapolation.cpp" />
+    <ClCompile Include="..\PostprocessAnimator.cpp" />
+    <ClCompile Include="..\pp_effector_custom.cpp" />
+    <ClCompile Include="..\pp_effector_distance.cpp" />
+    <ClCompile Include="..\profiler.cpp" />
+    <ClCompile Include="..\profile_data_types.cpp" />
+    <ClCompile Include="..\profile_data_types_script.cpp" />
+    <ClCompile Include="..\profile_store.cpp" />
+    <ClCompile Include="..\profile_store_script.cpp" />
+    <ClCompile Include="..\property_evaluator_script.cpp" />
+    <ClCompile Include="..\property_storage_script.cpp" />
+    <ClCompile Include="..\purchase_list.cpp" />
+    <ClCompile Include="..\RadioactiveZone.cpp" />
+    <ClCompile Include="..\random32.cpp" />
+    <ClCompile Include="..\rat_states.cpp" />
+    <ClCompile Include="..\rat_state_base.cpp" />
+    <ClCompile Include="..\rat_state_manager.cpp" />
+    <ClCompile Include="..\raypick.cpp" />
+    <ClCompile Include="..\RegistryFuncs.cpp" />
+    <ClCompile Include="..\relation_registry.cpp" />
+    <ClCompile Include="..\relation_registry_actions.cpp" />
+    <ClCompile Include="..\relation_registry_fights.cpp" />
+    <ClCompile Include="..\restricted_object.cpp" />
+    <ClCompile Include="..\restricted_object_obstacle.cpp" />
+    <ClCompile Include="..\rewarding_events_handlers.cpp" />
+    <ClCompile Include="..\rewarding_state_events.cpp" />
+    <ClCompile Include="..\reward_event_generator.cpp" />
+    <ClCompile Include="..\reward_manager.cpp" />
+    <ClCompile Include="..\RGD5.cpp" />
+    <ClCompile Include="..\RocketLauncher.cpp" />
+    <ClCompile Include="..\RustyHairArtifact.cpp" />
+    <ClCompile Include="..\saved_game_wrapper.cpp" />
+    <ClCompile Include="..\saved_game_wrapper_script.cpp" />
+    <ClCompile Include="..\ScientificOutfit.cpp" />
+    <ClCompile Include="..\Scope.cpp" />
+    <ClCompile Include="..\screenshots_common.cpp" />
+    <ClCompile Include="..\screenshots_writer.cpp" />
+    <ClCompile Include="..\screenshot_manager.cpp" />
+    <ClCompile Include="..\screenshot_server.cpp" />
+    <ClCompile Include="..\ScriptXMLInit.cpp" />
+    <ClCompile Include="..\script_abstract_action.cpp" />
+    <ClCompile Include="..\script_action_condition.cpp" />
+    <ClCompile Include="..\script_action_condition_script.cpp" />
+    <ClCompile Include="..\script_action_planner_action_wrapper.cpp" />
+    <ClCompile Include="..\script_action_planner_wrapper.cpp" />
+    <ClCompile Include="..\script_action_wrapper.cpp" />
+    <ClCompile Include="..\script_animation_action.cpp" />
+    <ClCompile Include="..\script_animation_action_script.cpp" />
+    <ClCompile Include="..\script_binder.cpp" />
+    <ClCompile Include="..\script_binder_object.cpp" />
+    <ClCompile Include="..\script_binder_object_script.cpp" />
+    <ClCompile Include="..\script_binder_object_wrapper.cpp" />
+    <ClCompile Include="..\script_effector.cpp" />
+    <ClCompile Include="..\script_effector_script.cpp" />
+    <ClCompile Include="..\script_effector_wrapper.cpp" />
+    <ClCompile Include="..\script_engine_help.cpp" />
+    <ClCompile Include="..\script_entity.cpp" />
+    <ClCompile Include="..\script_entity_action.cpp" />
+    <ClCompile Include="..\script_entity_action_script.cpp" />
+    <ClCompile Include="..\script_game_object.cpp" />
+    <ClCompile Include="..\script_game_object2.cpp" />
+    <ClCompile Include="..\script_game_object3.cpp" />
+    <ClCompile Include="..\script_game_object4.cpp" />
+    <ClCompile Include="..\script_game_object_inventory_owner.cpp" />
+    <ClCompile Include="..\script_game_object_script.cpp" />
+    <ClCompile Include="..\script_game_object_script2.cpp" />
+    <ClCompile Include="..\script_game_object_script3.cpp" />
+    <ClCompile Include="..\script_game_object_script_trader.cpp" />
+    <ClCompile Include="..\script_game_object_smart_covers.cpp" />
+    <ClCompile Include="..\script_game_object_trader.cpp" />
+    <ClCompile Include="..\script_game_object_use.cpp" />
+    <ClCompile Include="..\script_game_object_use2.cpp" />
+    <ClCompile Include="..\script_hit.cpp" />
+    <ClCompile Include="..\script_hit_script.cpp" />
+    <ClCompile Include="..\script_lanim.cpp" />
+    <ClCompile Include="..\script_monster_action.cpp" />
+    <ClCompile Include="..\script_monster_action_script.cpp" />
+    <ClCompile Include="..\script_monster_hit_info_script.cpp" />
+    <ClCompile Include="..\script_movement_action.cpp" />
+    <ClCompile Include="..\script_movement_action_script.cpp" />
+    <ClCompile Include="..\script_object.cpp" />
+    <ClCompile Include="..\script_object_action.cpp" />
+    <ClCompile Include="..\script_object_action_script.cpp" />
+    <ClCompile Include="..\script_particles.cpp" />
+    <ClCompile Include="..\script_particles_script.cpp" />
+    <ClCompile Include="..\script_particle_action.cpp" />
+    <ClCompile Include="..\script_particle_action_script.cpp" />
+    <ClCompile Include="..\script_property_evaluator_wrapper.cpp" />
+    <ClCompile Include="..\script_render_device_script.cpp" />
+    <ClCompile Include="..\script_sound.cpp" />
+    <ClCompile Include="..\script_sound_action.cpp" />
+    <ClCompile Include="..\script_sound_action_script.cpp" />
+    <ClCompile Include="..\script_sound_info_script.cpp" />
+    <ClCompile Include="..\script_sound_script.cpp" />
+    <ClCompile Include="..\script_wallmarks_manager.cpp" />
+    <ClCompile Include="..\script_wallmarks_script.cpp" />
+    <ClCompile Include="..\script_watch_action.cpp" />
+    <ClCompile Include="..\script_watch_action_script.cpp" />
+    <ClCompile Include="..\script_world_property_script.cpp" />
+    <ClCompile Include="..\script_world_state_script.cpp" />
+    <ClCompile Include="..\script_zone.cpp" />
+    <ClCompile Include="..\script_zone_script.cpp" />
+    <ClCompile Include="..\searchlight.cpp" />
+    <ClCompile Include="..\secure_messaging.cpp" />
+    <ClCompile Include="..\seniority_hierarchy_holder.cpp" />
+    <ClCompile Include="..\server_entity_wrapper.cpp" />
+    <ClCompile Include="..\script_light_script.cpp" />
+    <ClCompile Include="..\ShootingObject.cpp" />
+    <ClCompile Include="..\shootingObject_dump_impl.cpp" />
+    <ClCompile Include="..\sight_action.cpp" />
+    <ClCompile Include="..\sight_manager.cpp" />
+    <ClCompile Include="..\sight_manager_target.cpp" />
+    <ClCompile Include="..\Silencer.cpp" />
+    <ClCompile Include="..\silent_shots.cpp" />
+    <ClCompile Include="..\SimpleDetector.cpp" />
+    <ClCompile Include="..\smart_cover.cpp" />
+    <ClCompile Include="..\smart_cover_action.cpp" />
+    <ClCompile Include="..\smart_cover_animation_planner.cpp" />
+    <ClCompile Include="..\smart_cover_animation_selector.cpp" />
+    <ClCompile Include="..\smart_cover_default_behaviour_planner.cpp" />
+    <ClCompile Include="..\smart_cover_description.cpp" />
+    <ClCompile Include="..\smart_cover_detail.cpp" />
+    <ClCompile Include="..\smart_cover_evaluators.cpp" />
+    <ClCompile Include="..\smart_cover_loophole.cpp" />
+    <ClCompile Include="..\smart_cover_loophole_planner_actions.cpp" />
+    <ClCompile Include="..\smart_cover_object.cpp" />
+    <ClCompile Include="..\smart_cover_object_script.cpp" />
+    <ClCompile Include="..\smart_cover_planner_actions.cpp" />
+    <ClCompile Include="..\smart_cover_planner_target_provider.cpp" />
+    <ClCompile Include="..\smart_cover_planner_target_selector.cpp" />
+    <ClCompile Include="..\smart_cover_storage.cpp" />
+    <ClCompile Include="..\smart_cover_transition.cpp" />
+    <ClCompile Include="..\smart_cover_transition_animation.cpp" />
+    <ClCompile Include="..\sound_collection_storage.cpp" />
+    <ClCompile Include="..\sound_memory_manager.cpp" />
+    <ClCompile Include="..\sound_player.cpp" />
+    <ClCompile Include="..\space_restriction.cpp" />
+    <ClCompile Include="..\space_restriction_base.cpp" />
+    <ClCompile Include="..\space_restriction_bridge.cpp" />
+    <ClCompile Include="..\space_restriction_composition.cpp" />
+    <ClCompile Include="..\space_restriction_holder.cpp" />
+    <ClCompile Include="..\space_restriction_manager.cpp" />
+    <ClCompile Include="..\space_restriction_shape.cpp" />
+    <ClCompile Include="..\space_restrictor.cpp" />
+    <ClCompile Include="..\space_restrictor_script.cpp" />
+    <ClCompile Include="..\Spectator.cpp" />
+    <ClCompile Include="..\spectator_camera_first_eye.cpp" />
+    <ClCompile Include="..\sprinter_stopper.cpp" />
+    <ClCompile Include="..\squad_hierarchy_holder.cpp" />
+    <ClCompile Include="..\StalkerOutfit.cpp" />
+    <ClCompile Include="..\stalker_alife_actions.cpp" />
+    <ClCompile Include="..\stalker_alife_planner.cpp" />
+    <ClCompile Include="..\stalker_alife_task_actions.cpp" />
+    <ClCompile Include="..\stalker_animation_callbacks.cpp" />
+    <ClCompile Include="..\stalker_animation_data.cpp" />
+    <ClCompile Include="..\stalker_animation_data_storage.cpp" />
+    <ClCompile Include="..\stalker_animation_global.cpp" />
+    <ClCompile Include="..\stalker_animation_head.cpp" />
+    <ClCompile Include="..\stalker_animation_legs.cpp" />
+    <ClCompile Include="..\stalker_animation_manager.cpp" />
+    <ClCompile Include="..\stalker_animation_manager_debug.cpp" />
+    <ClCompile Include="..\stalker_animation_manager_update.cpp" />
+    <ClCompile Include="..\stalker_animation_names.cpp" />
+    <ClCompile Include="..\stalker_animation_pair.cpp" />
+    <ClCompile Include="..\stalker_animation_script.cpp" />
+    <ClCompile Include="..\stalker_animation_state.cpp" />
+    <ClCompile Include="..\stalker_animation_torso.cpp" />
+    <ClCompile Include="..\stalker_anomaly_actions.cpp" />
+    <ClCompile Include="..\stalker_anomaly_planner.cpp" />
+    <ClCompile Include="..\stalker_base_action.cpp" />
+    <ClCompile Include="..\stalker_combat_actions.cpp" />
+    <ClCompile Include="..\stalker_combat_action_base.cpp" />
+    <ClCompile Include="..\stalker_combat_planner.cpp" />
+    <ClCompile Include="..\stalker_danger_by_sound_actions.cpp" />
+    <ClCompile Include="..\stalker_danger_by_sound_planner.cpp" />
+    <ClCompile Include="..\stalker_danger_grenade_actions.cpp" />
+    <ClCompile Include="..\stalker_danger_grenade_planner.cpp" />
+    <ClCompile Include="..\stalker_danger_in_direction_actions.cpp" />
+    <ClCompile Include="..\stalker_danger_in_direction_planner.cpp" />
+    <ClCompile Include="..\stalker_danger_planner.cpp" />
+    <ClCompile Include="..\stalker_danger_property_evaluators.cpp" />
+    <ClCompile Include="..\stalker_danger_unknown_actions.cpp" />
+    <ClCompile Include="..\stalker_danger_unknown_planner.cpp" />
+    <ClCompile Include="..\stalker_death_actions.cpp" />
+    <ClCompile Include="..\stalker_death_planner.cpp" />
+    <ClCompile Include="..\stalker_flair.cpp" />
+    <ClCompile Include="..\stalker_get_distance_actions.cpp" />
+    <ClCompile Include="..\stalker_get_distance_planner.cpp" />
+    <ClCompile Include="..\stalker_kill_wounded_actions.cpp" />
+    <ClCompile Include="..\stalker_kill_wounded_planner.cpp" />
+    <ClCompile Include="..\stalker_low_cover_actions.cpp" />
+    <ClCompile Include="..\stalker_low_cover_planner.cpp" />
+    <ClCompile Include="..\stalker_movement_manager_base.cpp" />
+    <ClCompile Include="..\stalker_movement_manager_obstacles.cpp" />
+    <ClCompile Include="..\stalker_movement_manager_obstacles_path.cpp" />
+    <ClCompile Include="..\stalker_movement_manager_smart_cover.cpp" />
+    <ClCompile Include="..\stalker_movement_manager_smart_cover_fov_range.cpp" />
+    <ClCompile Include="..\stalker_movement_manager_smart_cover_loopholes.cpp" />
+    <ClCompile Include="..\stalker_movement_params.cpp" />
+    <ClCompile Include="..\stalker_planner.cpp" />
+    <ClCompile Include="..\stalker_property_evaluators.cpp" />
+    <ClCompile Include="..\stalker_search_actions.cpp" />
+    <ClCompile Include="..\stalker_search_planner.cpp" />
+    <ClCompile Include="..\stalker_sound_data.cpp" />
+    <ClCompile Include="..\stalker_sound_data_visitor.cpp" />
+    <ClCompile Include="..\stalker_velocity_collection.cpp" />
+    <ClCompile Include="..\stalker_velocity_holder.cpp" />
+    <ClCompile Include="..\state_arguments_functions.cpp" />
+    <ClCompile Include="..\static_cast_checked_test.cpp" />
+    <ClCompile Include="..\static_obstacles_avoider.cpp" />
+    <ClCompile Include="..\stats_submitter.cpp" />
+    <ClCompile Include="..\stats_submitter_dsa_params.cpp" />
+    <ClCompile Include="..\StdAfx.cpp" />
+    <ClCompile Include="..\steering_behaviour.cpp" />
+    <ClCompile Include="..\step_manager.cpp" />
+    <ClCompile Include="..\string_table.cpp" />
+    <ClCompile Include="..\team_base_zone.cpp" />
+    <ClCompile Include="..\team_hierarchy_holder.cpp" />
+    <ClCompile Include="..\TeleWhirlwind.cpp" />
+    <ClCompile Include="..\ThornArtifact.cpp" />
+    <ClCompile Include="..\Torch.cpp" />
+    <ClCompile Include="..\torch_script.cpp" />
+    <ClCompile Include="..\TorridZone.cpp" />
+    <ClCompile Include="..\Tracer.cpp" />
+    <ClCompile Include="..\trade.cpp" />
+    <ClCompile Include="..\trade2.cpp" />
+    <ClCompile Include="..\trade_parameters.cpp" />
+    <ClCompile Include="..\traffic_optimization.cpp" />
+    <ClCompile Include="..\trajectories.cpp" />
+    <ClCompile Include="..\UIAchivementsIndicator.cpp" />
+    <ClCompile Include="..\UICursor.cpp" />
+    <ClCompile Include="..\UIDialogHolder.cpp" />
+    <ClCompile Include="..\UIDosimeter.cpp" />
+    <ClCompile Include="..\UIGameAHunt.cpp" />
+    <ClCompile Include="..\UIGameCTA.cpp" />
+    <ClCompile Include="..\UIGameCustom.cpp" />
+    <ClCompile Include="..\UIGameCustom_script.cpp" />
+    <ClCompile Include="..\UIGameDM.cpp" />
+    <ClCompile Include="..\UIGameMP.cpp" />
+    <ClCompile Include="..\UIGameSP.cpp" />
+    <ClCompile Include="..\UIGameTDM.cpp" />
+    <ClCompile Include="..\UIPanelsClassFactory.cpp" />
+    <ClCompile Include="..\UIPlayerItem.cpp" />
+    <ClCompile Include="..\UIStaticItem.cpp" />
+    <ClCompile Include="..\UITeamHeader.cpp" />
+    <ClCompile Include="..\UITeamPanels.cpp" />
+    <ClCompile Include="..\UITeamState.cpp" />
+    <ClCompile Include="..\UIZoneMap.cpp" />
+    <ClCompile Include="..\ui\ArtefactDetectorUI.cpp" />
+    <ClCompile Include="..\ui\map_hint.cpp" />
+    <ClCompile Include="..\ui\MMSound.cpp" />
+    <ClCompile Include="..\ui\Restrictions.cpp" />
+    <ClCompile Include="..\ui\ServerList.cpp" />
+    <ClCompile Include="..\ui\ServerList_GameSpy_func.cpp" />
+    <ClCompile Include="..\ui\TeamInfo.cpp" />
+    <ClCompile Include="..\ui\UI3tButton.cpp" />
+    <ClCompile Include="..\ui\UIAchievements.cpp" />
+    <ClCompile Include="..\ui\UIRankingsCoC.cpp" />
+    <ClCompile Include="..\ui\UIActorMenu.cpp" />
+    <ClCompile Include="..\ui\UIActorMenuDeadBodySearch.cpp" />
+    <ClCompile Include="..\ui\UIActorMenuInitialize.cpp" />
+    <ClCompile Include="..\ui\UIActorMenuInventory.cpp" />
+    <ClCompile Include="..\ui\UIActorMenuTrade.cpp" />
+    <ClCompile Include="..\ui\UIActorMenuUpgrade.cpp" />
+    <ClCompile Include="..\ui\UIActorMenu_action.cpp" />
+    <ClCompile Include="..\ui\UIActorMenu_script.cpp" />
+    <ClCompile Include="..\ui\UIActorStateInfo.cpp" />
+    <ClCompile Include="..\ui\UIAnimatedStatic.cpp" />
+    <ClCompile Include="..\ui\UIBoosterInfo.cpp" />
+    <ClCompile Include="..\ui\UIBtnHint.cpp" />
+    <ClCompile Include="..\ui\UIButton.cpp" />
+    <ClCompile Include="..\ui\UIButton_script.cpp" />
+    <ClCompile Include="..\ui\UIBuyWeaponTab.cpp" />
+    <ClCompile Include="..\ui\UIBuyWndShared.cpp" />
+    <ClCompile Include="..\ui\UICarPanel.cpp" />
+    <ClCompile Include="..\ui\UICDkey.cpp" />
+    <ClCompile Include="..\ui\UICellCustomItems.cpp" />
+    <ClCompile Include="..\ui\UICellItem.cpp" />
+    <ClCompile Include="..\ui\UICellItemFactory.cpp" />
+    <ClCompile Include="..\ui\UIChangeMap.cpp" />
+    <ClCompile Include="..\ui\ChangeWeatherDialog.cpp" />
+    <ClCompile Include="..\ui\UICharacterInfo.cpp" />
+    <ClCompile Include="..\ui\UIChatWnd.cpp" />
+    <ClCompile Include="..\ui\UICheckButton.cpp" />
+    <ClCompile Include="..\ui\UIComboBox.cpp" />
+    <ClCompile Include="..\ui\UIComboBox_script.cpp" />
+    <ClCompile Include="..\ui\UICustomEdit.cpp" />
+    <ClCompile Include="..\ui\UICustomSpin.cpp" />
+    <ClCompile Include="..\ui\UIDebugFonts.cpp" />
+    <ClCompile Include="..\ui\UIDemoPlayControl.cpp" />
+    <ClCompile Include="..\ui\UIDialogWnd.cpp" />
+    <ClCompile Include="..\ui\UIDoubleProgressBar.cpp" />
+    <ClCompile Include="..\ui\UIDragDropListEx.cpp" />
+    <ClCompile Include="..\ui\UIDragDropReferenceList.cpp" />
+    <ClCompile Include="..\ui\UIEditBox.cpp" />
+    <ClCompile Include="..\ui\UIEditBoxEx.cpp" />
+    <ClCompile Include="..\ui\UIEditBox_script.cpp" />
+    <ClCompile Include="..\ui\UIEditKeyBind.cpp" />
+    <ClCompile Include="..\ui\UIFixedScrollBar.cpp" />
+    <ClCompile Include="..\ui\UIFrameLineWnd.cpp" />
+    <ClCompile Include="..\ui\UIFrameWindow.cpp" />
+    <ClCompile Include="..\ui\UIGameLog.cpp" />
+    <ClCompile Include="..\ui\UIGameTutorial.cpp" />
+    <ClCompile Include="..\ui\UIGameTutorialSimpleItem.cpp" />
+    <ClCompile Include="..\ui\UIGameTutorialVideoItem.cpp" />
+    <ClCompile Include="..\ui\UIHelper.cpp" />
+    <ClCompile Include="..\ui\UIHint.cpp" />
+    <ClCompile Include="..\ui\UIHudStatesWnd.cpp" />
+    <ClCompile Include="..\ui\UIInventoryUpgradeWnd.cpp" />
+    <ClCompile Include="..\ui\UIInventoryUpgradeWnd_add.cpp" />
+    <ClCompile Include="..\ui\UIInventoryUtilities.cpp" />
+    <ClCompile Include="..\ui\UIInvUpgrade.cpp" />
+    <ClCompile Include="..\ui\UIInvUpgradeInfo.cpp" />
+    <ClCompile Include="..\ui\UIInvUpgradeProperty.cpp" />
+    <ClCompile Include="..\ui\UIItemInfo.cpp" />
+    <ClCompile Include="..\ui\UIKeyBinding.cpp" />
+    <ClCompile Include="..\ui\UIKickPlayer.cpp" />
+    <ClCompile Include="..\ui\UILanimController.cpp" />
+    <ClCompile Include="..\ui\UILine.cpp" />
+    <ClCompile Include="..\ui\UILines.cpp" />
+    <ClCompile Include="..\ui\UIListBox.cpp" />
+    <ClCompile Include="..\ui\UIListBoxItem.cpp" />
+    <ClCompile Include="..\ui\UIListBoxItemMsgChain.cpp" />
+    <ClCompile Include="..\ui\UIListBox_script.cpp" />
+    <ClCompile Include="..\ui\UIListItemServer.cpp" />
+    <ClCompile Include="..\ui\UILogsWnd.cpp" />
+    <ClCompile Include="..\ui\UIMainIngameWnd.cpp" />
+    <ClCompile Include="..\ui\UIMap.cpp" />
+    <ClCompile Include="..\ui\UIMapDesc.cpp" />
+    <ClCompile Include="..\ui\UIMapInfo.cpp" />
+    <ClCompile Include="..\ui\UIMapInfo_script.cpp" />
+    <ClCompile Include="..\ui\UIMapLegend.cpp" />
+    <ClCompile Include="..\ui\UIMapList.cpp" />
+    <ClCompile Include="..\ui\UIMapWnd.cpp" />
+    <ClCompile Include="..\ui\UIMapWnd2.cpp" />
+    <ClCompile Include="..\ui\UIMapWndActions.cpp" />
+    <ClCompile Include="..\ui\UIMessageBox.cpp" />
+    <ClCompile Include="..\ui\UIMessageBoxEx.cpp" />
+    <ClCompile Include="..\ui\UIMessageBox_script.cpp" />
+    <ClCompile Include="..\ui\UIMessagesWindow.cpp" />
+    <ClCompile Include="..\ui\UIMMShniaga.cpp" />
+    <ClCompile Include="..\ui\UIMoneyIndicator.cpp" />
+    <ClCompile Include="..\ui\UIMotionIcon.cpp" />
+    <ClCompile Include="..\ui\UIMPAdminMenu.cpp" />
+    <ClCompile Include="..\ui\UIMPChangeMapAdm.cpp" />
+    <ClCompile Include="..\ui\UIMpItemsStoreWnd.cpp" />
+    <ClCompile Include="..\ui\UIMPPlayersAdm.cpp" />
+    <ClCompile Include="..\ui\UIMPServerAdm.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd_init.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd_items.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd_misc.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd_trade.cpp" />
+    <ClCompile Include="..\ui\UIMpTradeWnd_wpn.cpp" />
+    <ClCompile Include="..\ui\UINewsItemWnd.cpp" />
+    <ClCompile Include="..\ui\UIOptConCom.cpp" />
+    <ClCompile Include="..\ui\UIOptionsItem.cpp" />
+    <ClCompile Include="..\ui\UIOptionsManager.cpp" />
+    <ClCompile Include="..\ui\UIOptionsManagerScript.cpp" />
+    <ClCompile Include="..\ui\UIOutfitInfo.cpp" />
+    <ClCompile Include="..\ui\UIPdaKillMessage.cpp" />
+    <ClCompile Include="..\ui\UIPdaMsgListItem.cpp" />
+    <ClCompile Include="..\ui\UIPdaWnd.cpp" />
+    <ClCompile Include="..\ui\UIProgressBar.cpp" />
+    <ClCompile Include="..\ui\UIProgressBar_script.cpp" />
+    <ClCompile Include="..\ui\UIProgressShape.cpp" />
+    <ClCompile Include="..\ui\UIPropertiesBox.cpp" />
+    <ClCompile Include="..\ui\UIPropertiesBox_script.cpp" />
+    <ClCompile Include="..\ui\UIRadioButton.cpp" />
+    <ClCompile Include="..\ui\UIRankIndicator.cpp" />
+    <ClCompile Include="..\ui\UIRankingWnd.cpp" />
+    <ClCompile Include="..\ui\UIScriptWnd.cpp" />
+    <ClCompile Include="..\ui\UIScriptWnd_script.cpp" />
+    <ClCompile Include="..\ui\uiscriptwnd_script2.cpp" />
+    <ClCompile Include="..\ui\UIScrollBar.cpp" />
+    <ClCompile Include="..\ui\UIScrollBox.cpp" />
+    <ClCompile Include="..\ui\UIScrollView.cpp" />
+    <ClCompile Include="..\ui\UISecondTaskWnd.cpp" />
+    <ClCompile Include="..\ui\UIServerInfo.cpp" />
+    <ClCompile Include="..\ui\UISkinSelector.cpp" />
+    <ClCompile Include="..\ui\UISpawnWnd.cpp" />
+    <ClCompile Include="..\ui\UISpeechMenu.cpp" />
+    <ClCompile Include="..\ui\UISpinNum.cpp" />
+    <ClCompile Include="..\ui\UISpinText.cpp" />
+    <ClCompile Include="..\ui\UIStatic.cpp" />
+    <ClCompile Include="..\ui\UIStatic_script.cpp" />
+    <ClCompile Include="..\ui\UIStatix.cpp" />
+    <ClCompile Include="..\ui\UIStats.cpp" />
+    <ClCompile Include="..\ui\UIStatsIcon.cpp" />
+    <ClCompile Include="..\ui\UIStatsPlayerInfo.cpp" />
+    <ClCompile Include="..\ui\UIStatsPlayerList.cpp" />
+    <ClCompile Include="..\ui\UISubLine.cpp" />
+    <ClCompile Include="..\ui\UITabButton.cpp" />
+    <ClCompile Include="..\ui\UITabButtonMP.cpp" />
+    <ClCompile Include="..\ui\UITabControl.cpp" />
+    <ClCompile Include="..\ui\UITabControl_script.cpp" />
+    <ClCompile Include="..\ui\UITalkDialogWnd.cpp" />
+    <ClCompile Include="..\ui\UITalkWnd.cpp" />
+    <ClCompile Include="..\ui\UITaskWnd.cpp" />
+    <ClCompile Include="..\ui\UITextureMaster.cpp" />
+    <ClCompile Include="..\ui\UITextVote.cpp" />
+    <ClCompile Include="..\ui\UITrackBar.cpp" />
+    <ClCompile Include="..\ui\UITrackButton.cpp" />
+    <ClCompile Include="..\ui\UIVote.cpp" />
+    <ClCompile Include="..\ui\UIVoteStatusWnd.cpp" />
+    <ClCompile Include="..\ui\UIVotingCategory.cpp" />
+    <ClCompile Include="..\ui\UIWindow.cpp" />
+    <ClCompile Include="..\ui\UIWindow_script.cpp" />
+    <ClCompile Include="..\ui\UIWndCallback.cpp" />
+    <ClCompile Include="..\ui\UIWpnParams.cpp" />
+    <ClCompile Include="..\ui\UIXmlInit.cpp" />
+    <ClCompile Include="..\ui\ui_af_params.cpp" />
+    <ClCompile Include="..\ui\ui_arrow.cpp" />
+    <ClCompile Include="..\ui\UI_IB_Static.cpp" />
+    <ClCompile Include="..\ui\xrUIXmlParser.cpp" />
+    <ClCompile Include="..\ui_base.cpp" />
+    <ClCompile Include="..\ui_export_script.cpp" />
+    <ClCompile Include="..\UsableScriptObject.cpp" />
+    <ClCompile Include="..\vision_client.cpp" />
+    <ClCompile Include="..\visual_memory_manager.cpp" />
+    <ClCompile Include="..\visual_memory_params.cpp" />
+    <ClCompile Include="..\wallmark_manager.cpp" />
+    <ClCompile Include="..\Weapon.cpp" />
+    <ClCompile Include="..\WeaponAK74.cpp" />
+    <ClCompile Include="..\WeaponAmmo.cpp" />
+    <ClCompile Include="..\WeaponAmmo_script.cpp" />
+    <ClCompile Include="..\WeaponAutomaticShotgun.cpp" />
+    <ClCompile Include="..\WeaponBinoculars.cpp" />
+    <ClCompile Include="..\WeaponBinocularsVision.cpp" />
+    <ClCompile Include="..\WeaponBinoculars_script.cpp" />
+    <ClCompile Include="..\weaponBM16.cpp" />
+    <ClCompile Include="..\weaponBM16_script.cpp" />
+    <ClCompile Include="..\WeaponCustomAuto.cpp" />
+    <ClCompile Include="..\WeaponCustomPistol.cpp" />
+    <ClCompile Include="..\WeaponDispersion.cpp" />
+    <ClCompile Include="..\WeaponFire.cpp" />
+    <ClCompile Include="..\WeaponFN2000.cpp" />
+    <ClCompile Include="..\WeaponFORT.cpp" />
+    <ClCompile Include="..\WeaponGroza.cpp" />
+    <ClCompile Include="..\WeaponHPSA.cpp" />
+    <ClCompile Include="..\WeaponHPSA_script.cpp" />
+    <ClCompile Include="..\WeaponKnife.cpp" />
+    <ClCompile Include="..\WeaponKnife_script.cpp" />
+    <ClCompile Include="..\WeaponLR300.cpp" />
+    <ClCompile Include="..\WeaponMagazined.cpp" />
+    <ClCompile Include="..\WeaponMagazinedWGrenade.cpp" />
+    <ClCompile Include="..\WeaponPistol.cpp" />
+    <ClCompile Include="..\WeaponPM.cpp" />
+    <ClCompile Include="..\WeaponRevolver.cpp" />
+    <ClCompile Include="..\WeaponRG6.cpp" />
+    <ClCompile Include="..\WeaponRG6_script.cpp" />
+    <ClCompile Include="..\WeaponRPG7.cpp" />
+    <ClCompile Include="..\WeaponRPG7_script.cpp" />
+    <ClCompile Include="..\WeaponShotgun.cpp" />
+    <ClCompile Include="..\weaponshotgun_script.cpp" />
+    <ClCompile Include="..\WeaponStatMgun.cpp" />
+    <ClCompile Include="..\HolderEntityObject.cpp" />
+    <ClCompile Include="..\WeaponStatMgunFire.cpp" />
+    <ClCompile Include="..\WeaponStatMgunIR.cpp" />
+    <ClCompile Include="..\WeaponSVD.cpp" />
+    <ClCompile Include="..\WeaponSVU.cpp" />
+    <ClCompile Include="..\WeaponUpgrade.cpp" />
+    <ClCompile Include="..\WeaponUSP45.cpp" />
+    <ClCompile Include="..\WeaponVal.cpp" />
+    <ClCompile Include="..\WeaponVintorez.cpp" />
+    <ClCompile Include="..\WeaponWalther.cpp" />
+    <ClCompile Include="..\weapon_ammo_dump_impl.cpp" />
+    <ClCompile Include="..\weapon_dump_impl.cpp" />
+    <ClCompile Include="..\Wound.cpp" />
+    <ClCompile Include="..\xrClientsPool.cpp" />
+    <ClCompile Include="..\xrGame.cpp" />
+    <ClCompile Include="..\xrGameSpyServer.cpp" />
+    <ClCompile Include="..\xrGameSpyServer_callbacks.cpp" />
+    <ClCompile Include="..\xrGameSpy_GameSpyFuncs.cpp" />
+    <ClCompile Include="..\xrgame_dll_detach.cpp" />
+    <ClCompile Include="..\xrServer.cpp" />
+    <ClCompile Include="..\xrServerMapSync.cpp" />
+    <ClCompile Include="..\xrServer_balance.cpp" />
+    <ClCompile Include="..\xrServer_CL_connect.cpp" />
+    <ClCompile Include="..\xrServer_CL_disconnect.cpp" />
+    <ClCompile Include="..\xrServer_Connect.cpp" />
+    <ClCompile Include="..\xrServer_Disconnect.cpp" />
+    <ClCompile Include="..\xrServer_info.cpp" />
+    <ClCompile Include="..\xrServer_perform_GameExport.cpp" />
+    <ClCompile Include="..\xrServer_perform_migration.cpp" />
+    <ClCompile Include="..\xrServer_perform_RPgen.cpp" />
+    <ClCompile Include="..\xrServer_perform_sls_default.cpp" />
+    <ClCompile Include="..\xrServer_perform_sls_load.cpp" />
+    <ClCompile Include="..\xrServer_perform_sls_save.cpp" />
+    <ClCompile Include="..\xrServer_perform_transfer.cpp" />
+    <ClCompile Include="..\xrServer_process_event.cpp" />
+    <ClCompile Include="..\xrServer_process_event_activate.cpp" />
+    <ClCompile Include="..\xrServer_process_event_destroy.cpp" />
+    <ClCompile Include="..\xrServer_process_event_ownership.cpp" />
+    <ClCompile Include="..\xrServer_process_event_reject.cpp" />
+    <ClCompile Include="..\xrServer_process_spawn.cpp" />
+    <ClCompile Include="..\xrServer_process_update.cpp" />
+    <ClCompile Include="..\xrServer_secure_messaging.cpp" />
+    <ClCompile Include="..\xrServer_sls_clear.cpp" />
+    <ClCompile Include="..\xrServer_svclient_validation.cpp" />
+    <ClCompile Include="..\xrServer_updates_compressor.cpp" />
+    <ClCompile Include="..\xr_dsa_signer.cpp" />
+    <ClCompile Include="..\xr_dsa_verifyer.cpp" />
+    <ClCompile Include="..\xr_level_controller.cpp" />
+    <ClCompile Include="..\xr_time.cpp" />
+    <ClCompile Include="..\ZoneCampfire.cpp" />
+    <ClCompile Include="..\ZoneVisual.cpp" />
+    <ClCompile Include="..\zone_effector.cpp" />
+    <ClCompile Include="..\ZudaArtifact.cpp" />
+    <ClCompile Include="..\WeaponMagazineExtended.cpp" />
+    <ClCompile Include="..\LevelDebugScript.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <CustomBuild Include="..\ai\monsters\chimera\chimera_attack_state.h" />
+    <CustomBuild Include="..\ai\monsters\chimera\chimera_attack_state_inline.h" />
+    <CustomBuild Include="..\Explosive.h" />
+    <CustomBuild Include="..\graph_abstract.h" />
+    <CustomBuild Include="..\graph_abstract_inline.h" />
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/xrGame/xrGame.vcxproj b/src/xrGame/xrGame.vcxproj
index c8e93f0..35c1796 100644
--- a/src/xrGame/xrGame.vcxproj
+++ b/src/xrGame/xrGame.vcxproj
@@ -1160,6 +1160,7 @@
     <ClInclude Include="kills_store.h" />
     <ClInclude Include="kills_store_inline.h" />
     <ClInclude Include="Level.h" />
+    <ClInclude Include="LevelDebugScript.h" />
     <ClInclude Include="Level_Bullet_Manager.h" />
     <ClInclude Include="level_changer.h" />
     <ClInclude Include="level_debug.h" />
@@ -1228,6 +1229,8 @@
     <ClInclude Include="mt_config.h" />
     <ClInclude Include="Needles.h" />
     <ClInclude Include="NET_Queue.h" />
+    <ClInclude Include="NewZoomFlag.h" />
+    <ClInclude Include="new_sds.h" />
     <ClInclude Include="NoGravityZone.h" />
     <ClInclude Include="object_actions.h" />
     <ClInclude Include="object_actions_inline.h" />
@@ -2953,6 +2956,7 @@
       <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
       <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
     </ClCompile>
+    <ClCompile Include="LevelDebugScript.cpp" />
     <ClCompile Include="Level_Bullet_Manager.cpp" />
     <ClCompile Include="Level_bullet_manager_firetrace.cpp" />
     <ClCompile Include="level_changer.cpp" />
@@ -3161,7 +3165,7 @@
     <ClCompile Include="player_account.cpp" />
     <ClCompile Include="player_hud.cpp" />
     <ClCompile Include="player_hud_script.cpp">
-	  <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
       <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
     </ClCompile>
     <ClCompile Include="player_hud_tune.cpp" />
@@ -4092,6 +4096,7 @@
       <PrecompiledHeaderOutputFile>$(IntDir)$(ProjectName)_script.pch</PrecompiledHeaderOutputFile>
     </ClCompile>
     <ClCompile Include="WeaponMagazinedWGrenade.cpp" />
+    <ClCompile Include="WeaponMagazineExtended.cpp" />
     <ClCompile Include="WeaponPistol.cpp" />
     <ClCompile Include="WeaponPM.cpp">
       <PrecompiledHeaderFile>pch_script.h</PrecompiledHeaderFile>
diff --git a/src/xrGame/xrGame.vcxproj.filters b/src/xrGame/xrGame.vcxproj.filters
index 9e58e02..413ed7a 100644
--- a/src/xrGame/xrGame.vcxproj.filters
+++ b/src/xrGame/xrGame.vcxproj.filters
@@ -7372,6 +7372,11 @@
     <ClInclude Include="script_wallmarks_manager.h">
       <Filter>Core\Client\Effects</Filter>
     </ClInclude>
+    <ClInclude Include="NewZoomFlag.h" />
+    <ClInclude Include="new_sds.h" />
+    <ClInclude Include="LevelDebugScript.h">
+      <Filter>Core\Client\Level</Filter>
+    </ClInclude>
   </ItemGroup>
   <ItemGroup>
     <ClCompile Include="damage_manager.cpp">
@@ -11037,9 +11042,15 @@
     <ClCompile Include="script_wallmarks_manager.cpp">
       <Filter>Core\Client\Effects</Filter>
     </ClCompile>
+    <ClCompile Include="WeaponMagazineExtended.cpp">
+      <Filter>Core\Client\Objects\items &amp; weapons\Weapons\Custom Weapon\Automatic</Filter>
+    </ClCompile>
     <ClCompile Include="player_hud_script.cpp">
       <Filter>Core\Client\Objects\items &amp; weapons\HudItem</Filter>
     </ClCompile>
+    <ClCompile Include="LevelDebugScript.cpp">
+      <Filter>Core\Client\Level</Filter>
+    </ClCompile>
   </ItemGroup>
   <ItemGroup>
     <CustomBuild Include="ai\monsters\chimera\chimera_attack_state.h">
diff --git a/src/xrNetServer/vs2022/xrNetServer.vcxproj b/src/xrNetServer/vs2022/xrNetServer.vcxproj
new file mode 100644
index 0000000..3a143a4
--- /dev/null
+++ b/src/xrNetServer/vs2022/xrNetServer.vcxproj
@@ -0,0 +1,234 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{435BAC9A-B225-457D-AB40-C9BD0CC8838C}</ProjectGuid>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <UseOfMfc>false</UseOfMfc>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(DXSDK_DIR)Include;$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>NDEBUG;WIN32;_WINDOWS;XR_NETSERVER_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>Ws2_32.lib;dxerr.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(DXSDK_DIR)Lib\x64;$(xrSdkDir)libraries;$(xrLibDir);$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>.;$(DXSDK_DIR)Include;$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;NDEBUG;WIN32;_WINDOWS;XR_NETSERVER_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>Ws2_32.lib;dxerr.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(DXSDK_DIR)Lib\x64;$(xrSdkDir)libraries;$(xrLibDir);$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>.;$(DXSDK_DIR)Include;$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>NDEBUG;WIN32;_WINDOWS;XR_NETSERVER_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalDependencies>Ws2_32.lib;dxerr.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(DXSDK_DIR)Lib\x64;$(xrSdkDir)libraries;$(xrLibDir);$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\ip_filter.cpp" />
+    <ClCompile Include="..\NET_AuthCheck.cpp" />
+    <ClCompile Include="..\NET_Client.cpp" />
+    <ClCompile Include="..\NET_Common.cpp" />
+    <ClCompile Include="..\NET_Compressor.cpp" />
+    <ClCompile Include="..\NET_Log.cpp" />
+    <ClCompile Include="..\NET_Server.cpp" />
+    <ClCompile Include="..\stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\ip_filter.h" />
+    <ClInclude Include="..\NET_AuthCheck.h" />
+    <ClInclude Include="..\NET_Client.h" />
+    <ClInclude Include="..\NET_Common.h" />
+    <ClInclude Include="..\NET_Compressor.h" />
+    <ClInclude Include="..\NET_Log.h" />
+    <ClInclude Include="..\NET_Messages.h" />
+    <ClInclude Include="..\NET_PlayersMonitor.h" />
+    <ClInclude Include="..\NET_Server.h" />
+    <ClInclude Include="..\NET_Shared.h" />
+    <ClInclude Include="..\stdafx.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)xrCore\vs2022\xrCore.vcxproj">
+      <Project>{a0f7d1fb-59a7-4717-a7e4-96f37e91998e}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="1" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/xrParticles/particle_actions_collection.cpp b/src/xrParticles/particle_actions_collection.cpp
index e023fa2..8d9fa45 100644
--- a/src/xrParticles/particle_actions_collection.cpp
+++ b/src/xrParticles/particle_actions_collection.cpp
@@ -1504,21 +1504,30 @@ void PASpeedLimit::Execute(ParticleEffect* effect, const float dt, float& tm_max
 void PASpeedLimit::Transform(const Fmatrix&) { ; }
 //-------------------------------------------------------------------------------------------------
 
+#define STEP_DEFAULT 0.033F
+
 // Change color of all particles toward the specified color
 void PATargetColor::Execute(ParticleEffect* effect, const float dt, float& tm_max)
-{
-	float scaleFac = scale * dt;
-	Fcolor c_p, c_t;
+{	
+
+	float COEFF = STEP_DEFAULT / dt;
+	float scaleFac = scale * STEP_DEFAULT;
+	Fcolor c_p, c_t, c_n;
 
 	for (u32 i = 0; i < effect->p_count; i++)
 	{
 		Particle& m = effect->particles[i];
 		if (m.age < timeFrom * tm_max || m.age > timeTo * tm_max) continue;
 
-		c_p.set(m.color);
-		c_t.set(c_p.r + (color.x - c_p.r) * scaleFac, c_p.g + (color.y - c_p.g) * scaleFac,
-		        c_p.b + (color.z - c_p.b) * scaleFac, c_p.a + (alpha - c_p.a) * scaleFac);
-		m.color = c_t.get();
+		c_p.set(m.colorR, m.colorG, m.colorB, m.colorA);
+		c_t.set(color.x, color.y, color.z, alpha);
+		c_n.lerp(c_p, c_t, scaleFac);
+		c_n.set(c_n.get());
+
+		m.colorR -= (m.colorR - c_n.r) / COEFF;
+		m.colorG -= (m.colorG - c_n.g) / COEFF;
+		m.colorB -= (m.colorB - c_n.b) / COEFF;
+		m.colorA -= (m.colorA - c_n.a) / COEFF;
 	}
 }
 
@@ -1736,6 +1745,8 @@ struct TES_PARAMS
 	float magnitude;
 };
 
+extern float ps_particle_update_coeff;
+
 
 void PATurbulenceExecuteStream(LPVOID lpvParams)
 {
@@ -1837,7 +1848,7 @@ void PATurbulence::Execute(ParticleEffect* effect, const float dt, float& tm_max
 	tesParams.epsilon = epsilon;
 	tesParams.frequency = frequency;
 	tesParams.octaves = octaves;
-	tesParams.magnitude = magnitude;
+	tesParams.magnitude = magnitude*ps_particle_update_coeff;
 	PATurbulenceExecuteStream(&tesParams);
 }
 
diff --git a/src/xrParticles/particle_effect.h b/src/xrParticles/particle_effect.h
index 79f4778..a2523b5 100644
--- a/src/xrParticles/particle_effect.h
+++ b/src/xrParticles/particle_effect.h
@@ -98,7 +98,11 @@ namespace PAPI
 				P.size = size;
 				P.rot.x = rot.x;
 				P.vel = vel;
-				P.color = color;
+				float f = float(1.0) / float(255.0);
+				P.colorA = f * ((color >> 24) & 0xff);
+				P.colorR = f * ((color >> 16) & 0xff);
+				P.colorG = f * ((color >> 8) & 0xff);
+				P.colorB = f * ((color >> 0) & 0xff);
 				P.age = age;
 				P.frame = frame;
 				P.flags.assign(flags);
diff --git a/src/xrParticles/psystem.h b/src/xrParticles/psystem.h
index b706abc..1fd92f8 100644
--- a/src/xrParticles/psystem.h
+++ b/src/xrParticles/psystem.h
@@ -123,11 +123,14 @@ namespace PAPI
 		pVector posB; // 12
 		pVector vel; // 12  	
 		pVector size; // 12
-		u32 color; // 4
+		float colorR; // 4
+		float colorG; // 4
+		float colorB; // 4
+		float colorA; // 4
 		float age; // 4       
 		u16 frame; // 2
 		Flags16 flags; // 2
-	}; // = 64
+	}; // = 76
 
 	typedef void (* OnBirthParticleCB)(void* owner, u32 param, PAPI::Particle& P, u32 idx);
 	typedef void (* OnDeadParticleCB)(void* owner, u32 param, PAPI::Particle& P, u32 idx);
diff --git a/src/xrParticles/vs2022/xrParticles.vcxproj b/src/xrParticles/vs2022/xrParticles.vcxproj
new file mode 100644
index 0000000..27f6f87
--- /dev/null
+++ b/src/xrParticles/vs2022/xrParticles.vcxproj
@@ -0,0 +1,230 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{94A1C366-3D19-48E6-8170-4ADC2E70DF97}</ProjectGuid>
+    <RootNamespace>xrParticles</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>NDEBUG;WIN32;_WINDOWS;XR_PARTICLES_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;NDEBUG;WIN32;_WINDOWS;XR_PARTICLES_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>NDEBUG;WIN32;_WINDOWS;XR_PARTICLES_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClInclude Include="..\noise.h" />
+    <ClInclude Include="..\particle_actions.h" />
+    <ClInclude Include="..\particle_actions_collection.h" />
+    <ClInclude Include="..\particle_core.h" />
+    <ClInclude Include="..\particle_effect.h" />
+    <ClInclude Include="..\particle_manager.h" />
+    <ClInclude Include="..\psystem.h" />
+    <ClInclude Include="..\stdafx.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\noise.cpp" />
+    <ClCompile Include="..\particle_actions.cpp" />
+    <ClCompile Include="..\particle_actions_collection.cpp" />
+    <ClCompile Include="..\particle_actions_collection_io.cpp" />
+    <ClCompile Include="..\particle_core.cpp" />
+    <ClCompile Include="..\particle_effect.cpp" />
+    <ClCompile Include="..\particle_manager.cpp" />
+    <ClCompile Include="..\stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)xrCore\vs2022\xrCore.vcxproj">
+      <Project>{a0f7d1fb-59a7-4717-a7e4-96f37e91998e}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCPU_Pipe\vs2022\xrCPU_Pipe.vcxproj">
+      <Project>{ca0649dd-d089-423a-981c-46b57a884eb9}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="1" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/xrParticles/vs2022/xrParticles.vcxproj.filters b/src/xrParticles/vs2022/xrParticles.vcxproj.filters
new file mode 100644
index 0000000..e023840
--- /dev/null
+++ b/src/xrParticles/vs2022/xrParticles.vcxproj.filters
@@ -0,0 +1,63 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Kernel">
+      <UniqueIdentifier>{1be99a29-65a6-463c-a712-a70905646cad}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="PAPI">
+      <UniqueIdentifier>{d7e57b42-cf91-4e84-8c34-45e6d4a43f3d}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="psystem.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="stdafx.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="noise.h">
+      <Filter>PAPI</Filter>
+    </ClInclude>
+    <ClInclude Include="particle_actions.h">
+      <Filter>PAPI</Filter>
+    </ClInclude>
+    <ClInclude Include="particle_actions_collection.h">
+      <Filter>PAPI</Filter>
+    </ClInclude>
+    <ClInclude Include="particle_core.h">
+      <Filter>PAPI</Filter>
+    </ClInclude>
+    <ClInclude Include="particle_effect.h">
+      <Filter>PAPI</Filter>
+    </ClInclude>
+    <ClInclude Include="particle_manager.h">
+      <Filter>PAPI</Filter>
+    </ClInclude>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="stdafx.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="noise.cpp">
+      <Filter>PAPI</Filter>
+    </ClCompile>
+    <ClCompile Include="particle_actions.cpp">
+      <Filter>PAPI</Filter>
+    </ClCompile>
+    <ClCompile Include="particle_actions_collection.cpp">
+      <Filter>PAPI</Filter>
+    </ClCompile>
+    <ClCompile Include="particle_actions_collection_io.cpp">
+      <Filter>PAPI</Filter>
+    </ClCompile>
+    <ClCompile Include="particle_core.cpp">
+      <Filter>PAPI</Filter>
+    </ClCompile>
+    <ClCompile Include="particle_effect.cpp">
+      <Filter>PAPI</Filter>
+    </ClCompile>
+    <ClCompile Include="particle_manager.cpp">
+      <Filter>PAPI</Filter>
+    </ClCompile>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/xrPhysics/ElevatorState.h b/src/xrPhysics/ElevatorState.h
index 69e3e6c..9d43629 100644
--- a/src/xrPhysics/ElevatorState.h
+++ b/src/xrPhysics/ElevatorState.h
@@ -21,7 +21,7 @@ private:
 		u32 time;
 	};
 
-	static SEnertionState m_etable[CElevatorState::clbNoState][CElevatorState::clbNoState];
+	static SEnertionState m_etable[Estate::clbNoState][Estate::clbNoState];
 
 	IClimableObject* m_ladder;
 	CPHCharacter* m_character;
diff --git a/src/xrPhysics/PHElement.cpp b/src/xrPhysics/PHElement.cpp
index c825a06..faec405 100644
--- a/src/xrPhysics/PHElement.cpp
+++ b/src/xrPhysics/PHElement.cpp
@@ -1650,6 +1650,25 @@ void CPHElement::GetPointVel(Fvector& res_vel, const Fvector& point) const
 	CopyMemory(&res_vel, res, sizeof(Fvector));
 }
 
+void CPHElement::ActivatingPos(const Fmatrix& BoneTransform)
+{
+	ToBonePos(BoneTransform, mh_unspecified);
+	m_flags.set(flActivating, FALSE);
+	if (!m_parent_element)
+		m_shell->SetObjVsShellTransform(BoneTransform);
+
+	//{
+	//	m_shell->m_object_in_root.set( B->mTransform );
+	//	m_shell->m_object_in_root.invert( );
+	//	m_shell->SetNotActivating( );
+	//}
+	//VERIFY2(fsimilar(DET(B->mTransform),1.f,DET_CHECK_EPS),"Bones callback returns 0 matrix");
+
+	VERIFY_RMATRIX(BoneTransform);
+	VERIFY(valid_pos(BoneTransform.c, phBoundaries));
+	return;
+}
+
 #ifdef DEBUG
 
 void CPHElement::dbg_draw_velocity	( float scale, u32 color )
diff --git a/src/xrPhysics/PHElement.h b/src/xrPhysics/PHElement.h
index e6bc795..b9d7198 100644
--- a/src/xrPhysics/PHElement.h
+++ b/src/xrPhysics/PHElement.h
@@ -166,7 +166,7 @@ public: //
 	void BoneGlPos(Fmatrix& m, const Fmatrix& BoneTransform) const;
 	void ToBonePos(const CBoneInstance* B, motion_history_state history_state);
 	void ToBonePos(const Fmatrix& BoneTransform, motion_history_state history_state);
-	IC void ActivatingPos(const Fmatrix& BoneTransform);
+	void ActivatingPos(const Fmatrix& BoneTransform);
 	IC void CalculateBoneTransform(Fmatrix& bone_transform) const;
 
 #ifdef		DEBUG
diff --git a/src/xrPhysics/PHElementInline.h b/src/xrPhysics/PHElementInline.h
index 8ae96db..12d56e2 100644
--- a/src/xrPhysics/PHElementInline.h
+++ b/src/xrPhysics/PHElementInline.h
@@ -21,22 +21,3 @@ IC void CPHElement::CalculateBoneTransform(Fmatrix& bone_transform) const
 	parent.invert(m_shell->mXFORM);
 	bone_transform.mul_43(parent, mXFORM);
 }
-
-IC void CPHElement::ActivatingPos(const Fmatrix& BoneTransform)
-{
-	ToBonePos(BoneTransform, mh_unspecified);
-	m_flags.set(flActivating, FALSE);
-	if (!m_parent_element)
-		m_shell->SetObjVsShellTransform(BoneTransform);
-
-	//{
-	//	m_shell->m_object_in_root.set( B->mTransform );
-	//	m_shell->m_object_in_root.invert( );
-	//	m_shell->SetNotActivating( );
-	//}
-	//VERIFY2(fsimilar(DET(B->mTransform),1.f,DET_CHECK_EPS),"Bones callback returns 0 matrix");
-
-	VERIFY_RMATRIX(BoneTransform);
-	VERIFY(valid_pos( BoneTransform.c, phBoundaries ));
-	return;
-}
diff --git a/src/xrPhysics/vs2022/xrPhysics.vcxproj b/src/xrPhysics/vs2022/xrPhysics.vcxproj
new file mode 100644
index 0000000..3ba8c8c
--- /dev/null
+++ b/src/xrPhysics/vs2022/xrPhysics.vcxproj
@@ -0,0 +1,350 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{98D24A3D-7666-4C11-9D6E-B10393CE8CBA}</ProjectGuid>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;dSINGLE;_USRDLL;XRPHYSICS_EXPORTS;MSVC;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_WINDOWS;dSINGLE;_USRDLL;XRPHYSICS_EXPORTS;MSVC;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;dSINGLE;_USRDLL;XRPHYSICS_EXPORTS;MSVC;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\..\xrServerEntities\PHNetState.cpp" />
+    <ClCompile Include="..\ActorCameraCollision.cpp" />
+    <ClCompile Include="..\collisiondamagereceiver.cpp" />
+    <ClCompile Include="..\console_vars.cpp" />
+    <ClCompile Include="..\dcylinder\dCylinder.cpp" />
+    <ClCompile Include="..\debug_output.cpp" />
+    <ClCompile Include="..\DisablingParams.cpp" />
+    <ClCompile Include="..\dRayMotions.cpp" />
+    <ClCompile Include="..\ElevatorState.cpp" />
+    <ClCompile Include="..\ExtendedGeom.cpp" />
+    <ClCompile Include="..\Geometry.cpp" />
+    <ClCompile Include="..\GeometryBits.cpp" />
+    <ClCompile Include="..\IActivationShape.cpp" />
+    <ClCompile Include="..\MathUtils.cpp" />
+    <ClCompile Include="..\MovementBoxDynamicActivate.cpp" />
+    <ClCompile Include="..\params.cpp" />
+    <ClCompile Include="..\PHActivationShape.cpp" />
+    <ClCompile Include="..\PHActorCharacter.cpp" />
+    <ClCompile Include="..\PHAICharacter.cpp" />
+    <ClCompile Include="..\PHCapture.cpp" />
+    <ClCompile Include="..\PHCaptureInit.cpp" />
+    <ClCompile Include="..\PHCharacter.cpp" />
+    <ClCompile Include="..\PHCollideValidator.cpp" />
+    <ClCompile Include="..\PHContactBodyEffector.cpp" />
+    <ClCompile Include="..\PHDisabling.cpp" />
+    <ClCompile Include="..\PHDynamicData.cpp" />
+    <ClCompile Include="..\PHElement.cpp" />
+    <ClCompile Include="..\PHElementNetState.cpp" />
+    <ClCompile Include="..\PHFracture.cpp" />
+    <ClCompile Include="..\PHGeometryOwner.cpp" />
+    <ClCompile Include="..\PHInterpolation.cpp" />
+    <ClCompile Include="..\PHIsland.cpp" />
+    <ClCompile Include="..\PHJoint.cpp" />
+    <ClCompile Include="..\PHJointDestroyInfo.cpp" />
+    <ClCompile Include="..\PHMoveStorage.cpp" />
+    <ClCompile Include="..\PHObject.cpp" />
+    <ClCompile Include="..\PHShell.cpp" />
+    <ClCompile Include="..\PHShellActivate.cpp" />
+    <ClCompile Include="..\PHShellNetState.cpp" />
+    <ClCompile Include="..\PHShellSplitter.cpp" />
+    <ClCompile Include="..\PHSimpleCharacter.cpp" />
+    <ClCompile Include="..\PHSplitedShell.cpp" />
+    <ClCompile Include="..\PHStaticGeomShell.cpp" />
+    <ClCompile Include="..\phvalide.cpp" />
+    <ClCompile Include="..\PHWorld.cpp" />
+    <ClCompile Include="..\Physics.cpp" />
+    <ClCompile Include="..\PhysicsExternalCommon.cpp" />
+    <ClCompile Include="..\PhysicsShell.cpp" />
+    <ClCompile Include="..\PhysicsShellAnimator.cpp" />
+    <ClCompile Include="..\physics_scripted.cpp" />
+    <ClCompile Include="..\ShellHit.cpp" />
+    <ClCompile Include="..\stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\tri-colliderknoopc\dcTriListCollider.cpp">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="..\tri-colliderknoopc\dSortTriPrimitive.cpp" />
+    <ClCompile Include="..\tri-colliderknoopc\dTriBox.cpp" />
+    <ClCompile Include="..\tri-colliderknoopc\dTriCallideK.cpp" />
+    <ClCompile Include="..\tri-colliderknoopc\dTriCylinder.cpp" />
+    <ClCompile Include="..\tri-colliderknoopc\dTriList.cpp" />
+    <ClCompile Include="..\tri-colliderknoopc\dTriSphere.cpp" />
+    <ClCompile Include="..\xrPhysics.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\..\xrServerEntities\PHNetState.h" />
+    <ClInclude Include="..\ActorCameraCollision.h" />
+    <ClInclude Include="..\BlockAllocator.h" />
+    <ClInclude Include="..\CalculateTriangle.h" />
+    <ClInclude Include="..\console_vars.h" />
+    <ClInclude Include="..\CycleConstStorage.h" />
+    <ClInclude Include="..\DamageSource.h" />
+    <ClInclude Include="..\dcylinder\dCylinder.h" />
+    <ClInclude Include="..\debug_output.h" />
+    <ClInclude Include="..\DisablingParams.h" />
+    <ClInclude Include="..\dRayMotions.h" />
+    <ClInclude Include="..\ElevatorState.h" />
+    <ClInclude Include="..\ExtendedGeom.h" />
+    <ClInclude Include="..\Geometry.h" />
+    <ClInclude Include="..\GeometryBits.h" />
+    <ClInclude Include="..\IActivationShape.h" />
+    <ClInclude Include="..\iclimableobject.h" />
+    <ClInclude Include="..\IColisiondamageInfo.h" />
+    <ClInclude Include="..\ICollideValidator.h" />
+    <ClInclude Include="..\icollisiondamagereceiver.h" />
+    <ClInclude Include="..\IElevatorState.h" />
+    <ClInclude Include="..\IPHCapture.h" />
+    <ClInclude Include="..\IPHStaticGeomShell.h" />
+    <ClInclude Include="..\IPHWorld.h" />
+    <ClInclude Include="..\IPhysicsShellHolder.h" />
+    <ClInclude Include="..\iphysics_scripted.h" />
+    <ClInclude Include="..\MathUtils.h" />
+    <ClInclude Include="..\MathUtilsOde.h" />
+    <ClInclude Include="..\matrix_utils.h" />
+    <ClInclude Include="..\MovementBoxDynamicActivate.h" />
+    <ClInclude Include="..\ode_include.h" />
+    <ClInclude Include="..\ode_redefine.h" />
+    <ClInclude Include="..\params.h" />
+    <ClInclude Include="..\PHActivationShape.h" />
+    <ClInclude Include="..\PHActorCharacter.h" />
+    <ClInclude Include="..\PHActorCharacterInline.h" />
+    <ClInclude Include="..\PHAICharacter.h" />
+    <ClInclude Include="..\PHBaseBodyEffector.h" />
+    <ClInclude Include="..\PHCapture.h" />
+    <ClInclude Include="..\PHCharacter.h" />
+    <ClInclude Include="..\PHCollideValidator.h" />
+    <ClInclude Include="..\PHContactBodyEffector.h" />
+    <ClInclude Include="..\PHDefs.h" />
+    <ClInclude Include="..\PHDisabling.h" />
+    <ClInclude Include="..\PHDynamicData.h" />
+    <ClInclude Include="..\PHElement.h" />
+    <ClInclude Include="..\PHElementInline.h" />
+    <ClInclude Include="..\PHFracture.h" />
+    <ClInclude Include="..\PHGeometryOwner.h" />
+    <ClInclude Include="..\PHImpact.h" />
+    <ClInclude Include="..\PHInterpolation.h" />
+    <ClInclude Include="..\PHIsland.h" />
+    <ClInclude Include="..\PHItemList.h" />
+    <ClInclude Include="..\PHJoint.h" />
+    <ClInclude Include="..\PHJointDestroyInfo.h" />
+    <ClInclude Include="..\PHMoveStorage.h" />
+    <ClInclude Include="..\PHObject.h" />
+    <ClInclude Include="..\PHShell.h" />
+    <ClInclude Include="..\PHShellBuildJoint.h" />
+    <ClInclude Include="..\PHShellSplitter.h" />
+    <ClInclude Include="..\PHSimpleCharacter.h" />
+    <ClInclude Include="..\PHSimpleCharacterInline.h" />
+    <ClInclude Include="..\PHSplitedShell.h" />
+    <ClInclude Include="..\PHStaticGeomShell.h" />
+    <ClInclude Include="..\PHUpdateObject.h" />
+    <ClInclude Include="..\phvalide.h" />
+    <ClInclude Include="..\PHValideValues.h" />
+    <ClInclude Include="..\PHWorld.h" />
+    <ClInclude Include="..\Physics.h" />
+    <ClInclude Include="..\PhysicsCommon.h" />
+    <ClInclude Include="..\PhysicsExternalCommon.h" />
+    <ClInclude Include="..\PhysicsShell.h" />
+    <ClInclude Include="..\PhysicsShellAnimator.h" />
+    <ClInclude Include="..\PhysicsShellAnimatorBoneData.h" />
+    <ClInclude Include="..\physics_scripted.h" />
+    <ClInclude Include="..\ph_valid_ode.h" />
+    <ClInclude Include="..\SpaceUtils.h" />
+    <ClInclude Include="..\stdafx.h" />
+    <ClInclude Include="..\tri-colliderknoopc\dcTriangle.h" />
+    <ClInclude Include="..\tri-colliderknoopc\dcTriListCollider.h" />
+    <ClInclude Include="..\tri-colliderknoopc\dSortTriPrimitive.h" />
+    <ClInclude Include="..\tri-colliderknoopc\dTriBox.h" />
+    <ClInclude Include="..\tri-colliderknoopc\dTriCollideK.h" />
+    <ClInclude Include="..\tri-colliderknoopc\dTriColliderCommon.h" />
+    <ClInclude Include="..\tri-colliderknoopc\dTriColliderMath.h" />
+    <ClInclude Include="..\tri-colliderknoopc\dTriCylinder.h" />
+    <ClInclude Include="..\tri-colliderknoopc\dTriList.h" />
+    <ClInclude Include="..\tri-colliderknoopc\dTriSphere.h" />
+    <ClInclude Include="..\tri-colliderknoopc\dxTriList.h" />
+    <ClInclude Include="..\tri-colliderknoopc\TriPrimitiveCollideClassDef.h" />
+    <ClInclude Include="..\tri-colliderknoopc\__aabb_tri.h" />
+    <ClInclude Include="..\xrPhysics.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)3rd party\ode\contrib\msvc7\ode_default\vs2022\default.vcxproj">
+      <Project>{1bf75feb-87dd-486c-880b-227987d191c2}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)Layers\xrAPI\vs2022\xrAPI.vcxproj">
+      <Project>{1daec516-e52c-4a3c-a4da-ae3553e6e0f8}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCDB\vs2022\xrCDB.vcxproj">
+      <Project>{a19b1df2-82ec-4364-8bdf-85d13a1c89b5}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrSound\vs2022\xrSound.vcxproj">
+      <Project>{ccca7859-eb86-493e-9b53-c4235f45b3c5}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="1" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/xrPhysics/vs2022/xrPhysics.vcxproj.filters b/src/xrPhysics/vs2022/xrPhysics.vcxproj.filters
new file mode 100644
index 0000000..d3ddcb9
--- /dev/null
+++ b/src/xrPhysics/vs2022/xrPhysics.vcxproj.filters
@@ -0,0 +1,600 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="kernel">
+      <UniqueIdentifier>{f686a136-8672-4774-a1cb-9ecc35d8409b}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="interface">
+      <UniqueIdentifier>{cc6dfa38-0f70-45ee-b084-0fe332124534}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="interface\shell">
+      <UniqueIdentifier>{9e1878b9-0f3b-43c2-84dd-afec325ba509}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="interface\character_movement">
+      <UniqueIdentifier>{fd150d88-291e-40a1-8cc9-948f55bd3d6f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="interface\world">
+      <UniqueIdentifier>{d2bf81c2-91bc-4262-9e35-13d635870ee4}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics">
+      <UniqueIdentifier>{c4a94b24-3c2e-4dad-8f0d-38d46b9b9f9f}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\colliders">
+      <UniqueIdentifier>{bc077417-89f4-48c5-8f62-1d100d8d8c69}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\colliders\tri">
+      <UniqueIdentifier>{017c9aa8-ef96-4b95-9707-a3975ca9592d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\colliders\cyl">
+      <UniqueIdentifier>{a160737a-b7c9-4d9e-9c5e-c4435da3dff7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\colliders\RayMotions">
+      <UniqueIdentifier>{eab11b7b-509e-4f4a-afae-d8ddb40d003c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\ActivationBox">
+      <UniqueIdentifier>{88857cf9-d016-437f-900c-913ecb597ed8}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base">
+      <UniqueIdentifier>{b7f8c36e-01d0-42be-bd44-ab87e22e7dc2}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects">
+      <UniqueIdentifier>{f027864c-5963-4add-8b2e-be37470b4a7e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\Utils">
+      <UniqueIdentifier>{8a61b351-32b6-4319-85f6-a3692c6610bc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\Utils\Interpolation">
+      <UniqueIdentifier>{47f95906-9106-4b93-ab0f-da9455ede31d}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\Utils\Storage">
+      <UniqueIdentifier>{ef794564-5e0a-417c-8c91-946513d0529c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\Utils\Math">
+      <UniqueIdentifier>{665f7153-717c-47e6-8b66-79ea8957109a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\BodyEffectors">
+      <UniqueIdentifier>{8fe36662-664e-4530-a4f0-03f99cdcab6e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\PHNet">
+      <UniqueIdentifier>{aa66b56a-4fa5-4645-b4ae-c763ed6271ab}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\MoveStorage">
+      <UniqueIdentifier>{203e8fee-fc5a-43a4-b695-cf55b4d78677}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\Disabling">
+      <UniqueIdentifier>{d2061e32-c0ce-4579-bb55-69630c1877de}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\PhyMove">
+      <UniqueIdentifier>{aa114d4e-b562-47e6-a125-42b2da3790bc}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\PhyMove\ActorCaracter">
+      <UniqueIdentifier>{d548803f-10d8-4fcb-8949-d1a44e9ed4e3}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\PhyMove\AICharacter">
+      <UniqueIdentifier>{4f526cc3-a1a8-43ee-af1d-9b7de4e21291}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\PhyMove\Capture">
+      <UniqueIdentifier>{d638c96a-099b-48bd-b04d-3c919c0f3c82}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\PhyMove\SipmpleCharacter">
+      <UniqueIdentifier>{86f00952-2a4d-4da6-90f3-4e9c93df8ba1}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\PhyMove\BaseCharacter">
+      <UniqueIdentifier>{308caa57-4665-4bcc-b594-1d164a8f618e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\BaseShell">
+      <UniqueIdentifier>{4b1bd835-6c40-4e87-a035-b45d037243ba}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\BaseShell\PhysicsShellAnimator">
+      <UniqueIdentifier>{d9290469-c4df-461e-9600-bd1ea9f9ee48}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\Element">
+      <UniqueIdentifier>{b958ab1b-831e-4784-87bc-2676b6a1dd2c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\Element\Geom">
+      <UniqueIdentifier>{a2826f60-e358-48a4-9e60-0dfc18cad066}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\Joint">
+      <UniqueIdentifier>{26606e9c-cc8e-49a9-8391-662b37c7c5ac}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\Shell">
+      <UniqueIdentifier>{467b5429-d4d5-4560-a68f-5ddb1a0b6b27}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\Breakable">
+      <UniqueIdentifier>{d415f2d0-a433-4da1-a99e-b0a5831aaf4c}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\SplitedShell">
+      <UniqueIdentifier>{6d26723a-100d-410f-9552-71e751572a20}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\PHObject">
+      <UniqueIdentifier>{fba41762-ad94-44f4-86bc-d6d036afbe32}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\PHIsland">
+      <UniqueIdentifier>{783608c2-b80b-4df3-87ab-2fe2a32328ff}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\World">
+      <UniqueIdentifier>{58d40374-caf8-4415-85c6-f6b756fdd7ac}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\CollideValidator">
+      <UniqueIdentifier>{0fadfe2b-1ac9-4f67-97f3-87f2cf98b428}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\StaticShell">
+      <UniqueIdentifier>{5711bf0c-b30d-47a5-aef3-9366c2330984}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Objects\script">
+      <UniqueIdentifier>{3a301380-824e-4e8b-a766-0fc216e31552}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Impact">
+      <UniqueIdentifier>{fe321485-7dc2-4ac0-a2b8-96c420de4247}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\Base\Debug">
+      <UniqueIdentifier>{47294d2a-d174-415d-8ae4-f39d646bbe86}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\camera_collision">
+      <UniqueIdentifier>{d606ce43-6822-4a48-9d89-3caf129f7c67}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="physics\damage_receiver">
+      <UniqueIdentifier>{633b90c0-0e90-4a1d-b5da-22e81159c94d}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="stdafx.cpp">
+      <Filter>kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="xrPhysics.cpp">
+      <Filter>kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="console_vars.cpp">
+      <Filter>physics</Filter>
+    </ClCompile>
+    <ClCompile Include="ShellHit.cpp">
+      <Filter>physics</Filter>
+    </ClCompile>
+    <ClCompile Include="tri-colliderknoopc\dcTriListCollider.cpp">
+      <Filter>physics\colliders\tri</Filter>
+    </ClCompile>
+    <ClCompile Include="tri-colliderknoopc\dSortTriPrimitive.cpp">
+      <Filter>physics\colliders\tri</Filter>
+    </ClCompile>
+    <ClCompile Include="tri-colliderknoopc\dTriBox.cpp">
+      <Filter>physics\colliders\tri</Filter>
+    </ClCompile>
+    <ClCompile Include="tri-colliderknoopc\dTriCallideK.cpp">
+      <Filter>physics\colliders\tri</Filter>
+    </ClCompile>
+    <ClCompile Include="tri-colliderknoopc\dTriCylinder.cpp">
+      <Filter>physics\colliders\tri</Filter>
+    </ClCompile>
+    <ClCompile Include="tri-colliderknoopc\dTriList.cpp">
+      <Filter>physics\colliders\tri</Filter>
+    </ClCompile>
+    <ClCompile Include="tri-colliderknoopc\dTriSphere.cpp">
+      <Filter>physics\colliders\tri</Filter>
+    </ClCompile>
+    <ClCompile Include="dcylinder\dCylinder.cpp">
+      <Filter>physics\colliders\cyl</Filter>
+    </ClCompile>
+    <ClCompile Include="dRayMotions.cpp">
+      <Filter>physics\colliders\RayMotions</Filter>
+    </ClCompile>
+    <ClCompile Include="IActivationShape.cpp">
+      <Filter>physics\ActivationBox</Filter>
+    </ClCompile>
+    <ClCompile Include="PHActivationShape.cpp">
+      <Filter>physics\ActivationBox</Filter>
+    </ClCompile>
+    <ClCompile Include="PhysicsExternalCommon.cpp">
+      <Filter>physics\Base</Filter>
+    </ClCompile>
+    <ClCompile Include="phvalide.cpp">
+      <Filter>physics\Base\Objects\Utils</Filter>
+    </ClCompile>
+    <ClCompile Include="PHInterpolation.cpp">
+      <Filter>physics\Base\Objects\Utils\Interpolation</Filter>
+    </ClCompile>
+    <ClCompile Include="MathUtils.cpp">
+      <Filter>physics\Base\Objects\Utils\Math</Filter>
+    </ClCompile>
+    <ClCompile Include="PHDynamicData.cpp">
+      <Filter>physics\Base\Objects\Utils\Math</Filter>
+    </ClCompile>
+    <ClCompile Include="PHContactBodyEffector.cpp">
+      <Filter>physics\Base\Objects\BodyEffectors</Filter>
+    </ClCompile>
+    <ClCompile Include="..\xrServerEntities\PHNetState.cpp">
+      <Filter>physics\Base\Objects\PHNet</Filter>
+    </ClCompile>
+    <ClCompile Include="PHMoveStorage.cpp">
+      <Filter>physics\Base\Objects\MoveStorage</Filter>
+    </ClCompile>
+    <ClCompile Include="DisablingParams.cpp">
+      <Filter>physics\Base\Objects\Disabling</Filter>
+    </ClCompile>
+    <ClCompile Include="PHDisabling.cpp">
+      <Filter>physics\Base\Objects\Disabling</Filter>
+    </ClCompile>
+    <ClCompile Include="PHActorCharacter.cpp">
+      <Filter>physics\Base\Objects\PhyMove\ActorCaracter</Filter>
+    </ClCompile>
+    <ClCompile Include="PHAICharacter.cpp">
+      <Filter>physics\Base\Objects\PhyMove\AICharacter</Filter>
+    </ClCompile>
+    <ClCompile Include="PHCapture.cpp">
+      <Filter>physics\Base\Objects\PhyMove\Capture</Filter>
+    </ClCompile>
+    <ClCompile Include="PHCaptureInit.cpp">
+      <Filter>physics\Base\Objects\PhyMove\Capture</Filter>
+    </ClCompile>
+    <ClCompile Include="ElevatorState.cpp">
+      <Filter>physics\Base\Objects\PhyMove\SipmpleCharacter</Filter>
+    </ClCompile>
+    <ClCompile Include="PHSimpleCharacter.cpp">
+      <Filter>physics\Base\Objects\PhyMove\SipmpleCharacter</Filter>
+    </ClCompile>
+    <ClCompile Include="MovementBoxDynamicActivate.cpp">
+      <Filter>physics\Base\Objects\PhyMove\BaseCharacter</Filter>
+    </ClCompile>
+    <ClCompile Include="PHCharacter.cpp">
+      <Filter>physics\Base\Objects\PhyMove\BaseCharacter</Filter>
+    </ClCompile>
+    <ClCompile Include="PhysicsShell.cpp">
+      <Filter>physics\Base\Objects\BaseShell</Filter>
+    </ClCompile>
+    <ClCompile Include="PhysicsShellAnimator.cpp">
+      <Filter>physics\Base\Objects\BaseShell\PhysicsShellAnimator</Filter>
+    </ClCompile>
+    <ClCompile Include="PHElement.cpp">
+      <Filter>physics\Base\Objects\Element</Filter>
+    </ClCompile>
+    <ClCompile Include="PHElementNetState.cpp">
+      <Filter>physics\Base\Objects\Element</Filter>
+    </ClCompile>
+    <ClCompile Include="ExtendedGeom.cpp">
+      <Filter>physics\Base\Objects\Element\Geom</Filter>
+    </ClCompile>
+    <ClCompile Include="Geometry.cpp">
+      <Filter>physics\Base\Objects\Element\Geom</Filter>
+    </ClCompile>
+    <ClCompile Include="PHGeometryOwner.cpp">
+      <Filter>physics\Base\Objects\Element\Geom</Filter>
+    </ClCompile>
+    <ClCompile Include="PHJoint.cpp">
+      <Filter>physics\Base\Objects\Joint</Filter>
+    </ClCompile>
+    <ClCompile Include="PHShell.cpp">
+      <Filter>physics\Base\Objects\Shell</Filter>
+    </ClCompile>
+    <ClCompile Include="PHShellActivate.cpp">
+      <Filter>physics\Base\Objects\Shell</Filter>
+    </ClCompile>
+    <ClCompile Include="PHShellNetState.cpp">
+      <Filter>physics\Base\Objects\Shell</Filter>
+    </ClCompile>
+    <ClCompile Include="PHFracture.cpp">
+      <Filter>physics\Base\Objects\Breakable</Filter>
+    </ClCompile>
+    <ClCompile Include="PHJointDestroyInfo.cpp">
+      <Filter>physics\Base\Objects\Breakable</Filter>
+    </ClCompile>
+    <ClCompile Include="PHShellSplitter.cpp">
+      <Filter>physics\Base\Objects\Breakable</Filter>
+    </ClCompile>
+    <ClCompile Include="PHSplitedShell.cpp">
+      <Filter>physics\Base\Objects\SplitedShell</Filter>
+    </ClCompile>
+    <ClCompile Include="PHObject.cpp">
+      <Filter>physics\Base\Objects\PHObject</Filter>
+    </ClCompile>
+    <ClCompile Include="PHIsland.cpp">
+      <Filter>physics\Base\Objects\PHIsland</Filter>
+    </ClCompile>
+    <ClCompile Include="GeometryBits.cpp">
+      <Filter>physics\Base\Objects\World</Filter>
+    </ClCompile>
+    <ClCompile Include="params.cpp">
+      <Filter>physics\Base\Objects\World</Filter>
+    </ClCompile>
+    <ClCompile Include="PHWorld.cpp">
+      <Filter>physics\Base\Objects\World</Filter>
+    </ClCompile>
+    <ClCompile Include="Physics.cpp">
+      <Filter>physics\Base\Objects\World</Filter>
+    </ClCompile>
+    <ClCompile Include="PHCollideValidator.cpp">
+      <Filter>physics\Base\Objects\CollideValidator</Filter>
+    </ClCompile>
+    <ClCompile Include="PHStaticGeomShell.cpp">
+      <Filter>physics\Base\Objects\StaticShell</Filter>
+    </ClCompile>
+    <ClCompile Include="physics_scripted.cpp">
+      <Filter>physics\Base\Objects\script</Filter>
+    </ClCompile>
+    <ClCompile Include="debug_output.cpp">
+      <Filter>physics\Base\Debug</Filter>
+    </ClCompile>
+    <ClCompile Include="ActorCameraCollision.cpp">
+      <Filter>physics\camera_collision</Filter>
+    </ClCompile>
+    <ClCompile Include="collisiondamagereceiver.cpp">
+      <Filter>physics\damage_receiver</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="stdafx.h">
+      <Filter>kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="xrPhysics.h">
+      <Filter>kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="console_vars.h">
+      <Filter>physics</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\__aabb_tri.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\dcTriangle.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\dcTriListCollider.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\dSortTriPrimitive.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\dTriBox.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\dTriCollideK.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\dTriColliderCommon.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\dTriColliderMath.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\dTriCylinder.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\dTriList.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\dTriSphere.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\dxTriList.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="tri-colliderknoopc\TriPrimitiveCollideClassDef.h">
+      <Filter>physics\colliders\tri</Filter>
+    </ClInclude>
+    <ClInclude Include="dcylinder\dCylinder.h">
+      <Filter>physics\colliders\cyl</Filter>
+    </ClInclude>
+    <ClInclude Include="dRayMotions.h">
+      <Filter>physics\colliders\RayMotions</Filter>
+    </ClInclude>
+    <ClInclude Include="IActivationShape.h">
+      <Filter>physics\ActivationBox</Filter>
+    </ClInclude>
+    <ClInclude Include="PHActivationShape.h">
+      <Filter>physics\ActivationBox</Filter>
+    </ClInclude>
+    <ClInclude Include="DamageSource.h">
+      <Filter>physics\Base</Filter>
+    </ClInclude>
+    <ClInclude Include="ode_include.h">
+      <Filter>physics\Base</Filter>
+    </ClInclude>
+    <ClInclude Include="ode_redefine.h">
+      <Filter>physics\Base</Filter>
+    </ClInclude>
+    <ClInclude Include="PhysicsCommon.h">
+      <Filter>physics\Base</Filter>
+    </ClInclude>
+    <ClInclude Include="PhysicsExternalCommon.h">
+      <Filter>physics\Base</Filter>
+    </ClInclude>
+    <ClInclude Include="PHDefs.h">
+      <Filter>physics\Base\Objects</Filter>
+    </ClInclude>
+    <ClInclude Include="ph_valid_ode.h">
+      <Filter>physics\Base\Objects\Utils</Filter>
+    </ClInclude>
+    <ClInclude Include="phvalide.h">
+      <Filter>physics\Base\Objects\Utils</Filter>
+    </ClInclude>
+    <ClInclude Include="PHValideValues.h">
+      <Filter>physics\Base\Objects\Utils</Filter>
+    </ClInclude>
+    <ClInclude Include="PHInterpolation.h">
+      <Filter>physics\Base\Objects\Utils\Interpolation</Filter>
+    </ClInclude>
+    <ClInclude Include="BlockAllocator.h">
+      <Filter>physics\Base\Objects\Utils\Storage</Filter>
+    </ClInclude>
+    <ClInclude Include="CycleConstStorage.h">
+      <Filter>physics\Base\Objects\Utils\Storage</Filter>
+    </ClInclude>
+    <ClInclude Include="CalculateTriangle.h">
+      <Filter>physics\Base\Objects\Utils\Math</Filter>
+    </ClInclude>
+    <ClInclude Include="MathUtils.h">
+      <Filter>physics\Base\Objects\Utils\Math</Filter>
+    </ClInclude>
+    <ClInclude Include="MathUtilsOde.h">
+      <Filter>physics\Base\Objects\Utils\Math</Filter>
+    </ClInclude>
+    <ClInclude Include="matrix_utils.h">
+      <Filter>physics\Base\Objects\Utils\Math</Filter>
+    </ClInclude>
+    <ClInclude Include="PHDynamicData.h">
+      <Filter>physics\Base\Objects\Utils\Math</Filter>
+    </ClInclude>
+    <ClInclude Include="PHBaseBodyEffector.h">
+      <Filter>physics\Base\Objects\BodyEffectors</Filter>
+    </ClInclude>
+    <ClInclude Include="PHContactBodyEffector.h">
+      <Filter>physics\Base\Objects\BodyEffectors</Filter>
+    </ClInclude>
+    <ClInclude Include="..\xrServerEntities\PHNetState.h">
+      <Filter>physics\Base\Objects\PHNet</Filter>
+    </ClInclude>
+    <ClInclude Include="PHMoveStorage.h">
+      <Filter>physics\Base\Objects\MoveStorage</Filter>
+    </ClInclude>
+    <ClInclude Include="DisablingParams.h">
+      <Filter>physics\Base\Objects\Disabling</Filter>
+    </ClInclude>
+    <ClInclude Include="PHDisabling.h">
+      <Filter>physics\Base\Objects\Disabling</Filter>
+    </ClInclude>
+    <ClInclude Include="PHActorCharacter.h">
+      <Filter>physics\Base\Objects\PhyMove\ActorCaracter</Filter>
+    </ClInclude>
+    <ClInclude Include="PHActorCharacterInline.h">
+      <Filter>physics\Base\Objects\PhyMove\ActorCaracter</Filter>
+    </ClInclude>
+    <ClInclude Include="PHAICharacter.h">
+      <Filter>physics\Base\Objects\PhyMove\AICharacter</Filter>
+    </ClInclude>
+    <ClInclude Include="IPHCapture.h">
+      <Filter>physics\Base\Objects\PhyMove\Capture</Filter>
+    </ClInclude>
+    <ClInclude Include="PHCapture.h">
+      <Filter>physics\Base\Objects\PhyMove\Capture</Filter>
+    </ClInclude>
+    <ClInclude Include="ElevatorState.h">
+      <Filter>physics\Base\Objects\PhyMove\SipmpleCharacter</Filter>
+    </ClInclude>
+    <ClInclude Include="iclimableobject.h">
+      <Filter>physics\Base\Objects\PhyMove\SipmpleCharacter</Filter>
+    </ClInclude>
+    <ClInclude Include="IElevatorState.h">
+      <Filter>physics\Base\Objects\PhyMove\SipmpleCharacter</Filter>
+    </ClInclude>
+    <ClInclude Include="PHSimpleCharacter.h">
+      <Filter>physics\Base\Objects\PhyMove\SipmpleCharacter</Filter>
+    </ClInclude>
+    <ClInclude Include="PHSimpleCharacterInline.h">
+      <Filter>physics\Base\Objects\PhyMove\SipmpleCharacter</Filter>
+    </ClInclude>
+    <ClInclude Include="IColisiondamageInfo.h">
+      <Filter>physics\Base\Objects\PhyMove\BaseCharacter</Filter>
+    </ClInclude>
+    <ClInclude Include="MovementBoxDynamicActivate.h">
+      <Filter>physics\Base\Objects\PhyMove\BaseCharacter</Filter>
+    </ClInclude>
+    <ClInclude Include="PHCharacter.h">
+      <Filter>physics\Base\Objects\PhyMove\BaseCharacter</Filter>
+    </ClInclude>
+    <ClInclude Include="IPhysicsShellHolder.h">
+      <Filter>physics\Base\Objects\BaseShell</Filter>
+    </ClInclude>
+    <ClInclude Include="PhysicsShell.h">
+      <Filter>physics\Base\Objects\BaseShell</Filter>
+    </ClInclude>
+    <ClInclude Include="PhysicsShellAnimator.h">
+      <Filter>physics\Base\Objects\BaseShell\PhysicsShellAnimator</Filter>
+    </ClInclude>
+    <ClInclude Include="PhysicsShellAnimatorBoneData.h">
+      <Filter>physics\Base\Objects\BaseShell\PhysicsShellAnimator</Filter>
+    </ClInclude>
+    <ClInclude Include="PHElement.h">
+      <Filter>physics\Base\Objects\Element</Filter>
+    </ClInclude>
+    <ClInclude Include="PHElementInline.h">
+      <Filter>physics\Base\Objects\Element</Filter>
+    </ClInclude>
+    <ClInclude Include="ExtendedGeom.h">
+      <Filter>physics\Base\Objects\Element\Geom</Filter>
+    </ClInclude>
+    <ClInclude Include="Geometry.h">
+      <Filter>physics\Base\Objects\Element\Geom</Filter>
+    </ClInclude>
+    <ClInclude Include="PHGeometryOwner.h">
+      <Filter>physics\Base\Objects\Element\Geom</Filter>
+    </ClInclude>
+    <ClInclude Include="PHJoint.h">
+      <Filter>physics\Base\Objects\Joint</Filter>
+    </ClInclude>
+    <ClInclude Include="PHShell.h">
+      <Filter>physics\Base\Objects\Shell</Filter>
+    </ClInclude>
+    <ClInclude Include="PHShellBuildJoint.h">
+      <Filter>physics\Base\Objects\Shell</Filter>
+    </ClInclude>
+    <ClInclude Include="PHFracture.h">
+      <Filter>physics\Base\Objects\Breakable</Filter>
+    </ClInclude>
+    <ClInclude Include="PHJointDestroyInfo.h">
+      <Filter>physics\Base\Objects\Breakable</Filter>
+    </ClInclude>
+    <ClInclude Include="PHShellSplitter.h">
+      <Filter>physics\Base\Objects\Breakable</Filter>
+    </ClInclude>
+    <ClInclude Include="PHSplitedShell.h">
+      <Filter>physics\Base\Objects\SplitedShell</Filter>
+    </ClInclude>
+    <ClInclude Include="PHObject.h">
+      <Filter>physics\Base\Objects\PHObject</Filter>
+    </ClInclude>
+    <ClInclude Include="PHUpdateObject.h">
+      <Filter>physics\Base\Objects\PHObject</Filter>
+    </ClInclude>
+    <ClInclude Include="PHIsland.h">
+      <Filter>physics\Base\Objects\PHIsland</Filter>
+    </ClInclude>
+    <ClInclude Include="GeometryBits.h">
+      <Filter>physics\Base\Objects\World</Filter>
+    </ClInclude>
+    <ClInclude Include="IPHWorld.h">
+      <Filter>physics\Base\Objects\World</Filter>
+    </ClInclude>
+    <ClInclude Include="params.h">
+      <Filter>physics\Base\Objects\World</Filter>
+    </ClInclude>
+    <ClInclude Include="PHItemList.h">
+      <Filter>physics\Base\Objects\World</Filter>
+    </ClInclude>
+    <ClInclude Include="PHWorld.h">
+      <Filter>physics\Base\Objects\World</Filter>
+    </ClInclude>
+    <ClInclude Include="Physics.h">
+      <Filter>physics\Base\Objects\World</Filter>
+    </ClInclude>
+    <ClInclude Include="ICollideValidator.h">
+      <Filter>physics\Base\Objects\CollideValidator</Filter>
+    </ClInclude>
+    <ClInclude Include="PHCollideValidator.h">
+      <Filter>physics\Base\Objects\CollideValidator</Filter>
+    </ClInclude>
+    <ClInclude Include="IPHStaticGeomShell.h">
+      <Filter>physics\Base\Objects\StaticShell</Filter>
+    </ClInclude>
+    <ClInclude Include="PHStaticGeomShell.h">
+      <Filter>physics\Base\Objects\StaticShell</Filter>
+    </ClInclude>
+    <ClInclude Include="iphysics_scripted.h">
+      <Filter>physics\Base\Objects\script</Filter>
+    </ClInclude>
+    <ClInclude Include="physics_scripted.h">
+      <Filter>physics\Base\Objects\script</Filter>
+    </ClInclude>
+    <ClInclude Include="PHImpact.h">
+      <Filter>physics\Base\Impact</Filter>
+    </ClInclude>
+    <ClInclude Include="debug_output.h">
+      <Filter>physics\Base\Debug</Filter>
+    </ClInclude>
+    <ClInclude Include="ActorCameraCollision.h">
+      <Filter>physics\camera_collision</Filter>
+    </ClInclude>
+    <ClInclude Include="icollisiondamagereceiver.h">
+      <Filter>physics\damage_receiver</Filter>
+    </ClInclude>
+    <ClInclude Include="SpaceUtils.h">
+      <Filter>physics\ActivationBox</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/xrServerEntities/script_engine.cpp b/src/xrServerEntities/script_engine.cpp
index 6d36d9e..3e17f3e 100644
--- a/src/xrServerEntities/script_engine.cpp
+++ b/src/xrServerEntities/script_engine.cpp
@@ -13,6 +13,8 @@
 #include "script_process.h"
 #include "../build_config_defines.h"
 #include "script_storage.h"
+#include <unordered_map>
+#include <set>
 
 #ifdef USE_DEBUGGER
 #	ifndef USE_LUA_STUDIO
@@ -282,6 +284,8 @@ void CScriptEngine::setup_auto_load()
 }
 
 extern void export_classes(lua_State* L);
+extern std::unordered_map<std::string, std::set<std::string>> unlocalizers;
+extern bool unlocalizerPassed;
 
 void CScriptEngine::init()
 {
@@ -328,6 +332,8 @@ void CScriptEngine::init()
 #endif // #ifndef USE_LUA_STUDIO
 	//	lua_sethook							(lua(), lua_hook_call,	LUA_MASKLINE|LUA_MASKCALL|LUA_MASKRET,	0);
 
+	unlocalizers.clear();
+	unlocalizerPassed = false;
 	bool save = m_reload_modules;
 	m_reload_modules = true;
 	process_file_if_exists("_G", false);
diff --git a/src/xrServerEntities/script_engine_script.cpp b/src/xrServerEntities/script_engine_script.cpp
index 7f1edef..2d23b21 100644
--- a/src/xrServerEntities/script_engine_script.cpp
+++ b/src/xrServerEntities/script_engine_script.cpp
@@ -10,9 +10,14 @@
 #include "script_engine.h"
 #include "ai_space.h"
 #include "script_debugger.h"
+#include "new_sds.h"
 
 using namespace luabind;
 
+void AddScope(LPCSTR key, float val) {
+    listScopeRadii[key] = val;
+}
+
 void LuaLog1(LPCSTR caMessage)
 {
 #ifndef MASTER_GOLD
@@ -240,6 +245,7 @@ void CScriptEngine::script_register(lua_State* L)
 		def("user_name", &user_name),
 		def("time_global", &script_time_global),
 		def("time_global_async", &script_time_global_async),
+        def("add_scope_radii", &AddScope),
 #ifdef XRGAME_EXPORTS
 		def("device", &get_device),
 		def("is_enough_address_space_available", &is_enough_address_space_available_impl),
diff --git a/src/xrServerEntities/script_fmatrix_script.cpp b/src/xrServerEntities/script_fmatrix_script.cpp
index 5450f6a..7d93156 100644
--- a/src/xrServerEntities/script_fmatrix_script.cpp
+++ b/src/xrServerEntities/script_fmatrix_script.cpp
@@ -11,9 +11,11 @@
 
 using namespace luabind;
 
-void get_matrix_hpb(Fmatrix* self, float* h, float* p, float* b)
+Fvector get_matrix_hpb(Fmatrix* self)
 {
-	self->getHPB(*h, *p, *b);
+	Fvector temp;
+	self->getHPB(temp);
+	return temp;
 }
 
 void matrix_transform(Fmatrix* self, Fvector* v)
@@ -25,86 +27,52 @@ void matrix_transform(Fmatrix* self, Fvector* v)
 void CScriptFmatrix::script_register(lua_State* L)
 {
 	module(L)
-	[
-		class_<Fmatrix>("matrix")
-		.def_readwrite("i", &Fmatrix::i)
-		.def_readwrite("_14_", &Fmatrix::_14_)
-		.def_readwrite("j", &Fmatrix::j)
-		.def_readwrite("_24_", &Fmatrix::_24_)
-		.def_readwrite("k", &Fmatrix::k)
-		.def_readwrite("_34_", &Fmatrix::_34_)
-		.def_readwrite("c", &Fmatrix::c)
-		.def_readwrite("_44_", &Fmatrix::_44_)
-		.def(constructor<>())
-		.def("set", (Fmatrix & (Fmatrix::*)(const Fmatrix&))(&Fmatrix::set), return_reference_to(_1))
-		.def("set",
-		     (Fmatrix & (Fmatrix::*)(const Fvector&, const Fvector&, const Fvector&, const Fvector&))(&Fmatrix::set),
-		     return_reference_to(_1))
-		.def("identity", &Fmatrix::identity, return_reference_to(_1))
-		.def("mk_xform", &Fmatrix::mk_xform, return_reference_to(_1))
-		.def("mul", (Fmatrix & (Fmatrix::*)(const Fmatrix&, const Fmatrix&))(&Fmatrix::mul), return_reference_to(_1))
-		.def("mul", (Fmatrix & (Fmatrix::*)(const Fmatrix&, float))(&Fmatrix::mul), return_reference_to(_1))
-		.def("mul", (Fmatrix & (Fmatrix::*)(float))(&Fmatrix::mul), return_reference_to(_1))
-		.def("div", (Fmatrix & (Fmatrix::*)(const Fmatrix&, float))(&Fmatrix::div), return_reference_to(_1))
-		.def("div", (Fmatrix & (Fmatrix::*)(float))(&Fmatrix::div), return_reference_to(_1))
-		//			.def("invert",						(Fmatrix & (Fmatrix::*)())(&Fmatrix::invert),																			return_reference_to(_1))
-		//			.def("invert",						(Fmatrix & (Fmatrix::*)(const Fmatrix &))(&Fmatrix::invert),																return_reference_to(_1))
-		//			.def("transpose",					(Fmatrix & (Fmatrix::*)())(&Fmatrix::transpose),																			return_reference_to(_1))
-		//			.def("transpose",					(Fmatrix & (Fmatrix::*)(const Fmatrix &))(&Fmatrix::transpose),															return_reference_to(_1))
-		//			.def("translate",					(Fmatrix & (Fmatrix::*)(const Fvector &))(&Fmatrix::translate),															return_reference_to(_1))
-		//			.def("translate",					(Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::translate),														return_reference_to(_1))
-		//			.def("translate_over",				(Fmatrix & (Fmatrix::*)(const Fvector &))(&Fmatrix::translate_over),														return_reference_to(_1))
-		//			.def("translate_over",				(Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::translate_over),													return_reference_to(_1))
-		//			.def("translate_add",				&Fmatrix::translate_add,																								return_reference_to(_1))
-		//			.def("scale",						(Fmatrix & (Fmatrix::*)(const Fvector &))(&Fmatrix::scale),																return_reference_to(_1))
-		//			.def("scale",						(Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::scale),															return_reference_to(_1))
-		//			.def("rotateX",						&Fmatrix::rotateX,																										return_reference_to(_1))
-		//			.def("rotateY",						&Fmatrix::rotateY,																										return_reference_to(_1))
-		//			.def("rotateZ",						&Fmatrix::rotateZ,																										return_reference_to(_1))
-		//			.def("rotation",					(Fmatrix & (Fmatrix::*)(const Fvector &, const Fvector &))(&Fmatrix::rotation),											return_reference_to(_1))
-		//			.def("rotation",					(Fmatrix & (Fmatrix::*)(const Fvector &, float))(&Fmatrix::rotation),													return_reference_to(_1))
-		//			.def("rotation",					&Fmatrix::rotation,																										return_reference_to(_1))
-		/*
-					.def("mapXYZ",						&Fmatrix::mapXYZ,																										return_reference_to(_1))
-					.def("mapXZY",						&Fmatrix::mapXZY,																										return_reference_to(_1))
-					.def("mapYXZ",						&Fmatrix::mapYXZ,																										return_reference_to(_1))
-					.def("mapYZX",						&Fmatrix::mapYZX,																										return_reference_to(_1))
-					.def("mapZXY",						&Fmatrix::mapZXY,																										return_reference_to(_1))
-					.def("mapZYX",						&Fmatrix::mapZYX,																										return_reference_to(_1))
-					.def("mirrorX",						&Fmatrix::mirrorX,																										return_reference_to(_1))
-					.def("mirrorX_over",				&Fmatrix::mirrorX_over,																									return_reference_to(_1))
-					.def("mirrorX_add ",				&Fmatrix::mirrorX_add,																									return_reference_to(_1))
-					.def("mirrorY",						&Fmatrix::mirrorY,																										return_reference_to(_1))
-					.def("mirrorY_over",				&Fmatrix::mirrorY_over,																									return_reference_to(_1))
-					.def("mirrorY_add ",				&Fmatrix::mirrorY_add,																									return_reference_to(_1))
-					.def("mirrorZ",						&Fmatrix::mirrorZ,																										return_reference_to(_1))
-					.def("mirrorZ_over",				&Fmatrix::mirrorZ_over,																									return_reference_to(_1))
-					.def("mirrorZ_add ",				&Fmatrix::mirrorZ_add,																									return_reference_to(_1))
-		*/
-		//			.def("build_projection",			&Fmatrix::build_projection,																								return_reference_to(_1))
-		//			.def("build_projection_HAT",		&Fmatrix::build_projection_HAT,																							return_reference_to(_1))
-		//			.def("build_projection_ortho",		&Fmatrix::build_projection_ortho,																						return_reference_to(_1))
-		//			.def("build_camera",				&Fmatrix::build_camera,																									return_reference_to(_1))
-		//			.def("build_camera_dir",			&Fmatrix::build_camera_dir,																								return_reference_to(_1))
-		//			.def("inertion",					&Fmatrix::inertion,																										return_reference_to(_1))
-		//			.def("transform_tiny32",			&Fmatrix::transform_tiny32)
-		//			.def("transform_tiny23",			&Fmatrix::transform_tiny23)
-		//			.def("transform_tiny",				(void	   (Fmatrix::*)(Fvector &) const)(&Fmatrix::transform_tiny),																					out_value(_2))
-		//			.def("transform_tiny",				(void	   (Fmatrix::*)(Fvector &, const Fvector &) const)(&Fmatrix::transform_tiny),																out_value(_2))
-		//			.def("transform_dir",				(void	   (Fmatrix::*)(Fvector &) const)(&Fmatrix::transform_dir),																					out_value(_2))
-		//			.def("transform_dir",				(void	   (Fmatrix::*)(Fvector &, const Fvector &) const)(&Fmatrix::transform_dir),																	out_value(_2))
-		//			.def("transform",					(void	   (Fmatrix::*)(Fvector &) const)(&Fmatrix::transform),																						out_value(_2))
-		//			.def("transform",					&matrix_transform)
-		.def("setHPB", &Fmatrix::setHPB, return_reference_to(_1))
-		//			.def("setXYZ",						(Fmatrix & (Fmatrix::*)(Fvector &))(&Fmatrix::setXYZ),																	return_reference_to(_1)	+	out_value(_2))
-		.def("setXYZ", (Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::setXYZ), return_reference_to(_1))
-		//			.def("setXYZi",						(Fmatrix & (Fmatrix::*)(Fvector &))(&Fmatrix::setXYZi),																	return_reference_to(_1) +	out_value(_2))
-		.def("setXYZi", (Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::setXYZi), return_reference_to(_1))
-		//			.def("getHPB",						(void	   (Fmatrix::*)(Fvector &) const)(&Fmatrix::getHPB),																							out_value(_2))
-		.def("getHPB", &get_matrix_hpb)
-		//			.def("getXYZ",						(void	   (Fmatrix::*)(Fvector &) const)(&Fmatrix::getXYZ),																							out_value(_2))
-		//			.def("getXYZ",						(void	   (Fmatrix::*)(float &, float &, float &) const)(&Fmatrix::getXYZ))
-		//			.def("getXYZi",						(void	   (Fmatrix::*)(Fvector &) const)(&Fmatrix::getXYZi),																						out_value(_2))
-		//			.def("getXYZi",						(void	   (Fmatrix::*)(float &, float &, float &) const)(&Fmatrix::getXYZi))
-	];
+		[
+			class_<Fmatrix>("matrix")
+			.def_readwrite("i", &Fmatrix::i)
+			.def_readwrite("_14_", &Fmatrix::_14_)
+			.def_readwrite("j", &Fmatrix::j)
+			.def_readwrite("_24_", &Fmatrix::_24_)
+			.def_readwrite("k", &Fmatrix::k)
+			.def_readwrite("_34_", &Fmatrix::_34_)
+			.def_readwrite("c", &Fmatrix::c)
+			.def_readwrite("_44_", &Fmatrix::_44_)
+			.def(constructor<>())
+			.def("set", (Fmatrix & (Fmatrix::*)(const Fmatrix&))(&Fmatrix::set), return_reference_to(_1))
+			.def("set",
+				(Fmatrix & (Fmatrix::*)(const Fvector&, const Fvector&, const Fvector&, const Fvector&))(&Fmatrix::set),
+				return_reference_to(_1))
+			.def("identity", &Fmatrix::identity, return_reference_to(_1))
+			.def("mk_xform", &Fmatrix::mk_xform, return_reference_to(_1))
+			.def("build_camera_dir", &Fmatrix::build_camera_dir, return_reference_to(_1))
+			.def("build_projection", &Fmatrix::build_projection, return_reference_to(_1))
+			.def("mulA_43", &Fmatrix::mulA_43, return_reference_to(_1))
+			.def("mulA_44", &Fmatrix::mulA_44, return_reference_to(_1))
+			.def("mulB_43", &Fmatrix::mulB_43, return_reference_to(_1))
+			.def("mulB_44", &Fmatrix::mulB_44, return_reference_to(_1))
+			.def("mul_43", &Fmatrix::mul_43, return_reference_to(_1))
+			.def("translate", (Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::translate), return_reference_to(_1))
+			.def("translate", (Fmatrix & (Fmatrix::*)(const Fvector&))(&Fmatrix::translate), return_reference_to(_1))
+			.def("translate_add", (Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::translate_add), return_reference_to(_1))
+			.def("translate_add", (Fmatrix & (Fmatrix::*)(const Fvector&))(&Fmatrix::translate_add), return_reference_to(_1))
+			.def("translate_over", (Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::translate_over), return_reference_to(_1))
+			.def("translate_over", (Fmatrix & (Fmatrix::*)(const Fvector&))(&Fmatrix::translate_over), return_reference_to(_1))
+			.def("mul", (Fmatrix & (Fmatrix::*)(const Fmatrix&, const Fmatrix&))(&Fmatrix::mul), return_reference_to(_1))
+			.def("mul", (Fmatrix & (Fmatrix::*)(const Fmatrix&, float))(&Fmatrix::mul), return_reference_to(_1))
+			.def("mul", (Fmatrix & (Fmatrix::*)(float))(&Fmatrix::mul), return_reference_to(_1))
+			.def("invert", (Fmatrix & (Fmatrix::*)())(&Fmatrix::invert), return_reference_to(_1))
+			.def("invert", (Fmatrix & (Fmatrix::*)(const Fmatrix&))(&Fmatrix::invert), return_reference_to(_1))
+			.def("invert_b", &Fmatrix::invert_b, return_reference_to(_1))
+			.def("div", (Fmatrix & (Fmatrix::*)(const Fmatrix&, float))(&Fmatrix::div), return_reference_to(_1))
+			.def("div", (Fmatrix & (Fmatrix::*)(float))(&Fmatrix::div), return_reference_to(_1))
+			.def("scale", (Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::scale), return_reference_to(_1))
+			.def("scale", (Fmatrix & (Fmatrix::*)(const Fvector&))(&Fmatrix::scale), return_reference_to(_1))
+			.def("setHPB", (Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::setHPB), return_reference_to(_1))
+			.def("setHPB", (Fmatrix & (Fmatrix::*)(const Fvector&))(&Fmatrix::setHPB), return_reference_to(_1))
+			.def("setXYZ", (Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::setXYZ), return_reference_to(_1))
+			.def("setXYZ", (Fmatrix & (Fmatrix::*)(const Fvector&))(&Fmatrix::setXYZ), return_reference_to(_1))
+			.def("setXYZi", (Fmatrix & (Fmatrix::*)(float, float, float))(&Fmatrix::setXYZi), return_reference_to(_1))
+			.def("setXYZi", (Fmatrix & (Fmatrix::*)(const Fvector&))(&Fmatrix::setXYZi), return_reference_to(_1))
+			.def("getHPB", &get_matrix_hpb)
+		];
 }
diff --git a/src/xrServerEntities/script_fvector_script.cpp b/src/xrServerEntities/script_fvector_script.cpp
index 06020de..e0e0e7c 100644
--- a/src/xrServerEntities/script_fvector_script.cpp
+++ b/src/xrServerEntities/script_fvector_script.cpp
@@ -24,18 +24,22 @@ void CScriptFvector::script_register(lua_State* L)
 		.def("set", (Fvector & (Fvector::*)(float, float, float))(&Fvector::set), return_reference_to(_1))
 		.def("set", (Fvector & (Fvector::*)(const Fvector&))(&Fvector::set), return_reference_to(_1))
 		.def("add", (Fvector & (Fvector::*)(float))(&Fvector::add), return_reference_to(_1))
+		.def("add", (Fvector & (Fvector::*)(float, float, float))(&Fvector::add), return_reference_to(_1))
 		.def("add", (Fvector & (Fvector::*)(const Fvector&))(&Fvector::add), return_reference_to(_1))
 		.def("add", (Fvector & (Fvector::*)(const Fvector&, const Fvector&))(&Fvector::add), return_reference_to(_1))
 		.def("add", (Fvector & (Fvector::*)(const Fvector&, float))(&Fvector::add), return_reference_to(_1))
 		.def("sub", (Fvector & (Fvector::*)(float))(&Fvector::sub), return_reference_to(_1))
+		.def("sub", (Fvector & (Fvector::*)(float, float, float))(&Fvector::sub), return_reference_to(_1))
 		.def("sub", (Fvector & (Fvector::*)(const Fvector&))(&Fvector::sub), return_reference_to(_1))
 		.def("sub", (Fvector & (Fvector::*)(const Fvector&, const Fvector&))(&Fvector::sub), return_reference_to(_1))
 		.def("sub", (Fvector & (Fvector::*)(const Fvector&, float))(&Fvector::sub), return_reference_to(_1))
 		.def("mul", (Fvector & (Fvector::*)(float))(&Fvector::mul), return_reference_to(_1))
+		.def("mul", (Fvector & (Fvector::*)(float, float, float))(&Fvector::mul), return_reference_to(_1))
 		.def("mul", (Fvector & (Fvector::*)(const Fvector&))(&Fvector::mul), return_reference_to(_1))
 		.def("mul", (Fvector & (Fvector::*)(const Fvector&, const Fvector&))(&Fvector::mul), return_reference_to(_1))
 		.def("mul", (Fvector & (Fvector::*)(const Fvector&, float))(&Fvector::mul), return_reference_to(_1))
 		.def("div", (Fvector & (Fvector::*)(float))(&Fvector::div), return_reference_to(_1))
+		.def("div", (Fvector & (Fvector::*)(float, float, float))(&Fvector::div), return_reference_to(_1))
 		.def("div", (Fvector & (Fvector::*)(const Fvector&))(&Fvector::div), return_reference_to(_1))
 		.def("div", (Fvector & (Fvector::*)(const Fvector&, const Fvector&))(&Fvector::div), return_reference_to(_1))
 		.def("div", (Fvector & (Fvector::*)(const Fvector&, float))(&Fvector::div), return_reference_to(_1))
@@ -79,6 +83,7 @@ void CScriptFvector::script_register(lua_State* L)
 		.def("dotproduct", &Fvector::dotproduct)
 		.def("crossproduct", &Fvector::crossproduct, return_reference_to(_1))
 		.def("distance_to_xz", &Fvector::distance_to_xz)
+		.def("distance_to_xz_sqr", &Fvector::distance_to_xz_sqr)
 		.def("distance_to_sqr", &Fvector::distance_to_sqr)
 		.def("distance_to", &Fvector::distance_to)
 		//			.def("from_bary",					(Fvector & (Fvector::*)(const Fvector &, const Fvector &, const Fvector &, float, float, float))(&Fvector::from_bary),	return_reference_to(_1))
diff --git a/src/xrServerEntities/script_storage.cpp b/src/xrServerEntities/script_storage.cpp
index 450b304..2d5616e 100644
--- a/src/xrServerEntities/script_storage.cpp
+++ b/src/xrServerEntities/script_storage.cpp
@@ -10,6 +10,10 @@
 #include "script_storage.h"
 #include "script_thread.h"
 #include <stdarg.h>
+#include <unordered_map>
+#include <set>
+#include <sstream>
+#include <regex>
 
 #if !defined(DEBUG) && defined(USE_LUAJIT_ONE)
 #	include "opt.lua.h"
@@ -556,18 +560,27 @@ int __cdecl CScriptStorage::script_log(ScriptStorage::ELuaMessageType tLuaMessag
 	int result = vscript_log(tLuaMessageType, caFormat, marker);
 	va_end(marker);
 
-#ifdef PRINT_CALL_STACK
-#	ifndef ENGINE_BUILD
-    static bool	reenterability = false;
-    if (!reenterability)
-    {
-        reenterability = true;
-        if (eLuaMessageTypeError == tLuaMessageType)
-            ai().script_engine().print_stack();
-        reenterability = false;
-    }
-#	endif //!ENGINE_BUILD
-#endif //-PRINT_CALL_STACK
+	static bool reenterability = false;
+	if (!reenterability)
+	{
+		reenterability = true;
+		if (tLuaMessageType == ScriptStorage::eLuaMessageTypeError)
+			ai().script_engine().print_stack();
+		reenterability = false;
+	}
+
+	// #ifdef PRINT_CALL_STACK
+	// #	ifndef ENGINE_BUILD
+	//     static bool	reenterability = false;
+	//     if (!reenterability)
+	//     {
+	//         reenterability = true;
+	//         if (eLuaMessageTypeError == tLuaMessageType)
+	//             ai().script_engine().print_stack();
+	//         reenterability = false;
+	//     }
+	// #	endif //!ENGINE_BUILD
+	// #endif //-PRINT_CALL_STACK
 
 	return (result);
 }
@@ -680,19 +693,266 @@ bool CScriptStorage::load_buffer(lua_State* L, LPCSTR caBuffer, size_t tSize, LP
 	return (true);
 }
 
+std::unordered_map<std::string, std::set<std::string>> unlocalizers;
+bool unlocalizerPassed = false;
+
+std::vector<std::string> splitStringMulti(std::string& inputString, std::string separator = " ", bool includeSeparators = false) {
+	std::stringstream stringStream(inputString);
+	std::string line;
+	std::vector<std::string> wordVector;
+	while (std::getline(stringStream, line))
+	{
+		std::size_t prev = 0, pos;
+		while ((pos = line.find_first_of(separator, prev)) != std::string::npos)
+		{
+			if (pos > prev)
+				wordVector.push_back(line.substr(prev, pos - prev));
+
+			if (includeSeparators)
+				wordVector.push_back(line.substr(pos, 1));
+
+			prev = pos + 1;
+		}
+		if (prev < line.length())
+			wordVector.push_back(line.substr(prev, std::string::npos));
+	}
+	return wordVector;
+}
+
+std::vector<std::string> splitStringLimit(std::string& inputString, std::string separator = " ", int limit = 0) {
+	std::stringstream stringStream(inputString);
+	std::string line;
+	std::vector<std::string> wordVector;
+	while (std::getline(stringStream, line))
+	{
+		std::size_t prev = 0, pos;
+		while ((pos = line.find_first_of(separator, prev)) != std::string::npos)
+		{
+			if (pos > prev)
+				wordVector.push_back(line.substr(prev, pos - prev));
+
+			prev = pos + 1;
+			if (limit > 0) {
+				if (wordVector.size() >= limit) {
+					wordVector.push_back(line.substr(prev, std::string::npos));
+					return wordVector;
+				}
+			}
+		}
+		if (prev < line.length())
+			wordVector.push_back(line.substr(prev, std::string::npos));
+	}
+	return wordVector;
+}
+
+static std::string join_list(const std::vector<std::string>& items_vec) {
+	std::string ret;
+	for (const auto& i : items_vec) {
+		ret += i;
+	}
+	return ret;
+};
+
+bool unlocalRegex(std::set<std::string>& unlocals, std::string& s, const std::regex pattern, const int group, const std::string replacement) {
+	if (std::regex_match(s, pattern)) {
+		//Msg("matching local function pattern");
+		std::smatch match;
+		std::regex_search(s, match, pattern);
+		std::string variable = match[group];
+		if (unlocals.find(variable) != unlocals.end()) {
+			Msg("found variable %s to unlocal", variable.c_str());
+			s = std::regex_replace(s, pattern, replacement);
+			return true;
+		}
+	} else {
+		return false;
+	}
+	return false;
+};
+
+static void trim(std::string& s, const char* t = " \t\n\r\f\v") {
+	s.erase(s.find_last_not_of(t) + 1);
+	s.erase(0, s.find_first_not_of(t));
+};
+
+
 bool CScriptStorage::do_file(LPCSTR caScriptName, LPCSTR caNameSpaceName)
 {
+	if (!unlocalizerPassed) {
+		auto file_list = FS.file_list_open("$game_config$", "unlocalizers\\", FS_RootOnly | FS_ListFiles);
+		if (!file_list) {
+			unlocalizerPassed = true;
+		} else {
+			xr_string id;
+			auto i = file_list->begin();
+			auto e = file_list->end();
+			for (; i != e; ++i)
+			{
+				u32 length = xr_strlen(*i);
+
+				if (!((length >= 4) &&
+					((*i)[length - 4] == '.') &&
+					((*i)[length - 3] == 'l') &&
+					((*i)[length - 2] == 't') &&
+					((*i)[length - 1] == 'x')))
+					continue;
+
+				id.assign(*i, length - 4);
+
+				string_path file_name;
+				FS.update_path(file_name, "$game_config$", (xr_string("unlocalizers\\") + id).c_str());
+				xr_strcat(file_name, ".ltx");
+
+				Msg("opening file %s", file_name);
+				CInifile* config = CInifile::Create(file_name);
+
+				typedef CInifile::Root sections_type;
+				sections_type& sections = config->sections();
+
+				sections_type::const_iterator i = sections.begin();
+				sections_type::const_iterator e = sections.end();
+				for (; i != e; ++i)
+				{
+					auto sectionName = std::string((*i)->Name.c_str());
+					if (unlocalizers.find(sectionName) == unlocalizers.end()) {
+
+						// construct set that contains top level variables to delocalize by section name
+						unlocalizers[sectionName].clear();
+						Msg("creating unlocalizer for script %s", sectionName.c_str());
+					}
+					auto& data = (*i)->Data;
+					for (auto& item : data) {
+						unlocalizers[sectionName].insert(std::string(item.first.c_str()));
+						Msg("adding variable %s for unlocalizer for script %s", item.first.c_str(), sectionName.c_str());
+					}
+				}
+				CInifile::Destroy(config);
+			}
+			FS.file_list_close(file_list);
+			unlocalizerPassed = true;
+		}
+	}
 	int start = lua_gettop(lua());
 	string_path l_caLuaFileName;
 	IReader* l_tpFileReader = FS.r_open(caScriptName);
+
 	if (!l_tpFileReader)
 	{
 		script_log(eLuaMessageTypeError, "Cannot open file \"%s\"", caScriptName);
 		return (false);
 	}
+
+	// Unlocalize variables in the script defined by unlocalizers map
+	auto scriptContents = static_cast<LPCSTR>(l_tpFileReader->pointer());
+	auto scriptLength = (size_t)l_tpFileReader->length();
+	if (unlocalizers.find(std::string(caNameSpaceName)) != unlocalizers.end()) {
+		Msg("found script %s in unlocalizers data", caNameSpaceName);
+
+		// Get contents of the script file and split by lines
+		std::vector<std::string> tokens;
+		std::string temp;
+		while (!l_tpFileReader->eof())
+		{
+			char c = l_tpFileReader->r_u8();
+			temp += c;
+		}
+
+		std::stringstream stringStream(temp);
+		std::string line;
+		tokens.clear();
+		while (std::getline(stringStream, line)) {
+			tokens.push_back(line);
+		}
+
+		// Iterate lines and unlocalize variables
+		auto& unlocals = unlocalizers[std::string(caNameSpaceName)];
+
+		/*for (auto& u : unlocals) {
+			Msg("%s", u);
+		}*/
+
+		for (auto& s : tokens) {
+
+			//Msg("%s", s.c_str());
+
+			trim(s, "\n\r");
+			if (s.empty()) {
+				continue;
+			}
+
+			std::regex pattern;
+
+			//local function x(a,b,c)
+			pattern = std::regex(R"((^local)([\t ]+)(function)([\t ]+)([_a-zA-Z].*)([\t ]*)(\(.*$))");
+			if (unlocalRegex(unlocals, s, pattern, 5, "$3$4$5$6$7")) {
+				continue;
+			}
+
+			//local a = ...
+			//local a
+			//local a,b,c = ... (if one of a,b,c is in unlocalizers list - all of them will be unlocalized)
+			//local x; local y; - unsupported yet
+			pattern = std::regex(R"((^local)([\t ]+)(.*))");
+			if (std::regex_match(s, pattern)) {
+				std::smatch match;
+				std::regex_search(s, match, pattern);
+				std::string m = match[3];
+
+				// strip comments
+				std::regex r = std::regex(R"((.*)--.*)");
+				if (std::regex_match(m, r)) {
+					//Msg("found comments\n");
+					std::smatch noncomments;
+					std::regex_search(m, noncomments, r);
+					m = noncomments[1];
+				}
+
+
+				auto variablesAndValues = splitStringLimit(m, "=", 1);
+				bool hasValue = variablesAndValues.size() > 1;
+				auto variables = splitStringMulti(variablesAndValues[0], ",");
+				for (auto v : variables) {
+					trim(v);
+					//Msg("%s\n", v.c_str());
+					if (unlocals.find(v) != unlocals.end()) {
+						Msg("found variable %s to unlocal", v.c_str());
+						s = std::regex_replace(s, pattern, "$3");
+						if (!hasValue) {
+
+							// strip comments
+							std::regex r = std::regex(R"((.*)(--.*))");
+							if (std::regex_match(s, r)) {
+								//Msg("found comments\n");
+								std::smatch noncomments;
+								std::regex_search(s, noncomments, r);
+								s = std::string(noncomments[1]) + "= nil " + std::string(noncomments[2]);
+							} else {
+								s += " = nil";
+							}
+						}
+						break;
+					}
+				}
+			}
+		}
+
+		// Store result back
+		for (auto& s : tokens) {
+			s += "\n";
+		}
+
+		/*for (auto& s : tokens) {
+			Msg("%s", s.c_str());
+		}*/
+
+		auto result = join_list(tokens);
+		scriptContents = result.c_str();
+		scriptLength = strlen(scriptContents);
+	}
+
 	strconcat(sizeof(l_caLuaFileName), l_caLuaFileName, "@", caScriptName);
 
-	if (!load_buffer(lua(), static_cast<LPCSTR>(l_tpFileReader->pointer()), (size_t)l_tpFileReader->length(),
+	if (!load_buffer(lua(), scriptContents, scriptLength,
 	                 l_caLuaFileName, caNameSpaceName))
 	{
 		//		VERIFY		(lua_gettop(lua()) >= 4);
diff --git a/src/xrServerEntities/specific_character.cpp b/src/xrServerEntities/specific_character.cpp
index 9029b27..02517bc 100644
--- a/src/xrServerEntities/specific_character.cpp
+++ b/src/xrServerEntities/specific_character.cpp
@@ -5,6 +5,8 @@
 #include "PhraseDialog.h"
 #include "string_table.h"
 
+#include "ai_space.h"
+#include "Script_Game_Object.h"
 
 SSpecificCharacterData::SSpecificCharacterData()
 {
@@ -125,6 +127,32 @@ void CSpecificCharacter::load_shared(LPCSTR)
 		data()->m_ActorDialogs.push_back(dialog_name);
 	}
 
+	luabind::functor<luabind::object> funct;
+	if (ai().script_engine().functor("_G.CSpecificCharacterDialogList", funct))
+	{
+		luabind::object table = luabind::newtable(ai().script_engine().lua());
+		int i = 1;
+		for (auto const &dialog : data()->m_ActorDialogs) {
+			table[i] = dialog.c_str();
+			i++;
+		}
+		auto character_name = item_data.id.c_str();
+		luabind::object output = funct(character_name, table);
+		if (output && output.type() == LUA_TTABLE) {
+			data()->m_ActorDialogs.clear();
+			luabind::object::iterator i = output.begin();
+			luabind::object::iterator e = output.end();
+			for (; i != e; ++i) {
+				luabind::object v = *i;
+				if (v.type() == LUA_TSTRING) {
+					shared_str dialog_name = luabind::object_cast<LPCSTR>(v);
+					//Msg("character_id %s, dialog_name %s", character_name, dialog_name.c_str());
+					data()->m_ActorDialogs.push_back(dialog_name);
+				}
+			}
+		}
+	}
+
 	data()->m_icon_name = pXML->Read("icon", 0, "ui_npc_u_barman");
 
 
@@ -240,6 +268,78 @@ void CSpecificCharacter::load_shared(LPCSTR)
 		MoneyDef().inf_money = false;
 	}
 
+	luabind::functor<luabind::object> init_funct;
+	if (ai().script_engine().functor("_G.CSpecificCharacterInit", init_funct))
+	{
+		luabind::object table = luabind::newtable(ai().script_engine().lua());
+		table["name"] = Name();
+		table["bio"] = Bio().c_str();
+		table["community"] = Community().id().c_str();
+		table["icon"] = data()->m_icon_name.c_str();
+		table["start_dialog"] = data()->m_StartDialog.c_str();
+		table["panic_threshold"] = panic_threshold();
+		table["hit_probability_factor"] = hit_probability_factor();
+		table["crouch_type"] = crouch_type();
+		table["mechanic_mode"] = upgrade_mechanic();
+		table["critical_wound_weights"] = critical_wound_weights();
+		table["supplies"] = SupplySpawn();
+		table["visual"] = Visual();
+		table["npc_config"] = NpcConfigSect();
+		table["snd_config"] = sound_voice_prefix();
+		table["terrain_sect"] = terrain_sect().c_str();
+		table["rank_min"] = RankDef().min;
+		table["rank_max"] = RankDef().max;
+		table["reputation_min"] = ReputationDef().min;
+		table["reputation_max"] = ReputationDef().max;
+		table["money_min"] = MoneyDef().min_money;
+		table["money_max"] = MoneyDef().max_money;
+		table["money_infinitive"] = MoneyDef().inf_money;
+		auto character_name = item_data.id.c_str();
+		luabind::object output = init_funct(character_name, table);
+		if (output && output.type() == LUA_TTABLE) {
+			data()->m_sGameName = luabind::object_cast<LPCSTR>(output["name"]);
+			data()->m_sBioText = CStringTable().translate(luabind::object_cast<LPCSTR>(output["bio"]));
+
+			data()->m_Community.set(luabind::object_cast<LPCSTR>(output["community"]));
+			if (data()->m_Community.index() == NO_COMMUNITY_INDEX)
+				Debug.fatal(DEBUG_INFO, "wrong 'community' '%s' in specific character %s ", luabind::object_cast<LPCSTR>(output["community"]), *m_OwnId);
+
+			data()->m_icon_name = luabind::object_cast<LPCSTR>(output["icon"]);
+			data()->m_StartDialog = output["start_dialog"].type() == LUA_TSTRING ? luabind::object_cast<LPCSTR>(output["start_dialog"]) : NULL;
+			data()->m_fPanic_threshold = luabind::object_cast<float>(output["panic_threshold"]);
+			data()->m_fHitProbabilityFactor = luabind::object_cast<float>(output["hit_probability_factor"]);
+			data()->m_crouch_type = luabind::object_cast<int>(output["crouch_type"]);
+			data()->m_upgrade_mechanic = luabind::object_cast<bool>(output["mechanic_mode"]);
+			data()->m_critical_wound_weights = luabind::object_cast<LPCSTR>(output["critical_wound_weights"]);
+			data()->m_sVisual = luabind::object_cast<LPCSTR>(output["visual"]);
+			data()->m_sNpcConfigSect = luabind::object_cast<LPCSTR>(output["npc_config"]);
+			data()->m_sound_voice_prefix = luabind::object_cast<LPCSTR>(output["snd_config"]);
+			data()->m_terrain_sect = luabind::object_cast<LPCSTR>(output["terrain_sect"]);
+
+			data()->m_sSupplySpawn = luabind::object_cast<LPCSTR>(output["supplies"]);
+			if (!data()->m_sSupplySpawn.empty())
+			{
+				xr_string& str = data()->m_sSupplySpawn;
+				xr_string::size_type pos = str.find("\\n");
+				while (xr_string::npos != pos)
+				{
+					str.replace(pos, 2, "\n");
+					pos = str.find("\\n", pos + 1);
+				}
+			}
+
+			RankDef().min = _min(luabind::object_cast<int>(output["rank_min"]), luabind::object_cast<int>(output["rank_max"]));
+			RankDef().max = _max(luabind::object_cast<int>(output["rank_min"]), luabind::object_cast<int>(output["rank_max"]));
+
+			ReputationDef().min = _min(luabind::object_cast<int>(output["reputation_min"]), luabind::object_cast<int>(output["reputation_max"]));
+			ReputationDef().max = _max(luabind::object_cast<int>(output["reputation_min"]), luabind::object_cast<int>(output["reputation_max"]));
+
+			MoneyDef().min_money = _min(luabind::object_cast<int>(output["money_min"]), luabind::object_cast<int>(output["money_max"]));
+			MoneyDef().max_money = _max(luabind::object_cast<int>(output["money_min"]), luabind::object_cast<int>(output["money_max"]));
+			MoneyDef().inf_money = luabind::object_cast<bool>(output["money_infinitive"]);
+		}
+	}
+
 #endif
 
 #if 0
diff --git a/src/xrServerEntities/xml_str_id_loader.h b/src/xrServerEntities/xml_str_id_loader.h
index 5362281..c4126ae 100644
--- a/src/xrServerEntities/xml_str_id_loader.h
+++ b/src/xrServerEntities/xml_str_id_loader.h
@@ -97,9 +97,9 @@ TEMPLATE_SPECIALIZATION
 const typename ITEM_DATA* CSXML_IdToIndex::GetById(const shared_str& str_id, bool no_assert)
 {
 	T_INIT::InitXmlIdToIndex();
+	T_VECTOR::iterator it = m_pItemDataVector->begin();
 
-	for (T_VECTOR::iterator it = m_pItemDataVector->begin();
-	     m_pItemDataVector->end() != it; ++it)
+	for (; m_pItemDataVector->end() != it; ++it)
 	{
 		if ((*it).id == str_id)
 			break;
diff --git a/src/xrServerEntities/xrServer_Factory.cpp b/src/xrServerEntities/xrServer_Factory.cpp
index 3bb139d..69795b8 100644
--- a/src/xrServerEntities/xrServer_Factory.cpp
+++ b/src/xrServerEntities/xrServer_Factory.cpp
@@ -11,5 +11,6 @@
 
 CSE_Abstract* F_entity_Create(LPCSTR section)
 {
+	if (!pSettings->section_exist(section)) return nullptr;
 	return (object_factory().server_object(pSettings->r_clsid(section, "class"), section));
 }
diff --git a/src/xrServerEntities/xrServer_Object_Base.cpp b/src/xrServerEntities/xrServer_Object_Base.cpp
index 0ea58f1..800e3f4 100644
--- a/src/xrServerEntities/xrServer_Object_Base.cpp
+++ b/src/xrServerEntities/xrServer_Object_Base.cpp
@@ -42,7 +42,7 @@ IPropHelper& PHelper()
 LPCSTR script_section = "script";
 LPCSTR current_version = "current_server_entity_version";
 
-IC u16 script_server_object_version()
+u16 script_server_object_version()
 {
 	static bool initialized = false;
 	static u16 script_version = 0;
diff --git a/src/xrSound/Sound.h b/src/xrSound/Sound.h
index eeb6d58..07237c7 100644
--- a/src/xrSound/Sound.h
+++ b/src/xrSound/Sound.h
@@ -36,6 +36,7 @@ XRSOUND_API extern u32 psSoundModel;
 XRSOUND_API extern float psSoundVEffects;
 XRSOUND_API extern float psSoundVFactor;
 XRSOUND_API extern float psSoundVMusic;
+XRSOUND_API extern float psSoundVMusicFactor;
 XRSOUND_API extern float psSoundRolloff;
 XRSOUND_API extern float psSoundOcclusionScale;
 XRSOUND_API extern Flags32 psSoundFlags;
@@ -212,17 +213,72 @@ class XRSOUND_API CSound_environment
 public:
 };
 
+namespace soundSmoothingParams {
+	extern float power;
+	extern int steps;
+	extern float alpha;
+	extern float getAlpha();
+	extern float getTimeDeltaSmoothing();
+	extern float getSmoothedValue(float, float, float);
+};
+
 /// definition (Sound Params)
 class XRSOUND_API CSound_params
 {
+public:
+	CSound_params() :
+		set(false)
+		{
+			position.set(0.0f, 0.0f, 0.0f);
+			velocity.set(0.0f, 0.0f, 0.0f);
+			accVelocity.set(0.f, 0.f, 0.f);
+		}
+
+private:
+	bool set;
+
 public:
 	Fvector position;
+	Fvector velocity;  // Cribbledirge.  Added for doppler effect.
+	Fvector curVelocity;  // Current velocity.
+	Fvector prevVelocity;  // Previous velocity.
+	Fvector accVelocity;  // Velocity accumulator (for moving average).
 	float base_volume;
 	float volume;
 	float freq;
 	float min_distance;
 	float max_distance;
 	float max_ai_distance;
+
+	// Functions added by Cribbledirge for doppler effect.
+	IC virtual void update_position(const Fvector& newPosition)
+	{
+		// If the position has been set already, start getting a moving average of the velocity.
+		if (set)
+		{
+			prevVelocity.set(accVelocity);
+			curVelocity.sub(newPosition, position);
+
+			//accVelocity.set(curVelocity.mul(alpha).add(prevVelocity.mul(1.f - alpha)));
+		}
+		else
+		{
+			set = true;
+		}
+		position.set(newPosition);
+	}
+
+	IC virtual void update_velocity(const float dt)
+	{
+		float a = soundSmoothingParams::getTimeDeltaSmoothing();
+		int p = soundSmoothingParams::power;
+		accVelocity.x = soundSmoothingParams::getSmoothedValue(curVelocity.x * p / dt, accVelocity.x, a);
+		accVelocity.y = soundSmoothingParams::getSmoothedValue(curVelocity.y * p / dt, accVelocity.y, a);
+		accVelocity.z = soundSmoothingParams::getSmoothedValue(curVelocity.z * p / dt, accVelocity.z, a);
+		velocity.set(accVelocity);
+
+		//Msg("VELOC: %f", velocity.magnitude());
+	}
 };
 
 /// definition (Sound Interface)
diff --git a/src/xrSound/SoundRender_Core.cpp b/src/xrSound/SoundRender_Core.cpp
index 203aeb3..3caa495 100644
--- a/src/xrSound/SoundRender_Core.cpp
+++ b/src/xrSound/SoundRender_Core.cpp
@@ -17,6 +17,7 @@ float psSoundVEffects = 1.0f;
 float psSoundVFactor = 1.0f;
 
 float psSoundVMusic = 1.f;
+float psSoundVMusicFactor = 1.f;
 int psSoundCacheSizeMB = 32;
 
 CSoundRender_Core* SoundRender = 0;
diff --git a/src/xrSound/SoundRender_CoreA.cpp b/src/xrSound/SoundRender_CoreA.cpp
index 4301be7..a90e63c 100644
--- a/src/xrSound/SoundRender_CoreA.cpp
+++ b/src/xrSound/SoundRender_CoreA.cpp
@@ -7,6 +7,22 @@
 #include "../xrEngine/pure.h"
 #include "../xrEngine/XR_IOConsole.h"
 
+namespace soundSmoothingParams {
+	float power = 1.8;
+	int steps = 15;
+	float alpha = getAlpha();
+	IC float getAlpha() {
+		return 2.0f / (steps + 1);
+	}
+	IC float getTimeDeltaSmoothing() {
+		return alpha;
+		//return min(1.0f, alpha * (Device.fTimeDelta / steps));
+	}
+	IC float getSmoothedValue(float target, float current, float smoothing = getTimeDeltaSmoothing()) {
+		return current + smoothing * (target - current);
+	}
+};
+
 extern CConsole* Console;
 
 CSoundRender_CoreA* SoundRenderA = 0;
@@ -148,6 +164,14 @@ void CSoundRender_CoreA::_initialize(int stage)
 		bEAX = EAXTestSupport(FALSE);
 	}
 
+	// Init listener struct
+	Listener.position.set(0.0f, 0.0f, 0.0f);
+	Listener.prevVelocity.set(0.0f, 0.0f, 0.0f);
+	Listener.curVelocity.set(0.0f, 0.0f, 0.0f);
+	Listener.accVelocity.set(0.0f, 0.0f, 0.0f);
+	Listener.orientation[0].set(0.0f, 0.0f, 0.0f);
+	Listener.orientation[1].set(0.0f, 0.0f, 0.0f);
+
 	inherited::_initialize(stage);
 
 	if (stage == 1) //first initialize
@@ -218,6 +242,18 @@ void CSoundRender_CoreA::update_listener(const Fvector& P, const Fvector& D, con
 {
 	inherited::update_listener(P, D, N, dt);
 
+	Listener.curVelocity.sub(P, Listener.position);
+
+	float a = soundSmoothingParams::getTimeDeltaSmoothing();
+	int p = soundSmoothingParams::power;
+	Listener.accVelocity.x = soundSmoothingParams::getSmoothedValue(Listener.curVelocity.x * p / dt, Listener.accVelocity.x, a);
+	Listener.accVelocity.y = soundSmoothingParams::getSmoothedValue(Listener.curVelocity.y * p / dt, Listener.accVelocity.y, a);
+	Listener.accVelocity.z = soundSmoothingParams::getSmoothedValue(Listener.curVelocity.z * p / dt, Listener.accVelocity.z, a);
+	
+	Listener.prevVelocity.set(Listener.accVelocity);
+
+	// Msg("listener sound update delta %.3f, velocity %.3f, %.3f, %.3f, power %.1f, alpha %.3f", dt, Listener.prevVelocity.x, Listener.prevVelocity.y, Listener.prevVelocity.z, soundSmoothingParams::power, soundSmoothingParams::alpha);
+
 	if (!Listener.position.similar(P))
 	{
 		Listener.position.set(P);
@@ -227,6 +263,6 @@ void CSoundRender_CoreA::update_listener(const Fvector& P, const Fvector& D, con
 	Listener.orientation[1].set(N.x, N.y, -N.z);
 
 	A_CHK(alListener3f (AL_POSITION,Listener.position.x,Listener.position.y,-Listener.position.z));
-	A_CHK(alListener3f (AL_VELOCITY,0.f,0.f,0.f));
+	A_CHK(alListener3f (AL_VELOCITY, Listener.prevVelocity.x, Listener.prevVelocity.y, -Listener.prevVelocity.z));
 	A_CHK(alListenerfv (AL_ORIENTATION,&Listener.orientation[0].x));
 }
diff --git a/src/xrSound/SoundRender_CoreA.h b/src/xrSound/SoundRender_CoreA.h
index e0eaabd..81d81c3 100644
--- a/src/xrSound/SoundRender_CoreA.h
+++ b/src/xrSound/SoundRender_CoreA.h
@@ -26,6 +26,9 @@ class CSoundRender_CoreA : public CSoundRender_Core
 	struct SListener
 	{
 		Fvector position;
+		Fvector prevVelocity;
+		Fvector curVelocity;
+		Fvector accVelocity;
 		Fvector orientation[2];
 	};
 
diff --git a/src/xrSound/SoundRender_Emitter.cpp b/src/xrSound/SoundRender_Emitter.cpp
index fa6be85..425130f 100644
--- a/src/xrSound/SoundRender_Emitter.cpp
+++ b/src/xrSound/SoundRender_Emitter.cpp
@@ -12,7 +12,7 @@ extern float psSoundVEffects;
 void CSoundRender_Emitter::set_position(const Fvector& pos)
 {
 	if (source()->channels_num() == 1)
-		p_source.position = pos;
+		p_source.update_position(pos);
 	else
 		p_source.position.set(0, 0, 0);
 
diff --git a/src/xrSound/SoundRender_Emitter_FSM.cpp b/src/xrSound/SoundRender_Emitter_FSM.cpp
index 87a6824..23141fe 100644
--- a/src/xrSound/SoundRender_Emitter_FSM.cpp
+++ b/src/xrSound/SoundRender_Emitter_FSM.cpp
@@ -68,7 +68,7 @@ void CSoundRender_Emitter::update(float dt)
 		occluder_volume = SoundRender->get_occlusion(p_source.position, .2f, occluder);
 		smooth_volume = p_source.base_volume * p_source.volume * (owner_data->s_type == st_Effect
 			                                                          ? psSoundVEffects * psSoundVFactor
-			                                                          : psSoundVMusic) * (b2D ? 1.f : occluder_volume);
+			                                                          : psSoundVMusic * psSoundVMusicFactor) * (b2D ? 1.f : occluder_volume);
 		e_current = e_target = *SoundRender->get_environment(p_source.position);
 		if (update_culling(dt))
 		{
@@ -94,7 +94,7 @@ void CSoundRender_Emitter::update(float dt)
 		occluder_volume = SoundRender->get_occlusion(p_source.position, .2f, occluder);
 		smooth_volume = p_source.base_volume * p_source.volume * (owner_data->s_type == st_Effect
 			                                                          ? psSoundVEffects * psSoundVFactor
-			                                                          : psSoundVMusic) * (b2D ? 1.f : occluder_volume);
+			                                                          : psSoundVMusic * psSoundVMusicFactor) * (b2D ? 1.f : occluder_volume);
 		e_current = e_target = *SoundRender->get_environment(p_source.position);
 		if (update_culling(dt))
 		{
@@ -297,7 +297,7 @@ BOOL CSoundRender_Emitter::update_culling(float dt)
 		float fade_scale = bStopping || (att * p_source.base_volume * p_source.volume * (owner_data->s_type == st_Effect
 			                                                                                 ? psSoundVEffects *
 			                                                                                 psSoundVFactor
-			                                                                                 : psSoundVMusic) <
+			                                                                                 : psSoundVMusic * psSoundVMusicFactor) <
 			                   psSoundCull)
 			                   ? -1.f
 			                   : 1.f;
@@ -313,7 +313,7 @@ BOOL CSoundRender_Emitter::update_culling(float dt)
 	clamp(fade_volume, 0.f, 1.f);
 	// Update smoothing
 	smooth_volume = .9f * smooth_volume + .1f * (p_source.base_volume * p_source.volume * (
-			owner_data->s_type == st_Effect ? psSoundVEffects * psSoundVFactor : psSoundVMusic) * occluder_volume *
+			owner_data->s_type == st_Effect ? psSoundVEffects * psSoundVFactor : psSoundVMusic * psSoundVMusicFactor) * occluder_volume *
 		fade_volume);
 	if (smooth_volume < psSoundCull) return FALSE; // allow volume to go up
 	// Here we has enought "PRIORITY" to be soundable
@@ -333,6 +333,9 @@ float CSoundRender_Emitter::priority()
 
 void CSoundRender_Emitter::update_environment(float dt)
 {
-	if (bMoved) e_target = *SoundRender->get_environment(p_source.position);
+	if (bMoved) {
+		e_target = *SoundRender->get_environment(p_source.position);
+		p_source.update_velocity(dt);
+	}
 	e_current.lerp(e_current, e_target, dt);
 }
diff --git a/src/xrSound/SoundRender_TargetA.cpp b/src/xrSound/SoundRender_TargetA.cpp
index ef418a7..f3bcdab 100644
--- a/src/xrSound/SoundRender_TargetA.cpp
+++ b/src/xrSound/SoundRender_TargetA.cpp
@@ -154,6 +154,9 @@ void CSoundRender_TargetA::fill_parameters()
 	A_CHK(alSource3f(pSource, AL_POSITION, m_pEmitter->p_source.position.x,m_pEmitter->p_source.position.y,-m_pEmitter->
 		p_source.position.z));
 
+	VERIFY2(m_pEmitter, SE->source()->file_name());
+	A_CHK(alSource3f(pSource, AL_VELOCITY, m_pEmitter->p_source.velocity.x, m_pEmitter->p_source.velocity.y, -m_pEmitter->p_source.velocity.z));
+
 	VERIFY2(m_pEmitter, SE->source()->file_name());
 	A_CHK(alSourcei (pSource, AL_SOURCE_RELATIVE, m_pEmitter->b2D));
 
diff --git a/src/xrSound/vs2022/xrSound.vcxproj b/src/xrSound/vs2022/xrSound.vcxproj
new file mode 100644
index 0000000..1e2972c
--- /dev/null
+++ b/src/xrSound/vs2022/xrSound.vcxproj
@@ -0,0 +1,235 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{CCCA7859-EB86-493E-9B53-C4235F45B3C5}</ProjectGuid>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;$(XRAY_16X_LIBS)libvorbis-1.2.3\include;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(SolutionDir)3rd party\OpenAL\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRSOUND_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>libogg_static.lib;libvorbis_static.lib;libvorbisfile_static.lib;OpenAL32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);$(xrSdkDir)..\lib\$(Platform)\Release;$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;$(XRAY_16X_LIBS)libvorbis-1.2.3\include;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(SolutionDir)3rd party\OpenAL\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;WIN32;NDEBUG;_WINDOWS;_USRDLL;XRSOUND_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>libogg_static.lib;libvorbis_static.lib;libvorbisfile_static.lib;OpenAL32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);$(xrSdkDir)..\lib\$(Platform)\Release;$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;$(XRAY_16X_LIBS)libvorbis-1.2.3\include;$(XRAY_16X_LIBS)libogg-1.1.4\include;$(SolutionDir)3rd party\OpenAL\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;XRSOUND_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <BrowseInformation>
+      </BrowseInformation>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <AdditionalDependencies>libogg_static.lib;libvorbis_static.lib;libvorbisfile_static.lib;OpenAL32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);$(xrSdkDir)..\lib\$(Platform)\Release;$(xrGameDir)bin_dbg;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <AdditionalOptions>/ignore:4099</AdditionalOptions>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClInclude Include="..\cl_intersect.h" />
+    <ClInclude Include="..\OpenALDeviceList.h" />
+    <ClInclude Include="..\Sound.h" />
+    <ClInclude Include="..\SoundRender.h" />
+    <ClInclude Include="..\SoundRender_Cache.h" />
+    <ClInclude Include="..\SoundRender_Core.h" />
+    <ClInclude Include="..\SoundRender_CoreA.h" />
+    <ClInclude Include="..\SoundRender_Emitter.h" />
+    <ClInclude Include="..\SoundRender_Environment.h" />
+    <ClInclude Include="..\SoundRender_Source.h" />
+    <ClInclude Include="..\SoundRender_Target.h" />
+    <ClInclude Include="..\SoundRender_TargetA.h" />
+    <ClInclude Include="..\stdafx.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\guids.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+      </PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+      </PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\OpenALDeviceList.cpp" />
+    <ClCompile Include="..\sound.cpp" />
+    <ClCompile Include="..\SoundRender_Cache.cpp" />
+    <ClCompile Include="..\SoundRender_Core.cpp" />
+    <ClCompile Include="..\SoundRender_CoreA.cpp" />
+    <ClCompile Include="..\SoundRender_Core_Processor.cpp" />
+    <ClCompile Include="..\SoundRender_Core_SourceManager.cpp" />
+    <ClCompile Include="..\SoundRender_Core_StartStop.cpp" />
+    <ClCompile Include="..\SoundRender_Emitter.cpp" />
+    <ClCompile Include="..\SoundRender_Emitter_FSM.cpp" />
+    <ClCompile Include="..\SoundRender_Emitter_StartStop.cpp" />
+    <ClCompile Include="..\SoundRender_Emitter_streamer.cpp" />
+    <ClCompile Include="..\SoundRender_Environment.cpp" />
+    <ClCompile Include="..\SoundRender_Source.cpp" />
+    <ClCompile Include="..\SoundRender_Source_loader.cpp" />
+    <ClCompile Include="..\SoundRender_Target.cpp" />
+    <ClCompile Include="..\SoundRender_TargetA.cpp" />
+    <ClCompile Include="..\stdafx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)Layers\xrAPI\vs2022\xrAPI.vcxproj">
+      <Project>{1daec516-e52c-4a3c-a4da-ae3553e6e0f8}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCDB\vs2022\xrCDB.vcxproj">
+      <Project>{a19b1df2-82ec-4364-8bdf-85d13a1c89b5}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCore\vs2022\xrCore.vcxproj">
+      <Project>{a0f7d1fb-59a7-4717-a7e4-96f37e91998e}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="1" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/xrSound/vs2022/xrSound.vcxproj.filters b/src/xrSound/vs2022/xrSound.vcxproj.filters
new file mode 100644
index 0000000..fdf38b5
--- /dev/null
+++ b/src/xrSound/vs2022/xrSound.vcxproj.filters
@@ -0,0 +1,132 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Kernel">
+      <UniqueIdentifier>{71080056-c117-42e6-89f2-e97ae0912ff7}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core">
+      <UniqueIdentifier>{1bd9edde-2f68-48c5-b6fc-9653cc535512}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Core\OpenAL">
+      <UniqueIdentifier>{678eb1bd-1fee-4d93-a5f5-48beedc1048e}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Emitter">
+      <UniqueIdentifier>{0c156140-abd6-404c-93a3-adbe3a88025a}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Source">
+      <UniqueIdentifier>{1a016e10-ae18-4f0d-9ed2-40fcf254da83}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Target">
+      <UniqueIdentifier>{704dd21d-adae-4120-a40d-52b6f989eeac}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Target\OpenAL">
+      <UniqueIdentifier>{78af2929-abf7-471a-ad73-84c55ce54450}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Environment">
+      <UniqueIdentifier>{ea9d1124-af1e-471f-a0a0-d2d77275a8ec}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Cache">
+      <UniqueIdentifier>{9143e5b9-296c-4d3e-8424-83f75457dfa9}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="cl_intersect.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="Sound.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="SoundRender.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="stdafx.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="SoundRender_Core.h">
+      <Filter>Core</Filter>
+    </ClInclude>
+    <ClInclude Include="OpenALDeviceList.h">
+      <Filter>Core\OpenAL</Filter>
+    </ClInclude>
+    <ClInclude Include="SoundRender_CoreA.h">
+      <Filter>Core\OpenAL</Filter>
+    </ClInclude>
+    <ClInclude Include="SoundRender_Emitter.h">
+      <Filter>Emitter</Filter>
+    </ClInclude>
+    <ClInclude Include="SoundRender_Source.h">
+      <Filter>Source</Filter>
+    </ClInclude>
+    <ClInclude Include="SoundRender_Target.h">
+      <Filter>Target</Filter>
+    </ClInclude>
+    <ClInclude Include="SoundRender_TargetA.h">
+      <Filter>Target\OpenAL</Filter>
+    </ClInclude>
+    <ClInclude Include="SoundRender_Environment.h">
+      <Filter>Environment</Filter>
+    </ClInclude>
+    <ClInclude Include="SoundRender_Cache.h">
+      <Filter>Cache</Filter>
+    </ClInclude>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="guids.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="sound.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="stdafx.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Core.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Core_Processor.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Core_SourceManager.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Core_StartStop.cpp">
+      <Filter>Core</Filter>
+    </ClCompile>
+    <ClCompile Include="OpenALDeviceList.cpp">
+      <Filter>Core\OpenAL</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_CoreA.cpp">
+      <Filter>Core\OpenAL</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Emitter.cpp">
+      <Filter>Emitter</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Emitter_FSM.cpp">
+      <Filter>Emitter</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Emitter_StartStop.cpp">
+      <Filter>Emitter</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Emitter_streamer.cpp">
+      <Filter>Emitter</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Source.cpp">
+      <Filter>Source</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Source_loader.cpp">
+      <Filter>Source</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Target.cpp">
+      <Filter>Target</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_TargetA.cpp">
+      <Filter>Target\OpenAL</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Environment.cpp">
+      <Filter>Environment</Filter>
+    </ClCompile>
+    <ClCompile Include="SoundRender_Cache.cpp">
+      <Filter>Cache</Filter>
+    </ClCompile>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/xrXMLParser/vs2022/xrXMLParser.vcxproj b/src/xrXMLParser/vs2022/xrXMLParser.vcxproj
new file mode 100644
index 0000000..1a01646
--- /dev/null
+++ b/src/xrXMLParser/vs2022/xrXMLParser.vcxproj
@@ -0,0 +1,228 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Release-AVX|x64">
+      <Configuration>Release-AVX</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="VerifiedDX11|x64">
+      <Configuration>VerifiedDX11</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{94A1C366-3D19-48E6-8170-4ADC2E70DF98}</ProjectGuid>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+    <UseOfMfc>false</UseOfMfc>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="Configuration">
+    <ConfigurationType>StaticLibrary</ConfigurationType>
+    <PlatformToolset>v143</PlatformToolset>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="$(VCTargetsPath)Microsoft.CPP.UpgradeFromVC71.props" />
+    <Import Project="$(SolutionDir)Common.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <LinkIncremental>false</LinkIncremental>
+    <OutDir>$(xrGameDir)bin_dbg\$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(xrIntDir)$(ProjectName)\</IntDir>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>NDEBUG;WIN32;_WINDOWS;XRXMLPARSER_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
+      <IntrinsicFunctions>false</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
+      <OmitFramePointers>false</OmitFramePointers>
+      <EnableFiberSafeOptimizations>false</EnableFiberSafeOptimizations>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>USE_VERIFY_IN_RELEASE;NDEBUG;WIN32;_WINDOWS;XRXMLPARSER_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <EnableEnhancedInstructionSet>NotSet</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">
+    <Midl>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MkTypLibCompatible>true</MkTypLibCompatible>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <TypeLibraryName>$(OutDir)$(TargetName).tlb</TypeLibraryName>
+    </Midl>
+    <ClCompile>
+      <AdditionalIncludeDirectories>$(xrSdkDir)include;$(xrSdkDir)include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>NDEBUG;WIN32;_WINDOWS;XRXMLPARSER_EXPORTS;_SECURE_SCL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
+      <PrecompiledHeader>Use</PrecompiledHeader>
+      <UndefinePreprocessorDefinitions>USE_LUAJIT_ONE</UndefinePreprocessorDefinitions>
+      <ExceptionHandling>false</ExceptionHandling>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <OmitFramePointers>true</OmitFramePointers>
+      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <ResourceCompile>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <Culture>0x0409</Culture>
+    </ResourceCompile>
+    <Link>
+      <AdditionalOptions>/MACHINE:X64 %(AdditionalOptions)</AdditionalOptions>
+      <SuppressStartupBanner>true</SuppressStartupBanner>
+      <AdditionalLibraryDirectories>$(xrSdkDir)libraries;$(xrLibDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+      <SubSystem>NotSet</SubSystem>
+      <LargeAddressAware>true</LargeAddressAware>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+      <RandomizedBaseAddress>false</RandomizedBaseAddress>
+      <ImportLibrary>$(xrLibDir)$(TargetName).lib</ImportLibrary>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\StdAfx.cpp">
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='VerifiedDX11|x64'">Create</PrecompiledHeader>
+      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release-AVX|x64'">Create</PrecompiledHeader>
+    </ClCompile>
+    <ClCompile Include="..\tinyxml.cpp" />
+    <ClCompile Include="..\tinyxmlerror.cpp" />
+    <ClCompile Include="..\tinyxmlparser.cpp" />
+    <ClCompile Include="..\xrXMLParser.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\stdafx.h" />
+    <ClInclude Include="..\tinyxml.h" />
+    <ClInclude Include="..\xrXMLParser.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="$(SolutionDir)3rd party\openal\OpenAL-Windows\Router\vs2022\Router.vcxproj">
+      <Project>{566551f4-4ef1-4cb4-a131-f982e7606907}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCDB\vs2022\xrCDB.vcxproj">
+      <Project>{a19b1df2-82ec-4364-8bdf-85d13a1c89b5}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+    <ProjectReference Include="$(SolutionDir)xrCore\vs2022\xrCore.vcxproj">
+      <Project>{a0f7d1fb-59a7-4717-a7e4-96f37e91998e}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties DevPartner_IsInstrumented="1" />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/src/xrXMLParser/vs2022/xrXMLParser.vcxproj.filters b/src/xrXMLParser/vs2022/xrXMLParser.vcxproj.filters
new file mode 100644
index 0000000..ab3658f
--- /dev/null
+++ b/src/xrXMLParser/vs2022/xrXMLParser.vcxproj.filters
@@ -0,0 +1,42 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Kernel">
+      <UniqueIdentifier>{0c1d390b-cf34-4ab4-925b-040737a141ee}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Parser">
+      <UniqueIdentifier>{53611e44-ae6b-4f4f-a7dc-8dd1b2450c42}</UniqueIdentifier>
+    </Filter>
+    <Filter Include="Parser\TinyXML">
+      <UniqueIdentifier>{561c85e6-e4fe-4d9a-a6b2-7b2864690e80}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="StdAfx.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="xrXMLParser.cpp">
+      <Filter>Kernel</Filter>
+    </ClCompile>
+    <ClCompile Include="tinyxml.cpp">
+      <Filter>Parser\TinyXML</Filter>
+    </ClCompile>
+    <ClCompile Include="tinyxmlerror.cpp">
+      <Filter>Parser\TinyXML</Filter>
+    </ClCompile>
+    <ClCompile Include="tinyxmlparser.cpp">
+      <Filter>Parser\TinyXML</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="stdafx.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="xrXMLParser.h">
+      <Filter>Kernel</Filter>
+    </ClInclude>
+    <ClInclude Include="tinyxml.h">
+      <Filter>Parser\TinyXML</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/src/xrXMLParser/xrXMLParser.cpp b/src/xrXMLParser/xrXMLParser.cpp
index 1d69c77..1cde914 100644
--- a/src/xrXMLParser/xrXMLParser.cpp
+++ b/src/xrXMLParser/xrXMLParser.cpp
@@ -3,6 +3,7 @@
 
 #include "xrXMLParser.h"
 
+extern void XMLLuaCallback(CXml &m_xml, LPCSTR xml_string);
 
 XRXMLPARSER_API CXml::CXml()
 	: m_root(NULL),
@@ -138,6 +139,21 @@ void CXml::Load(LPCSTR path, LPCSTR xml_filename)
 		R_ASSERT2(false, str);
 	}
 
+	m_root = m_Doc.FirstChildElement();
+	XMLLuaCallback(*this, (LPCSTR)W.pointer());
+}
+
+void CXml::LoadFromString(LPCSTR xml_string)
+{
+	ClearInternal();
+	m_Doc.Parse(&m_Doc, xml_string);
+	if (m_Doc.Error())
+	{
+		string1024 str;
+		xr_sprintf(str, "XML file:%s value:%s errDescr:%s", m_xml_file_name, m_Doc.Value(), m_Doc.ErrorDesc());
+		R_ASSERT2(false, str);
+	}
+
 	m_root = m_Doc.FirstChildElement();
 }
 
diff --git a/src/xrXMLParser/xrXMLParser.h b/src/xrXMLParser/xrXMLParser.h
index 3a13303..fcdc789 100644
--- a/src/xrXMLParser/xrXMLParser.h
+++ b/src/xrXMLParser/xrXMLParser.h
@@ -31,7 +31,7 @@ public:
 	void ClearInternal();
 
 	void Load(LPCSTR path_alias, LPCSTR path, LPCSTR xml_filename);
-
+	void LoadFromString(LPCSTR xml_string);
 
 	//÷òåíèå ýëåìåíòîâ
 	LPCSTR Read(LPCSTR path, int index, LPCSTR default_str_val);
